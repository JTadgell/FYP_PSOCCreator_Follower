ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	pxCurrentTCB
  19              		.bss
  20              		.align	2
  21              		.type	pxCurrentTCB, %object
  22              		.size	pxCurrentTCB, 4
  23              	pxCurrentTCB:
  24 0000 00000000 		.space	4
  25              		.align	2
  26              	pxReadyTasksLists:
  27 0004 00000000 		.space	100
  27      00000000 
  27      00000000 
  27      00000000 
  27      00000000 
  28              		.align	2
  29              	pxDelayedTaskList:
  30 0068 00000000 		.space	4
  31              		.align	2
  32              	pxOverflowDelayedTaskList:
  33 006c 00000000 		.space	4
  34              		.align	2
  35              	xPendingReadyList:
  36 0070 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.align	2
  38              	xTasksWaitingTermination:
  39 0084 00000000 		.space	20
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.align	2
  41              	uxDeletedTasksWaitingCleanUp:
  42 0098 00000000 		.space	4
  43              		.align	2
  44              	xSuspendedTaskList:
  45 009c 00000000 		.space	20
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 2


  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.align	2
  47              	uxCurrentNumberOfTasks:
  48 00b0 00000000 		.space	4
  49              		.align	2
  50              	xTickCount:
  51 00b4 00000000 		.space	4
  52              		.align	2
  53              	uxTopReadyPriority:
  54 00b8 00000000 		.space	4
  55              		.align	2
  56              	xSchedulerRunning:
  57 00bc 00000000 		.space	4
  58              		.align	2
  59              	uxPendedTicks:
  60 00c0 00000000 		.space	4
  61              		.align	2
  62              	xYieldPending:
  63 00c4 00000000 		.space	4
  64              		.align	2
  65              	xNumOfOverflows:
  66 00c8 00000000 		.space	4
  67              		.align	2
  68              	uxTaskNumber:
  69 00cc 00000000 		.space	4
  70              		.align	2
  71              	xNextTaskUnblockTime:
  72 00d0 00000000 		.space	4
  73              		.align	2
  74              	xIdleTaskHandle:
  75 00d4 00000000 		.space	4
  76              		.align	2
  77              	uxSchedulerSuspended:
  78 00d8 00000000 		.space	4
  79              		.section	.text.xTaskCreate,"ax",%progbits
  80              		.align	2
  81              		.global	xTaskCreate
  82              		.thumb
  83              		.thumb_func
  84              		.type	xTaskCreate, %function
  85              	xTaskCreate:
  86              	.LFB68:
  87              		.file 1 "..\\..\\FreeRTOS_Source\\tasks.c"
   1:..\..\FreeRTOS_Source/tasks.c **** /*
   2:..\..\FreeRTOS_Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source/tasks.c ****  *
   5:..\..\FreeRTOS_Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source/tasks.c ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source/tasks.c ****  *
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 3


  12:..\..\FreeRTOS_Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source/tasks.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source/tasks.c ****  *
  15:..\..\FreeRTOS_Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source/tasks.c ****  *
  22:..\..\FreeRTOS_Source/tasks.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source/tasks.c ****  *
  25:..\..\FreeRTOS_Source/tasks.c ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source/tasks.c ****  */
  27:..\..\FreeRTOS_Source/tasks.c **** 
  28:..\..\FreeRTOS_Source/tasks.c **** /* Standard includes. */
  29:..\..\FreeRTOS_Source/tasks.c **** #include <stdlib.h>
  30:..\..\FreeRTOS_Source/tasks.c **** #include <string.h>
  31:..\..\FreeRTOS_Source/tasks.c **** 
  32:..\..\FreeRTOS_Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:..\..\FreeRTOS_Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:..\..\FreeRTOS_Source/tasks.c **** task.h is included from an application file. */
  35:..\..\FreeRTOS_Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:..\..\FreeRTOS_Source/tasks.c **** 
  37:..\..\FreeRTOS_Source/tasks.c **** /* FreeRTOS includes. */
  38:..\..\FreeRTOS_Source/tasks.c **** #include "FreeRTOS.h"
  39:..\..\FreeRTOS_Source/tasks.c **** #include "task.h"
  40:..\..\FreeRTOS_Source/tasks.c **** #include "timers.h"
  41:..\..\FreeRTOS_Source/tasks.c **** #include "stack_macros.h"
  42:..\..\FreeRTOS_Source/tasks.c **** 
  43:..\..\FreeRTOS_Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:..\..\FreeRTOS_Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:..\..\FreeRTOS_Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:..\..\FreeRTOS_Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:..\..\FreeRTOS_Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:..\..\FreeRTOS_Source/tasks.c **** 
  49:..\..\FreeRTOS_Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:..\..\FreeRTOS_Source/tasks.c **** functions but without including stdio.h here. */
  51:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:..\..\FreeRTOS_Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:..\..\FreeRTOS_Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:..\..\FreeRTOS_Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:..\..\FreeRTOS_Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:..\..\FreeRTOS_Source/tasks.c **** 	#include <stdio.h>
  57:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:..\..\FreeRTOS_Source/tasks.c **** 
  59:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:..\..\FreeRTOS_Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:..\..\FreeRTOS_Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:..\..\FreeRTOS_Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:..\..\FreeRTOS_Source/tasks.c **** #else
  64:..\..\FreeRTOS_Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:..\..\FreeRTOS_Source/tasks.c **** #endif
  66:..\..\FreeRTOS_Source/tasks.c **** 
  67:..\..\FreeRTOS_Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:..\..\FreeRTOS_Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 4


  69:..\..\FreeRTOS_Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:..\..\FreeRTOS_Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:..\..\FreeRTOS_Source/tasks.c **** 
  72:..\..\FreeRTOS_Source/tasks.c **** /*
  73:..\..\FreeRTOS_Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:..\..\FreeRTOS_Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:..\..\FreeRTOS_Source/tasks.c ****  */
  76:..\..\FreeRTOS_Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:..\..\FreeRTOS_Source/tasks.c **** 
  78:..\..\FreeRTOS_Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:..\..\FreeRTOS_Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:..\..\FreeRTOS_Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:..\..\FreeRTOS_Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:..\..\FreeRTOS_Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:..\..\FreeRTOS_Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:..\..\FreeRTOS_Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:..\..\FreeRTOS_Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:..\..\FreeRTOS_Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:..\..\FreeRTOS_Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:..\..\FreeRTOS_Source/tasks.c **** made to free the RAM that was allocated statically.
  89:..\..\FreeRTOS_Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:..\..\FreeRTOS_Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:..\..\FreeRTOS_Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:..\..\FreeRTOS_Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:..\..\FreeRTOS_Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:..\..\FreeRTOS_Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:..\..\FreeRTOS_Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:..\..\FreeRTOS_Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:..\..\FreeRTOS_Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:..\..\FreeRTOS_Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:..\..\FreeRTOS_Source/tasks.c **** 
 100:..\..\FreeRTOS_Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:..\..\FreeRTOS_Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:..\..\FreeRTOS_Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:..\..\FreeRTOS_Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:..\..\FreeRTOS_Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:..\..\FreeRTOS_Source/tasks.c **** #else
 106:..\..\FreeRTOS_Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:..\..\FreeRTOS_Source/tasks.c **** #endif
 108:..\..\FreeRTOS_Source/tasks.c **** 
 109:..\..\FreeRTOS_Source/tasks.c **** /*
 110:..\..\FreeRTOS_Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:..\..\FreeRTOS_Source/tasks.c ****  */
 112:..\..\FreeRTOS_Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:..\..\FreeRTOS_Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:..\..\FreeRTOS_Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:..\..\FreeRTOS_Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:..\..\FreeRTOS_Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:..\..\FreeRTOS_Source/tasks.c **** 
 118:..\..\FreeRTOS_Source/tasks.c **** /*
 119:..\..\FreeRTOS_Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:..\..\FreeRTOS_Source/tasks.c ****  * global, rather than file scope.
 121:..\..\FreeRTOS_Source/tasks.c ****  */
 122:..\..\FreeRTOS_Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:..\..\FreeRTOS_Source/tasks.c **** 	#define static
 124:..\..\FreeRTOS_Source/tasks.c **** #endif
 125:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 5


 126:..\..\FreeRTOS_Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:..\..\FreeRTOS_Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:..\..\FreeRTOS_Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:..\..\FreeRTOS_Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:..\..\FreeRTOS_Source/tasks.c **** #endif
 131:..\..\FreeRTOS_Source/tasks.c **** 
 132:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:..\..\FreeRTOS_Source/tasks.c **** 
 134:..\..\FreeRTOS_Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:..\..\FreeRTOS_Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:..\..\FreeRTOS_Source/tasks.c **** 	microcontroller architecture. */
 137:..\..\FreeRTOS_Source/tasks.c **** 
 138:..\..\FreeRTOS_Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:..\..\FreeRTOS_Source/tasks.c **** 	state task. */
 140:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:..\..\FreeRTOS_Source/tasks.c **** 	{																									\
 142:..\..\FreeRTOS_Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:..\..\FreeRTOS_Source/tasks.c **** 		{																								\
 144:..\..\FreeRTOS_Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:..\..\FreeRTOS_Source/tasks.c **** 		}																								\
 146:..\..\FreeRTOS_Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:..\..\FreeRTOS_Source/tasks.c **** 
 148:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:..\..\FreeRTOS_Source/tasks.c **** 
 150:..\..\FreeRTOS_Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:..\..\FreeRTOS_Source/tasks.c **** 	{																									\
 152:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:..\..\FreeRTOS_Source/tasks.c **** 																										\
 154:..\..\FreeRTOS_Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:..\..\FreeRTOS_Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:..\..\FreeRTOS_Source/tasks.c **** 		{																								\
 157:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:..\..\FreeRTOS_Source/tasks.c **** 			--uxTopPriority;																			\
 159:..\..\FreeRTOS_Source/tasks.c **** 		}																								\
 160:..\..\FreeRTOS_Source/tasks.c **** 																										\
 161:..\..\FreeRTOS_Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:..\..\FreeRTOS_Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:..\..\FreeRTOS_Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:..\..\FreeRTOS_Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:..\..\FreeRTOS_Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:..\..\FreeRTOS_Source/tasks.c **** 
 167:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\..\FreeRTOS_Source/tasks.c **** 
 169:..\..\FreeRTOS_Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:..\..\FreeRTOS_Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:..\..\FreeRTOS_Source/tasks.c **** 	being used. */
 172:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:..\..\FreeRTOS_Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:..\..\FreeRTOS_Source/tasks.c **** 
 175:..\..\FreeRTOS_Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:..\..\FreeRTOS_Source/tasks.c **** 
 177:..\..\FreeRTOS_Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:..\..\FreeRTOS_Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:..\..\FreeRTOS_Source/tasks.c **** 	architecture being used. */
 180:..\..\FreeRTOS_Source/tasks.c **** 
 181:..\..\FreeRTOS_Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 6


 183:..\..\FreeRTOS_Source/tasks.c **** 
 184:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:..\..\FreeRTOS_Source/tasks.c **** 
 186:..\..\FreeRTOS_Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:..\..\FreeRTOS_Source/tasks.c **** 	{																								\
 188:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:..\..\FreeRTOS_Source/tasks.c **** 																									\
 190:..\..\FreeRTOS_Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:..\..\FreeRTOS_Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:..\..\FreeRTOS_Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:..\..\FreeRTOS_Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:..\..\FreeRTOS_Source/tasks.c **** 
 196:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:..\..\FreeRTOS_Source/tasks.c **** 
 198:..\..\FreeRTOS_Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:..\..\FreeRTOS_Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:..\..\FreeRTOS_Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:..\..\FreeRTOS_Source/tasks.c **** 	{																									\
 203:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:..\..\FreeRTOS_Source/tasks.c **** 		{																								\
 205:..\..\FreeRTOS_Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:..\..\FreeRTOS_Source/tasks.c **** 		}																								\
 207:..\..\FreeRTOS_Source/tasks.c **** 	}
 208:..\..\FreeRTOS_Source/tasks.c **** 
 209:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:..\..\FreeRTOS_Source/tasks.c **** 
 211:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 212:..\..\FreeRTOS_Source/tasks.c **** 
 213:..\..\FreeRTOS_Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:..\..\FreeRTOS_Source/tasks.c **** count overflows. */
 215:..\..\FreeRTOS_Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:..\..\FreeRTOS_Source/tasks.c **** {																									\
 217:..\..\FreeRTOS_Source/tasks.c **** 	List_t *pxTemp;																					\
 218:..\..\FreeRTOS_Source/tasks.c **** 																									\
 219:..\..\FreeRTOS_Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:..\..\FreeRTOS_Source/tasks.c **** 																									\
 222:..\..\FreeRTOS_Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:..\..\FreeRTOS_Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:..\..\FreeRTOS_Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:..\..\FreeRTOS_Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:..\..\FreeRTOS_Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:..\..\FreeRTOS_Source/tasks.c **** }
 228:..\..\FreeRTOS_Source/tasks.c **** 
 229:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 230:..\..\FreeRTOS_Source/tasks.c **** 
 231:..\..\FreeRTOS_Source/tasks.c **** /*
 232:..\..\FreeRTOS_Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:..\..\FreeRTOS_Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:..\..\FreeRTOS_Source/tasks.c ****  */
 235:..\..\FreeRTOS_Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:..\..\FreeRTOS_Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:..\..\FreeRTOS_Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:..\..\FreeRTOS_Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:..\..\FreeRTOS_Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 7


 240:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 241:..\..\FreeRTOS_Source/tasks.c **** 
 242:..\..\FreeRTOS_Source/tasks.c **** /*
 243:..\..\FreeRTOS_Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:..\..\FreeRTOS_Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:..\..\FreeRTOS_Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:..\..\FreeRTOS_Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:..\..\FreeRTOS_Source/tasks.c ****  */
 248:..\..\FreeRTOS_Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 249:..\..\FreeRTOS_Source/tasks.c **** 
 250:..\..\FreeRTOS_Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:..\..\FreeRTOS_Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:..\..\FreeRTOS_Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:..\..\FreeRTOS_Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:..\..\FreeRTOS_Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:..\..\FreeRTOS_Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:..\..\FreeRTOS_Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:..\..\FreeRTOS_Source/tasks.c **** to its original value when it is released. */
 258:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:..\..\FreeRTOS_Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:..\..\FreeRTOS_Source/tasks.c **** #else
 261:..\..\FreeRTOS_Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:..\..\FreeRTOS_Source/tasks.c **** #endif
 263:..\..\FreeRTOS_Source/tasks.c **** 
 264:..\..\FreeRTOS_Source/tasks.c **** /*
 265:..\..\FreeRTOS_Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:..\..\FreeRTOS_Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:..\..\FreeRTOS_Source/tasks.c ****  * (the task's run time environment, including register values)
 268:..\..\FreeRTOS_Source/tasks.c ****  */
 269:..\..\FreeRTOS_Source/tasks.c **** typedef struct TaskControlBlock_t
 270:..\..\FreeRTOS_Source/tasks.c **** {
 271:..\..\FreeRTOS_Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:..\..\FreeRTOS_Source/tasks.c **** 
 273:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:..\..\FreeRTOS_Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 276:..\..\FreeRTOS_Source/tasks.c **** 
 277:..\..\FreeRTOS_Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:..\..\FreeRTOS_Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:..\..\FreeRTOS_Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:..\..\FreeRTOS_Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:..\..\FreeRTOS_Source/tasks.c **** 
 283:..\..\FreeRTOS_Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:..\..\FreeRTOS_Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 286:..\..\FreeRTOS_Source/tasks.c **** 
 287:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 290:..\..\FreeRTOS_Source/tasks.c **** 
 291:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 295:..\..\FreeRTOS_Source/tasks.c **** 
 296:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 8


 297:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 300:..\..\FreeRTOS_Source/tasks.c **** 
 301:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:..\..\FreeRTOS_Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 304:..\..\FreeRTOS_Source/tasks.c **** 
 305:..\..\FreeRTOS_Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:..\..\FreeRTOS_Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 308:..\..\FreeRTOS_Source/tasks.c **** 
 309:..\..\FreeRTOS_Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:..\..\FreeRTOS_Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 312:..\..\FreeRTOS_Source/tasks.c **** 
 313:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:..\..\FreeRTOS_Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:..\..\FreeRTOS_Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:..\..\FreeRTOS_Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:..\..\FreeRTOS_Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:..\..\FreeRTOS_Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:..\..\FreeRTOS_Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:..\..\FreeRTOS_Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:..\..\FreeRTOS_Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 323:..\..\FreeRTOS_Source/tasks.c **** 
 324:..\..\FreeRTOS_Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:..\..\FreeRTOS_Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:..\..\FreeRTOS_Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 328:..\..\FreeRTOS_Source/tasks.c **** 
 329:..\..\FreeRTOS_Source/tasks.c **** 	/* See the comments above the definition of
 330:..\..\FreeRTOS_Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:..\..\FreeRTOS_Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 332:..\..\FreeRTOS_Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 334:..\..\FreeRTOS_Source/tasks.c **** 
 335:..\..\FreeRTOS_Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:..\..\FreeRTOS_Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 338:..\..\FreeRTOS_Source/tasks.c **** 
 339:..\..\FreeRTOS_Source/tasks.c **** } tskTCB;
 340:..\..\FreeRTOS_Source/tasks.c **** 
 341:..\..\FreeRTOS_Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:..\..\FreeRTOS_Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:..\..\FreeRTOS_Source/tasks.c **** typedef tskTCB TCB_t;
 344:..\..\FreeRTOS_Source/tasks.c **** 
 345:..\..\FreeRTOS_Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:..\..\FreeRTOS_Source/tasks.c **** which static variables must be declared volatile. */
 347:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 348:..\..\FreeRTOS_Source/tasks.c **** 
 349:..\..\FreeRTOS_Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 350:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 351:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 352:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 353:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 9


 354:..\..\FreeRTOS_Source/tasks.c **** 
 355:..\..\FreeRTOS_Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 356:..\..\FreeRTOS_Source/tasks.c **** 
 357:..\..\FreeRTOS_Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 358:..\..\FreeRTOS_Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 359:..\..\FreeRTOS_Source/tasks.c **** 
 360:..\..\FreeRTOS_Source/tasks.c **** #endif
 361:..\..\FreeRTOS_Source/tasks.c **** 
 362:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 363:..\..\FreeRTOS_Source/tasks.c **** 
 364:..\..\FreeRTOS_Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 365:..\..\FreeRTOS_Source/tasks.c **** 
 366:..\..\FreeRTOS_Source/tasks.c **** #endif
 367:..\..\FreeRTOS_Source/tasks.c **** 
 368:..\..\FreeRTOS_Source/tasks.c **** /* Other file private variables. --------------------------------*/
 369:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 370:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 371:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 372:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 373:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 374:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 375:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 376:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 377:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 378:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 379:..\..\FreeRTOS_Source/tasks.c **** 
 380:..\..\FreeRTOS_Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 381:..\..\FreeRTOS_Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 382:..\..\FreeRTOS_Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 383:..\..\FreeRTOS_Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 384:..\..\FreeRTOS_Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 385:..\..\FreeRTOS_Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 386:..\..\FreeRTOS_Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 387:..\..\FreeRTOS_Source/tasks.c **** accessed from a critical section. */
 388:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 389:..\..\FreeRTOS_Source/tasks.c **** 
 390:..\..\FreeRTOS_Source/tasks.c **** /*lint -restore */
 391:..\..\FreeRTOS_Source/tasks.c **** 
 392:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 393:..\..\FreeRTOS_Source/tasks.c **** 
 394:..\..\FreeRTOS_Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 395:..\..\FreeRTOS_Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 396:..\..\FreeRTOS_Source/tasks.c **** 
 397:..\..\FreeRTOS_Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 398:..\..\FreeRTOS_Source/tasks.c **** 
 399:..\..\FreeRTOS_Source/tasks.c **** #endif
 400:..\..\FreeRTOS_Source/tasks.c **** 
 401:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 402:..\..\FreeRTOS_Source/tasks.c **** 
 403:..\..\FreeRTOS_Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 404:..\..\FreeRTOS_Source/tasks.c **** 
 405:..\..\FreeRTOS_Source/tasks.c **** #endif
 406:..\..\FreeRTOS_Source/tasks.c **** 
 407:..\..\FreeRTOS_Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 408:..\..\FreeRTOS_Source/tasks.c **** 
 409:..\..\FreeRTOS_Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 410:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 10


 411:..\..\FreeRTOS_Source/tasks.c **** #endif
 412:..\..\FreeRTOS_Source/tasks.c **** 
 413:..\..\FreeRTOS_Source/tasks.c **** /* File private functions. --------------------------------*/
 414:..\..\FreeRTOS_Source/tasks.c **** 
 415:..\..\FreeRTOS_Source/tasks.c **** /**
 416:..\..\FreeRTOS_Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 417:..\..\FreeRTOS_Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 418:..\..\FreeRTOS_Source/tasks.c ****  * is in any other state.
 419:..\..\FreeRTOS_Source/tasks.c ****  */
 420:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 421:..\..\FreeRTOS_Source/tasks.c **** 
 422:..\..\FreeRTOS_Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 423:..\..\FreeRTOS_Source/tasks.c **** 
 424:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 425:..\..\FreeRTOS_Source/tasks.c **** 
 426:..\..\FreeRTOS_Source/tasks.c **** /*
 427:..\..\FreeRTOS_Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 428:..\..\FreeRTOS_Source/tasks.c ****  * automatically upon the creation of the first task.
 429:..\..\FreeRTOS_Source/tasks.c ****  */
 430:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 431:..\..\FreeRTOS_Source/tasks.c **** 
 432:..\..\FreeRTOS_Source/tasks.c **** /*
 433:..\..\FreeRTOS_Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 434:..\..\FreeRTOS_Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 435:..\..\FreeRTOS_Source/tasks.c ****  * creation of the first user task.
 436:..\..\FreeRTOS_Source/tasks.c ****  *
 437:..\..\FreeRTOS_Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 438:..\..\FreeRTOS_Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 439:..\..\FreeRTOS_Source/tasks.c ****  *
 440:..\..\FreeRTOS_Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 441:..\..\FreeRTOS_Source/tasks.c ****  *
 442:..\..\FreeRTOS_Source/tasks.c ****  */
 443:..\..\FreeRTOS_Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 444:..\..\FreeRTOS_Source/tasks.c **** 
 445:..\..\FreeRTOS_Source/tasks.c **** /*
 446:..\..\FreeRTOS_Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 447:..\..\FreeRTOS_Source/tasks.c ****  * including the stack pointed to by the TCB.
 448:..\..\FreeRTOS_Source/tasks.c ****  *
 449:..\..\FreeRTOS_Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 450:..\..\FreeRTOS_Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 451:..\..\FreeRTOS_Source/tasks.c ****  */
 452:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 453:..\..\FreeRTOS_Source/tasks.c **** 
 454:..\..\FreeRTOS_Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 455:..\..\FreeRTOS_Source/tasks.c **** 
 456:..\..\FreeRTOS_Source/tasks.c **** #endif
 457:..\..\FreeRTOS_Source/tasks.c **** 
 458:..\..\FreeRTOS_Source/tasks.c **** /*
 459:..\..\FreeRTOS_Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 460:..\..\FreeRTOS_Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 461:..\..\FreeRTOS_Source/tasks.c ****  * and its TCB deleted.
 462:..\..\FreeRTOS_Source/tasks.c ****  */
 463:..\..\FreeRTOS_Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 464:..\..\FreeRTOS_Source/tasks.c **** 
 465:..\..\FreeRTOS_Source/tasks.c **** /*
 466:..\..\FreeRTOS_Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 467:..\..\FreeRTOS_Source/tasks.c ****  * either the current or the overflow delayed task list.
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 11


 468:..\..\FreeRTOS_Source/tasks.c ****  */
 469:..\..\FreeRTOS_Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 470:..\..\FreeRTOS_Source/tasks.c **** 
 471:..\..\FreeRTOS_Source/tasks.c **** /*
 472:..\..\FreeRTOS_Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 473:..\..\FreeRTOS_Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 474:..\..\FreeRTOS_Source/tasks.c ****  * a suspended list, etc.).
 475:..\..\FreeRTOS_Source/tasks.c ****  *
 476:..\..\FreeRTOS_Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 477:..\..\FreeRTOS_Source/tasks.c ****  * NORMAL APPLICATION CODE.
 478:..\..\FreeRTOS_Source/tasks.c ****  */
 479:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 480:..\..\FreeRTOS_Source/tasks.c **** 
 481:..\..\FreeRTOS_Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 482:..\..\FreeRTOS_Source/tasks.c **** 
 483:..\..\FreeRTOS_Source/tasks.c **** #endif
 484:..\..\FreeRTOS_Source/tasks.c **** 
 485:..\..\FreeRTOS_Source/tasks.c **** /*
 486:..\..\FreeRTOS_Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:..\..\FreeRTOS_Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:..\..\FreeRTOS_Source/tasks.c ****  */
 489:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:..\..\FreeRTOS_Source/tasks.c **** 
 491:..\..\FreeRTOS_Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 492:..\..\FreeRTOS_Source/tasks.c **** 
 493:..\..\FreeRTOS_Source/tasks.c **** #endif
 494:..\..\FreeRTOS_Source/tasks.c **** 
 495:..\..\FreeRTOS_Source/tasks.c **** /*
 496:..\..\FreeRTOS_Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 497:..\..\FreeRTOS_Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 498:..\..\FreeRTOS_Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 499:..\..\FreeRTOS_Source/tasks.c ****  */
 500:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 501:..\..\FreeRTOS_Source/tasks.c **** 
 502:..\..\FreeRTOS_Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 503:..\..\FreeRTOS_Source/tasks.c **** 
 504:..\..\FreeRTOS_Source/tasks.c **** #endif
 505:..\..\FreeRTOS_Source/tasks.c **** 
 506:..\..\FreeRTOS_Source/tasks.c **** /*
 507:..\..\FreeRTOS_Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 508:..\..\FreeRTOS_Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 509:..\..\FreeRTOS_Source/tasks.c ****  *
 510:..\..\FreeRTOS_Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 511:..\..\FreeRTOS_Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 512:..\..\FreeRTOS_Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 513:..\..\FreeRTOS_Source/tasks.c ****  * set to a value other than 1.
 514:..\..\FreeRTOS_Source/tasks.c ****  */
 515:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 516:..\..\FreeRTOS_Source/tasks.c **** 
 517:..\..\FreeRTOS_Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 518:..\..\FreeRTOS_Source/tasks.c **** 
 519:..\..\FreeRTOS_Source/tasks.c **** #endif
 520:..\..\FreeRTOS_Source/tasks.c **** 
 521:..\..\FreeRTOS_Source/tasks.c **** /*
 522:..\..\FreeRTOS_Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 523:..\..\FreeRTOS_Source/tasks.c ****  * will exit the Blocked state.
 524:..\..\FreeRTOS_Source/tasks.c ****  */
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 12


 525:..\..\FreeRTOS_Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 526:..\..\FreeRTOS_Source/tasks.c **** 
 527:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 528:..\..\FreeRTOS_Source/tasks.c **** 
 529:..\..\FreeRTOS_Source/tasks.c **** 	/*
 530:..\..\FreeRTOS_Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 531:..\..\FreeRTOS_Source/tasks.c **** 	 * human readable tables of task information.
 532:..\..\FreeRTOS_Source/tasks.c **** 	 */
 533:..\..\FreeRTOS_Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 534:..\..\FreeRTOS_Source/tasks.c **** 
 535:..\..\FreeRTOS_Source/tasks.c **** #endif
 536:..\..\FreeRTOS_Source/tasks.c **** 
 537:..\..\FreeRTOS_Source/tasks.c **** /*
 538:..\..\FreeRTOS_Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 539:..\..\FreeRTOS_Source/tasks.c ****  * dynamically to fill in the structure's members.
 540:..\..\FreeRTOS_Source/tasks.c ****  */
 541:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 542:..\..\FreeRTOS_Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 543:..\..\FreeRTOS_Source/tasks.c **** 									const uint32_t ulStackDepth,
 544:..\..\FreeRTOS_Source/tasks.c **** 									void * const pvParameters,
 545:..\..\FreeRTOS_Source/tasks.c **** 									UBaseType_t uxPriority,
 546:..\..\FreeRTOS_Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 547:..\..\FreeRTOS_Source/tasks.c **** 									TCB_t *pxNewTCB,
 548:..\..\FreeRTOS_Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 549:..\..\FreeRTOS_Source/tasks.c **** 
 550:..\..\FreeRTOS_Source/tasks.c **** /*
 551:..\..\FreeRTOS_Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 552:..\..\FreeRTOS_Source/tasks.c ****  * under the control of the scheduler.
 553:..\..\FreeRTOS_Source/tasks.c ****  */
 554:..\..\FreeRTOS_Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 555:..\..\FreeRTOS_Source/tasks.c **** 
 556:..\..\FreeRTOS_Source/tasks.c **** /*
 557:..\..\FreeRTOS_Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 558:..\..\FreeRTOS_Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 559:..\..\FreeRTOS_Source/tasks.c ****  * called by the function.
 560:..\..\FreeRTOS_Source/tasks.c ****  */
 561:..\..\FreeRTOS_Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 562:..\..\FreeRTOS_Source/tasks.c **** 
 563:..\..\FreeRTOS_Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 564:..\..\FreeRTOS_Source/tasks.c **** 
 565:..\..\FreeRTOS_Source/tasks.c **** #endif
 566:..\..\FreeRTOS_Source/tasks.c **** 
 567:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 568:..\..\FreeRTOS_Source/tasks.c **** 
 569:..\..\FreeRTOS_Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 570:..\..\FreeRTOS_Source/tasks.c **** 
 571:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 572:..\..\FreeRTOS_Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 573:..\..\FreeRTOS_Source/tasks.c **** 									const uint32_t ulStackDepth,
 574:..\..\FreeRTOS_Source/tasks.c **** 									void * const pvParameters,
 575:..\..\FreeRTOS_Source/tasks.c **** 									UBaseType_t uxPriority,
 576:..\..\FreeRTOS_Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 577:..\..\FreeRTOS_Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 578:..\..\FreeRTOS_Source/tasks.c **** 	{
 579:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 580:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xReturn;
 581:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 13


 582:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 583:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 584:..\..\FreeRTOS_Source/tasks.c **** 
 585:..\..\FreeRTOS_Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 586:..\..\FreeRTOS_Source/tasks.c **** 		{
 587:..\..\FreeRTOS_Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 588:..\..\FreeRTOS_Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 589:..\..\FreeRTOS_Source/tasks.c **** 			structure. */
 590:..\..\FreeRTOS_Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 591:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 592:..\..\FreeRTOS_Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 593:..\..\FreeRTOS_Source/tasks.c **** 		}
 594:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 595:..\..\FreeRTOS_Source/tasks.c **** 
 596:..\..\FreeRTOS_Source/tasks.c **** 
 597:..\..\FreeRTOS_Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 598:..\..\FreeRTOS_Source/tasks.c **** 		{
 599:..\..\FreeRTOS_Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 600:..\..\FreeRTOS_Source/tasks.c **** 			function - use them. */
 601:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 602:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 603:..\..\FreeRTOS_Source/tasks.c **** 
 604:..\..\FreeRTOS_Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 605:..\..\FreeRTOS_Source/tasks.c **** 			{
 606:..\..\FreeRTOS_Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 607:..\..\FreeRTOS_Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 608:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 609:..\..\FreeRTOS_Source/tasks.c **** 			}
 610:..\..\FreeRTOS_Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 611:..\..\FreeRTOS_Source/tasks.c **** 
 612:..\..\FreeRTOS_Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 613:..\..\FreeRTOS_Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 614:..\..\FreeRTOS_Source/tasks.c **** 		}
 615:..\..\FreeRTOS_Source/tasks.c **** 		else
 616:..\..\FreeRTOS_Source/tasks.c **** 		{
 617:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = NULL;
 618:..\..\FreeRTOS_Source/tasks.c **** 		}
 619:..\..\FreeRTOS_Source/tasks.c **** 
 620:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 621:..\..\FreeRTOS_Source/tasks.c **** 	}
 622:..\..\FreeRTOS_Source/tasks.c **** 
 623:..\..\FreeRTOS_Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 624:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 625:..\..\FreeRTOS_Source/tasks.c **** 
 626:..\..\FreeRTOS_Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 627:..\..\FreeRTOS_Source/tasks.c **** 
 628:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 629:..\..\FreeRTOS_Source/tasks.c **** 	{
 630:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 631:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 632:..\..\FreeRTOS_Source/tasks.c **** 
 633:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 634:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 635:..\..\FreeRTOS_Source/tasks.c **** 
 636:..\..\FreeRTOS_Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 637:..\..\FreeRTOS_Source/tasks.c **** 		{
 638:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 14


 639:..\..\FreeRTOS_Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 640:..\..\FreeRTOS_Source/tasks.c **** 			not static allocation is being used. */
 641:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 642:..\..\FreeRTOS_Source/tasks.c **** 
 643:..\..\FreeRTOS_Source/tasks.c **** 			/* Store the stack location in the TCB. */
 644:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 645:..\..\FreeRTOS_Source/tasks.c **** 
 646:..\..\FreeRTOS_Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 647:..\..\FreeRTOS_Source/tasks.c **** 			{
 648:..\..\FreeRTOS_Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 649:..\..\FreeRTOS_Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 650:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 651:..\..\FreeRTOS_Source/tasks.c **** 			}
 652:..\..\FreeRTOS_Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 653:..\..\FreeRTOS_Source/tasks.c **** 
 654:..\..\FreeRTOS_Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 655:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->pcName,
 656:..\..\FreeRTOS_Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 657:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 658:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 659:..\..\FreeRTOS_Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 660:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->xRegions );
 661:..\..\FreeRTOS_Source/tasks.c **** 
 662:..\..\FreeRTOS_Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 663:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdPASS;
 664:..\..\FreeRTOS_Source/tasks.c **** 		}
 665:..\..\FreeRTOS_Source/tasks.c **** 
 666:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 667:..\..\FreeRTOS_Source/tasks.c **** 	}
 668:..\..\FreeRTOS_Source/tasks.c **** 
 669:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 670:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 671:..\..\FreeRTOS_Source/tasks.c **** 
 672:..\..\FreeRTOS_Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 673:..\..\FreeRTOS_Source/tasks.c **** 
 674:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 675:..\..\FreeRTOS_Source/tasks.c **** 	{
 676:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 677:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 678:..\..\FreeRTOS_Source/tasks.c **** 
 679:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 680:..\..\FreeRTOS_Source/tasks.c **** 
 681:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 682:..\..\FreeRTOS_Source/tasks.c **** 		{
 683:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 684:..\..\FreeRTOS_Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 685:..\..\FreeRTOS_Source/tasks.c **** 			not static allocation is being used. */
 686:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 687:..\..\FreeRTOS_Source/tasks.c **** 
 688:..\..\FreeRTOS_Source/tasks.c **** 			if( pxNewTCB != NULL )
 689:..\..\FreeRTOS_Source/tasks.c **** 			{
 690:..\..\FreeRTOS_Source/tasks.c **** 				/* Store the stack location in the TCB. */
 691:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 692:..\..\FreeRTOS_Source/tasks.c **** 
 693:..\..\FreeRTOS_Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 694:..\..\FreeRTOS_Source/tasks.c **** 				{
 695:..\..\FreeRTOS_Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 15


 696:..\..\FreeRTOS_Source/tasks.c **** 					this task had a statically allocated stack in case it is
 697:..\..\FreeRTOS_Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 698:..\..\FreeRTOS_Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 699:..\..\FreeRTOS_Source/tasks.c **** 				}
 700:..\..\FreeRTOS_Source/tasks.c **** 				#endif
 701:..\..\FreeRTOS_Source/tasks.c **** 
 702:..\..\FreeRTOS_Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 703:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->pcName,
 704:..\..\FreeRTOS_Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 705:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 706:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 707:..\..\FreeRTOS_Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 708:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->xRegions );
 709:..\..\FreeRTOS_Source/tasks.c **** 
 710:..\..\FreeRTOS_Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 711:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdPASS;
 712:..\..\FreeRTOS_Source/tasks.c **** 			}
 713:..\..\FreeRTOS_Source/tasks.c **** 		}
 714:..\..\FreeRTOS_Source/tasks.c **** 
 715:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 716:..\..\FreeRTOS_Source/tasks.c **** 	}
 717:..\..\FreeRTOS_Source/tasks.c **** 
 718:..\..\FreeRTOS_Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 719:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 720:..\..\FreeRTOS_Source/tasks.c **** 
 721:..\..\FreeRTOS_Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 722:..\..\FreeRTOS_Source/tasks.c **** 
 723:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 724:..\..\FreeRTOS_Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 725:..\..\FreeRTOS_Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 726:..\..\FreeRTOS_Source/tasks.c **** 							void * const pvParameters,
 727:..\..\FreeRTOS_Source/tasks.c **** 							UBaseType_t uxPriority,
 728:..\..\FreeRTOS_Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 729:..\..\FreeRTOS_Source/tasks.c **** 	{
  88              		.loc 1 729 0
  89              		.cfi_startproc
  90              		@ args = 8, pretend = 0, frame = 32
  91              		@ frame_needed = 1, uses_anonymous_args = 0
  92 0000 80B5     		push	{r7, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96 0002 8CB0     		sub	sp, sp, #48
  97              		.cfi_def_cfa_offset 56
  98 0004 04AF     		add	r7, sp, #16
  99              		.cfi_def_cfa 7, 40
 100 0006 F860     		str	r0, [r7, #12]
 101 0008 B960     		str	r1, [r7, #8]
 102 000a 3B60     		str	r3, [r7]
 103 000c 1346     		mov	r3, r2	@ movhi
 104 000e FB80     		strh	r3, [r7, #6]	@ movhi
 105              	.LBB27:
 730:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 731:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
 732:..\..\FreeRTOS_Source/tasks.c **** 
 733:..\..\FreeRTOS_Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 734:..\..\FreeRTOS_Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 16


 735:..\..\FreeRTOS_Source/tasks.c **** 		the TCB then the stack. */
 736:..\..\FreeRTOS_Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 737:..\..\FreeRTOS_Source/tasks.c **** 		{
 738:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 739:..\..\FreeRTOS_Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 740:..\..\FreeRTOS_Source/tasks.c **** 			allocation is being used. */
 741:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 742:..\..\FreeRTOS_Source/tasks.c **** 
 743:..\..\FreeRTOS_Source/tasks.c **** 			if( pxNewTCB != NULL )
 744:..\..\FreeRTOS_Source/tasks.c **** 			{
 745:..\..\FreeRTOS_Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 746:..\..\FreeRTOS_Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 747:..\..\FreeRTOS_Source/tasks.c **** 				be deleted later if required. */
 748:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 749:..\..\FreeRTOS_Source/tasks.c **** 
 750:..\..\FreeRTOS_Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 751:..\..\FreeRTOS_Source/tasks.c **** 				{
 752:..\..\FreeRTOS_Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 753:..\..\FreeRTOS_Source/tasks.c **** 					vPortFree( pxNewTCB );
 754:..\..\FreeRTOS_Source/tasks.c **** 					pxNewTCB = NULL;
 755:..\..\FreeRTOS_Source/tasks.c **** 				}
 756:..\..\FreeRTOS_Source/tasks.c **** 			}
 757:..\..\FreeRTOS_Source/tasks.c **** 		}
 758:..\..\FreeRTOS_Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 759:..\..\FreeRTOS_Source/tasks.c **** 		{
 760:..\..\FreeRTOS_Source/tasks.c **** 		StackType_t *pxStack;
 761:..\..\FreeRTOS_Source/tasks.c **** 
 762:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 763:..\..\FreeRTOS_Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 106              		.loc 1 763 0
 107 0010 FB88     		ldrh	r3, [r7, #6]
 108 0012 9B00     		lsls	r3, r3, #2
 109 0014 1846     		mov	r0, r3
 110 0016 FFF7FEFF 		bl	pvPortMalloc
 111 001a 7861     		str	r0, [r7, #20]
 764:..\..\FreeRTOS_Source/tasks.c **** 
 765:..\..\FreeRTOS_Source/tasks.c **** 			if( pxStack != NULL )
 112              		.loc 1 765 0
 113 001c 7B69     		ldr	r3, [r7, #20]
 114 001e 002B     		cmp	r3, #0
 115 0020 0ED0     		beq	.L2
 766:..\..\FreeRTOS_Source/tasks.c **** 			{
 767:..\..\FreeRTOS_Source/tasks.c **** 				/* Allocate space for the TCB. */
 768:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 116              		.loc 1 768 0
 117 0022 5020     		movs	r0, #80
 118 0024 FFF7FEFF 		bl	pvPortMalloc
 119 0028 F861     		str	r0, [r7, #28]
 769:..\..\FreeRTOS_Source/tasks.c **** 
 770:..\..\FreeRTOS_Source/tasks.c **** 				if( pxNewTCB != NULL )
 120              		.loc 1 770 0
 121 002a FB69     		ldr	r3, [r7, #28]
 122 002c 002B     		cmp	r3, #0
 123 002e 03D0     		beq	.L3
 771:..\..\FreeRTOS_Source/tasks.c **** 				{
 772:..\..\FreeRTOS_Source/tasks.c **** 					/* Store the stack location in the TCB. */
 773:..\..\FreeRTOS_Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 17


 124              		.loc 1 773 0
 125 0030 FB69     		ldr	r3, [r7, #28]
 126 0032 7A69     		ldr	r2, [r7, #20]
 127 0034 1A63     		str	r2, [r3, #48]
 128 0036 05E0     		b	.L5
 129              	.L3:
 774:..\..\FreeRTOS_Source/tasks.c **** 				}
 775:..\..\FreeRTOS_Source/tasks.c **** 				else
 776:..\..\FreeRTOS_Source/tasks.c **** 				{
 777:..\..\FreeRTOS_Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 778:..\..\FreeRTOS_Source/tasks.c **** 					it again. */
 779:..\..\FreeRTOS_Source/tasks.c **** 					vPortFree( pxStack );
 130              		.loc 1 779 0
 131 0038 7869     		ldr	r0, [r7, #20]
 132 003a FFF7FEFF 		bl	vPortFree
 133 003e 01E0     		b	.L5
 134              	.L2:
 780:..\..\FreeRTOS_Source/tasks.c **** 				}
 781:..\..\FreeRTOS_Source/tasks.c **** 			}
 782:..\..\FreeRTOS_Source/tasks.c **** 			else
 783:..\..\FreeRTOS_Source/tasks.c **** 			{
 784:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB = NULL;
 135              		.loc 1 784 0
 136 0040 0023     		movs	r3, #0
 137 0042 FB61     		str	r3, [r7, #28]
 138              	.L5:
 139              	.LBE27:
 785:..\..\FreeRTOS_Source/tasks.c **** 			}
 786:..\..\FreeRTOS_Source/tasks.c **** 		}
 787:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 788:..\..\FreeRTOS_Source/tasks.c **** 
 789:..\..\FreeRTOS_Source/tasks.c **** 		if( pxNewTCB != NULL )
 140              		.loc 1 789 0
 141 0044 FB69     		ldr	r3, [r7, #28]
 142 0046 002B     		cmp	r3, #0
 143 0048 13D0     		beq	.L6
 790:..\..\FreeRTOS_Source/tasks.c **** 		{
 791:..\..\FreeRTOS_Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 792:..\..\FreeRTOS_Source/tasks.c **** 			{
 793:..\..\FreeRTOS_Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 794:..\..\FreeRTOS_Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 795:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 796:..\..\FreeRTOS_Source/tasks.c **** 			}
 797:..\..\FreeRTOS_Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 798:..\..\FreeRTOS_Source/tasks.c **** 
 799:..\..\FreeRTOS_Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 144              		.loc 1 799 0
 145 004a FA88     		ldrh	r2, [r7, #6]
 146 004c BB6A     		ldr	r3, [r7, #40]
 147 004e 0093     		str	r3, [sp]
 148 0050 FB6A     		ldr	r3, [r7, #44]
 149 0052 0193     		str	r3, [sp, #4]
 150 0054 FB69     		ldr	r3, [r7, #28]
 151 0056 0293     		str	r3, [sp, #8]
 152 0058 0023     		movs	r3, #0
 153 005a 0393     		str	r3, [sp, #12]
 154 005c F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 18


 155 005e B968     		ldr	r1, [r7, #8]
 156 0060 3B68     		ldr	r3, [r7]
 157 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 800:..\..\FreeRTOS_Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 158              		.loc 1 800 0
 159 0066 F869     		ldr	r0, [r7, #28]
 160 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 801:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdPASS;
 161              		.loc 1 801 0
 162 006c 0123     		movs	r3, #1
 163 006e BB61     		str	r3, [r7, #24]
 164 0070 02E0     		b	.L7
 165              	.L6:
 802:..\..\FreeRTOS_Source/tasks.c **** 		}
 803:..\..\FreeRTOS_Source/tasks.c **** 		else
 804:..\..\FreeRTOS_Source/tasks.c **** 		{
 805:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 166              		.loc 1 805 0
 167 0072 4FF0FF33 		mov	r3, #-1
 168 0076 BB61     		str	r3, [r7, #24]
 169              	.L7:
 806:..\..\FreeRTOS_Source/tasks.c **** 		}
 807:..\..\FreeRTOS_Source/tasks.c **** 
 808:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 170              		.loc 1 808 0
 171 0078 BB69     		ldr	r3, [r7, #24]
 809:..\..\FreeRTOS_Source/tasks.c **** 	}
 172              		.loc 1 809 0
 173 007a 1846     		mov	r0, r3
 174 007c 2037     		adds	r7, r7, #32
 175              		.cfi_def_cfa_offset 8
 176 007e BD46     		mov	sp, r7
 177              		.cfi_def_cfa_register 13
 178              		@ sp needed
 179 0080 80BD     		pop	{r7, pc}
 180              		.cfi_endproc
 181              	.LFE68:
 182              		.size	xTaskCreate, .-xTaskCreate
 183 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 184              		.align	2
 185              		.thumb
 186              		.thumb_func
 187              		.type	prvInitialiseNewTask, %function
 188              	prvInitialiseNewTask:
 189              	.LFB69:
 810:..\..\FreeRTOS_Source/tasks.c **** 
 811:..\..\FreeRTOS_Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 812:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 813:..\..\FreeRTOS_Source/tasks.c **** 
 814:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 815:..\..\FreeRTOS_Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 816:..\..\FreeRTOS_Source/tasks.c **** 									const uint32_t ulStackDepth,
 817:..\..\FreeRTOS_Source/tasks.c **** 									void * const pvParameters,
 818:..\..\FreeRTOS_Source/tasks.c **** 									UBaseType_t uxPriority,
 819:..\..\FreeRTOS_Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 820:..\..\FreeRTOS_Source/tasks.c **** 									TCB_t *pxNewTCB,
 821:..\..\FreeRTOS_Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 19


 822:..\..\FreeRTOS_Source/tasks.c **** {
 190              		.loc 1 822 0
 191              		.cfi_startproc
 192              		@ args = 16, pretend = 0, frame = 24
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 86B0     		sub	sp, sp, #24
 199              		.cfi_def_cfa_offset 32
 200 0004 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
 202 0006 F860     		str	r0, [r7, #12]
 203 0008 B960     		str	r1, [r7, #8]
 204 000a 7A60     		str	r2, [r7, #4]
 205 000c 3B60     		str	r3, [r7]
 823:..\..\FreeRTOS_Source/tasks.c **** StackType_t *pxTopOfStack;
 824:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t x;
 825:..\..\FreeRTOS_Source/tasks.c **** 
 826:..\..\FreeRTOS_Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 827:..\..\FreeRTOS_Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 828:..\..\FreeRTOS_Source/tasks.c **** 		BaseType_t xRunPrivileged;
 829:..\..\FreeRTOS_Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 830:..\..\FreeRTOS_Source/tasks.c **** 		{
 831:..\..\FreeRTOS_Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 832:..\..\FreeRTOS_Source/tasks.c **** 		}
 833:..\..\FreeRTOS_Source/tasks.c **** 		else
 834:..\..\FreeRTOS_Source/tasks.c **** 		{
 835:..\..\FreeRTOS_Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 836:..\..\FreeRTOS_Source/tasks.c **** 		}
 837:..\..\FreeRTOS_Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 838:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 839:..\..\FreeRTOS_Source/tasks.c **** 
 840:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pcName );
 841:..\..\FreeRTOS_Source/tasks.c **** 
 842:..\..\FreeRTOS_Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 843:..\..\FreeRTOS_Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 844:..\..\FreeRTOS_Source/tasks.c **** 	{
 845:..\..\FreeRTOS_Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 846:..\..\FreeRTOS_Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 206              		.loc 1 846 0
 207 000e BB6A     		ldr	r3, [r7, #40]
 208 0010 1A6B     		ldr	r2, [r3, #48]
 209 0012 7B68     		ldr	r3, [r7, #4]
 210 0014 9B00     		lsls	r3, r3, #2
 211 0016 1046     		mov	r0, r2
 212 0018 A521     		movs	r1, #165
 213 001a 1A46     		mov	r2, r3
 214 001c FFF7FEFF 		bl	memset
 847:..\..\FreeRTOS_Source/tasks.c **** 	}
 848:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 849:..\..\FreeRTOS_Source/tasks.c **** 
 850:..\..\FreeRTOS_Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 851:..\..\FreeRTOS_Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 852:..\..\FreeRTOS_Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 853:..\..\FreeRTOS_Source/tasks.c **** 	by the port. */
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 20


 854:..\..\FreeRTOS_Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 855:..\..\FreeRTOS_Source/tasks.c **** 	{
 856:..\..\FreeRTOS_Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 215              		.loc 1 856 0
 216 0020 BB6A     		ldr	r3, [r7, #40]
 217 0022 1A6B     		ldr	r2, [r3, #48]
 218 0024 7B68     		ldr	r3, [r7, #4]
 219 0026 03F18043 		add	r3, r3, #1073741824
 220 002a 013B     		subs	r3, r3, #1
 221 002c 9B00     		lsls	r3, r3, #2
 222 002e 1344     		add	r3, r3, r2
 223 0030 3B61     		str	r3, [r7, #16]
 857:..\..\FreeRTOS_Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 224              		.loc 1 857 0
 225 0032 3B69     		ldr	r3, [r7, #16]
 226 0034 23F00703 		bic	r3, r3, #7
 227 0038 3B61     		str	r3, [r7, #16]
 858:..\..\FreeRTOS_Source/tasks.c **** 
 859:..\..\FreeRTOS_Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 860:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 861:..\..\FreeRTOS_Source/tasks.c **** 
 862:..\..\FreeRTOS_Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 863:..\..\FreeRTOS_Source/tasks.c **** 		{
 864:..\..\FreeRTOS_Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 865:..\..\FreeRTOS_Source/tasks.c **** 			debugging. */
 866:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 867:..\..\FreeRTOS_Source/tasks.c **** 		}
 868:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 869:..\..\FreeRTOS_Source/tasks.c **** 	}
 870:..\..\FreeRTOS_Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 871:..\..\FreeRTOS_Source/tasks.c **** 	{
 872:..\..\FreeRTOS_Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 873:..\..\FreeRTOS_Source/tasks.c **** 
 874:..\..\FreeRTOS_Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 875:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 876:..\..\FreeRTOS_Source/tasks.c **** 
 877:..\..\FreeRTOS_Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 878:..\..\FreeRTOS_Source/tasks.c **** 		performed. */
 879:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 880:..\..\FreeRTOS_Source/tasks.c **** 	}
 881:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 882:..\..\FreeRTOS_Source/tasks.c **** 
 883:..\..\FreeRTOS_Source/tasks.c **** 	/* Store the task name in the TCB. */
 884:..\..\FreeRTOS_Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 228              		.loc 1 884 0
 229 003a 0023     		movs	r3, #0
 230 003c 7B61     		str	r3, [r7, #20]
 231 003e 13E0     		b	.L10
 232              	.L13:
 885:..\..\FreeRTOS_Source/tasks.c **** 	{
 886:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 233              		.loc 1 886 0
 234 0040 BA68     		ldr	r2, [r7, #8]
 235 0042 7B69     		ldr	r3, [r7, #20]
 236 0044 1344     		add	r3, r3, r2
 237 0046 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 238 0048 BA6A     		ldr	r2, [r7, #40]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 21


 239 004a 7B69     		ldr	r3, [r7, #20]
 240 004c 1344     		add	r3, r3, r2
 241 004e 3033     		adds	r3, r3, #48
 242 0050 0A46     		mov	r2, r1
 243 0052 1A71     		strb	r2, [r3, #4]
 887:..\..\FreeRTOS_Source/tasks.c **** 
 888:..\..\FreeRTOS_Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 889:..\..\FreeRTOS_Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 890:..\..\FreeRTOS_Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 891:..\..\FreeRTOS_Source/tasks.c **** 		if( pcName[ x ] == ( char ) 0x00 )
 244              		.loc 1 891 0
 245 0054 BA68     		ldr	r2, [r7, #8]
 246 0056 7B69     		ldr	r3, [r7, #20]
 247 0058 1344     		add	r3, r3, r2
 248 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 249 005c 002B     		cmp	r3, #0
 250 005e 00D1     		bne	.L11
 892:..\..\FreeRTOS_Source/tasks.c **** 		{
 893:..\..\FreeRTOS_Source/tasks.c **** 			break;
 251              		.loc 1 893 0
 252 0060 05E0     		b	.L12
 253              	.L11:
 884:..\..\FreeRTOS_Source/tasks.c **** 	{
 254              		.loc 1 884 0 discriminator 2
 255 0062 7B69     		ldr	r3, [r7, #20]
 256 0064 0133     		adds	r3, r3, #1
 257 0066 7B61     		str	r3, [r7, #20]
 258              	.L10:
 884:..\..\FreeRTOS_Source/tasks.c **** 	{
 259              		.loc 1 884 0 is_stmt 0 discriminator 1
 260 0068 7B69     		ldr	r3, [r7, #20]
 261 006a 0B2B     		cmp	r3, #11
 262 006c E8D9     		bls	.L13
 263              	.L12:
 894:..\..\FreeRTOS_Source/tasks.c **** 		}
 895:..\..\FreeRTOS_Source/tasks.c **** 		else
 896:..\..\FreeRTOS_Source/tasks.c **** 		{
 897:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 898:..\..\FreeRTOS_Source/tasks.c **** 		}
 899:..\..\FreeRTOS_Source/tasks.c **** 	}
 900:..\..\FreeRTOS_Source/tasks.c **** 
 901:..\..\FreeRTOS_Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 902:..\..\FreeRTOS_Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 903:..\..\FreeRTOS_Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 264              		.loc 1 903 0 is_stmt 1
 265 006e BB6A     		ldr	r3, [r7, #40]
 266 0070 0022     		movs	r2, #0
 267 0072 83F83F20 		strb	r2, [r3, #63]
 904:..\..\FreeRTOS_Source/tasks.c **** 
 905:..\..\FreeRTOS_Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 906:..\..\FreeRTOS_Source/tasks.c **** 	remove the privilege bit if one is present. */
 907:..\..\FreeRTOS_Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 268              		.loc 1 907 0
 269 0076 3B6A     		ldr	r3, [r7, #32]
 270 0078 042B     		cmp	r3, #4
 271 007a 01D9     		bls	.L14
 908:..\..\FreeRTOS_Source/tasks.c **** 	{
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 22


 909:..\..\FreeRTOS_Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 272              		.loc 1 909 0
 273 007c 0423     		movs	r3, #4
 274 007e 3B62     		str	r3, [r7, #32]
 275              	.L14:
 910:..\..\FreeRTOS_Source/tasks.c **** 	}
 911:..\..\FreeRTOS_Source/tasks.c **** 	else
 912:..\..\FreeRTOS_Source/tasks.c **** 	{
 913:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 914:..\..\FreeRTOS_Source/tasks.c **** 	}
 915:..\..\FreeRTOS_Source/tasks.c **** 
 916:..\..\FreeRTOS_Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 276              		.loc 1 916 0
 277 0080 BB6A     		ldr	r3, [r7, #40]
 278 0082 3A6A     		ldr	r2, [r7, #32]
 279 0084 DA62     		str	r2, [r3, #44]
 917:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 918:..\..\FreeRTOS_Source/tasks.c **** 	{
 919:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 280              		.loc 1 919 0
 281 0086 BB6A     		ldr	r3, [r7, #40]
 282 0088 3A6A     		ldr	r2, [r7, #32]
 283 008a 1A64     		str	r2, [r3, #64]
 920:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 284              		.loc 1 920 0
 285 008c BB6A     		ldr	r3, [r7, #40]
 286 008e 0022     		movs	r2, #0
 287 0090 5A64     		str	r2, [r3, #68]
 921:..\..\FreeRTOS_Source/tasks.c **** 	}
 922:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 923:..\..\FreeRTOS_Source/tasks.c **** 
 924:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 288              		.loc 1 924 0
 289 0092 BB6A     		ldr	r3, [r7, #40]
 290 0094 0433     		adds	r3, r3, #4
 291 0096 1846     		mov	r0, r3
 292 0098 FFF7FEFF 		bl	vListInitialiseItem
 925:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 293              		.loc 1 925 0
 294 009c BB6A     		ldr	r3, [r7, #40]
 295 009e 1833     		adds	r3, r3, #24
 296 00a0 1846     		mov	r0, r3
 297 00a2 FFF7FEFF 		bl	vListInitialiseItem
 926:..\..\FreeRTOS_Source/tasks.c **** 
 927:..\..\FreeRTOS_Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 928:..\..\FreeRTOS_Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 929:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 298              		.loc 1 929 0
 299 00a6 BB6A     		ldr	r3, [r7, #40]
 300 00a8 BA6A     		ldr	r2, [r7, #40]
 301 00aa 1A61     		str	r2, [r3, #16]
 930:..\..\FreeRTOS_Source/tasks.c **** 
 931:..\..\FreeRTOS_Source/tasks.c **** 	/* Event lists are always in priority order. */
 932:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 302              		.loc 1 932 0
 303 00ac 3B6A     		ldr	r3, [r7, #32]
 304 00ae C3F10502 		rsb	r2, r3, #5
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 23


 305 00b2 BB6A     		ldr	r3, [r7, #40]
 306 00b4 9A61     		str	r2, [r3, #24]
 933:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 307              		.loc 1 933 0
 308 00b6 BB6A     		ldr	r3, [r7, #40]
 309 00b8 BA6A     		ldr	r2, [r7, #40]
 310 00ba 5A62     		str	r2, [r3, #36]
 934:..\..\FreeRTOS_Source/tasks.c **** 
 935:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 936:..\..\FreeRTOS_Source/tasks.c **** 	{
 937:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 938:..\..\FreeRTOS_Source/tasks.c **** 	}
 939:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 940:..\..\FreeRTOS_Source/tasks.c **** 
 941:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 942:..\..\FreeRTOS_Source/tasks.c **** 	{
 943:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 944:..\..\FreeRTOS_Source/tasks.c **** 	}
 945:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 946:..\..\FreeRTOS_Source/tasks.c **** 
 947:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 948:..\..\FreeRTOS_Source/tasks.c **** 	{
 949:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 950:..\..\FreeRTOS_Source/tasks.c **** 	}
 951:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 952:..\..\FreeRTOS_Source/tasks.c **** 
 953:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 954:..\..\FreeRTOS_Source/tasks.c **** 	{
 955:..\..\FreeRTOS_Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 956:..\..\FreeRTOS_Source/tasks.c **** 	}
 957:..\..\FreeRTOS_Source/tasks.c **** 	#else
 958:..\..\FreeRTOS_Source/tasks.c **** 	{
 959:..\..\FreeRTOS_Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 960:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xRegions;
 961:..\..\FreeRTOS_Source/tasks.c **** 	}
 962:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 963:..\..\FreeRTOS_Source/tasks.c **** 
 964:..\..\FreeRTOS_Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 965:..\..\FreeRTOS_Source/tasks.c **** 	{
 966:..\..\FreeRTOS_Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 967:..\..\FreeRTOS_Source/tasks.c **** 		{
 968:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 969:..\..\FreeRTOS_Source/tasks.c **** 		}
 970:..\..\FreeRTOS_Source/tasks.c **** 	}
 971:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 972:..\..\FreeRTOS_Source/tasks.c **** 
 973:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 974:..\..\FreeRTOS_Source/tasks.c **** 	{
 975:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 311              		.loc 1 975 0
 312 00bc BB6A     		ldr	r3, [r7, #40]
 313 00be 0022     		movs	r2, #0
 314 00c0 9A64     		str	r2, [r3, #72]
 976:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 315              		.loc 1 976 0
 316 00c2 BB6A     		ldr	r3, [r7, #40]
 317 00c4 0022     		movs	r2, #0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 24


 318 00c6 83F84C20 		strb	r2, [r3, #76]
 977:..\..\FreeRTOS_Source/tasks.c **** 	}
 978:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 979:..\..\FreeRTOS_Source/tasks.c **** 
 980:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 981:..\..\FreeRTOS_Source/tasks.c **** 	{
 982:..\..\FreeRTOS_Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 983:..\..\FreeRTOS_Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 984:..\..\FreeRTOS_Source/tasks.c **** 	}
 985:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 986:..\..\FreeRTOS_Source/tasks.c **** 
 987:..\..\FreeRTOS_Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 988:..\..\FreeRTOS_Source/tasks.c **** 	{
 989:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 990:..\..\FreeRTOS_Source/tasks.c **** 	}
 991:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 992:..\..\FreeRTOS_Source/tasks.c **** 
 993:..\..\FreeRTOS_Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 994:..\..\FreeRTOS_Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 995:..\..\FreeRTOS_Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 996:..\..\FreeRTOS_Source/tasks.c **** 	the top of stack variable is updated. */
 997:..\..\FreeRTOS_Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 998:..\..\FreeRTOS_Source/tasks.c **** 	{
 999:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1000:..\..\FreeRTOS_Source/tasks.c **** 	}
1001:..\..\FreeRTOS_Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1002:..\..\FreeRTOS_Source/tasks.c **** 	{
1003:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 319              		.loc 1 1003 0
 320 00ca 3869     		ldr	r0, [r7, #16]
 321 00cc F968     		ldr	r1, [r7, #12]
 322 00ce 3A68     		ldr	r2, [r7]
 323 00d0 FFF7FEFF 		bl	pxPortInitialiseStack
 324 00d4 0246     		mov	r2, r0
 325 00d6 BB6A     		ldr	r3, [r7, #40]
 326 00d8 1A60     		str	r2, [r3]
1004:..\..\FreeRTOS_Source/tasks.c **** 	}
1005:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1006:..\..\FreeRTOS_Source/tasks.c **** 
1007:..\..\FreeRTOS_Source/tasks.c **** 	if( pxCreatedTask != NULL )
 327              		.loc 1 1007 0
 328 00da 7B6A     		ldr	r3, [r7, #36]
 329 00dc 002B     		cmp	r3, #0
 330 00de 02D0     		beq	.L9
1008:..\..\FreeRTOS_Source/tasks.c **** 	{
1009:..\..\FreeRTOS_Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1010:..\..\FreeRTOS_Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1011:..\..\FreeRTOS_Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 331              		.loc 1 1011 0
 332 00e0 7B6A     		ldr	r3, [r7, #36]
 333 00e2 BA6A     		ldr	r2, [r7, #40]
 334 00e4 1A60     		str	r2, [r3]
 335              	.L9:
1012:..\..\FreeRTOS_Source/tasks.c **** 	}
1013:..\..\FreeRTOS_Source/tasks.c **** 	else
1014:..\..\FreeRTOS_Source/tasks.c **** 	{
1015:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 25


1016:..\..\FreeRTOS_Source/tasks.c **** 	}
1017:..\..\FreeRTOS_Source/tasks.c **** }
 336              		.loc 1 1017 0
 337 00e6 1837     		adds	r7, r7, #24
 338              		.cfi_def_cfa_offset 8
 339 00e8 BD46     		mov	sp, r7
 340              		.cfi_def_cfa_register 13
 341              		@ sp needed
 342 00ea 80BD     		pop	{r7, pc}
 343              		.cfi_endproc
 344              	.LFE69:
 345              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 346              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 347              		.align	2
 348              		.thumb
 349              		.thumb_func
 350              		.type	prvAddNewTaskToReadyList, %function
 351              	prvAddNewTaskToReadyList:
 352              	.LFB70:
1018:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1019:..\..\FreeRTOS_Source/tasks.c **** 
1020:..\..\FreeRTOS_Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1021:..\..\FreeRTOS_Source/tasks.c **** {
 353              		.loc 1 1021 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357 0000 80B5     		push	{r7, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 82B0     		sub	sp, sp, #8
 362              		.cfi_def_cfa_offset 16
 363 0004 00AF     		add	r7, sp, #0
 364              		.cfi_def_cfa_register 7
 365 0006 7860     		str	r0, [r7, #4]
1022:..\..\FreeRTOS_Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1023:..\..\FreeRTOS_Source/tasks.c **** 	updated. */
1024:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 366              		.loc 1 1024 0
 367 0008 FFF7FEFF 		bl	vPortEnterCritical
1025:..\..\FreeRTOS_Source/tasks.c **** 	{
1026:..\..\FreeRTOS_Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 368              		.loc 1 1026 0
 369 000c 2B4B     		ldr	r3, .L20
 370 000e 1B68     		ldr	r3, [r3]
 371 0010 0133     		adds	r3, r3, #1
 372 0012 2A4A     		ldr	r2, .L20
 373 0014 1360     		str	r3, [r2]
1027:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 374              		.loc 1 1027 0
 375 0016 2A4B     		ldr	r3, .L20+4
 376 0018 1B68     		ldr	r3, [r3]
 377 001a 002B     		cmp	r3, #0
 378 001c 09D1     		bne	.L17
1028:..\..\FreeRTOS_Source/tasks.c **** 		{
1029:..\..\FreeRTOS_Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 26


1030:..\..\FreeRTOS_Source/tasks.c **** 			the suspended state - make this the current task. */
1031:..\..\FreeRTOS_Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 379              		.loc 1 1031 0
 380 001e 284A     		ldr	r2, .L20+4
 381 0020 7B68     		ldr	r3, [r7, #4]
 382 0022 1360     		str	r3, [r2]
1032:..\..\FreeRTOS_Source/tasks.c **** 
1033:..\..\FreeRTOS_Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 383              		.loc 1 1033 0
 384 0024 254B     		ldr	r3, .L20
 385 0026 1B68     		ldr	r3, [r3]
 386 0028 012B     		cmp	r3, #1
 387 002a 10D1     		bne	.L18
1034:..\..\FreeRTOS_Source/tasks.c **** 			{
1035:..\..\FreeRTOS_Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1036:..\..\FreeRTOS_Source/tasks.c **** 				initialisation required.  We will not recover if this call
1037:..\..\FreeRTOS_Source/tasks.c **** 				fails, but we will report the failure. */
1038:..\..\FreeRTOS_Source/tasks.c **** 				prvInitialiseTaskLists();
 388              		.loc 1 1038 0
 389 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 390 0030 0DE0     		b	.L18
 391              	.L17:
1039:..\..\FreeRTOS_Source/tasks.c **** 			}
1040:..\..\FreeRTOS_Source/tasks.c **** 			else
1041:..\..\FreeRTOS_Source/tasks.c **** 			{
1042:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1043:..\..\FreeRTOS_Source/tasks.c **** 			}
1044:..\..\FreeRTOS_Source/tasks.c **** 		}
1045:..\..\FreeRTOS_Source/tasks.c **** 		else
1046:..\..\FreeRTOS_Source/tasks.c **** 		{
1047:..\..\FreeRTOS_Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1048:..\..\FreeRTOS_Source/tasks.c **** 			current task if it is the highest priority task to be created
1049:..\..\FreeRTOS_Source/tasks.c **** 			so far. */
1050:..\..\FreeRTOS_Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 392              		.loc 1 1050 0
 393 0032 244B     		ldr	r3, .L20+8
 394 0034 1B68     		ldr	r3, [r3]
 395 0036 002B     		cmp	r3, #0
 396 0038 09D1     		bne	.L18
1051:..\..\FreeRTOS_Source/tasks.c **** 			{
1052:..\..\FreeRTOS_Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 397              		.loc 1 1052 0
 398 003a 214B     		ldr	r3, .L20+4
 399 003c 1B68     		ldr	r3, [r3]
 400 003e DA6A     		ldr	r2, [r3, #44]
 401 0040 7B68     		ldr	r3, [r7, #4]
 402 0042 DB6A     		ldr	r3, [r3, #44]
 403 0044 9A42     		cmp	r2, r3
 404 0046 02D8     		bhi	.L18
1053:..\..\FreeRTOS_Source/tasks.c **** 				{
1054:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 405              		.loc 1 1054 0
 406 0048 1D4A     		ldr	r2, .L20+4
 407 004a 7B68     		ldr	r3, [r7, #4]
 408 004c 1360     		str	r3, [r2]
 409              	.L18:
1055:..\..\FreeRTOS_Source/tasks.c **** 				}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 27


1056:..\..\FreeRTOS_Source/tasks.c **** 				else
1057:..\..\FreeRTOS_Source/tasks.c **** 				{
1058:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1059:..\..\FreeRTOS_Source/tasks.c **** 				}
1060:..\..\FreeRTOS_Source/tasks.c **** 			}
1061:..\..\FreeRTOS_Source/tasks.c **** 			else
1062:..\..\FreeRTOS_Source/tasks.c **** 			{
1063:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1064:..\..\FreeRTOS_Source/tasks.c **** 			}
1065:..\..\FreeRTOS_Source/tasks.c **** 		}
1066:..\..\FreeRTOS_Source/tasks.c **** 
1067:..\..\FreeRTOS_Source/tasks.c **** 		uxTaskNumber++;
 410              		.loc 1 1067 0
 411 004e 1E4B     		ldr	r3, .L20+12
 412 0050 1B68     		ldr	r3, [r3]
 413 0052 0133     		adds	r3, r3, #1
 414 0054 1C4A     		ldr	r2, .L20+12
 415 0056 1360     		str	r3, [r2]
1068:..\..\FreeRTOS_Source/tasks.c **** 
1069:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1070:..\..\FreeRTOS_Source/tasks.c **** 		{
1071:..\..\FreeRTOS_Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1072:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1073:..\..\FreeRTOS_Source/tasks.c **** 		}
1074:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1075:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1076:..\..\FreeRTOS_Source/tasks.c **** 
1077:..\..\FreeRTOS_Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 416              		.loc 1 1077 0
 417 0058 7B68     		ldr	r3, [r7, #4]
 418 005a DB6A     		ldr	r3, [r3, #44]
 419 005c 1A46     		mov	r2, r3
 420 005e 0123     		movs	r3, #1
 421 0060 03FA02F2 		lsl	r2, r3, r2
 422 0064 194B     		ldr	r3, .L20+16
 423 0066 1B68     		ldr	r3, [r3]
 424 0068 1343     		orrs	r3, r3, r2
 425 006a 184A     		ldr	r2, .L20+16
 426 006c 1360     		str	r3, [r2]
 427 006e 7B68     		ldr	r3, [r7, #4]
 428 0070 DA6A     		ldr	r2, [r3, #44]
 429 0072 1346     		mov	r3, r2
 430 0074 9B00     		lsls	r3, r3, #2
 431 0076 1344     		add	r3, r3, r2
 432 0078 9B00     		lsls	r3, r3, #2
 433 007a 154A     		ldr	r2, .L20+20
 434 007c 1A44     		add	r2, r2, r3
 435 007e 7B68     		ldr	r3, [r7, #4]
 436 0080 0433     		adds	r3, r3, #4
 437 0082 1046     		mov	r0, r2
 438 0084 1946     		mov	r1, r3
 439 0086 FFF7FEFF 		bl	vListInsertEnd
1078:..\..\FreeRTOS_Source/tasks.c **** 
1079:..\..\FreeRTOS_Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1080:..\..\FreeRTOS_Source/tasks.c **** 	}
1081:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
 440              		.loc 1 1081 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 28


 441 008a FFF7FEFF 		bl	vPortExitCritical
1082:..\..\FreeRTOS_Source/tasks.c **** 
1083:..\..\FreeRTOS_Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 442              		.loc 1 1083 0
 443 008e 0D4B     		ldr	r3, .L20+8
 444 0090 1B68     		ldr	r3, [r3]
 445 0092 002B     		cmp	r3, #0
 446 0094 0ED0     		beq	.L16
1084:..\..\FreeRTOS_Source/tasks.c **** 	{
1085:..\..\FreeRTOS_Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1086:..\..\FreeRTOS_Source/tasks.c **** 		then it should run now. */
1087:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 447              		.loc 1 1087 0
 448 0096 0A4B     		ldr	r3, .L20+4
 449 0098 1B68     		ldr	r3, [r3]
 450 009a DA6A     		ldr	r2, [r3, #44]
 451 009c 7B68     		ldr	r3, [r7, #4]
 452 009e DB6A     		ldr	r3, [r3, #44]
 453 00a0 9A42     		cmp	r2, r3
 454 00a2 07D2     		bcs	.L16
1088:..\..\FreeRTOS_Source/tasks.c **** 		{
1089:..\..\FreeRTOS_Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 455              		.loc 1 1089 0
 456 00a4 0B4B     		ldr	r3, .L20+24
 457 00a6 4FF08052 		mov	r2, #268435456
 458 00aa 1A60     		str	r2, [r3]
 459              	@ 1089 "..\..\FreeRTOS_Source\tasks.c" 1
 460 00ac BFF34F8F 		dsb
 461              	@ 0 "" 2
 462              	@ 1089 "..\..\FreeRTOS_Source\tasks.c" 1
 463 00b0 BFF36F8F 		isb
 464              	@ 0 "" 2
 465              		.thumb
 466              	.L16:
1090:..\..\FreeRTOS_Source/tasks.c **** 		}
1091:..\..\FreeRTOS_Source/tasks.c **** 		else
1092:..\..\FreeRTOS_Source/tasks.c **** 		{
1093:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1094:..\..\FreeRTOS_Source/tasks.c **** 		}
1095:..\..\FreeRTOS_Source/tasks.c **** 	}
1096:..\..\FreeRTOS_Source/tasks.c **** 	else
1097:..\..\FreeRTOS_Source/tasks.c **** 	{
1098:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1099:..\..\FreeRTOS_Source/tasks.c **** 	}
1100:..\..\FreeRTOS_Source/tasks.c **** }
 467              		.loc 1 1100 0
 468 00b4 0837     		adds	r7, r7, #8
 469              		.cfi_def_cfa_offset 8
 470 00b6 BD46     		mov	sp, r7
 471              		.cfi_def_cfa_register 13
 472              		@ sp needed
 473 00b8 80BD     		pop	{r7, pc}
 474              	.L21:
 475 00ba 00BF     		.align	2
 476              	.L20:
 477 00bc B0000000 		.word	uxCurrentNumberOfTasks
 478 00c0 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 29


 479 00c4 BC000000 		.word	xSchedulerRunning
 480 00c8 CC000000 		.word	uxTaskNumber
 481 00cc B8000000 		.word	uxTopReadyPriority
 482 00d0 04000000 		.word	pxReadyTasksLists
 483 00d4 04ED00E0 		.word	-536810236
 484              		.cfi_endproc
 485              	.LFE70:
 486              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 487              		.section	.text.vTaskDelete,"ax",%progbits
 488              		.align	2
 489              		.global	vTaskDelete
 490              		.thumb
 491              		.thumb_func
 492              		.type	vTaskDelete, %function
 493              	vTaskDelete:
 494              	.LFB71:
1101:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1102:..\..\FreeRTOS_Source/tasks.c **** 
1103:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1104:..\..\FreeRTOS_Source/tasks.c **** 
1105:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1106:..\..\FreeRTOS_Source/tasks.c **** 	{
 495              		.loc 1 1106 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 16
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499 0000 80B5     		push	{r7, lr}
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 7, -8
 502              		.cfi_offset 14, -4
 503 0002 84B0     		sub	sp, sp, #16
 504              		.cfi_def_cfa_offset 24
 505 0004 00AF     		add	r7, sp, #0
 506              		.cfi_def_cfa_register 7
 507 0006 7860     		str	r0, [r7, #4]
1107:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
1108:..\..\FreeRTOS_Source/tasks.c **** 
1109:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 508              		.loc 1 1109 0
 509 0008 FFF7FEFF 		bl	vPortEnterCritical
1110:..\..\FreeRTOS_Source/tasks.c **** 		{
1111:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1112:..\..\FreeRTOS_Source/tasks.c **** 			being deleted. */
1113:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 510              		.loc 1 1113 0
 511 000c 7B68     		ldr	r3, [r7, #4]
 512 000e 002B     		cmp	r3, #0
 513 0010 02D1     		bne	.L23
 514              		.loc 1 1113 0 is_stmt 0 discriminator 1
 515 0012 314B     		ldr	r3, .L31
 516 0014 1B68     		ldr	r3, [r3]
 517 0016 00E0     		b	.L24
 518              	.L23:
 519              		.loc 1 1113 0 discriminator 2
 520 0018 7B68     		ldr	r3, [r7, #4]
 521              	.L24:
 522              		.loc 1 1113 0 discriminator 4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 30


 523 001a FB60     		str	r3, [r7, #12]
1114:..\..\FreeRTOS_Source/tasks.c **** 
1115:..\..\FreeRTOS_Source/tasks.c **** 			/* Remove task from the ready list. */
1116:..\..\FreeRTOS_Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 524              		.loc 1 1116 0 is_stmt 1 discriminator 4
 525 001c FB68     		ldr	r3, [r7, #12]
 526 001e 0433     		adds	r3, r3, #4
 527 0020 1846     		mov	r0, r3
 528 0022 FFF7FEFF 		bl	uxListRemove
 529 0026 0346     		mov	r3, r0
 530 0028 002B     		cmp	r3, #0
 531 002a 15D1     		bne	.L25
1117:..\..\FreeRTOS_Source/tasks.c **** 			{
1118:..\..\FreeRTOS_Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 532              		.loc 1 1118 0
 533 002c FB68     		ldr	r3, [r7, #12]
 534 002e DA6A     		ldr	r2, [r3, #44]
 535 0030 2A49     		ldr	r1, .L31+4
 536 0032 1346     		mov	r3, r2
 537 0034 9B00     		lsls	r3, r3, #2
 538 0036 1344     		add	r3, r3, r2
 539 0038 9B00     		lsls	r3, r3, #2
 540 003a 0B44     		add	r3, r3, r1
 541 003c 1B68     		ldr	r3, [r3]
 542 003e 002B     		cmp	r3, #0
 543 0040 0AD1     		bne	.L25
 544              		.loc 1 1118 0 is_stmt 0 discriminator 1
 545 0042 FB68     		ldr	r3, [r7, #12]
 546 0044 DB6A     		ldr	r3, [r3, #44]
 547 0046 1A46     		mov	r2, r3
 548 0048 0123     		movs	r3, #1
 549 004a 9340     		lsls	r3, r3, r2
 550 004c DA43     		mvns	r2, r3
 551 004e 244B     		ldr	r3, .L31+8
 552 0050 1B68     		ldr	r3, [r3]
 553 0052 1340     		ands	r3, r3, r2
 554 0054 224A     		ldr	r2, .L31+8
 555 0056 1360     		str	r3, [r2]
 556              	.L25:
1119:..\..\FreeRTOS_Source/tasks.c **** 			}
1120:..\..\FreeRTOS_Source/tasks.c **** 			else
1121:..\..\FreeRTOS_Source/tasks.c **** 			{
1122:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1123:..\..\FreeRTOS_Source/tasks.c **** 			}
1124:..\..\FreeRTOS_Source/tasks.c **** 
1125:..\..\FreeRTOS_Source/tasks.c **** 			/* Is the task waiting on an event also? */
1126:..\..\FreeRTOS_Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 557              		.loc 1 1126 0 is_stmt 1
 558 0058 FB68     		ldr	r3, [r7, #12]
 559 005a 9B6A     		ldr	r3, [r3, #40]
 560 005c 002B     		cmp	r3, #0
 561 005e 04D0     		beq	.L27
1127:..\..\FreeRTOS_Source/tasks.c **** 			{
1128:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 562              		.loc 1 1128 0
 563 0060 FB68     		ldr	r3, [r7, #12]
 564 0062 1833     		adds	r3, r3, #24
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 31


 565 0064 1846     		mov	r0, r3
 566 0066 FFF7FEFF 		bl	uxListRemove
 567              	.L27:
1129:..\..\FreeRTOS_Source/tasks.c **** 			}
1130:..\..\FreeRTOS_Source/tasks.c **** 			else
1131:..\..\FreeRTOS_Source/tasks.c **** 			{
1132:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1133:..\..\FreeRTOS_Source/tasks.c **** 			}
1134:..\..\FreeRTOS_Source/tasks.c **** 
1135:..\..\FreeRTOS_Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1136:..\..\FreeRTOS_Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1137:..\..\FreeRTOS_Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1138:..\..\FreeRTOS_Source/tasks.c **** 			not return. */
1139:..\..\FreeRTOS_Source/tasks.c **** 			uxTaskNumber++;
 568              		.loc 1 1139 0
 569 006a 1E4B     		ldr	r3, .L31+12
 570 006c 1B68     		ldr	r3, [r3]
 571 006e 0133     		adds	r3, r3, #1
 572 0070 1C4A     		ldr	r2, .L31+12
 573 0072 1360     		str	r3, [r2]
1140:..\..\FreeRTOS_Source/tasks.c **** 
1141:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 574              		.loc 1 1141 0
 575 0074 184B     		ldr	r3, .L31
 576 0076 1B68     		ldr	r3, [r3]
 577 0078 FA68     		ldr	r2, [r7, #12]
 578 007a 9A42     		cmp	r2, r3
 579 007c 0BD1     		bne	.L28
1142:..\..\FreeRTOS_Source/tasks.c **** 			{
1143:..\..\FreeRTOS_Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1144:..\..\FreeRTOS_Source/tasks.c **** 				task itself, as a context switch to another task is required.
1145:..\..\FreeRTOS_Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1146:..\..\FreeRTOS_Source/tasks.c **** 				check the termination list and free up any memory allocated by
1147:..\..\FreeRTOS_Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1148:..\..\FreeRTOS_Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 580              		.loc 1 1148 0
 581 007e FB68     		ldr	r3, [r7, #12]
 582 0080 0433     		adds	r3, r3, #4
 583 0082 1948     		ldr	r0, .L31+16
 584 0084 1946     		mov	r1, r3
 585 0086 FFF7FEFF 		bl	vListInsertEnd
1149:..\..\FreeRTOS_Source/tasks.c **** 
1150:..\..\FreeRTOS_Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1151:..\..\FreeRTOS_Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1152:..\..\FreeRTOS_Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1153:..\..\FreeRTOS_Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 586              		.loc 1 1153 0
 587 008a 184B     		ldr	r3, .L31+20
 588 008c 1B68     		ldr	r3, [r3]
 589 008e 0133     		adds	r3, r3, #1
 590 0090 164A     		ldr	r2, .L31+20
 591 0092 1360     		str	r3, [r2]
 592 0094 09E0     		b	.L29
 593              	.L28:
1154:..\..\FreeRTOS_Source/tasks.c **** 
1155:..\..\FreeRTOS_Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1156:..\..\FreeRTOS_Source/tasks.c **** 				in which Windows specific clean up operations are performed,
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 32


1157:..\..\FreeRTOS_Source/tasks.c **** 				after which it is not possible to yield away from this task -
1158:..\..\FreeRTOS_Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1159:..\..\FreeRTOS_Source/tasks.c **** 				required. */
1160:..\..\FreeRTOS_Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1161:..\..\FreeRTOS_Source/tasks.c **** 			}
1162:..\..\FreeRTOS_Source/tasks.c **** 			else
1163:..\..\FreeRTOS_Source/tasks.c **** 			{
1164:..\..\FreeRTOS_Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 594              		.loc 1 1164 0
 595 0096 164B     		ldr	r3, .L31+24
 596 0098 1B68     		ldr	r3, [r3]
 597 009a 013B     		subs	r3, r3, #1
 598 009c 144A     		ldr	r2, .L31+24
 599 009e 1360     		str	r3, [r2]
1165:..\..\FreeRTOS_Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 600              		.loc 1 1165 0
 601 00a0 F868     		ldr	r0, [r7, #12]
 602 00a2 FFF7FEFF 		bl	prvDeleteTCB
1166:..\..\FreeRTOS_Source/tasks.c **** 
1167:..\..\FreeRTOS_Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1168:..\..\FreeRTOS_Source/tasks.c **** 				the task that has just been deleted. */
1169:..\..\FreeRTOS_Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 603              		.loc 1 1169 0
 604 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 605              	.L29:
1170:..\..\FreeRTOS_Source/tasks.c **** 			}
1171:..\..\FreeRTOS_Source/tasks.c **** 
1172:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1173:..\..\FreeRTOS_Source/tasks.c **** 		}
1174:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 606              		.loc 1 1174 0
 607 00aa FFF7FEFF 		bl	vPortExitCritical
1175:..\..\FreeRTOS_Source/tasks.c **** 
1176:..\..\FreeRTOS_Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1177:..\..\FreeRTOS_Source/tasks.c **** 		been deleted. */
1178:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 608              		.loc 1 1178 0
 609 00ae 114B     		ldr	r3, .L31+28
 610 00b0 1B68     		ldr	r3, [r3]
 611 00b2 002B     		cmp	r3, #0
 612 00b4 0CD0     		beq	.L22
1179:..\..\FreeRTOS_Source/tasks.c **** 		{
1180:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 613              		.loc 1 1180 0
 614 00b6 084B     		ldr	r3, .L31
 615 00b8 1B68     		ldr	r3, [r3]
 616 00ba FA68     		ldr	r2, [r7, #12]
 617 00bc 9A42     		cmp	r2, r3
 618 00be 07D1     		bne	.L22
1181:..\..\FreeRTOS_Source/tasks.c **** 			{
1182:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1183:..\..\FreeRTOS_Source/tasks.c **** 				portYIELD_WITHIN_API();
 619              		.loc 1 1183 0
 620 00c0 0D4B     		ldr	r3, .L31+32
 621 00c2 4FF08052 		mov	r2, #268435456
 622 00c6 1A60     		str	r2, [r3]
 623              	@ 1183 "..\..\FreeRTOS_Source\tasks.c" 1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 33


 624 00c8 BFF34F8F 		dsb
 625              	@ 0 "" 2
 626              	@ 1183 "..\..\FreeRTOS_Source\tasks.c" 1
 627 00cc BFF36F8F 		isb
 628              	@ 0 "" 2
 629              		.thumb
 630              	.L22:
1184:..\..\FreeRTOS_Source/tasks.c **** 			}
1185:..\..\FreeRTOS_Source/tasks.c **** 			else
1186:..\..\FreeRTOS_Source/tasks.c **** 			{
1187:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1188:..\..\FreeRTOS_Source/tasks.c **** 			}
1189:..\..\FreeRTOS_Source/tasks.c **** 		}
1190:..\..\FreeRTOS_Source/tasks.c **** 	}
 631              		.loc 1 1190 0
 632 00d0 1037     		adds	r7, r7, #16
 633              		.cfi_def_cfa_offset 8
 634 00d2 BD46     		mov	sp, r7
 635              		.cfi_def_cfa_register 13
 636              		@ sp needed
 637 00d4 80BD     		pop	{r7, pc}
 638              	.L32:
 639 00d6 00BF     		.align	2
 640              	.L31:
 641 00d8 00000000 		.word	pxCurrentTCB
 642 00dc 04000000 		.word	pxReadyTasksLists
 643 00e0 B8000000 		.word	uxTopReadyPriority
 644 00e4 CC000000 		.word	uxTaskNumber
 645 00e8 84000000 		.word	xTasksWaitingTermination
 646 00ec 98000000 		.word	uxDeletedTasksWaitingCleanUp
 647 00f0 B0000000 		.word	uxCurrentNumberOfTasks
 648 00f4 BC000000 		.word	xSchedulerRunning
 649 00f8 04ED00E0 		.word	-536810236
 650              		.cfi_endproc
 651              	.LFE71:
 652              		.size	vTaskDelete, .-vTaskDelete
 653              		.section	.text.vTaskDelayUntil,"ax",%progbits
 654              		.align	2
 655              		.global	vTaskDelayUntil
 656              		.thumb
 657              		.thumb_func
 658              		.type	vTaskDelayUntil, %function
 659              	vTaskDelayUntil:
 660              	.LFB72:
1191:..\..\FreeRTOS_Source/tasks.c **** 
1192:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1193:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1194:..\..\FreeRTOS_Source/tasks.c **** 
1195:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1196:..\..\FreeRTOS_Source/tasks.c **** 
1197:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1198:..\..\FreeRTOS_Source/tasks.c **** 	{
 661              		.loc 1 1198 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 24
 664              		@ frame_needed = 1, uses_anonymous_args = 0
 665 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 34


 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 7, -8
 668              		.cfi_offset 14, -4
 669 0002 86B0     		sub	sp, sp, #24
 670              		.cfi_def_cfa_offset 32
 671 0004 00AF     		add	r7, sp, #0
 672              		.cfi_def_cfa_register 7
 673 0006 7860     		str	r0, [r7, #4]
 674 0008 3960     		str	r1, [r7]
1199:..\..\FreeRTOS_Source/tasks.c **** 	TickType_t xTimeToWake;
1200:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 675              		.loc 1 1200 0
 676 000a 0023     		movs	r3, #0
 677 000c 7B61     		str	r3, [r7, #20]
1201:..\..\FreeRTOS_Source/tasks.c **** 
1202:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1203:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1204:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1205:..\..\FreeRTOS_Source/tasks.c **** 
1206:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
 678              		.loc 1 1206 0
 679 000e FFF7FEFF 		bl	vTaskSuspendAll
 680              	.LBB28:
1207:..\..\FreeRTOS_Source/tasks.c **** 		{
1208:..\..\FreeRTOS_Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1209:..\..\FreeRTOS_Source/tasks.c **** 			block. */
1210:..\..\FreeRTOS_Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 681              		.loc 1 1210 0
 682 0012 214B     		ldr	r3, .L39
 683 0014 1B68     		ldr	r3, [r3]
 684 0016 3B61     		str	r3, [r7, #16]
1211:..\..\FreeRTOS_Source/tasks.c **** 
1212:..\..\FreeRTOS_Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1213:..\..\FreeRTOS_Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 685              		.loc 1 1213 0
 686 0018 7B68     		ldr	r3, [r7, #4]
 687 001a 1A68     		ldr	r2, [r3]
 688 001c 3B68     		ldr	r3, [r7]
 689 001e 1344     		add	r3, r3, r2
 690 0020 FB60     		str	r3, [r7, #12]
1214:..\..\FreeRTOS_Source/tasks.c **** 
1215:..\..\FreeRTOS_Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 691              		.loc 1 1215 0
 692 0022 7B68     		ldr	r3, [r7, #4]
 693 0024 1A68     		ldr	r2, [r3]
 694 0026 3B69     		ldr	r3, [r7, #16]
 695 0028 9A42     		cmp	r2, r3
 696 002a 0BD9     		bls	.L34
1216:..\..\FreeRTOS_Source/tasks.c **** 			{
1217:..\..\FreeRTOS_Source/tasks.c **** 				/* The tick count has overflowed since this function was
1218:..\..\FreeRTOS_Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1219:..\..\FreeRTOS_Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1220:..\..\FreeRTOS_Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1221:..\..\FreeRTOS_Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1222:..\..\FreeRTOS_Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 697              		.loc 1 1222 0
 698 002c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 35


 699 002e 1A68     		ldr	r2, [r3]
 700 0030 FB68     		ldr	r3, [r7, #12]
 701 0032 9A42     		cmp	r2, r3
 702 0034 11D9     		bls	.L35
 703              		.loc 1 1222 0 is_stmt 0 discriminator 1
 704 0036 FA68     		ldr	r2, [r7, #12]
 705 0038 3B69     		ldr	r3, [r7, #16]
 706 003a 9A42     		cmp	r2, r3
 707 003c 0DD9     		bls	.L35
1223:..\..\FreeRTOS_Source/tasks.c **** 				{
1224:..\..\FreeRTOS_Source/tasks.c **** 					xShouldDelay = pdTRUE;
 708              		.loc 1 1224 0 is_stmt 1
 709 003e 0123     		movs	r3, #1
 710 0040 7B61     		str	r3, [r7, #20]
 711 0042 0AE0     		b	.L35
 712              	.L34:
1225:..\..\FreeRTOS_Source/tasks.c **** 				}
1226:..\..\FreeRTOS_Source/tasks.c **** 				else
1227:..\..\FreeRTOS_Source/tasks.c **** 				{
1228:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1229:..\..\FreeRTOS_Source/tasks.c **** 				}
1230:..\..\FreeRTOS_Source/tasks.c **** 			}
1231:..\..\FreeRTOS_Source/tasks.c **** 			else
1232:..\..\FreeRTOS_Source/tasks.c **** 			{
1233:..\..\FreeRTOS_Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1234:..\..\FreeRTOS_Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1235:..\..\FreeRTOS_Source/tasks.c **** 				tick time is less than the wake time. */
1236:..\..\FreeRTOS_Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 713              		.loc 1 1236 0
 714 0044 7B68     		ldr	r3, [r7, #4]
 715 0046 1A68     		ldr	r2, [r3]
 716 0048 FB68     		ldr	r3, [r7, #12]
 717 004a 9A42     		cmp	r2, r3
 718 004c 03D8     		bhi	.L36
 719              		.loc 1 1236 0 is_stmt 0 discriminator 1
 720 004e FA68     		ldr	r2, [r7, #12]
 721 0050 3B69     		ldr	r3, [r7, #16]
 722 0052 9A42     		cmp	r2, r3
 723 0054 01D9     		bls	.L35
 724              	.L36:
1237:..\..\FreeRTOS_Source/tasks.c **** 				{
1238:..\..\FreeRTOS_Source/tasks.c **** 					xShouldDelay = pdTRUE;
 725              		.loc 1 1238 0 is_stmt 1
 726 0056 0123     		movs	r3, #1
 727 0058 7B61     		str	r3, [r7, #20]
 728              	.L35:
1239:..\..\FreeRTOS_Source/tasks.c **** 				}
1240:..\..\FreeRTOS_Source/tasks.c **** 				else
1241:..\..\FreeRTOS_Source/tasks.c **** 				{
1242:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1243:..\..\FreeRTOS_Source/tasks.c **** 				}
1244:..\..\FreeRTOS_Source/tasks.c **** 			}
1245:..\..\FreeRTOS_Source/tasks.c **** 
1246:..\..\FreeRTOS_Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1247:..\..\FreeRTOS_Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 729              		.loc 1 1247 0
 730 005a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 36


 731 005c FA68     		ldr	r2, [r7, #12]
 732 005e 1A60     		str	r2, [r3]
1248:..\..\FreeRTOS_Source/tasks.c **** 
1249:..\..\FreeRTOS_Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 733              		.loc 1 1249 0
 734 0060 7B69     		ldr	r3, [r7, #20]
 735 0062 002B     		cmp	r3, #0
 736 0064 06D0     		beq	.L37
1250:..\..\FreeRTOS_Source/tasks.c **** 			{
1251:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1252:..\..\FreeRTOS_Source/tasks.c **** 
1253:..\..\FreeRTOS_Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1254:..\..\FreeRTOS_Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1255:..\..\FreeRTOS_Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 737              		.loc 1 1255 0
 738 0066 FA68     		ldr	r2, [r7, #12]
 739 0068 3B69     		ldr	r3, [r7, #16]
 740 006a D31A     		subs	r3, r2, r3
 741 006c 1846     		mov	r0, r3
 742 006e 0021     		movs	r1, #0
 743 0070 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 744              	.L37:
 745              	.LBE28:
1256:..\..\FreeRTOS_Source/tasks.c **** 			}
1257:..\..\FreeRTOS_Source/tasks.c **** 			else
1258:..\..\FreeRTOS_Source/tasks.c **** 			{
1259:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1260:..\..\FreeRTOS_Source/tasks.c **** 			}
1261:..\..\FreeRTOS_Source/tasks.c **** 		}
1262:..\..\FreeRTOS_Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 746              		.loc 1 1262 0
 747 0074 FFF7FEFF 		bl	xTaskResumeAll
 748 0078 B860     		str	r0, [r7, #8]
1263:..\..\FreeRTOS_Source/tasks.c **** 
1264:..\..\FreeRTOS_Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1265:..\..\FreeRTOS_Source/tasks.c **** 		have put ourselves to sleep. */
1266:..\..\FreeRTOS_Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 749              		.loc 1 1266 0
 750 007a BB68     		ldr	r3, [r7, #8]
 751 007c 002B     		cmp	r3, #0
 752 007e 07D1     		bne	.L33
1267:..\..\FreeRTOS_Source/tasks.c **** 		{
1268:..\..\FreeRTOS_Source/tasks.c **** 			portYIELD_WITHIN_API();
 753              		.loc 1 1268 0
 754 0080 064B     		ldr	r3, .L39+4
 755 0082 4FF08052 		mov	r2, #268435456
 756 0086 1A60     		str	r2, [r3]
 757              	@ 1268 "..\..\FreeRTOS_Source\tasks.c" 1
 758 0088 BFF34F8F 		dsb
 759              	@ 0 "" 2
 760              	@ 1268 "..\..\FreeRTOS_Source\tasks.c" 1
 761 008c BFF36F8F 		isb
 762              	@ 0 "" 2
 763              		.thumb
 764              	.L33:
1269:..\..\FreeRTOS_Source/tasks.c **** 		}
1270:..\..\FreeRTOS_Source/tasks.c **** 		else
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 37


1271:..\..\FreeRTOS_Source/tasks.c **** 		{
1272:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1273:..\..\FreeRTOS_Source/tasks.c **** 		}
1274:..\..\FreeRTOS_Source/tasks.c **** 	}
 765              		.loc 1 1274 0
 766 0090 1837     		adds	r7, r7, #24
 767              		.cfi_def_cfa_offset 8
 768 0092 BD46     		mov	sp, r7
 769              		.cfi_def_cfa_register 13
 770              		@ sp needed
 771 0094 80BD     		pop	{r7, pc}
 772              	.L40:
 773 0096 00BF     		.align	2
 774              	.L39:
 775 0098 B4000000 		.word	xTickCount
 776 009c 04ED00E0 		.word	-536810236
 777              		.cfi_endproc
 778              	.LFE72:
 779              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 780              		.section	.text.vTaskDelay,"ax",%progbits
 781              		.align	2
 782              		.global	vTaskDelay
 783              		.thumb
 784              		.thumb_func
 785              		.type	vTaskDelay, %function
 786              	vTaskDelay:
 787              	.LFB73:
1275:..\..\FreeRTOS_Source/tasks.c **** 
1276:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1277:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1278:..\..\FreeRTOS_Source/tasks.c **** 
1279:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1280:..\..\FreeRTOS_Source/tasks.c **** 
1281:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1282:..\..\FreeRTOS_Source/tasks.c **** 	{
 788              		.loc 1 1282 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 16
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792 0000 80B5     		push	{r7, lr}
 793              		.cfi_def_cfa_offset 8
 794              		.cfi_offset 7, -8
 795              		.cfi_offset 14, -4
 796 0002 84B0     		sub	sp, sp, #16
 797              		.cfi_def_cfa_offset 24
 798 0004 00AF     		add	r7, sp, #0
 799              		.cfi_def_cfa_register 7
 800 0006 7860     		str	r0, [r7, #4]
1283:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 801              		.loc 1 1283 0
 802 0008 0023     		movs	r3, #0
 803 000a FB60     		str	r3, [r7, #12]
1284:..\..\FreeRTOS_Source/tasks.c **** 
1285:..\..\FreeRTOS_Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1286:..\..\FreeRTOS_Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 804              		.loc 1 1286 0
 805 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 38


 806 000e 002B     		cmp	r3, #0
 807 0010 08D0     		beq	.L42
1287:..\..\FreeRTOS_Source/tasks.c **** 		{
1288:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1289:..\..\FreeRTOS_Source/tasks.c **** 			vTaskSuspendAll();
 808              		.loc 1 1289 0
 809 0012 FFF7FEFF 		bl	vTaskSuspendAll
1290:..\..\FreeRTOS_Source/tasks.c **** 			{
1291:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_DELAY();
1292:..\..\FreeRTOS_Source/tasks.c **** 
1293:..\..\FreeRTOS_Source/tasks.c **** 				/* A task that is removed from the event list while the
1294:..\..\FreeRTOS_Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1295:..\..\FreeRTOS_Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1296:..\..\FreeRTOS_Source/tasks.c **** 				is resumed.
1297:..\..\FreeRTOS_Source/tasks.c **** 
1298:..\..\FreeRTOS_Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1299:..\..\FreeRTOS_Source/tasks.c **** 				executing task. */
1300:..\..\FreeRTOS_Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810              		.loc 1 1300 0
 811 0016 7868     		ldr	r0, [r7, #4]
 812 0018 0021     		movs	r1, #0
 813 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1301:..\..\FreeRTOS_Source/tasks.c **** 			}
1302:..\..\FreeRTOS_Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 814              		.loc 1 1302 0
 815 001e FFF7FEFF 		bl	xTaskResumeAll
 816 0022 F860     		str	r0, [r7, #12]
 817              	.L42:
1303:..\..\FreeRTOS_Source/tasks.c **** 		}
1304:..\..\FreeRTOS_Source/tasks.c **** 		else
1305:..\..\FreeRTOS_Source/tasks.c **** 		{
1306:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1307:..\..\FreeRTOS_Source/tasks.c **** 		}
1308:..\..\FreeRTOS_Source/tasks.c **** 
1309:..\..\FreeRTOS_Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1310:..\..\FreeRTOS_Source/tasks.c **** 		have put ourselves to sleep. */
1311:..\..\FreeRTOS_Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 818              		.loc 1 1311 0
 819 0024 FB68     		ldr	r3, [r7, #12]
 820 0026 002B     		cmp	r3, #0
 821 0028 07D1     		bne	.L41
1312:..\..\FreeRTOS_Source/tasks.c **** 		{
1313:..\..\FreeRTOS_Source/tasks.c **** 			portYIELD_WITHIN_API();
 822              		.loc 1 1313 0
 823 002a 054B     		ldr	r3, .L44
 824 002c 4FF08052 		mov	r2, #268435456
 825 0030 1A60     		str	r2, [r3]
 826              	@ 1313 "..\..\FreeRTOS_Source\tasks.c" 1
 827 0032 BFF34F8F 		dsb
 828              	@ 0 "" 2
 829              	@ 1313 "..\..\FreeRTOS_Source\tasks.c" 1
 830 0036 BFF36F8F 		isb
 831              	@ 0 "" 2
 832              		.thumb
 833              	.L41:
1314:..\..\FreeRTOS_Source/tasks.c **** 		}
1315:..\..\FreeRTOS_Source/tasks.c **** 		else
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 39


1316:..\..\FreeRTOS_Source/tasks.c **** 		{
1317:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1318:..\..\FreeRTOS_Source/tasks.c **** 		}
1319:..\..\FreeRTOS_Source/tasks.c **** 	}
 834              		.loc 1 1319 0
 835 003a 1037     		adds	r7, r7, #16
 836              		.cfi_def_cfa_offset 8
 837 003c BD46     		mov	sp, r7
 838              		.cfi_def_cfa_register 13
 839              		@ sp needed
 840 003e 80BD     		pop	{r7, pc}
 841              	.L45:
 842              		.align	2
 843              	.L44:
 844 0040 04ED00E0 		.word	-536810236
 845              		.cfi_endproc
 846              	.LFE73:
 847              		.size	vTaskDelay, .-vTaskDelay
 848              		.section	.text.eTaskGetState,"ax",%progbits
 849              		.align	2
 850              		.global	eTaskGetState
 851              		.thumb
 852              		.thumb_func
 853              		.type	eTaskGetState, %function
 854              	eTaskGetState:
 855              	.LFB74:
1320:..\..\FreeRTOS_Source/tasks.c **** 
1321:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1322:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1323:..\..\FreeRTOS_Source/tasks.c **** 
1324:..\..\FreeRTOS_Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1325:..\..\FreeRTOS_Source/tasks.c **** 
1326:..\..\FreeRTOS_Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1327:..\..\FreeRTOS_Source/tasks.c **** 	{
 856              		.loc 1 1327 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 32
 859              		@ frame_needed = 1, uses_anonymous_args = 0
 860 0000 80B5     		push	{r7, lr}
 861              		.cfi_def_cfa_offset 8
 862              		.cfi_offset 7, -8
 863              		.cfi_offset 14, -4
 864 0002 88B0     		sub	sp, sp, #32
 865              		.cfi_def_cfa_offset 40
 866 0004 00AF     		add	r7, sp, #0
 867              		.cfi_def_cfa_register 7
 868 0006 7860     		str	r0, [r7, #4]
1328:..\..\FreeRTOS_Source/tasks.c **** 	eTaskState eReturn;
1329:..\..\FreeRTOS_Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1330:..\..\FreeRTOS_Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 869              		.loc 1 1330 0
 870 0008 7B68     		ldr	r3, [r7, #4]
 871 000a BB61     		str	r3, [r7, #24]
1331:..\..\FreeRTOS_Source/tasks.c **** 
1332:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTCB );
1333:..\..\FreeRTOS_Source/tasks.c **** 
1334:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 40


 872              		.loc 1 1334 0
 873 000c 234B     		ldr	r3, .L59
 874 000e 1B68     		ldr	r3, [r3]
 875 0010 BA69     		ldr	r2, [r7, #24]
 876 0012 9A42     		cmp	r2, r3
 877 0014 02D1     		bne	.L47
1335:..\..\FreeRTOS_Source/tasks.c **** 		{
1336:..\..\FreeRTOS_Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1337:..\..\FreeRTOS_Source/tasks.c **** 			eReturn = eRunning;
 878              		.loc 1 1337 0
 879 0016 0023     		movs	r3, #0
 880 0018 FB77     		strb	r3, [r7, #31]
 881 001a 3AE0     		b	.L48
 882              	.L47:
1338:..\..\FreeRTOS_Source/tasks.c **** 		}
1339:..\..\FreeRTOS_Source/tasks.c **** 		else
1340:..\..\FreeRTOS_Source/tasks.c **** 		{
1341:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
 883              		.loc 1 1341 0
 884 001c FFF7FEFF 		bl	vPortEnterCritical
1342:..\..\FreeRTOS_Source/tasks.c **** 			{
1343:..\..\FreeRTOS_Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 885              		.loc 1 1343 0
 886 0020 BB69     		ldr	r3, [r7, #24]
 887 0022 5B69     		ldr	r3, [r3, #20]
 888 0024 7B61     		str	r3, [r7, #20]
1344:..\..\FreeRTOS_Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 889              		.loc 1 1344 0
 890 0026 1E4B     		ldr	r3, .L59+4
 891 0028 1B68     		ldr	r3, [r3]
 892 002a 3B61     		str	r3, [r7, #16]
1345:..\..\FreeRTOS_Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 893              		.loc 1 1345 0
 894 002c 1D4B     		ldr	r3, .L59+8
 895 002e 1B68     		ldr	r3, [r3]
 896 0030 FB60     		str	r3, [r7, #12]
1346:..\..\FreeRTOS_Source/tasks.c **** 			}
1347:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 897              		.loc 1 1347 0
 898 0032 FFF7FEFF 		bl	vPortExitCritical
1348:..\..\FreeRTOS_Source/tasks.c **** 
1349:..\..\FreeRTOS_Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 899              		.loc 1 1349 0
 900 0036 7A69     		ldr	r2, [r7, #20]
 901 0038 3B69     		ldr	r3, [r7, #16]
 902 003a 9A42     		cmp	r2, r3
 903 003c 03D0     		beq	.L49
 904              		.loc 1 1349 0 is_stmt 0 discriminator 1
 905 003e 7A69     		ldr	r2, [r7, #20]
 906 0040 FB68     		ldr	r3, [r7, #12]
 907 0042 9A42     		cmp	r2, r3
 908 0044 02D1     		bne	.L50
 909              	.L49:
1350:..\..\FreeRTOS_Source/tasks.c **** 			{
1351:..\..\FreeRTOS_Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1352:..\..\FreeRTOS_Source/tasks.c **** 				lists. */
1353:..\..\FreeRTOS_Source/tasks.c **** 				eReturn = eBlocked;
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 41


 910              		.loc 1 1353 0 is_stmt 1
 911 0046 0223     		movs	r3, #2
 912 0048 FB77     		strb	r3, [r7, #31]
 913 004a 22E0     		b	.L48
 914              	.L50:
1354:..\..\FreeRTOS_Source/tasks.c **** 			}
1355:..\..\FreeRTOS_Source/tasks.c **** 
1356:..\..\FreeRTOS_Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1357:..\..\FreeRTOS_Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 915              		.loc 1 1357 0
 916 004c 7B69     		ldr	r3, [r7, #20]
 917 004e 164A     		ldr	r2, .L59+12
 918 0050 9342     		cmp	r3, r2
 919 0052 12D1     		bne	.L51
1358:..\..\FreeRTOS_Source/tasks.c **** 				{
1359:..\..\FreeRTOS_Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1360:..\..\FreeRTOS_Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1361:..\..\FreeRTOS_Source/tasks.c **** 					indefinitely? */
1362:..\..\FreeRTOS_Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 920              		.loc 1 1362 0
 921 0054 BB69     		ldr	r3, [r7, #24]
 922 0056 9B6A     		ldr	r3, [r3, #40]
 923 0058 002B     		cmp	r3, #0
 924 005a 0BD1     		bne	.L52
1363:..\..\FreeRTOS_Source/tasks.c **** 					{
1364:..\..\FreeRTOS_Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1365:..\..\FreeRTOS_Source/tasks.c **** 						{
1366:..\..\FreeRTOS_Source/tasks.c **** 							/* The task does not appear on the event list item of
1367:..\..\FreeRTOS_Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1368:..\..\FreeRTOS_Source/tasks.c **** 							blocked state if it is waiting on its notification
1369:..\..\FreeRTOS_Source/tasks.c **** 							rather than waiting on an object. */
1370:..\..\FreeRTOS_Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 925              		.loc 1 1370 0
 926 005c BB69     		ldr	r3, [r7, #24]
 927 005e 93F84C30 		ldrb	r3, [r3, #76]
 928 0062 DBB2     		uxtb	r3, r3
 929 0064 012B     		cmp	r3, #1
 930 0066 02D1     		bne	.L53
1371:..\..\FreeRTOS_Source/tasks.c **** 							{
1372:..\..\FreeRTOS_Source/tasks.c **** 								eReturn = eBlocked;
 931              		.loc 1 1372 0
 932 0068 0223     		movs	r3, #2
 933 006a FB77     		strb	r3, [r7, #31]
 934 006c 11E0     		b	.L48
 935              	.L53:
1373:..\..\FreeRTOS_Source/tasks.c **** 							}
1374:..\..\FreeRTOS_Source/tasks.c **** 							else
1375:..\..\FreeRTOS_Source/tasks.c **** 							{
1376:..\..\FreeRTOS_Source/tasks.c **** 								eReturn = eSuspended;
 936              		.loc 1 1376 0
 937 006e 0323     		movs	r3, #3
 938 0070 FB77     		strb	r3, [r7, #31]
 939 0072 0EE0     		b	.L48
 940              	.L52:
1377:..\..\FreeRTOS_Source/tasks.c **** 							}
1378:..\..\FreeRTOS_Source/tasks.c **** 						}
1379:..\..\FreeRTOS_Source/tasks.c **** 						#else
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 42


1380:..\..\FreeRTOS_Source/tasks.c **** 						{
1381:..\..\FreeRTOS_Source/tasks.c **** 							eReturn = eSuspended;
1382:..\..\FreeRTOS_Source/tasks.c **** 						}
1383:..\..\FreeRTOS_Source/tasks.c **** 						#endif
1384:..\..\FreeRTOS_Source/tasks.c **** 					}
1385:..\..\FreeRTOS_Source/tasks.c **** 					else
1386:..\..\FreeRTOS_Source/tasks.c **** 					{
1387:..\..\FreeRTOS_Source/tasks.c **** 						eReturn = eBlocked;
 941              		.loc 1 1387 0
 942 0074 0223     		movs	r3, #2
 943 0076 FB77     		strb	r3, [r7, #31]
 944 0078 0BE0     		b	.L48
 945              	.L51:
1388:..\..\FreeRTOS_Source/tasks.c **** 					}
1389:..\..\FreeRTOS_Source/tasks.c **** 				}
1390:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1391:..\..\FreeRTOS_Source/tasks.c **** 
1392:..\..\FreeRTOS_Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1393:..\..\FreeRTOS_Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 946              		.loc 1 1393 0
 947 007a 7B69     		ldr	r3, [r7, #20]
 948 007c 0B4A     		ldr	r2, .L59+16
 949 007e 9342     		cmp	r3, r2
 950 0080 02D0     		beq	.L56
 951              		.loc 1 1393 0 is_stmt 0 discriminator 1
 952 0082 7B69     		ldr	r3, [r7, #20]
 953 0084 002B     		cmp	r3, #0
 954 0086 02D1     		bne	.L57
 955              	.L56:
1394:..\..\FreeRTOS_Source/tasks.c **** 				{
1395:..\..\FreeRTOS_Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1396:..\..\FreeRTOS_Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1397:..\..\FreeRTOS_Source/tasks.c **** 					all. */
1398:..\..\FreeRTOS_Source/tasks.c **** 					eReturn = eDeleted;
 956              		.loc 1 1398 0 is_stmt 1
 957 0088 0423     		movs	r3, #4
 958 008a FB77     		strb	r3, [r7, #31]
 959 008c 01E0     		b	.L48
 960              	.L57:
1399:..\..\FreeRTOS_Source/tasks.c **** 				}
1400:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1401:..\..\FreeRTOS_Source/tasks.c **** 
1402:..\..\FreeRTOS_Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1403:..\..\FreeRTOS_Source/tasks.c **** 			{
1404:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1405:..\..\FreeRTOS_Source/tasks.c **** 				Ready (including pending ready) state. */
1406:..\..\FreeRTOS_Source/tasks.c **** 				eReturn = eReady;
 961              		.loc 1 1406 0
 962 008e 0123     		movs	r3, #1
 963 0090 FB77     		strb	r3, [r7, #31]
 964              	.L48:
1407:..\..\FreeRTOS_Source/tasks.c **** 			}
1408:..\..\FreeRTOS_Source/tasks.c **** 		}
1409:..\..\FreeRTOS_Source/tasks.c **** 
1410:..\..\FreeRTOS_Source/tasks.c **** 		return eReturn;
 965              		.loc 1 1410 0
 966 0092 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 43


1411:..\..\FreeRTOS_Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 967              		.loc 1 1411 0
 968 0094 1846     		mov	r0, r3
 969 0096 2037     		adds	r7, r7, #32
 970              		.cfi_def_cfa_offset 8
 971 0098 BD46     		mov	sp, r7
 972              		.cfi_def_cfa_register 13
 973              		@ sp needed
 974 009a 80BD     		pop	{r7, pc}
 975              	.L60:
 976              		.align	2
 977              	.L59:
 978 009c 00000000 		.word	pxCurrentTCB
 979 00a0 68000000 		.word	pxDelayedTaskList
 980 00a4 6C000000 		.word	pxOverflowDelayedTaskList
 981 00a8 9C000000 		.word	xSuspendedTaskList
 982 00ac 84000000 		.word	xTasksWaitingTermination
 983              		.cfi_endproc
 984              	.LFE74:
 985              		.size	eTaskGetState, .-eTaskGetState
 986              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 987              		.align	2
 988              		.global	uxTaskPriorityGet
 989              		.thumb
 990              		.thumb_func
 991              		.type	uxTaskPriorityGet, %function
 992              	uxTaskPriorityGet:
 993              	.LFB75:
1412:..\..\FreeRTOS_Source/tasks.c **** 
1413:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1414:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1415:..\..\FreeRTOS_Source/tasks.c **** 
1416:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1417:..\..\FreeRTOS_Source/tasks.c **** 
1418:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1419:..\..\FreeRTOS_Source/tasks.c **** 	{
 994              		.loc 1 1419 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 16
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998 0000 80B5     		push	{r7, lr}
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 0002 84B0     		sub	sp, sp, #16
 1003              		.cfi_def_cfa_offset 24
 1004 0004 00AF     		add	r7, sp, #0
 1005              		.cfi_def_cfa_register 7
 1006 0006 7860     		str	r0, [r7, #4]
1420:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t const *pxTCB;
1421:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn;
1422:..\..\FreeRTOS_Source/tasks.c **** 
1423:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 1007              		.loc 1 1423 0
 1008 0008 FFF7FEFF 		bl	vPortEnterCritical
1424:..\..\FreeRTOS_Source/tasks.c **** 		{
1425:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 44


1426:..\..\FreeRTOS_Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1427:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1009              		.loc 1 1427 0
 1010 000c 7B68     		ldr	r3, [r7, #4]
 1011 000e 002B     		cmp	r3, #0
 1012 0010 02D1     		bne	.L62
 1013              		.loc 1 1427 0 is_stmt 0 discriminator 1
 1014 0012 074B     		ldr	r3, .L65
 1015 0014 1B68     		ldr	r3, [r3]
 1016 0016 00E0     		b	.L63
 1017              	.L62:
 1018              		.loc 1 1427 0 discriminator 2
 1019 0018 7B68     		ldr	r3, [r7, #4]
 1020              	.L63:
 1021              		.loc 1 1427 0 discriminator 4
 1022 001a FB60     		str	r3, [r7, #12]
1428:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1023              		.loc 1 1428 0 is_stmt 1 discriminator 4
 1024 001c FB68     		ldr	r3, [r7, #12]
 1025 001e DB6A     		ldr	r3, [r3, #44]
 1026 0020 BB60     		str	r3, [r7, #8]
1429:..\..\FreeRTOS_Source/tasks.c **** 		}
1430:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 1027              		.loc 1 1430 0 discriminator 4
 1028 0022 FFF7FEFF 		bl	vPortExitCritical
1431:..\..\FreeRTOS_Source/tasks.c **** 
1432:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
 1029              		.loc 1 1432 0 discriminator 4
 1030 0026 BB68     		ldr	r3, [r7, #8]
1433:..\..\FreeRTOS_Source/tasks.c **** 	}
 1031              		.loc 1 1433 0 discriminator 4
 1032 0028 1846     		mov	r0, r3
 1033 002a 1037     		adds	r7, r7, #16
 1034              		.cfi_def_cfa_offset 8
 1035 002c BD46     		mov	sp, r7
 1036              		.cfi_def_cfa_register 13
 1037              		@ sp needed
 1038 002e 80BD     		pop	{r7, pc}
 1039              	.L66:
 1040              		.align	2
 1041              	.L65:
 1042 0030 00000000 		.word	pxCurrentTCB
 1043              		.cfi_endproc
 1044              	.LFE75:
 1045              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1046              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1047              		.align	2
 1048              		.global	uxTaskPriorityGetFromISR
 1049              		.thumb
 1050              		.thumb_func
 1051              		.type	uxTaskPriorityGetFromISR, %function
 1052              	uxTaskPriorityGetFromISR:
 1053              	.LFB76:
1434:..\..\FreeRTOS_Source/tasks.c **** 
1435:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1436:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1437:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 45


1438:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1439:..\..\FreeRTOS_Source/tasks.c **** 
1440:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1441:..\..\FreeRTOS_Source/tasks.c **** 	{
 1054              		.loc 1 1441 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 32
 1057              		@ frame_needed = 1, uses_anonymous_args = 0
 1058              		@ link register save eliminated.
 1059 0000 80B4     		push	{r7}
 1060              		.cfi_def_cfa_offset 4
 1061              		.cfi_offset 7, -4
 1062 0002 89B0     		sub	sp, sp, #36
 1063              		.cfi_def_cfa_offset 40
 1064 0004 00AF     		add	r7, sp, #0
 1065              		.cfi_def_cfa_register 7
 1066 0006 7860     		str	r0, [r7, #4]
 1067              	.LBB29:
 1068              	.LBB30:
 1069              		.file 2 "..\\..\\FreeRTOS_Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 46


  38:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 47


  95:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 48


 152:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 196:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 49


 209:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1070              		.loc 2 211 0
 1071              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1072 0008 EFF31182 			mrs r2, basepri											
 1073 000c 4FF0A003 		mov r3, #160												
 1074 0010 83F31188 		msr basepri, r3											
 1075 0014 BFF36F8F 		isb														
 1076 0018 BFF34F8F 		dsb														
 1077              	
 1078              	@ 0 "" 2
 1079              		.thumb
 1080 001c 3A61     		str	r2, [r7, #16]
 1081 001e FB60     		str	r3, [r7, #12]
 212:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1082              		.loc 2 223 0
 1083 0020 3B69     		ldr	r3, [r7, #16]
 1084              	.LBE30:
 1085              	.LBE29:
1442:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t const *pxTCB;
1443:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1444:..\..\FreeRTOS_Source/tasks.c **** 
1445:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1446:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1447:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1448:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1449:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1450:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1451:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1452:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1453:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1454:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1455:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1456:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1457:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1458:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1459:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
1460:..\..\FreeRTOS_Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1461:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1462:..\..\FreeRTOS_Source/tasks.c **** 
1463:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1086              		.loc 1 1463 0
 1087 0022 FB61     		str	r3, [r7, #28]
1464:..\..\FreeRTOS_Source/tasks.c **** 		{
1465:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 50


1466:..\..\FreeRTOS_Source/tasks.c **** 			task that is being queried. */
1467:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1088              		.loc 1 1467 0
 1089 0024 7B68     		ldr	r3, [r7, #4]
 1090 0026 002B     		cmp	r3, #0
 1091 0028 02D1     		bne	.L69
 1092              		.loc 1 1467 0 is_stmt 0 discriminator 1
 1093 002a 0A4B     		ldr	r3, .L72
 1094 002c 1B68     		ldr	r3, [r3]
 1095 002e 00E0     		b	.L70
 1096              	.L69:
 1097              		.loc 1 1467 0 discriminator 2
 1098 0030 7B68     		ldr	r3, [r7, #4]
 1099              	.L70:
 1100              		.loc 1 1467 0 discriminator 4
 1101 0032 BB61     		str	r3, [r7, #24]
1468:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1102              		.loc 1 1468 0 is_stmt 1 discriminator 4
 1103 0034 BB69     		ldr	r3, [r7, #24]
 1104 0036 DB6A     		ldr	r3, [r3, #44]
 1105 0038 7B61     		str	r3, [r7, #20]
 1106 003a FB69     		ldr	r3, [r7, #28]
 1107 003c BB60     		str	r3, [r7, #8]
 1108              	.LBB31:
 1109              	.LBB32:
 224:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1110              		.loc 2 229 0 discriminator 4
 1111 003e BB68     		ldr	r3, [r7, #8]
 1112              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1113 0040 83F31188 			msr basepri, r3	
 1114              	@ 0 "" 2
 1115              		.thumb
 1116              	.LBE32:
 1117              	.LBE31:
1469:..\..\FreeRTOS_Source/tasks.c **** 		}
1470:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1471:..\..\FreeRTOS_Source/tasks.c **** 
1472:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
 1118              		.loc 1 1472 0 discriminator 4
 1119 0044 7B69     		ldr	r3, [r7, #20]
1473:..\..\FreeRTOS_Source/tasks.c **** 	}
 1120              		.loc 1 1473 0 discriminator 4
 1121 0046 1846     		mov	r0, r3
 1122 0048 2437     		adds	r7, r7, #36
 1123              		.cfi_def_cfa_offset 4
 1124 004a BD46     		mov	sp, r7
 1125              		.cfi_def_cfa_register 13
 1126              		@ sp needed
 1127 004c 5DF8047B 		ldr	r7, [sp], #4
 1128              		.cfi_restore 7
 1129              		.cfi_def_cfa_offset 0
 1130 0050 7047     		bx	lr
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 51


 1131              	.L73:
 1132 0052 00BF     		.align	2
 1133              	.L72:
 1134 0054 00000000 		.word	pxCurrentTCB
 1135              		.cfi_endproc
 1136              	.LFE76:
 1137              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1138              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1139              		.align	2
 1140              		.global	vTaskPrioritySet
 1141              		.thumb
 1142              		.thumb_func
 1143              		.type	vTaskPrioritySet, %function
 1144              	vTaskPrioritySet:
 1145              	.LFB77:
1474:..\..\FreeRTOS_Source/tasks.c **** 
1475:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1476:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1477:..\..\FreeRTOS_Source/tasks.c **** 
1478:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1479:..\..\FreeRTOS_Source/tasks.c **** 
1480:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1481:..\..\FreeRTOS_Source/tasks.c **** 	{
 1146              		.loc 1 1481 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 24
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150 0000 80B5     		push	{r7, lr}
 1151              		.cfi_def_cfa_offset 8
 1152              		.cfi_offset 7, -8
 1153              		.cfi_offset 14, -4
 1154 0002 86B0     		sub	sp, sp, #24
 1155              		.cfi_def_cfa_offset 32
 1156 0004 00AF     		add	r7, sp, #0
 1157              		.cfi_def_cfa_register 7
 1158 0006 7860     		str	r0, [r7, #4]
 1159 0008 3960     		str	r1, [r7]
1482:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
1483:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1484:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1160              		.loc 1 1484 0
 1161 000a 0023     		movs	r3, #0
 1162 000c 7B61     		str	r3, [r7, #20]
1485:..\..\FreeRTOS_Source/tasks.c **** 
1486:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1487:..\..\FreeRTOS_Source/tasks.c **** 
1488:..\..\FreeRTOS_Source/tasks.c **** 		/* Ensure the new priority is valid. */
1489:..\..\FreeRTOS_Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1163              		.loc 1 1489 0
 1164 000e 3B68     		ldr	r3, [r7]
 1165 0010 042B     		cmp	r3, #4
 1166 0012 01D9     		bls	.L75
1490:..\..\FreeRTOS_Source/tasks.c **** 		{
1491:..\..\FreeRTOS_Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1167              		.loc 1 1491 0
 1168 0014 0423     		movs	r3, #4
 1169 0016 3B60     		str	r3, [r7]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 52


 1170              	.L75:
1492:..\..\FreeRTOS_Source/tasks.c **** 		}
1493:..\..\FreeRTOS_Source/tasks.c **** 		else
1494:..\..\FreeRTOS_Source/tasks.c **** 		{
1495:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1496:..\..\FreeRTOS_Source/tasks.c **** 		}
1497:..\..\FreeRTOS_Source/tasks.c **** 
1498:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 1171              		.loc 1 1498 0
 1172 0018 FFF7FEFF 		bl	vPortEnterCritical
1499:..\..\FreeRTOS_Source/tasks.c **** 		{
1500:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1501:..\..\FreeRTOS_Source/tasks.c **** 			task that is being changed. */
1502:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1173              		.loc 1 1502 0
 1174 001c 7B68     		ldr	r3, [r7, #4]
 1175 001e 002B     		cmp	r3, #0
 1176 0020 02D1     		bne	.L76
 1177              		.loc 1 1502 0 is_stmt 0 discriminator 1
 1178 0022 414B     		ldr	r3, .L85
 1179 0024 1B68     		ldr	r3, [r3]
 1180 0026 00E0     		b	.L77
 1181              	.L76:
 1182              		.loc 1 1502 0 discriminator 2
 1183 0028 7B68     		ldr	r3, [r7, #4]
 1184              	.L77:
 1185              		.loc 1 1502 0 discriminator 4
 1186 002a 3B61     		str	r3, [r7, #16]
1503:..\..\FreeRTOS_Source/tasks.c **** 
1504:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1505:..\..\FreeRTOS_Source/tasks.c **** 
1506:..\..\FreeRTOS_Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1507:..\..\FreeRTOS_Source/tasks.c **** 			{
1508:..\..\FreeRTOS_Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1187              		.loc 1 1508 0 is_stmt 1 discriminator 4
 1188 002c 3B69     		ldr	r3, [r7, #16]
 1189 002e 1B6C     		ldr	r3, [r3, #64]
 1190 0030 FB60     		str	r3, [r7, #12]
1509:..\..\FreeRTOS_Source/tasks.c **** 			}
1510:..\..\FreeRTOS_Source/tasks.c **** 			#else
1511:..\..\FreeRTOS_Source/tasks.c **** 			{
1512:..\..\FreeRTOS_Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1513:..\..\FreeRTOS_Source/tasks.c **** 			}
1514:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1515:..\..\FreeRTOS_Source/tasks.c **** 
1516:..\..\FreeRTOS_Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1191              		.loc 1 1516 0 discriminator 4
 1192 0032 FA68     		ldr	r2, [r7, #12]
 1193 0034 3B68     		ldr	r3, [r7]
 1194 0036 9A42     		cmp	r2, r3
 1195 0038 71D0     		beq	.L78
1517:..\..\FreeRTOS_Source/tasks.c **** 			{
1518:..\..\FreeRTOS_Source/tasks.c **** 				/* The priority change may have readied a task of higher
1519:..\..\FreeRTOS_Source/tasks.c **** 				priority than the calling task. */
1520:..\..\FreeRTOS_Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1196              		.loc 1 1520 0
 1197 003a 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 53


 1198 003c FB68     		ldr	r3, [r7, #12]
 1199 003e 9A42     		cmp	r2, r3
 1200 0040 0DD9     		bls	.L79
1521:..\..\FreeRTOS_Source/tasks.c **** 				{
1522:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1201              		.loc 1 1522 0
 1202 0042 394B     		ldr	r3, .L85
 1203 0044 1B68     		ldr	r3, [r3]
 1204 0046 3A69     		ldr	r2, [r7, #16]
 1205 0048 9A42     		cmp	r2, r3
 1206 004a 0FD0     		beq	.L80
1523:..\..\FreeRTOS_Source/tasks.c **** 					{
1524:..\..\FreeRTOS_Source/tasks.c **** 						/* The priority of a task other than the currently
1525:..\..\FreeRTOS_Source/tasks.c **** 						running task is being raised.  Is the priority being
1526:..\..\FreeRTOS_Source/tasks.c **** 						raised above that of the running task? */
1527:..\..\FreeRTOS_Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1207              		.loc 1 1527 0
 1208 004c 364B     		ldr	r3, .L85
 1209 004e 1B68     		ldr	r3, [r3]
 1210 0050 DA6A     		ldr	r2, [r3, #44]
 1211 0052 3B68     		ldr	r3, [r7]
 1212 0054 9A42     		cmp	r2, r3
 1213 0056 09D8     		bhi	.L80
1528:..\..\FreeRTOS_Source/tasks.c **** 						{
1529:..\..\FreeRTOS_Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1214              		.loc 1 1529 0
 1215 0058 0123     		movs	r3, #1
 1216 005a 7B61     		str	r3, [r7, #20]
 1217 005c 06E0     		b	.L80
 1218              	.L79:
1530:..\..\FreeRTOS_Source/tasks.c **** 						}
1531:..\..\FreeRTOS_Source/tasks.c **** 						else
1532:..\..\FreeRTOS_Source/tasks.c **** 						{
1533:..\..\FreeRTOS_Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1534:..\..\FreeRTOS_Source/tasks.c **** 						}
1535:..\..\FreeRTOS_Source/tasks.c **** 					}
1536:..\..\FreeRTOS_Source/tasks.c **** 					else
1537:..\..\FreeRTOS_Source/tasks.c **** 					{
1538:..\..\FreeRTOS_Source/tasks.c **** 						/* The priority of the running task is being raised,
1539:..\..\FreeRTOS_Source/tasks.c **** 						but the running task must already be the highest
1540:..\..\FreeRTOS_Source/tasks.c **** 						priority task able to run so no yield is required. */
1541:..\..\FreeRTOS_Source/tasks.c **** 					}
1542:..\..\FreeRTOS_Source/tasks.c **** 				}
1543:..\..\FreeRTOS_Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1219              		.loc 1 1543 0
 1220 005e 324B     		ldr	r3, .L85
 1221 0060 1B68     		ldr	r3, [r3]
 1222 0062 3A69     		ldr	r2, [r7, #16]
 1223 0064 9A42     		cmp	r2, r3
 1224 0066 01D1     		bne	.L80
1544:..\..\FreeRTOS_Source/tasks.c **** 				{
1545:..\..\FreeRTOS_Source/tasks.c **** 					/* Setting the priority of the running task down means
1546:..\..\FreeRTOS_Source/tasks.c **** 					there may now be another task of higher priority that
1547:..\..\FreeRTOS_Source/tasks.c **** 					is ready to execute. */
1548:..\..\FreeRTOS_Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1225              		.loc 1 1548 0
 1226 0068 0123     		movs	r3, #1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 54


 1227 006a 7B61     		str	r3, [r7, #20]
 1228              	.L80:
1549:..\..\FreeRTOS_Source/tasks.c **** 				}
1550:..\..\FreeRTOS_Source/tasks.c **** 				else
1551:..\..\FreeRTOS_Source/tasks.c **** 				{
1552:..\..\FreeRTOS_Source/tasks.c **** 					/* Setting the priority of any other task down does not
1553:..\..\FreeRTOS_Source/tasks.c **** 					require a yield as the running task must be above the
1554:..\..\FreeRTOS_Source/tasks.c **** 					new priority of the task being modified. */
1555:..\..\FreeRTOS_Source/tasks.c **** 				}
1556:..\..\FreeRTOS_Source/tasks.c **** 
1557:..\..\FreeRTOS_Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1558:..\..\FreeRTOS_Source/tasks.c **** 				before its uxPriority member is changed so the
1559:..\..\FreeRTOS_Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1560:..\..\FreeRTOS_Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1229              		.loc 1 1560 0
 1230 006c 3B69     		ldr	r3, [r7, #16]
 1231 006e DB6A     		ldr	r3, [r3, #44]
 1232 0070 BB60     		str	r3, [r7, #8]
1561:..\..\FreeRTOS_Source/tasks.c **** 
1562:..\..\FreeRTOS_Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1563:..\..\FreeRTOS_Source/tasks.c **** 				{
1564:..\..\FreeRTOS_Source/tasks.c **** 					/* Only change the priority being used if the task is not
1565:..\..\FreeRTOS_Source/tasks.c **** 					currently using an inherited priority. */
1566:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1233              		.loc 1 1566 0
 1234 0072 3B69     		ldr	r3, [r7, #16]
 1235 0074 1A6C     		ldr	r2, [r3, #64]
 1236 0076 3B69     		ldr	r3, [r7, #16]
 1237 0078 DB6A     		ldr	r3, [r3, #44]
 1238 007a 9A42     		cmp	r2, r3
 1239 007c 02D1     		bne	.L81
1567:..\..\FreeRTOS_Source/tasks.c **** 					{
1568:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1240              		.loc 1 1568 0
 1241 007e 3B69     		ldr	r3, [r7, #16]
 1242 0080 3A68     		ldr	r2, [r7]
 1243 0082 DA62     		str	r2, [r3, #44]
 1244              	.L81:
1569:..\..\FreeRTOS_Source/tasks.c **** 					}
1570:..\..\FreeRTOS_Source/tasks.c **** 					else
1571:..\..\FreeRTOS_Source/tasks.c **** 					{
1572:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1573:..\..\FreeRTOS_Source/tasks.c **** 					}
1574:..\..\FreeRTOS_Source/tasks.c **** 
1575:..\..\FreeRTOS_Source/tasks.c **** 					/* The base priority gets set whatever. */
1576:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1245              		.loc 1 1576 0
 1246 0084 3B69     		ldr	r3, [r7, #16]
 1247 0086 3A68     		ldr	r2, [r7]
 1248 0088 1A64     		str	r2, [r3, #64]
1577:..\..\FreeRTOS_Source/tasks.c **** 				}
1578:..\..\FreeRTOS_Source/tasks.c **** 				#else
1579:..\..\FreeRTOS_Source/tasks.c **** 				{
1580:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1581:..\..\FreeRTOS_Source/tasks.c **** 				}
1582:..\..\FreeRTOS_Source/tasks.c **** 				#endif
1583:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 55


1584:..\..\FreeRTOS_Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1585:..\..\FreeRTOS_Source/tasks.c **** 				being used for anything else. */
1586:..\..\FreeRTOS_Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1249              		.loc 1 1586 0
 1250 008a 3B69     		ldr	r3, [r7, #16]
 1251 008c 9B69     		ldr	r3, [r3, #24]
 1252 008e 002B     		cmp	r3, #0
 1253 0090 04DB     		blt	.L82
1587:..\..\FreeRTOS_Source/tasks.c **** 				{
1588:..\..\FreeRTOS_Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1254              		.loc 1 1588 0
 1255 0092 3B68     		ldr	r3, [r7]
 1256 0094 C3F10502 		rsb	r2, r3, #5
 1257 0098 3B69     		ldr	r3, [r7, #16]
 1258 009a 9A61     		str	r2, [r3, #24]
 1259              	.L82:
1589:..\..\FreeRTOS_Source/tasks.c **** 				}
1590:..\..\FreeRTOS_Source/tasks.c **** 				else
1591:..\..\FreeRTOS_Source/tasks.c **** 				{
1592:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1593:..\..\FreeRTOS_Source/tasks.c **** 				}
1594:..\..\FreeRTOS_Source/tasks.c **** 
1595:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1596:..\..\FreeRTOS_Source/tasks.c **** 				nothing more than change its priority variable. However, if
1597:..\..\FreeRTOS_Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1598:..\..\FreeRTOS_Source/tasks.c **** 				in the list appropriate to its new priority. */
1599:..\..\FreeRTOS_Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1260              		.loc 1 1599 0
 1261 009c 3B69     		ldr	r3, [r7, #16]
 1262 009e 5969     		ldr	r1, [r3, #20]
 1263 00a0 BA68     		ldr	r2, [r7, #8]
 1264 00a2 1346     		mov	r3, r2
 1265 00a4 9B00     		lsls	r3, r3, #2
 1266 00a6 1344     		add	r3, r3, r2
 1267 00a8 9B00     		lsls	r3, r3, #2
 1268 00aa 204A     		ldr	r2, .L85+4
 1269 00ac 1344     		add	r3, r3, r2
 1270 00ae 9942     		cmp	r1, r3
 1271 00b0 2AD1     		bne	.L83
1600:..\..\FreeRTOS_Source/tasks.c **** 				{
1601:..\..\FreeRTOS_Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1602:..\..\FreeRTOS_Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1603:..\..\FreeRTOS_Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1604:..\..\FreeRTOS_Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1272              		.loc 1 1604 0
 1273 00b2 3B69     		ldr	r3, [r7, #16]
 1274 00b4 0433     		adds	r3, r3, #4
 1275 00b6 1846     		mov	r0, r3
 1276 00b8 FFF7FEFF 		bl	uxListRemove
 1277 00bc 0346     		mov	r3, r0
 1278 00be 002B     		cmp	r3, #0
 1279 00c0 09D1     		bne	.L84
1605:..\..\FreeRTOS_Source/tasks.c **** 					{
1606:..\..\FreeRTOS_Source/tasks.c **** 						/* It is known that the task is in its ready list so
1607:..\..\FreeRTOS_Source/tasks.c **** 						there is no need to check again and the port level
1608:..\..\FreeRTOS_Source/tasks.c **** 						reset macro can be called directly. */
1609:..\..\FreeRTOS_Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 56


 1280              		.loc 1 1609 0
 1281 00c2 BB68     		ldr	r3, [r7, #8]
 1282 00c4 0122     		movs	r2, #1
 1283 00c6 02FA03F3 		lsl	r3, r2, r3
 1284 00ca DA43     		mvns	r2, r3
 1285 00cc 184B     		ldr	r3, .L85+8
 1286 00ce 1B68     		ldr	r3, [r3]
 1287 00d0 1340     		ands	r3, r3, r2
 1288 00d2 174A     		ldr	r2, .L85+8
 1289 00d4 1360     		str	r3, [r2]
 1290              	.L84:
1610:..\..\FreeRTOS_Source/tasks.c **** 					}
1611:..\..\FreeRTOS_Source/tasks.c **** 					else
1612:..\..\FreeRTOS_Source/tasks.c **** 					{
1613:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1614:..\..\FreeRTOS_Source/tasks.c **** 					}
1615:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1291              		.loc 1 1615 0
 1292 00d6 3B69     		ldr	r3, [r7, #16]
 1293 00d8 DB6A     		ldr	r3, [r3, #44]
 1294 00da 1A46     		mov	r2, r3
 1295 00dc 0123     		movs	r3, #1
 1296 00de 03FA02F2 		lsl	r2, r3, r2
 1297 00e2 134B     		ldr	r3, .L85+8
 1298 00e4 1B68     		ldr	r3, [r3]
 1299 00e6 1343     		orrs	r3, r3, r2
 1300 00e8 114A     		ldr	r2, .L85+8
 1301 00ea 1360     		str	r3, [r2]
 1302 00ec 3B69     		ldr	r3, [r7, #16]
 1303 00ee DA6A     		ldr	r2, [r3, #44]
 1304 00f0 1346     		mov	r3, r2
 1305 00f2 9B00     		lsls	r3, r3, #2
 1306 00f4 1344     		add	r3, r3, r2
 1307 00f6 9B00     		lsls	r3, r3, #2
 1308 00f8 0C4A     		ldr	r2, .L85+4
 1309 00fa 1A44     		add	r2, r2, r3
 1310 00fc 3B69     		ldr	r3, [r7, #16]
 1311 00fe 0433     		adds	r3, r3, #4
 1312 0100 1046     		mov	r0, r2
 1313 0102 1946     		mov	r1, r3
 1314 0104 FFF7FEFF 		bl	vListInsertEnd
 1315              	.L83:
1616:..\..\FreeRTOS_Source/tasks.c **** 				}
1617:..\..\FreeRTOS_Source/tasks.c **** 				else
1618:..\..\FreeRTOS_Source/tasks.c **** 				{
1619:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1620:..\..\FreeRTOS_Source/tasks.c **** 				}
1621:..\..\FreeRTOS_Source/tasks.c **** 
1622:..\..\FreeRTOS_Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1316              		.loc 1 1622 0
 1317 0108 7B69     		ldr	r3, [r7, #20]
 1318 010a 002B     		cmp	r3, #0
 1319 010c 07D0     		beq	.L78
1623:..\..\FreeRTOS_Source/tasks.c **** 				{
1624:..\..\FreeRTOS_Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1320              		.loc 1 1624 0
 1321 010e 094B     		ldr	r3, .L85+12
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 57


 1322 0110 4FF08052 		mov	r2, #268435456
 1323 0114 1A60     		str	r2, [r3]
 1324              	@ 1624 "..\..\FreeRTOS_Source\tasks.c" 1
 1325 0116 BFF34F8F 		dsb
 1326              	@ 0 "" 2
 1327              	@ 1624 "..\..\FreeRTOS_Source\tasks.c" 1
 1328 011a BFF36F8F 		isb
 1329              	@ 0 "" 2
 1330              		.thumb
 1331              	.L78:
1625:..\..\FreeRTOS_Source/tasks.c **** 				}
1626:..\..\FreeRTOS_Source/tasks.c **** 				else
1627:..\..\FreeRTOS_Source/tasks.c **** 				{
1628:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1629:..\..\FreeRTOS_Source/tasks.c **** 				}
1630:..\..\FreeRTOS_Source/tasks.c **** 
1631:..\..\FreeRTOS_Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1632:..\..\FreeRTOS_Source/tasks.c **** 				optimised task selection is not being used. */
1633:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1634:..\..\FreeRTOS_Source/tasks.c **** 			}
1635:..\..\FreeRTOS_Source/tasks.c **** 		}
1636:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 1332              		.loc 1 1636 0
 1333 011e FFF7FEFF 		bl	vPortExitCritical
1637:..\..\FreeRTOS_Source/tasks.c **** 	}
 1334              		.loc 1 1637 0
 1335 0122 1837     		adds	r7, r7, #24
 1336              		.cfi_def_cfa_offset 8
 1337 0124 BD46     		mov	sp, r7
 1338              		.cfi_def_cfa_register 13
 1339              		@ sp needed
 1340 0126 80BD     		pop	{r7, pc}
 1341              	.L86:
 1342              		.align	2
 1343              	.L85:
 1344 0128 00000000 		.word	pxCurrentTCB
 1345 012c 04000000 		.word	pxReadyTasksLists
 1346 0130 B8000000 		.word	uxTopReadyPriority
 1347 0134 04ED00E0 		.word	-536810236
 1348              		.cfi_endproc
 1349              	.LFE77:
 1350              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1351              		.section	.text.vTaskSuspend,"ax",%progbits
 1352              		.align	2
 1353              		.global	vTaskSuspend
 1354              		.thumb
 1355              		.thumb_func
 1356              		.type	vTaskSuspend, %function
 1357              	vTaskSuspend:
 1358              	.LFB78:
1638:..\..\FreeRTOS_Source/tasks.c **** 
1639:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1640:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1641:..\..\FreeRTOS_Source/tasks.c **** 
1642:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1643:..\..\FreeRTOS_Source/tasks.c **** 
1644:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 58


1645:..\..\FreeRTOS_Source/tasks.c **** 	{
 1359              		.loc 1 1645 0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 16
 1362              		@ frame_needed = 1, uses_anonymous_args = 0
 1363 0000 80B5     		push	{r7, lr}
 1364              		.cfi_def_cfa_offset 8
 1365              		.cfi_offset 7, -8
 1366              		.cfi_offset 14, -4
 1367 0002 84B0     		sub	sp, sp, #16
 1368              		.cfi_def_cfa_offset 24
 1369 0004 00AF     		add	r7, sp, #0
 1370              		.cfi_def_cfa_register 7
 1371 0006 7860     		str	r0, [r7, #4]
1646:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
1647:..\..\FreeRTOS_Source/tasks.c **** 
1648:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 1372              		.loc 1 1648 0
 1373 0008 FFF7FEFF 		bl	vPortEnterCritical
1649:..\..\FreeRTOS_Source/tasks.c **** 		{
1650:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1651:..\..\FreeRTOS_Source/tasks.c **** 			being suspended. */
1652:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1374              		.loc 1 1652 0
 1375 000c 7B68     		ldr	r3, [r7, #4]
 1376 000e 002B     		cmp	r3, #0
 1377 0010 02D1     		bne	.L88
 1378              		.loc 1 1652 0 is_stmt 0 discriminator 1
 1379 0012 344B     		ldr	r3, .L99
 1380 0014 1B68     		ldr	r3, [r3]
 1381 0016 00E0     		b	.L89
 1382              	.L88:
 1383              		.loc 1 1652 0 discriminator 2
 1384 0018 7B68     		ldr	r3, [r7, #4]
 1385              	.L89:
 1386              		.loc 1 1652 0 discriminator 4
 1387 001a FB60     		str	r3, [r7, #12]
1653:..\..\FreeRTOS_Source/tasks.c **** 
1654:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1655:..\..\FreeRTOS_Source/tasks.c **** 
1656:..\..\FreeRTOS_Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1657:..\..\FreeRTOS_Source/tasks.c **** 			suspended list. */
1658:..\..\FreeRTOS_Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1388              		.loc 1 1658 0 is_stmt 1 discriminator 4
 1389 001c FB68     		ldr	r3, [r7, #12]
 1390 001e 0433     		adds	r3, r3, #4
 1391 0020 1846     		mov	r0, r3
 1392 0022 FFF7FEFF 		bl	uxListRemove
 1393 0026 0346     		mov	r3, r0
 1394 0028 002B     		cmp	r3, #0
 1395 002a 15D1     		bne	.L90
1659:..\..\FreeRTOS_Source/tasks.c **** 			{
1660:..\..\FreeRTOS_Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1396              		.loc 1 1660 0
 1397 002c FB68     		ldr	r3, [r7, #12]
 1398 002e DA6A     		ldr	r2, [r3, #44]
 1399 0030 2D49     		ldr	r1, .L99+4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 59


 1400 0032 1346     		mov	r3, r2
 1401 0034 9B00     		lsls	r3, r3, #2
 1402 0036 1344     		add	r3, r3, r2
 1403 0038 9B00     		lsls	r3, r3, #2
 1404 003a 0B44     		add	r3, r3, r1
 1405 003c 1B68     		ldr	r3, [r3]
 1406 003e 002B     		cmp	r3, #0
 1407 0040 0AD1     		bne	.L90
 1408              		.loc 1 1660 0 is_stmt 0 discriminator 1
 1409 0042 FB68     		ldr	r3, [r7, #12]
 1410 0044 DB6A     		ldr	r3, [r3, #44]
 1411 0046 1A46     		mov	r2, r3
 1412 0048 0123     		movs	r3, #1
 1413 004a 9340     		lsls	r3, r3, r2
 1414 004c DA43     		mvns	r2, r3
 1415 004e 274B     		ldr	r3, .L99+8
 1416 0050 1B68     		ldr	r3, [r3]
 1417 0052 1340     		ands	r3, r3, r2
 1418 0054 254A     		ldr	r2, .L99+8
 1419 0056 1360     		str	r3, [r2]
 1420              	.L90:
1661:..\..\FreeRTOS_Source/tasks.c **** 			}
1662:..\..\FreeRTOS_Source/tasks.c **** 			else
1663:..\..\FreeRTOS_Source/tasks.c **** 			{
1664:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1665:..\..\FreeRTOS_Source/tasks.c **** 			}
1666:..\..\FreeRTOS_Source/tasks.c **** 
1667:..\..\FreeRTOS_Source/tasks.c **** 			/* Is the task waiting on an event also? */
1668:..\..\FreeRTOS_Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1421              		.loc 1 1668 0 is_stmt 1
 1422 0058 FB68     		ldr	r3, [r7, #12]
 1423 005a 9B6A     		ldr	r3, [r3, #40]
 1424 005c 002B     		cmp	r3, #0
 1425 005e 04D0     		beq	.L92
1669:..\..\FreeRTOS_Source/tasks.c **** 			{
1670:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1426              		.loc 1 1670 0
 1427 0060 FB68     		ldr	r3, [r7, #12]
 1428 0062 1833     		adds	r3, r3, #24
 1429 0064 1846     		mov	r0, r3
 1430 0066 FFF7FEFF 		bl	uxListRemove
 1431              	.L92:
1671:..\..\FreeRTOS_Source/tasks.c **** 			}
1672:..\..\FreeRTOS_Source/tasks.c **** 			else
1673:..\..\FreeRTOS_Source/tasks.c **** 			{
1674:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1675:..\..\FreeRTOS_Source/tasks.c **** 			}
1676:..\..\FreeRTOS_Source/tasks.c **** 
1677:..\..\FreeRTOS_Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1432              		.loc 1 1677 0
 1433 006a FB68     		ldr	r3, [r7, #12]
 1434 006c 0433     		adds	r3, r3, #4
 1435 006e 2048     		ldr	r0, .L99+12
 1436 0070 1946     		mov	r1, r3
 1437 0072 FFF7FEFF 		bl	vListInsertEnd
1678:..\..\FreeRTOS_Source/tasks.c **** 
1679:..\..\FreeRTOS_Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 60


1680:..\..\FreeRTOS_Source/tasks.c **** 			{
1681:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1438              		.loc 1 1681 0
 1439 0076 FB68     		ldr	r3, [r7, #12]
 1440 0078 93F84C30 		ldrb	r3, [r3, #76]
 1441 007c DBB2     		uxtb	r3, r3
 1442 007e 012B     		cmp	r3, #1
 1443 0080 03D1     		bne	.L93
1682:..\..\FreeRTOS_Source/tasks.c **** 				{
1683:..\..\FreeRTOS_Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1684:..\..\FreeRTOS_Source/tasks.c **** 					now suspended, so no notification was received. */
1685:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1444              		.loc 1 1685 0
 1445 0082 FB68     		ldr	r3, [r7, #12]
 1446 0084 0022     		movs	r2, #0
 1447 0086 83F84C20 		strb	r2, [r3, #76]
 1448              	.L93:
1686:..\..\FreeRTOS_Source/tasks.c **** 				}
1687:..\..\FreeRTOS_Source/tasks.c **** 			}
1688:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1689:..\..\FreeRTOS_Source/tasks.c **** 		}
1690:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 1449              		.loc 1 1690 0
 1450 008a FFF7FEFF 		bl	vPortExitCritical
1691:..\..\FreeRTOS_Source/tasks.c **** 
1692:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1451              		.loc 1 1692 0
 1452 008e 194B     		ldr	r3, .L99+16
 1453 0090 1B68     		ldr	r3, [r3]
 1454 0092 002B     		cmp	r3, #0
 1455 0094 05D0     		beq	.L94
1693:..\..\FreeRTOS_Source/tasks.c **** 		{
1694:..\..\FreeRTOS_Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1695:..\..\FreeRTOS_Source/tasks.c **** 			task that is now in the Suspended state. */
1696:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
 1456              		.loc 1 1696 0
 1457 0096 FFF7FEFF 		bl	vPortEnterCritical
1697:..\..\FreeRTOS_Source/tasks.c **** 			{
1698:..\..\FreeRTOS_Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1458              		.loc 1 1698 0
 1459 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1699:..\..\FreeRTOS_Source/tasks.c **** 			}
1700:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 1460              		.loc 1 1700 0
 1461 009e FFF7FEFF 		bl	vPortExitCritical
 1462              	.L94:
1701:..\..\FreeRTOS_Source/tasks.c **** 		}
1702:..\..\FreeRTOS_Source/tasks.c **** 		else
1703:..\..\FreeRTOS_Source/tasks.c **** 		{
1704:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1705:..\..\FreeRTOS_Source/tasks.c **** 		}
1706:..\..\FreeRTOS_Source/tasks.c **** 
1707:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1463              		.loc 1 1707 0
 1464 00a2 104B     		ldr	r3, .L99
 1465 00a4 1B68     		ldr	r3, [r3]
 1466 00a6 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 61


 1467 00a8 9A42     		cmp	r2, r3
 1468 00aa 18D1     		bne	.L87
1708:..\..\FreeRTOS_Source/tasks.c **** 		{
1709:..\..\FreeRTOS_Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1469              		.loc 1 1709 0
 1470 00ac 114B     		ldr	r3, .L99+16
 1471 00ae 1B68     		ldr	r3, [r3]
 1472 00b0 002B     		cmp	r3, #0
 1473 00b2 08D0     		beq	.L96
1710:..\..\FreeRTOS_Source/tasks.c **** 			{
1711:..\..\FreeRTOS_Source/tasks.c **** 				/* The current task has just been suspended. */
1712:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1713:..\..\FreeRTOS_Source/tasks.c **** 				portYIELD_WITHIN_API();
 1474              		.loc 1 1713 0
 1475 00b4 104B     		ldr	r3, .L99+20
 1476 00b6 4FF08052 		mov	r2, #268435456
 1477 00ba 1A60     		str	r2, [r3]
 1478              	@ 1713 "..\..\FreeRTOS_Source\tasks.c" 1
 1479 00bc BFF34F8F 		dsb
 1480              	@ 0 "" 2
 1481              	@ 1713 "..\..\FreeRTOS_Source\tasks.c" 1
 1482 00c0 BFF36F8F 		isb
 1483              	@ 0 "" 2
 1484              		.thumb
 1485 00c4 0BE0     		b	.L87
 1486              	.L96:
1714:..\..\FreeRTOS_Source/tasks.c **** 			}
1715:..\..\FreeRTOS_Source/tasks.c **** 			else
1716:..\..\FreeRTOS_Source/tasks.c **** 			{
1717:..\..\FreeRTOS_Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1718:..\..\FreeRTOS_Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1719:..\..\FreeRTOS_Source/tasks.c **** 				must be adjusted to point to a different task. */
1720:..\..\FreeRTOS_Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
 1487              		.loc 1 1720 0
 1488 00c6 0A4B     		ldr	r3, .L99+12
 1489 00c8 1A68     		ldr	r2, [r3]
 1490 00ca 0C4B     		ldr	r3, .L99+24
 1491 00cc 1B68     		ldr	r3, [r3]
 1492 00ce 9A42     		cmp	r2, r3
 1493 00d0 03D1     		bne	.L98
1721:..\..\FreeRTOS_Source/tasks.c **** 				{
1722:..\..\FreeRTOS_Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1723:..\..\FreeRTOS_Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1724:..\..\FreeRTOS_Source/tasks.c **** 					be set to point to it no matter what its relative priority
1725:..\..\FreeRTOS_Source/tasks.c **** 					is. */
1726:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB = NULL;
 1494              		.loc 1 1726 0
 1495 00d2 044B     		ldr	r3, .L99
 1496 00d4 0022     		movs	r2, #0
 1497 00d6 1A60     		str	r2, [r3]
 1498 00d8 01E0     		b	.L87
 1499              	.L98:
1727:..\..\FreeRTOS_Source/tasks.c **** 				}
1728:..\..\FreeRTOS_Source/tasks.c **** 				else
1729:..\..\FreeRTOS_Source/tasks.c **** 				{
1730:..\..\FreeRTOS_Source/tasks.c **** 					vTaskSwitchContext();
 1500              		.loc 1 1730 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 62


 1501 00da FFF7FEFF 		bl	vTaskSwitchContext
 1502              	.L87:
1731:..\..\FreeRTOS_Source/tasks.c **** 				}
1732:..\..\FreeRTOS_Source/tasks.c **** 			}
1733:..\..\FreeRTOS_Source/tasks.c **** 		}
1734:..\..\FreeRTOS_Source/tasks.c **** 		else
1735:..\..\FreeRTOS_Source/tasks.c **** 		{
1736:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1737:..\..\FreeRTOS_Source/tasks.c **** 		}
1738:..\..\FreeRTOS_Source/tasks.c **** 	}
 1503              		.loc 1 1738 0
 1504 00de 1037     		adds	r7, r7, #16
 1505              		.cfi_def_cfa_offset 8
 1506 00e0 BD46     		mov	sp, r7
 1507              		.cfi_def_cfa_register 13
 1508              		@ sp needed
 1509 00e2 80BD     		pop	{r7, pc}
 1510              	.L100:
 1511              		.align	2
 1512              	.L99:
 1513 00e4 00000000 		.word	pxCurrentTCB
 1514 00e8 04000000 		.word	pxReadyTasksLists
 1515 00ec B8000000 		.word	uxTopReadyPriority
 1516 00f0 9C000000 		.word	xSuspendedTaskList
 1517 00f4 BC000000 		.word	xSchedulerRunning
 1518 00f8 04ED00E0 		.word	-536810236
 1519 00fc B0000000 		.word	uxCurrentNumberOfTasks
 1520              		.cfi_endproc
 1521              	.LFE78:
 1522              		.size	vTaskSuspend, .-vTaskSuspend
 1523              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1524              		.align	2
 1525              		.thumb
 1526              		.thumb_func
 1527              		.type	prvTaskIsTaskSuspended, %function
 1528              	prvTaskIsTaskSuspended:
 1529              	.LFB79:
1739:..\..\FreeRTOS_Source/tasks.c **** 
1740:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1741:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1742:..\..\FreeRTOS_Source/tasks.c **** 
1743:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1744:..\..\FreeRTOS_Source/tasks.c **** 
1745:..\..\FreeRTOS_Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1746:..\..\FreeRTOS_Source/tasks.c **** 	{
 1530              		.loc 1 1746 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 16
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534              		@ link register save eliminated.
 1535 0000 80B4     		push	{r7}
 1536              		.cfi_def_cfa_offset 4
 1537              		.cfi_offset 7, -4
 1538 0002 85B0     		sub	sp, sp, #20
 1539              		.cfi_def_cfa_offset 24
 1540 0004 00AF     		add	r7, sp, #0
 1541              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 63


 1542 0006 7860     		str	r0, [r7, #4]
1747:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1543              		.loc 1 1747 0
 1544 0008 0023     		movs	r3, #0
 1545 000a FB60     		str	r3, [r7, #12]
1748:..\..\FreeRTOS_Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1546              		.loc 1 1748 0
 1547 000c 7B68     		ldr	r3, [r7, #4]
 1548 000e BB60     		str	r3, [r7, #8]
1749:..\..\FreeRTOS_Source/tasks.c **** 
1750:..\..\FreeRTOS_Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1751:..\..\FreeRTOS_Source/tasks.c **** 		section. */
1752:..\..\FreeRTOS_Source/tasks.c **** 
1753:..\..\FreeRTOS_Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1754:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTask );
1755:..\..\FreeRTOS_Source/tasks.c **** 
1756:..\..\FreeRTOS_Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1757:..\..\FreeRTOS_Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1549              		.loc 1 1757 0
 1550 0010 BB68     		ldr	r3, [r7, #8]
 1551 0012 5B69     		ldr	r3, [r3, #20]
 1552 0014 0A4A     		ldr	r2, .L104
 1553 0016 9342     		cmp	r3, r2
 1554 0018 0AD1     		bne	.L102
1758:..\..\FreeRTOS_Source/tasks.c **** 		{
1759:..\..\FreeRTOS_Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1760:..\..\FreeRTOS_Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1555              		.loc 1 1760 0
 1556 001a BB68     		ldr	r3, [r7, #8]
 1557 001c 9B6A     		ldr	r3, [r3, #40]
 1558 001e 094A     		ldr	r2, .L104+4
 1559 0020 9342     		cmp	r3, r2
 1560 0022 05D0     		beq	.L102
1761:..\..\FreeRTOS_Source/tasks.c **** 			{
1762:..\..\FreeRTOS_Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1763:..\..\FreeRTOS_Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1764:..\..\FreeRTOS_Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1561              		.loc 1 1764 0
 1562 0024 BB68     		ldr	r3, [r7, #8]
 1563 0026 9B6A     		ldr	r3, [r3, #40]
 1564 0028 002B     		cmp	r3, #0
 1565 002a 01D1     		bne	.L102
1765:..\..\FreeRTOS_Source/tasks.c **** 				{
1766:..\..\FreeRTOS_Source/tasks.c **** 					xReturn = pdTRUE;
 1566              		.loc 1 1766 0
 1567 002c 0123     		movs	r3, #1
 1568 002e FB60     		str	r3, [r7, #12]
 1569              	.L102:
1767:..\..\FreeRTOS_Source/tasks.c **** 				}
1768:..\..\FreeRTOS_Source/tasks.c **** 				else
1769:..\..\FreeRTOS_Source/tasks.c **** 				{
1770:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1771:..\..\FreeRTOS_Source/tasks.c **** 				}
1772:..\..\FreeRTOS_Source/tasks.c **** 			}
1773:..\..\FreeRTOS_Source/tasks.c **** 			else
1774:..\..\FreeRTOS_Source/tasks.c **** 			{
1775:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 64


1776:..\..\FreeRTOS_Source/tasks.c **** 			}
1777:..\..\FreeRTOS_Source/tasks.c **** 		}
1778:..\..\FreeRTOS_Source/tasks.c **** 		else
1779:..\..\FreeRTOS_Source/tasks.c **** 		{
1780:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1781:..\..\FreeRTOS_Source/tasks.c **** 		}
1782:..\..\FreeRTOS_Source/tasks.c **** 
1783:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 1570              		.loc 1 1783 0
 1571 0030 FB68     		ldr	r3, [r7, #12]
1784:..\..\FreeRTOS_Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1572              		.loc 1 1784 0
 1573 0032 1846     		mov	r0, r3
 1574 0034 1437     		adds	r7, r7, #20
 1575              		.cfi_def_cfa_offset 4
 1576 0036 BD46     		mov	sp, r7
 1577              		.cfi_def_cfa_register 13
 1578              		@ sp needed
 1579 0038 5DF8047B 		ldr	r7, [sp], #4
 1580              		.cfi_restore 7
 1581              		.cfi_def_cfa_offset 0
 1582 003c 7047     		bx	lr
 1583              	.L105:
 1584 003e 00BF     		.align	2
 1585              	.L104:
 1586 0040 9C000000 		.word	xSuspendedTaskList
 1587 0044 70000000 		.word	xPendingReadyList
 1588              		.cfi_endproc
 1589              	.LFE79:
 1590              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1591              		.section	.text.vTaskResume,"ax",%progbits
 1592              		.align	2
 1593              		.global	vTaskResume
 1594              		.thumb
 1595              		.thumb_func
 1596              		.type	vTaskResume, %function
 1597              	vTaskResume:
 1598              	.LFB80:
1785:..\..\FreeRTOS_Source/tasks.c **** 
1786:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1787:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1788:..\..\FreeRTOS_Source/tasks.c **** 
1789:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1790:..\..\FreeRTOS_Source/tasks.c **** 
1791:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1792:..\..\FreeRTOS_Source/tasks.c **** 	{
 1599              		.loc 1 1792 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 16
 1602              		@ frame_needed = 1, uses_anonymous_args = 0
 1603 0000 80B5     		push	{r7, lr}
 1604              		.cfi_def_cfa_offset 8
 1605              		.cfi_offset 7, -8
 1606              		.cfi_offset 14, -4
 1607 0002 84B0     		sub	sp, sp, #16
 1608              		.cfi_def_cfa_offset 24
 1609 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 65


 1610              		.cfi_def_cfa_register 7
 1611 0006 7860     		str	r0, [r7, #4]
1793:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1612              		.loc 1 1793 0
 1613 0008 7B68     		ldr	r3, [r7, #4]
 1614 000a FB60     		str	r3, [r7, #12]
1794:..\..\FreeRTOS_Source/tasks.c **** 
1795:..\..\FreeRTOS_Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1796:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToResume );
1797:..\..\FreeRTOS_Source/tasks.c **** 
1798:..\..\FreeRTOS_Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1799:..\..\FreeRTOS_Source/tasks.c **** 		currently executing task. */
1800:..\..\FreeRTOS_Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1615              		.loc 1 1800 0
 1616 000c 204B     		ldr	r3, .L109
 1617 000e 1B68     		ldr	r3, [r3]
 1618 0010 FA68     		ldr	r2, [r7, #12]
 1619 0012 9A42     		cmp	r2, r3
 1620 0014 39D0     		beq	.L106
 1621              		.loc 1 1800 0 is_stmt 0 discriminator 1
 1622 0016 FB68     		ldr	r3, [r7, #12]
 1623 0018 002B     		cmp	r3, #0
 1624 001a 36D0     		beq	.L106
1801:..\..\FreeRTOS_Source/tasks.c **** 		{
1802:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
 1625              		.loc 1 1802 0 is_stmt 1
 1626 001c FFF7FEFF 		bl	vPortEnterCritical
1803:..\..\FreeRTOS_Source/tasks.c **** 			{
1804:..\..\FreeRTOS_Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1627              		.loc 1 1804 0
 1628 0020 F868     		ldr	r0, [r7, #12]
 1629 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1630 0026 0346     		mov	r3, r0
 1631 0028 002B     		cmp	r3, #0
 1632 002a 2CD0     		beq	.L108
1805:..\..\FreeRTOS_Source/tasks.c **** 				{
1806:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1807:..\..\FreeRTOS_Source/tasks.c **** 
1808:..\..\FreeRTOS_Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1809:..\..\FreeRTOS_Source/tasks.c **** 					suspended because this is inside a critical section. */
1810:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1633              		.loc 1 1810 0
 1634 002c FB68     		ldr	r3, [r7, #12]
 1635 002e 0433     		adds	r3, r3, #4
 1636 0030 1846     		mov	r0, r3
 1637 0032 FFF7FEFF 		bl	uxListRemove
1811:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1638              		.loc 1 1811 0
 1639 0036 FB68     		ldr	r3, [r7, #12]
 1640 0038 DB6A     		ldr	r3, [r3, #44]
 1641 003a 1A46     		mov	r2, r3
 1642 003c 0123     		movs	r3, #1
 1643 003e 03FA02F2 		lsl	r2, r3, r2
 1644 0042 144B     		ldr	r3, .L109+4
 1645 0044 1B68     		ldr	r3, [r3]
 1646 0046 1343     		orrs	r3, r3, r2
 1647 0048 124A     		ldr	r2, .L109+4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 66


 1648 004a 1360     		str	r3, [r2]
 1649 004c FB68     		ldr	r3, [r7, #12]
 1650 004e DA6A     		ldr	r2, [r3, #44]
 1651 0050 1346     		mov	r3, r2
 1652 0052 9B00     		lsls	r3, r3, #2
 1653 0054 1344     		add	r3, r3, r2
 1654 0056 9B00     		lsls	r3, r3, #2
 1655 0058 0F4A     		ldr	r2, .L109+8
 1656 005a 1A44     		add	r2, r2, r3
 1657 005c FB68     		ldr	r3, [r7, #12]
 1658 005e 0433     		adds	r3, r3, #4
 1659 0060 1046     		mov	r0, r2
 1660 0062 1946     		mov	r1, r3
 1661 0064 FFF7FEFF 		bl	vListInsertEnd
1812:..\..\FreeRTOS_Source/tasks.c **** 
1813:..\..\FreeRTOS_Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1814:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1662              		.loc 1 1814 0
 1663 0068 FB68     		ldr	r3, [r7, #12]
 1664 006a DA6A     		ldr	r2, [r3, #44]
 1665 006c 084B     		ldr	r3, .L109
 1666 006e 1B68     		ldr	r3, [r3]
 1667 0070 DB6A     		ldr	r3, [r3, #44]
 1668 0072 9A42     		cmp	r2, r3
 1669 0074 07D3     		bcc	.L108
1815:..\..\FreeRTOS_Source/tasks.c **** 					{
1816:..\..\FreeRTOS_Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1817:..\..\FreeRTOS_Source/tasks.c **** 						but will leave the lists in the correct state for the
1818:..\..\FreeRTOS_Source/tasks.c **** 						next yield. */
1819:..\..\FreeRTOS_Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1670              		.loc 1 1819 0
 1671 0076 094B     		ldr	r3, .L109+12
 1672 0078 4FF08052 		mov	r2, #268435456
 1673 007c 1A60     		str	r2, [r3]
 1674              	@ 1819 "..\..\FreeRTOS_Source\tasks.c" 1
 1675 007e BFF34F8F 		dsb
 1676              	@ 0 "" 2
 1677              	@ 1819 "..\..\FreeRTOS_Source\tasks.c" 1
 1678 0082 BFF36F8F 		isb
 1679              	@ 0 "" 2
 1680              		.thumb
 1681              	.L108:
1820:..\..\FreeRTOS_Source/tasks.c **** 					}
1821:..\..\FreeRTOS_Source/tasks.c **** 					else
1822:..\..\FreeRTOS_Source/tasks.c **** 					{
1823:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1824:..\..\FreeRTOS_Source/tasks.c **** 					}
1825:..\..\FreeRTOS_Source/tasks.c **** 				}
1826:..\..\FreeRTOS_Source/tasks.c **** 				else
1827:..\..\FreeRTOS_Source/tasks.c **** 				{
1828:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1829:..\..\FreeRTOS_Source/tasks.c **** 				}
1830:..\..\FreeRTOS_Source/tasks.c **** 			}
1831:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 1682              		.loc 1 1831 0
 1683 0086 FFF7FEFF 		bl	vPortExitCritical
 1684              	.L106:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 67


1832:..\..\FreeRTOS_Source/tasks.c **** 		}
1833:..\..\FreeRTOS_Source/tasks.c **** 		else
1834:..\..\FreeRTOS_Source/tasks.c **** 		{
1835:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1836:..\..\FreeRTOS_Source/tasks.c **** 		}
1837:..\..\FreeRTOS_Source/tasks.c **** 	}
 1685              		.loc 1 1837 0
 1686 008a 1037     		adds	r7, r7, #16
 1687              		.cfi_def_cfa_offset 8
 1688 008c BD46     		mov	sp, r7
 1689              		.cfi_def_cfa_register 13
 1690              		@ sp needed
 1691 008e 80BD     		pop	{r7, pc}
 1692              	.L110:
 1693              		.align	2
 1694              	.L109:
 1695 0090 00000000 		.word	pxCurrentTCB
 1696 0094 B8000000 		.word	uxTopReadyPriority
 1697 0098 04000000 		.word	pxReadyTasksLists
 1698 009c 04ED00E0 		.word	-536810236
 1699              		.cfi_endproc
 1700              	.LFE80:
 1701              		.size	vTaskResume, .-vTaskResume
 1702              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1703              		.align	2
 1704              		.global	xTaskResumeFromISR
 1705              		.thumb
 1706              		.thumb_func
 1707              		.type	xTaskResumeFromISR, %function
 1708              	xTaskResumeFromISR:
 1709              	.LFB81:
1838:..\..\FreeRTOS_Source/tasks.c **** 
1839:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1840:..\..\FreeRTOS_Source/tasks.c **** 
1841:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1842:..\..\FreeRTOS_Source/tasks.c **** 
1843:..\..\FreeRTOS_Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1844:..\..\FreeRTOS_Source/tasks.c **** 
1845:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1846:..\..\FreeRTOS_Source/tasks.c **** 	{
 1710              		.loc 1 1846 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 32
 1713              		@ frame_needed = 1, uses_anonymous_args = 0
 1714 0000 80B5     		push	{r7, lr}
 1715              		.cfi_def_cfa_offset 8
 1716              		.cfi_offset 7, -8
 1717              		.cfi_offset 14, -4
 1718 0002 88B0     		sub	sp, sp, #32
 1719              		.cfi_def_cfa_offset 40
 1720 0004 00AF     		add	r7, sp, #0
 1721              		.cfi_def_cfa_register 7
 1722 0006 7860     		str	r0, [r7, #4]
1847:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1723              		.loc 1 1847 0
 1724 0008 0023     		movs	r3, #0
 1725 000a FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 68


1848:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1726              		.loc 1 1848 0
 1727 000c 7B68     		ldr	r3, [r7, #4]
 1728 000e BB61     		str	r3, [r7, #24]
 1729              	.LBB33:
 1730              	.LBB34:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1731              		.loc 2 211 0
 1732              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1733 0010 EFF31182 			mrs r2, basepri											
 1734 0014 4FF0A003 		mov r3, #160												
 1735 0018 83F31188 		msr basepri, r3											
 1736 001c BFF36F8F 		isb														
 1737 0020 BFF34F8F 		dsb														
 1738              	
 1739              	@ 0 "" 2
 1740              		.thumb
 1741 0024 3A61     		str	r2, [r7, #16]
 1742 0026 FB60     		str	r3, [r7, #12]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1743              		.loc 2 223 0
 1744 0028 3B69     		ldr	r3, [r7, #16]
 1745              	.LBE34:
 1746              	.LBE33:
1849:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1850:..\..\FreeRTOS_Source/tasks.c **** 
1851:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToResume );
1852:..\..\FreeRTOS_Source/tasks.c **** 
1853:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1854:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1855:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1856:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1857:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1858:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1859:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1860:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1861:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1862:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1863:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1864:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1865:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1866:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1867:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
1868:..\..\FreeRTOS_Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1869:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1870:..\..\FreeRTOS_Source/tasks.c **** 
1871:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1747              		.loc 1 1871 0
 1748 002a 7B61     		str	r3, [r7, #20]
1872:..\..\FreeRTOS_Source/tasks.c **** 		{
1873:..\..\FreeRTOS_Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1749              		.loc 1 1873 0
 1750 002c B869     		ldr	r0, [r7, #24]
 1751 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1752 0032 0346     		mov	r3, r0
 1753 0034 002B     		cmp	r3, #0
 1754 0036 31D0     		beq	.L113
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 69


1874:..\..\FreeRTOS_Source/tasks.c **** 			{
1875:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1876:..\..\FreeRTOS_Source/tasks.c **** 
1877:..\..\FreeRTOS_Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1878:..\..\FreeRTOS_Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1755              		.loc 1 1878 0
 1756 0038 1D4B     		ldr	r3, .L118
 1757 003a 1B68     		ldr	r3, [r3]
 1758 003c 002B     		cmp	r3, #0
 1759 003e 27D1     		bne	.L114
1879:..\..\FreeRTOS_Source/tasks.c **** 				{
1880:..\..\FreeRTOS_Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1881:..\..\FreeRTOS_Source/tasks.c **** 					suspended list to the ready list directly. */
1882:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1760              		.loc 1 1882 0
 1761 0040 BB69     		ldr	r3, [r7, #24]
 1762 0042 DA6A     		ldr	r2, [r3, #44]
 1763 0044 1B4B     		ldr	r3, .L118+4
 1764 0046 1B68     		ldr	r3, [r3]
 1765 0048 DB6A     		ldr	r3, [r3, #44]
 1766 004a 9A42     		cmp	r2, r3
 1767 004c 01D3     		bcc	.L115
1883:..\..\FreeRTOS_Source/tasks.c **** 					{
1884:..\..\FreeRTOS_Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1768              		.loc 1 1884 0
 1769 004e 0123     		movs	r3, #1
 1770 0050 FB61     		str	r3, [r7, #28]
 1771              	.L115:
1885:..\..\FreeRTOS_Source/tasks.c **** 					}
1886:..\..\FreeRTOS_Source/tasks.c **** 					else
1887:..\..\FreeRTOS_Source/tasks.c **** 					{
1888:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1889:..\..\FreeRTOS_Source/tasks.c **** 					}
1890:..\..\FreeRTOS_Source/tasks.c **** 
1891:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1772              		.loc 1 1891 0
 1773 0052 BB69     		ldr	r3, [r7, #24]
 1774 0054 0433     		adds	r3, r3, #4
 1775 0056 1846     		mov	r0, r3
 1776 0058 FFF7FEFF 		bl	uxListRemove
1892:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1777              		.loc 1 1892 0
 1778 005c BB69     		ldr	r3, [r7, #24]
 1779 005e DB6A     		ldr	r3, [r3, #44]
 1780 0060 1A46     		mov	r2, r3
 1781 0062 0123     		movs	r3, #1
 1782 0064 03FA02F2 		lsl	r2, r3, r2
 1783 0068 134B     		ldr	r3, .L118+8
 1784 006a 1B68     		ldr	r3, [r3]
 1785 006c 1343     		orrs	r3, r3, r2
 1786 006e 124A     		ldr	r2, .L118+8
 1787 0070 1360     		str	r3, [r2]
 1788 0072 BB69     		ldr	r3, [r7, #24]
 1789 0074 DA6A     		ldr	r2, [r3, #44]
 1790 0076 1346     		mov	r3, r2
 1791 0078 9B00     		lsls	r3, r3, #2
 1792 007a 1344     		add	r3, r3, r2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 70


 1793 007c 9B00     		lsls	r3, r3, #2
 1794 007e 0F4A     		ldr	r2, .L118+12
 1795 0080 1A44     		add	r2, r2, r3
 1796 0082 BB69     		ldr	r3, [r7, #24]
 1797 0084 0433     		adds	r3, r3, #4
 1798 0086 1046     		mov	r0, r2
 1799 0088 1946     		mov	r1, r3
 1800 008a FFF7FEFF 		bl	vListInsertEnd
 1801 008e 05E0     		b	.L113
 1802              	.L114:
1893:..\..\FreeRTOS_Source/tasks.c **** 				}
1894:..\..\FreeRTOS_Source/tasks.c **** 				else
1895:..\..\FreeRTOS_Source/tasks.c **** 				{
1896:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1897:..\..\FreeRTOS_Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1898:..\..\FreeRTOS_Source/tasks.c **** 					unsuspended. */
1899:..\..\FreeRTOS_Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1803              		.loc 1 1899 0
 1804 0090 BB69     		ldr	r3, [r7, #24]
 1805 0092 1833     		adds	r3, r3, #24
 1806 0094 0A48     		ldr	r0, .L118+16
 1807 0096 1946     		mov	r1, r3
 1808 0098 FFF7FEFF 		bl	vListInsertEnd
 1809              	.L113:
 1810 009c 7B69     		ldr	r3, [r7, #20]
 1811 009e BB60     		str	r3, [r7, #8]
 1812              	.LBB35:
 1813              	.LBB36:
 1814              		.loc 2 229 0
 1815 00a0 BB68     		ldr	r3, [r7, #8]
 1816              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1817 00a2 83F31188 			msr basepri, r3	
 1818              	@ 0 "" 2
 1819              		.thumb
 1820              	.LBE36:
 1821              	.LBE35:
1900:..\..\FreeRTOS_Source/tasks.c **** 				}
1901:..\..\FreeRTOS_Source/tasks.c **** 			}
1902:..\..\FreeRTOS_Source/tasks.c **** 			else
1903:..\..\FreeRTOS_Source/tasks.c **** 			{
1904:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1905:..\..\FreeRTOS_Source/tasks.c **** 			}
1906:..\..\FreeRTOS_Source/tasks.c **** 		}
1907:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1908:..\..\FreeRTOS_Source/tasks.c **** 
1909:..\..\FreeRTOS_Source/tasks.c **** 		return xYieldRequired;
 1822              		.loc 1 1909 0
 1823 00a6 FB69     		ldr	r3, [r7, #28]
1910:..\..\FreeRTOS_Source/tasks.c **** 	}
 1824              		.loc 1 1910 0
 1825 00a8 1846     		mov	r0, r3
 1826 00aa 2037     		adds	r7, r7, #32
 1827              		.cfi_def_cfa_offset 8
 1828 00ac BD46     		mov	sp, r7
 1829              		.cfi_def_cfa_register 13
 1830              		@ sp needed
 1831 00ae 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 71


 1832              	.L119:
 1833              		.align	2
 1834              	.L118:
 1835 00b0 D8000000 		.word	uxSchedulerSuspended
 1836 00b4 00000000 		.word	pxCurrentTCB
 1837 00b8 B8000000 		.word	uxTopReadyPriority
 1838 00bc 04000000 		.word	pxReadyTasksLists
 1839 00c0 70000000 		.word	xPendingReadyList
 1840              		.cfi_endproc
 1841              	.LFE81:
 1842              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1843              		.section	.rodata
 1844              		.align	2
 1845              	.LC0:
 1846 0000 49444C45 		.ascii	"IDLE\000"
 1846      00
 1847 0005 000000   		.section	.text.vTaskStartScheduler,"ax",%progbits
 1848              		.align	2
 1849              		.global	vTaskStartScheduler
 1850              		.thumb
 1851              		.thumb_func
 1852              		.type	vTaskStartScheduler, %function
 1853              	vTaskStartScheduler:
 1854              	.LFB82:
1911:..\..\FreeRTOS_Source/tasks.c **** 
1912:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1913:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1914:..\..\FreeRTOS_Source/tasks.c **** 
1915:..\..\FreeRTOS_Source/tasks.c **** void vTaskStartScheduler( void )
1916:..\..\FreeRTOS_Source/tasks.c **** {
 1855              		.loc 1 1916 0
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 8
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859 0000 80B5     		push	{r7, lr}
 1860              		.cfi_def_cfa_offset 8
 1861              		.cfi_offset 7, -8
 1862              		.cfi_offset 14, -4
 1863 0002 84B0     		sub	sp, sp, #16
 1864              		.cfi_def_cfa_offset 24
 1865 0004 02AF     		add	r7, sp, #8
 1866              		.cfi_def_cfa 7, 16
1917:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xReturn;
1918:..\..\FreeRTOS_Source/tasks.c **** 
1919:..\..\FreeRTOS_Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1920:..\..\FreeRTOS_Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1921:..\..\FreeRTOS_Source/tasks.c **** 	{
1922:..\..\FreeRTOS_Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1923:..\..\FreeRTOS_Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1924:..\..\FreeRTOS_Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1925:..\..\FreeRTOS_Source/tasks.c **** 
1926:..\..\FreeRTOS_Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1927:..\..\FreeRTOS_Source/tasks.c **** 		address of the RAM then create the idle task. */
1928:..\..\FreeRTOS_Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1929:..\..\FreeRTOS_Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1930:..\..\FreeRTOS_Source/tasks.c **** 												configIDLE_TASK_NAME,
1931:..\..\FreeRTOS_Source/tasks.c **** 												ulIdleTaskStackSize,
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 72


1932:..\..\FreeRTOS_Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1933:..\..\FreeRTOS_Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1934:..\..\FreeRTOS_Source/tasks.c **** 												pxIdleTaskStackBuffer,
1935:..\..\FreeRTOS_Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1936:..\..\FreeRTOS_Source/tasks.c **** 
1937:..\..\FreeRTOS_Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1938:..\..\FreeRTOS_Source/tasks.c **** 		{
1939:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdPASS;
1940:..\..\FreeRTOS_Source/tasks.c **** 		}
1941:..\..\FreeRTOS_Source/tasks.c **** 		else
1942:..\..\FreeRTOS_Source/tasks.c **** 		{
1943:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdFAIL;
1944:..\..\FreeRTOS_Source/tasks.c **** 		}
1945:..\..\FreeRTOS_Source/tasks.c **** 	}
1946:..\..\FreeRTOS_Source/tasks.c **** 	#else
1947:..\..\FreeRTOS_Source/tasks.c **** 	{
1948:..\..\FreeRTOS_Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1949:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 1867              		.loc 1 1949 0
 1868 0006 0023     		movs	r3, #0
 1869 0008 0093     		str	r3, [sp]
 1870 000a 124B     		ldr	r3, .L122
 1871 000c 0193     		str	r3, [sp, #4]
 1872 000e 1248     		ldr	r0, .L122+4
 1873 0010 1249     		ldr	r1, .L122+8
 1874 0012 6422     		movs	r2, #100
 1875 0014 0023     		movs	r3, #0
 1876 0016 FFF7FEFF 		bl	xTaskCreate
 1877 001a 7860     		str	r0, [r7, #4]
1950:..\..\FreeRTOS_Source/tasks.c **** 								configIDLE_TASK_NAME,
1951:..\..\FreeRTOS_Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1952:..\..\FreeRTOS_Source/tasks.c **** 								( void * ) NULL,
1953:..\..\FreeRTOS_Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
1954:..\..\FreeRTOS_Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1955:..\..\FreeRTOS_Source/tasks.c **** 	}
1956:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1957:..\..\FreeRTOS_Source/tasks.c **** 
1958:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1959:..\..\FreeRTOS_Source/tasks.c **** 	{
1960:..\..\FreeRTOS_Source/tasks.c **** 		if( xReturn == pdPASS )
1961:..\..\FreeRTOS_Source/tasks.c **** 		{
1962:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1963:..\..\FreeRTOS_Source/tasks.c **** 		}
1964:..\..\FreeRTOS_Source/tasks.c **** 		else
1965:..\..\FreeRTOS_Source/tasks.c **** 		{
1966:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1967:..\..\FreeRTOS_Source/tasks.c **** 		}
1968:..\..\FreeRTOS_Source/tasks.c **** 	}
1969:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1970:..\..\FreeRTOS_Source/tasks.c **** 
1971:..\..\FreeRTOS_Source/tasks.c **** 	if( xReturn == pdPASS )
 1878              		.loc 1 1971 0
 1879 001c 7B68     		ldr	r3, [r7, #4]
 1880 001e 012B     		cmp	r3, #1
 1881 0020 14D1     		bne	.L120
 1882              	.LBB37:
 1883              	.LBB38:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 73


 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1884              		.loc 2 195 0
 1885              	@ 195 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1886 0022 4FF0A003 			mov r3, #160												
 1887 0026 83F31188 		msr basepri, r3											
 1888 002a BFF36F8F 		isb														
 1889 002e BFF34F8F 		dsb														
 1890              	
 1891              	@ 0 "" 2
 1892              		.thumb
 1893 0032 3B60     		str	r3, [r7]
 1894              	.LBE38:
 1895              	.LBE37:
1972:..\..\FreeRTOS_Source/tasks.c **** 	{
1973:..\..\FreeRTOS_Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1974:..\..\FreeRTOS_Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1975:..\..\FreeRTOS_Source/tasks.c **** 		the only macro called by the function. */
1976:..\..\FreeRTOS_Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1977:..\..\FreeRTOS_Source/tasks.c **** 		{
1978:..\..\FreeRTOS_Source/tasks.c **** 			freertos_tasks_c_additions_init();
1979:..\..\FreeRTOS_Source/tasks.c **** 		}
1980:..\..\FreeRTOS_Source/tasks.c **** 		#endif
1981:..\..\FreeRTOS_Source/tasks.c **** 
1982:..\..\FreeRTOS_Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1983:..\..\FreeRTOS_Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1984:..\..\FreeRTOS_Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1985:..\..\FreeRTOS_Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1986:..\..\FreeRTOS_Source/tasks.c **** 		starts to run. */
1987:..\..\FreeRTOS_Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1988:..\..\FreeRTOS_Source/tasks.c **** 
1989:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1990:..\..\FreeRTOS_Source/tasks.c **** 		{
1991:..\..\FreeRTOS_Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1992:..\..\FreeRTOS_Source/tasks.c **** 			structure specific to the task that will run first. */
1993:..\..\FreeRTOS_Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1994:..\..\FreeRTOS_Source/tasks.c **** 		}
1995:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1996:..\..\FreeRTOS_Source/tasks.c **** 
1997:..\..\FreeRTOS_Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 1896              		.loc 1 1997 0
 1897 0034 0A4B     		ldr	r3, .L122+12
 1898 0036 4FF0FF32 		mov	r2, #-1
 1899 003a 1A60     		str	r2, [r3]
1998:..\..\FreeRTOS_Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1900              		.loc 1 1998 0
 1901 003c 094B     		ldr	r3, .L122+16
 1902 003e 0122     		movs	r2, #1
 1903 0040 1A60     		str	r2, [r3]
1999:..\..\FreeRTOS_Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1904              		.loc 1 1999 0
 1905 0042 094B     		ldr	r3, .L122+20
 1906 0044 0022     		movs	r2, #0
 1907 0046 1A60     		str	r2, [r3]
2000:..\..\FreeRTOS_Source/tasks.c **** 
2001:..\..\FreeRTOS_Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2002:..\..\FreeRTOS_Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2003:..\..\FreeRTOS_Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 74


2004:..\..\FreeRTOS_Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2005:..\..\FreeRTOS_Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2006:..\..\FreeRTOS_Source/tasks.c **** 		FreeRTOSConfig.h file. */
2007:..\..\FreeRTOS_Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2008:..\..\FreeRTOS_Source/tasks.c **** 
2009:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2010:..\..\FreeRTOS_Source/tasks.c **** 
2011:..\..\FreeRTOS_Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2012:..\..\FreeRTOS_Source/tasks.c **** 		portable interface. */
2013:..\..\FreeRTOS_Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1908              		.loc 1 2013 0
 1909 0048 FFF7FEFF 		bl	xPortStartScheduler
 1910              	.L120:
2014:..\..\FreeRTOS_Source/tasks.c **** 		{
2015:..\..\FreeRTOS_Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2016:..\..\FreeRTOS_Source/tasks.c **** 			function will not return. */
2017:..\..\FreeRTOS_Source/tasks.c **** 		}
2018:..\..\FreeRTOS_Source/tasks.c **** 		else
2019:..\..\FreeRTOS_Source/tasks.c **** 		{
2020:..\..\FreeRTOS_Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2021:..\..\FreeRTOS_Source/tasks.c **** 		}
2022:..\..\FreeRTOS_Source/tasks.c **** 	}
2023:..\..\FreeRTOS_Source/tasks.c **** 	else
2024:..\..\FreeRTOS_Source/tasks.c **** 	{
2025:..\..\FreeRTOS_Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2026:..\..\FreeRTOS_Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2027:..\..\FreeRTOS_Source/tasks.c **** 		or the timer task. */
2028:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2029:..\..\FreeRTOS_Source/tasks.c **** 	}
2030:..\..\FreeRTOS_Source/tasks.c **** 
2031:..\..\FreeRTOS_Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2032:..\..\FreeRTOS_Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2033:..\..\FreeRTOS_Source/tasks.c **** 	( void ) xIdleTaskHandle;
2034:..\..\FreeRTOS_Source/tasks.c **** }
 1911              		.loc 1 2034 0
 1912 004c 0837     		adds	r7, r7, #8
 1913              		.cfi_def_cfa_offset 8
 1914 004e BD46     		mov	sp, r7
 1915              		.cfi_def_cfa_register 13
 1916              		@ sp needed
 1917 0050 80BD     		pop	{r7, pc}
 1918              	.L123:
 1919 0052 00BF     		.align	2
 1920              	.L122:
 1921 0054 D4000000 		.word	xIdleTaskHandle
 1922 0058 00000000 		.word	prvIdleTask
 1923 005c 00000000 		.word	.LC0
 1924 0060 D0000000 		.word	xNextTaskUnblockTime
 1925 0064 BC000000 		.word	xSchedulerRunning
 1926 0068 B4000000 		.word	xTickCount
 1927              		.cfi_endproc
 1928              	.LFE82:
 1929              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1930              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1931              		.align	2
 1932              		.global	vTaskEndScheduler
 1933              		.thumb
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 75


 1934              		.thumb_func
 1935              		.type	vTaskEndScheduler, %function
 1936              	vTaskEndScheduler:
 1937              	.LFB83:
2035:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2036:..\..\FreeRTOS_Source/tasks.c **** 
2037:..\..\FreeRTOS_Source/tasks.c **** void vTaskEndScheduler( void )
2038:..\..\FreeRTOS_Source/tasks.c **** {
 1938              		.loc 1 2038 0
 1939              		.cfi_startproc
 1940              		@ args = 0, pretend = 0, frame = 8
 1941              		@ frame_needed = 1, uses_anonymous_args = 0
 1942 0000 80B5     		push	{r7, lr}
 1943              		.cfi_def_cfa_offset 8
 1944              		.cfi_offset 7, -8
 1945              		.cfi_offset 14, -4
 1946 0002 82B0     		sub	sp, sp, #8
 1947              		.cfi_def_cfa_offset 16
 1948 0004 00AF     		add	r7, sp, #0
 1949              		.cfi_def_cfa_register 7
 1950              	.LBB39:
 1951              	.LBB40:
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1952              		.loc 2 195 0
 1953              	@ 195 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1954 0006 4FF0A003 			mov r3, #160												
 1955 000a 83F31188 		msr basepri, r3											
 1956 000e BFF36F8F 		isb														
 1957 0012 BFF34F8F 		dsb														
 1958              	
 1959              	@ 0 "" 2
 1960              		.thumb
 1961 0016 7B60     		str	r3, [r7, #4]
 1962              	.LBE40:
 1963              	.LBE39:
2039:..\..\FreeRTOS_Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2040:..\..\FreeRTOS_Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2041:..\..\FreeRTOS_Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2042:..\..\FreeRTOS_Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2043:..\..\FreeRTOS_Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1964              		.loc 1 2043 0
 1965 0018 034B     		ldr	r3, .L125
 1966 001a 0022     		movs	r2, #0
 1967 001c 1A60     		str	r2, [r3]
2044:..\..\FreeRTOS_Source/tasks.c **** 	vPortEndScheduler();
 1968              		.loc 1 2044 0
 1969 001e FFF7FEFF 		bl	vPortEndScheduler
2045:..\..\FreeRTOS_Source/tasks.c **** }
 1970              		.loc 1 2045 0
 1971 0022 0837     		adds	r7, r7, #8
 1972              		.cfi_def_cfa_offset 8
 1973 0024 BD46     		mov	sp, r7
 1974              		.cfi_def_cfa_register 13
 1975              		@ sp needed
 1976 0026 80BD     		pop	{r7, pc}
 1977              	.L126:
 1978              		.align	2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 76


 1979              	.L125:
 1980 0028 BC000000 		.word	xSchedulerRunning
 1981              		.cfi_endproc
 1982              	.LFE83:
 1983              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1984              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1985              		.align	2
 1986              		.global	vTaskSuspendAll
 1987              		.thumb
 1988              		.thumb_func
 1989              		.type	vTaskSuspendAll, %function
 1990              	vTaskSuspendAll:
 1991              	.LFB84:
2046:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2047:..\..\FreeRTOS_Source/tasks.c **** 
2048:..\..\FreeRTOS_Source/tasks.c **** void vTaskSuspendAll( void )
2049:..\..\FreeRTOS_Source/tasks.c **** {
 1992              		.loc 1 2049 0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 1, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 1997 0000 80B4     		push	{r7}
 1998              		.cfi_def_cfa_offset 4
 1999              		.cfi_offset 7, -4
 2000 0002 00AF     		add	r7, sp, #0
 2001              		.cfi_def_cfa_register 7
2050:..\..\FreeRTOS_Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2051:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2052:..\..\FreeRTOS_Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2053:..\..\FreeRTOS_Source/tasks.c **** 	http://goo.gl/wu4acr */
2054:..\..\FreeRTOS_Source/tasks.c **** 	++uxSchedulerSuspended;
 2002              		.loc 1 2054 0
 2003 0004 044B     		ldr	r3, .L128
 2004 0006 1B68     		ldr	r3, [r3]
 2005 0008 0133     		adds	r3, r3, #1
 2006 000a 034A     		ldr	r2, .L128
 2007 000c 1360     		str	r3, [r2]
2055:..\..\FreeRTOS_Source/tasks.c **** }
 2008              		.loc 1 2055 0
 2009 000e BD46     		mov	sp, r7
 2010              		.cfi_def_cfa_register 13
 2011              		@ sp needed
 2012 0010 5DF8047B 		ldr	r7, [sp], #4
 2013              		.cfi_restore 7
 2014              		.cfi_def_cfa_offset 0
 2015 0014 7047     		bx	lr
 2016              	.L129:
 2017 0016 00BF     		.align	2
 2018              	.L128:
 2019 0018 D8000000 		.word	uxSchedulerSuspended
 2020              		.cfi_endproc
 2021              	.LFE84:
 2022              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2023              		.section	.text.xTaskResumeAll,"ax",%progbits
 2024              		.align	2
 2025              		.global	xTaskResumeAll
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 77


 2026              		.thumb
 2027              		.thumb_func
 2028              		.type	xTaskResumeAll, %function
 2029              	xTaskResumeAll:
 2030              	.LFB85:
2056:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2057:..\..\FreeRTOS_Source/tasks.c **** 
2058:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2059:..\..\FreeRTOS_Source/tasks.c **** 
2060:..\..\FreeRTOS_Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2061:..\..\FreeRTOS_Source/tasks.c **** 	{
2062:..\..\FreeRTOS_Source/tasks.c **** 	TickType_t xReturn;
2063:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2064:..\..\FreeRTOS_Source/tasks.c **** 
2065:..\..\FreeRTOS_Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2066:..\..\FreeRTOS_Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2067:..\..\FreeRTOS_Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2068:..\..\FreeRTOS_Source/tasks.c **** 		running. */
2069:..\..\FreeRTOS_Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2070:..\..\FreeRTOS_Source/tasks.c **** 		{
2071:..\..\FreeRTOS_Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2072:..\..\FreeRTOS_Source/tasks.c **** 			{
2073:..\..\FreeRTOS_Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2074:..\..\FreeRTOS_Source/tasks.c **** 			}
2075:..\..\FreeRTOS_Source/tasks.c **** 		}
2076:..\..\FreeRTOS_Source/tasks.c **** 		#else
2077:..\..\FreeRTOS_Source/tasks.c **** 		{
2078:..\..\FreeRTOS_Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2079:..\..\FreeRTOS_Source/tasks.c **** 
2080:..\..\FreeRTOS_Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2081:..\..\FreeRTOS_Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2082:..\..\FreeRTOS_Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2083:..\..\FreeRTOS_Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2084:..\..\FreeRTOS_Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2085:..\..\FreeRTOS_Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2086:..\..\FreeRTOS_Source/tasks.c **** 			{
2087:..\..\FreeRTOS_Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2088:..\..\FreeRTOS_Source/tasks.c **** 			}
2089:..\..\FreeRTOS_Source/tasks.c **** 		}
2090:..\..\FreeRTOS_Source/tasks.c **** 		#endif
2091:..\..\FreeRTOS_Source/tasks.c **** 
2092:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2093:..\..\FreeRTOS_Source/tasks.c **** 		{
2094:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = 0;
2095:..\..\FreeRTOS_Source/tasks.c **** 		}
2096:..\..\FreeRTOS_Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2097:..\..\FreeRTOS_Source/tasks.c **** 		{
2098:..\..\FreeRTOS_Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2099:..\..\FreeRTOS_Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2100:..\..\FreeRTOS_Source/tasks.c **** 			processed. */
2101:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = 0;
2102:..\..\FreeRTOS_Source/tasks.c **** 		}
2103:..\..\FreeRTOS_Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2104:..\..\FreeRTOS_Source/tasks.c **** 		{
2105:..\..\FreeRTOS_Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2106:..\..\FreeRTOS_Source/tasks.c **** 			idle priority.  This path can only be reached if
2107:..\..\FreeRTOS_Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 78


2108:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = 0;
2109:..\..\FreeRTOS_Source/tasks.c **** 		}
2110:..\..\FreeRTOS_Source/tasks.c **** 		else
2111:..\..\FreeRTOS_Source/tasks.c **** 		{
2112:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2113:..\..\FreeRTOS_Source/tasks.c **** 		}
2114:..\..\FreeRTOS_Source/tasks.c **** 
2115:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2116:..\..\FreeRTOS_Source/tasks.c **** 	}
2117:..\..\FreeRTOS_Source/tasks.c **** 
2118:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2119:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2120:..\..\FreeRTOS_Source/tasks.c **** 
2121:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2122:..\..\FreeRTOS_Source/tasks.c **** {
 2031              		.loc 1 2122 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 16
 2034              		@ frame_needed = 1, uses_anonymous_args = 0
 2035 0000 80B5     		push	{r7, lr}
 2036              		.cfi_def_cfa_offset 8
 2037              		.cfi_offset 7, -8
 2038              		.cfi_offset 14, -4
 2039 0002 84B0     		sub	sp, sp, #16
 2040              		.cfi_def_cfa_offset 24
 2041 0004 00AF     		add	r7, sp, #0
 2042              		.cfi_def_cfa_register 7
2123:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxTCB = NULL;
 2043              		.loc 1 2123 0
 2044 0006 0023     		movs	r3, #0
 2045 0008 FB60     		str	r3, [r7, #12]
2124:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2046              		.loc 1 2124 0
 2047 000a 0023     		movs	r3, #0
 2048 000c BB60     		str	r3, [r7, #8]
2125:..\..\FreeRTOS_Source/tasks.c **** 
2126:..\..\FreeRTOS_Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2127:..\..\FreeRTOS_Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2128:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2129:..\..\FreeRTOS_Source/tasks.c **** 
2130:..\..\FreeRTOS_Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2131:..\..\FreeRTOS_Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2132:..\..\FreeRTOS_Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2133:..\..\FreeRTOS_Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2134:..\..\FreeRTOS_Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2135:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 2049              		.loc 1 2135 0
 2050 000e FFF7FEFF 		bl	vPortEnterCritical
2136:..\..\FreeRTOS_Source/tasks.c **** 	{
2137:..\..\FreeRTOS_Source/tasks.c **** 		--uxSchedulerSuspended;
 2051              		.loc 1 2137 0
 2052 0012 3A4B     		ldr	r3, .L139
 2053 0014 1B68     		ldr	r3, [r3]
 2054 0016 013B     		subs	r3, r3, #1
 2055 0018 384A     		ldr	r2, .L139
 2056 001a 1360     		str	r3, [r2]
2138:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 79


2139:..\..\FreeRTOS_Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2057              		.loc 1 2139 0
 2058 001c 374B     		ldr	r3, .L139
 2059 001e 1B68     		ldr	r3, [r3]
 2060 0020 002B     		cmp	r3, #0
 2061 0022 63D1     		bne	.L131
2140:..\..\FreeRTOS_Source/tasks.c **** 		{
2141:..\..\FreeRTOS_Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2062              		.loc 1 2141 0
 2063 0024 364B     		ldr	r3, .L139+4
 2064 0026 1B68     		ldr	r3, [r3]
 2065 0028 002B     		cmp	r3, #0
 2066 002a 5FD0     		beq	.L131
2142:..\..\FreeRTOS_Source/tasks.c **** 			{
2143:..\..\FreeRTOS_Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2144:..\..\FreeRTOS_Source/tasks.c **** 				appropriate ready list. */
2145:..\..\FreeRTOS_Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2067              		.loc 1 2145 0
 2068 002c 30E0     		b	.L132
 2069              	.L133:
2146:..\..\FreeRTOS_Source/tasks.c **** 				{
2147:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2070              		.loc 1 2147 0
 2071 002e 354B     		ldr	r3, .L139+8
 2072 0030 DB68     		ldr	r3, [r3, #12]
 2073 0032 DB68     		ldr	r3, [r3, #12]
 2074 0034 FB60     		str	r3, [r7, #12]
2148:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2075              		.loc 1 2148 0
 2076 0036 FB68     		ldr	r3, [r7, #12]
 2077 0038 1833     		adds	r3, r3, #24
 2078 003a 1846     		mov	r0, r3
 2079 003c FFF7FEFF 		bl	uxListRemove
2149:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2080              		.loc 1 2149 0
 2081 0040 FB68     		ldr	r3, [r7, #12]
 2082 0042 0433     		adds	r3, r3, #4
 2083 0044 1846     		mov	r0, r3
 2084 0046 FFF7FEFF 		bl	uxListRemove
2150:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2085              		.loc 1 2150 0
 2086 004a FB68     		ldr	r3, [r7, #12]
 2087 004c DB6A     		ldr	r3, [r3, #44]
 2088 004e 1A46     		mov	r2, r3
 2089 0050 0123     		movs	r3, #1
 2090 0052 03FA02F2 		lsl	r2, r3, r2
 2091 0056 2C4B     		ldr	r3, .L139+12
 2092 0058 1B68     		ldr	r3, [r3]
 2093 005a 1343     		orrs	r3, r3, r2
 2094 005c 2A4A     		ldr	r2, .L139+12
 2095 005e 1360     		str	r3, [r2]
 2096 0060 FB68     		ldr	r3, [r7, #12]
 2097 0062 DA6A     		ldr	r2, [r3, #44]
 2098 0064 1346     		mov	r3, r2
 2099 0066 9B00     		lsls	r3, r3, #2
 2100 0068 1344     		add	r3, r3, r2
 2101 006a 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 80


 2102 006c 274A     		ldr	r2, .L139+16
 2103 006e 1A44     		add	r2, r2, r3
 2104 0070 FB68     		ldr	r3, [r7, #12]
 2105 0072 0433     		adds	r3, r3, #4
 2106 0074 1046     		mov	r0, r2
 2107 0076 1946     		mov	r1, r3
 2108 0078 FFF7FEFF 		bl	vListInsertEnd
2151:..\..\FreeRTOS_Source/tasks.c **** 
2152:..\..\FreeRTOS_Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2153:..\..\FreeRTOS_Source/tasks.c **** 					task then a yield must be performed. */
2154:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2109              		.loc 1 2154 0
 2110 007c FB68     		ldr	r3, [r7, #12]
 2111 007e DA6A     		ldr	r2, [r3, #44]
 2112 0080 234B     		ldr	r3, .L139+20
 2113 0082 1B68     		ldr	r3, [r3]
 2114 0084 DB6A     		ldr	r3, [r3, #44]
 2115 0086 9A42     		cmp	r2, r3
 2116 0088 02D3     		bcc	.L132
2155:..\..\FreeRTOS_Source/tasks.c **** 					{
2156:..\..\FreeRTOS_Source/tasks.c **** 						xYieldPending = pdTRUE;
 2117              		.loc 1 2156 0
 2118 008a 224B     		ldr	r3, .L139+24
 2119 008c 0122     		movs	r2, #1
 2120 008e 1A60     		str	r2, [r3]
 2121              	.L132:
2145:..\..\FreeRTOS_Source/tasks.c **** 				{
 2122              		.loc 1 2145 0
 2123 0090 1C4B     		ldr	r3, .L139+8
 2124 0092 1B68     		ldr	r3, [r3]
 2125 0094 002B     		cmp	r3, #0
 2126 0096 CAD1     		bne	.L133
2157:..\..\FreeRTOS_Source/tasks.c **** 					}
2158:..\..\FreeRTOS_Source/tasks.c **** 					else
2159:..\..\FreeRTOS_Source/tasks.c **** 					{
2160:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2161:..\..\FreeRTOS_Source/tasks.c **** 					}
2162:..\..\FreeRTOS_Source/tasks.c **** 				}
2163:..\..\FreeRTOS_Source/tasks.c **** 
2164:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB != NULL )
 2127              		.loc 1 2164 0
 2128 0098 FB68     		ldr	r3, [r7, #12]
 2129 009a 002B     		cmp	r3, #0
 2130 009c 01D0     		beq	.L134
2165:..\..\FreeRTOS_Source/tasks.c **** 				{
2166:..\..\FreeRTOS_Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2167:..\..\FreeRTOS_Source/tasks.c **** 					which may have prevented the next unblock time from being
2168:..\..\FreeRTOS_Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2169:..\..\FreeRTOS_Source/tasks.c **** 					important for low power tickless implementations, where
2170:..\..\FreeRTOS_Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2171:..\..\FreeRTOS_Source/tasks.c **** 					state. */
2172:..\..\FreeRTOS_Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2131              		.loc 1 2172 0
 2132 009e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2133              	.L134:
 2134              	.LBB41:
2173:..\..\FreeRTOS_Source/tasks.c **** 				}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 81


2174:..\..\FreeRTOS_Source/tasks.c **** 
2175:..\..\FreeRTOS_Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2176:..\..\FreeRTOS_Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2177:..\..\FreeRTOS_Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2178:..\..\FreeRTOS_Source/tasks.c **** 				time. */
2179:..\..\FreeRTOS_Source/tasks.c **** 				{
2180:..\..\FreeRTOS_Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2135              		.loc 1 2180 0
 2136 00a2 1D4B     		ldr	r3, .L139+28
 2137 00a4 1B68     		ldr	r3, [r3]
 2138 00a6 7B60     		str	r3, [r7, #4]
2181:..\..\FreeRTOS_Source/tasks.c **** 
2182:..\..\FreeRTOS_Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2139              		.loc 1 2182 0
 2140 00a8 7B68     		ldr	r3, [r7, #4]
 2141 00aa 002B     		cmp	r3, #0
 2142 00ac 10D0     		beq	.L135
 2143              	.L137:
2183:..\..\FreeRTOS_Source/tasks.c **** 					{
2184:..\..\FreeRTOS_Source/tasks.c **** 						do
2185:..\..\FreeRTOS_Source/tasks.c **** 						{
2186:..\..\FreeRTOS_Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2144              		.loc 1 2186 0
 2145 00ae FFF7FEFF 		bl	xTaskIncrementTick
 2146 00b2 0346     		mov	r3, r0
 2147 00b4 002B     		cmp	r3, #0
 2148 00b6 02D0     		beq	.L136
2187:..\..\FreeRTOS_Source/tasks.c **** 							{
2188:..\..\FreeRTOS_Source/tasks.c **** 								xYieldPending = pdTRUE;
 2149              		.loc 1 2188 0
 2150 00b8 164B     		ldr	r3, .L139+24
 2151 00ba 0122     		movs	r2, #1
 2152 00bc 1A60     		str	r2, [r3]
 2153              	.L136:
2189:..\..\FreeRTOS_Source/tasks.c **** 							}
2190:..\..\FreeRTOS_Source/tasks.c **** 							else
2191:..\..\FreeRTOS_Source/tasks.c **** 							{
2192:..\..\FreeRTOS_Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2193:..\..\FreeRTOS_Source/tasks.c **** 							}
2194:..\..\FreeRTOS_Source/tasks.c **** 							--uxPendedCounts;
 2154              		.loc 1 2194 0
 2155 00be 7B68     		ldr	r3, [r7, #4]
 2156 00c0 013B     		subs	r3, r3, #1
 2157 00c2 7B60     		str	r3, [r7, #4]
2195:..\..\FreeRTOS_Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2158              		.loc 1 2195 0
 2159 00c4 7B68     		ldr	r3, [r7, #4]
 2160 00c6 002B     		cmp	r3, #0
 2161 00c8 F1D1     		bne	.L137
2196:..\..\FreeRTOS_Source/tasks.c **** 
2197:..\..\FreeRTOS_Source/tasks.c **** 						uxPendedTicks = 0;
 2162              		.loc 1 2197 0
 2163 00ca 134B     		ldr	r3, .L139+28
 2164 00cc 0022     		movs	r2, #0
 2165 00ce 1A60     		str	r2, [r3]
 2166              	.L135:
 2167              	.LBE41:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 82


2198:..\..\FreeRTOS_Source/tasks.c **** 					}
2199:..\..\FreeRTOS_Source/tasks.c **** 					else
2200:..\..\FreeRTOS_Source/tasks.c **** 					{
2201:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2202:..\..\FreeRTOS_Source/tasks.c **** 					}
2203:..\..\FreeRTOS_Source/tasks.c **** 				}
2204:..\..\FreeRTOS_Source/tasks.c **** 
2205:..\..\FreeRTOS_Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2168              		.loc 1 2205 0
 2169 00d0 104B     		ldr	r3, .L139+24
 2170 00d2 1B68     		ldr	r3, [r3]
 2171 00d4 002B     		cmp	r3, #0
 2172 00d6 09D0     		beq	.L131
2206:..\..\FreeRTOS_Source/tasks.c **** 				{
2207:..\..\FreeRTOS_Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2208:..\..\FreeRTOS_Source/tasks.c **** 					{
2209:..\..\FreeRTOS_Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2173              		.loc 1 2209 0
 2174 00d8 0123     		movs	r3, #1
 2175 00da BB60     		str	r3, [r7, #8]
2210:..\..\FreeRTOS_Source/tasks.c **** 					}
2211:..\..\FreeRTOS_Source/tasks.c **** 					#endif
2212:..\..\FreeRTOS_Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2176              		.loc 1 2212 0
 2177 00dc 0F4B     		ldr	r3, .L139+32
 2178 00de 4FF08052 		mov	r2, #268435456
 2179 00e2 1A60     		str	r2, [r3]
 2180              	@ 2212 "..\..\FreeRTOS_Source\tasks.c" 1
 2181 00e4 BFF34F8F 		dsb
 2182              	@ 0 "" 2
 2183              	@ 2212 "..\..\FreeRTOS_Source\tasks.c" 1
 2184 00e8 BFF36F8F 		isb
 2185              	@ 0 "" 2
 2186              		.thumb
 2187              	.L131:
2213:..\..\FreeRTOS_Source/tasks.c **** 				}
2214:..\..\FreeRTOS_Source/tasks.c **** 				else
2215:..\..\FreeRTOS_Source/tasks.c **** 				{
2216:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2217:..\..\FreeRTOS_Source/tasks.c **** 				}
2218:..\..\FreeRTOS_Source/tasks.c **** 			}
2219:..\..\FreeRTOS_Source/tasks.c **** 		}
2220:..\..\FreeRTOS_Source/tasks.c **** 		else
2221:..\..\FreeRTOS_Source/tasks.c **** 		{
2222:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2223:..\..\FreeRTOS_Source/tasks.c **** 		}
2224:..\..\FreeRTOS_Source/tasks.c **** 	}
2225:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
 2188              		.loc 1 2225 0
 2189 00ec FFF7FEFF 		bl	vPortExitCritical
2226:..\..\FreeRTOS_Source/tasks.c **** 
2227:..\..\FreeRTOS_Source/tasks.c **** 	return xAlreadyYielded;
 2190              		.loc 1 2227 0
 2191 00f0 BB68     		ldr	r3, [r7, #8]
2228:..\..\FreeRTOS_Source/tasks.c **** }
 2192              		.loc 1 2228 0
 2193 00f2 1846     		mov	r0, r3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 83


 2194 00f4 1037     		adds	r7, r7, #16
 2195              		.cfi_def_cfa_offset 8
 2196 00f6 BD46     		mov	sp, r7
 2197              		.cfi_def_cfa_register 13
 2198              		@ sp needed
 2199 00f8 80BD     		pop	{r7, pc}
 2200              	.L140:
 2201 00fa 00BF     		.align	2
 2202              	.L139:
 2203 00fc D8000000 		.word	uxSchedulerSuspended
 2204 0100 B0000000 		.word	uxCurrentNumberOfTasks
 2205 0104 70000000 		.word	xPendingReadyList
 2206 0108 B8000000 		.word	uxTopReadyPriority
 2207 010c 04000000 		.word	pxReadyTasksLists
 2208 0110 00000000 		.word	pxCurrentTCB
 2209 0114 C4000000 		.word	xYieldPending
 2210 0118 C0000000 		.word	uxPendedTicks
 2211 011c 04ED00E0 		.word	-536810236
 2212              		.cfi_endproc
 2213              	.LFE85:
 2214              		.size	xTaskResumeAll, .-xTaskResumeAll
 2215              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2216              		.align	2
 2217              		.global	xTaskGetTickCount
 2218              		.thumb
 2219              		.thumb_func
 2220              		.type	xTaskGetTickCount, %function
 2221              	xTaskGetTickCount:
 2222              	.LFB86:
2229:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2230:..\..\FreeRTOS_Source/tasks.c **** 
2231:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2232:..\..\FreeRTOS_Source/tasks.c **** {
 2223              		.loc 1 2232 0
 2224              		.cfi_startproc
 2225              		@ args = 0, pretend = 0, frame = 8
 2226              		@ frame_needed = 1, uses_anonymous_args = 0
 2227              		@ link register save eliminated.
 2228 0000 80B4     		push	{r7}
 2229              		.cfi_def_cfa_offset 4
 2230              		.cfi_offset 7, -4
 2231 0002 83B0     		sub	sp, sp, #12
 2232              		.cfi_def_cfa_offset 16
 2233 0004 00AF     		add	r7, sp, #0
 2234              		.cfi_def_cfa_register 7
2233:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTicks;
2234:..\..\FreeRTOS_Source/tasks.c **** 
2235:..\..\FreeRTOS_Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2236:..\..\FreeRTOS_Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2237:..\..\FreeRTOS_Source/tasks.c **** 	{
2238:..\..\FreeRTOS_Source/tasks.c **** 		xTicks = xTickCount;
 2235              		.loc 1 2238 0
 2236 0006 054B     		ldr	r3, .L143
 2237 0008 1B68     		ldr	r3, [r3]
 2238 000a 7B60     		str	r3, [r7, #4]
2239:..\..\FreeRTOS_Source/tasks.c **** 	}
2240:..\..\FreeRTOS_Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 84


2241:..\..\FreeRTOS_Source/tasks.c **** 
2242:..\..\FreeRTOS_Source/tasks.c **** 	return xTicks;
 2239              		.loc 1 2242 0
 2240 000c 7B68     		ldr	r3, [r7, #4]
2243:..\..\FreeRTOS_Source/tasks.c **** }
 2241              		.loc 1 2243 0
 2242 000e 1846     		mov	r0, r3
 2243 0010 0C37     		adds	r7, r7, #12
 2244              		.cfi_def_cfa_offset 4
 2245 0012 BD46     		mov	sp, r7
 2246              		.cfi_def_cfa_register 13
 2247              		@ sp needed
 2248 0014 5DF8047B 		ldr	r7, [sp], #4
 2249              		.cfi_restore 7
 2250              		.cfi_def_cfa_offset 0
 2251 0018 7047     		bx	lr
 2252              	.L144:
 2253 001a 00BF     		.align	2
 2254              	.L143:
 2255 001c B4000000 		.word	xTickCount
 2256              		.cfi_endproc
 2257              	.LFE86:
 2258              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2259              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2260              		.align	2
 2261              		.global	xTaskGetTickCountFromISR
 2262              		.thumb
 2263              		.thumb_func
 2264              		.type	xTaskGetTickCountFromISR, %function
 2265              	xTaskGetTickCountFromISR:
 2266              	.LFB87:
2244:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2245:..\..\FreeRTOS_Source/tasks.c **** 
2246:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2247:..\..\FreeRTOS_Source/tasks.c **** {
 2267              		.loc 1 2247 0
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 8
 2270              		@ frame_needed = 1, uses_anonymous_args = 0
 2271              		@ link register save eliminated.
 2272 0000 80B4     		push	{r7}
 2273              		.cfi_def_cfa_offset 4
 2274              		.cfi_offset 7, -4
 2275 0002 83B0     		sub	sp, sp, #12
 2276              		.cfi_def_cfa_offset 16
 2277 0004 00AF     		add	r7, sp, #0
 2278              		.cfi_def_cfa_register 7
2248:..\..\FreeRTOS_Source/tasks.c **** TickType_t xReturn;
2249:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2250:..\..\FreeRTOS_Source/tasks.c **** 
2251:..\..\FreeRTOS_Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2252:..\..\FreeRTOS_Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2253:..\..\FreeRTOS_Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2254:..\..\FreeRTOS_Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2255:..\..\FreeRTOS_Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2256:..\..\FreeRTOS_Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2257:..\..\FreeRTOS_Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 85


2258:..\..\FreeRTOS_Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2259:..\..\FreeRTOS_Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2260:..\..\FreeRTOS_Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2261:..\..\FreeRTOS_Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2262:..\..\FreeRTOS_Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2263:..\..\FreeRTOS_Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2264:..\..\FreeRTOS_Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2265:..\..\FreeRTOS_Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2266:..\..\FreeRTOS_Source/tasks.c **** 
2267:..\..\FreeRTOS_Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2279              		.loc 1 2267 0
 2280 0006 0023     		movs	r3, #0
 2281 0008 7B60     		str	r3, [r7, #4]
2268:..\..\FreeRTOS_Source/tasks.c **** 	{
2269:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = xTickCount;
 2282              		.loc 1 2269 0
 2283 000a 054B     		ldr	r3, .L147
 2284 000c 1B68     		ldr	r3, [r3]
 2285 000e 3B60     		str	r3, [r7]
2270:..\..\FreeRTOS_Source/tasks.c **** 	}
2271:..\..\FreeRTOS_Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2272:..\..\FreeRTOS_Source/tasks.c **** 
2273:..\..\FreeRTOS_Source/tasks.c **** 	return xReturn;
 2286              		.loc 1 2273 0
 2287 0010 3B68     		ldr	r3, [r7]
2274:..\..\FreeRTOS_Source/tasks.c **** }
 2288              		.loc 1 2274 0
 2289 0012 1846     		mov	r0, r3
 2290 0014 0C37     		adds	r7, r7, #12
 2291              		.cfi_def_cfa_offset 4
 2292 0016 BD46     		mov	sp, r7
 2293              		.cfi_def_cfa_register 13
 2294              		@ sp needed
 2295 0018 5DF8047B 		ldr	r7, [sp], #4
 2296              		.cfi_restore 7
 2297              		.cfi_def_cfa_offset 0
 2298 001c 7047     		bx	lr
 2299              	.L148:
 2300 001e 00BF     		.align	2
 2301              	.L147:
 2302 0020 B4000000 		.word	xTickCount
 2303              		.cfi_endproc
 2304              	.LFE87:
 2305              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2306              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2307              		.align	2
 2308              		.global	uxTaskGetNumberOfTasks
 2309              		.thumb
 2310              		.thumb_func
 2311              		.type	uxTaskGetNumberOfTasks, %function
 2312              	uxTaskGetNumberOfTasks:
 2313              	.LFB88:
2275:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2276:..\..\FreeRTOS_Source/tasks.c **** 
2277:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2278:..\..\FreeRTOS_Source/tasks.c **** {
 2314              		.loc 1 2278 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 86


 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 0
 2317              		@ frame_needed = 1, uses_anonymous_args = 0
 2318              		@ link register save eliminated.
 2319 0000 80B4     		push	{r7}
 2320              		.cfi_def_cfa_offset 4
 2321              		.cfi_offset 7, -4
 2322 0002 00AF     		add	r7, sp, #0
 2323              		.cfi_def_cfa_register 7
2279:..\..\FreeRTOS_Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2280:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t. */
2281:..\..\FreeRTOS_Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2324              		.loc 1 2281 0
 2325 0004 034B     		ldr	r3, .L151
 2326 0006 1B68     		ldr	r3, [r3]
2282:..\..\FreeRTOS_Source/tasks.c **** }
 2327              		.loc 1 2282 0
 2328 0008 1846     		mov	r0, r3
 2329 000a BD46     		mov	sp, r7
 2330              		.cfi_def_cfa_register 13
 2331              		@ sp needed
 2332 000c 5DF8047B 		ldr	r7, [sp], #4
 2333              		.cfi_restore 7
 2334              		.cfi_def_cfa_offset 0
 2335 0010 7047     		bx	lr
 2336              	.L152:
 2337 0012 00BF     		.align	2
 2338              	.L151:
 2339 0014 B0000000 		.word	uxCurrentNumberOfTasks
 2340              		.cfi_endproc
 2341              	.LFE88:
 2342              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2343              		.section	.text.pcTaskGetName,"ax",%progbits
 2344              		.align	2
 2345              		.global	pcTaskGetName
 2346              		.thumb
 2347              		.thumb_func
 2348              		.type	pcTaskGetName, %function
 2349              	pcTaskGetName:
 2350              	.LFB89:
2283:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2284:..\..\FreeRTOS_Source/tasks.c **** 
2285:..\..\FreeRTOS_Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2286:..\..\FreeRTOS_Source/tasks.c **** {
 2351              		.loc 1 2286 0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 16
 2354              		@ frame_needed = 1, uses_anonymous_args = 0
 2355              		@ link register save eliminated.
 2356 0000 80B4     		push	{r7}
 2357              		.cfi_def_cfa_offset 4
 2358              		.cfi_offset 7, -4
 2359 0002 85B0     		sub	sp, sp, #20
 2360              		.cfi_def_cfa_offset 24
 2361 0004 00AF     		add	r7, sp, #0
 2362              		.cfi_def_cfa_register 7
 2363 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 87


2287:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxTCB;
2288:..\..\FreeRTOS_Source/tasks.c **** 
2289:..\..\FreeRTOS_Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2290:..\..\FreeRTOS_Source/tasks.c **** 	queried. */
2291:..\..\FreeRTOS_Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2364              		.loc 1 2291 0
 2365 0008 7B68     		ldr	r3, [r7, #4]
 2366 000a 002B     		cmp	r3, #0
 2367 000c 02D1     		bne	.L154
 2368              		.loc 1 2291 0 is_stmt 0 discriminator 1
 2369 000e 064B     		ldr	r3, .L157
 2370 0010 1B68     		ldr	r3, [r3]
 2371 0012 00E0     		b	.L155
 2372              	.L154:
 2373              		.loc 1 2291 0 discriminator 2
 2374 0014 7B68     		ldr	r3, [r7, #4]
 2375              	.L155:
 2376              		.loc 1 2291 0 discriminator 4
 2377 0016 FB60     		str	r3, [r7, #12]
2292:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTCB );
2293:..\..\FreeRTOS_Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2378              		.loc 1 2293 0 is_stmt 1 discriminator 4
 2379 0018 FB68     		ldr	r3, [r7, #12]
 2380 001a 3433     		adds	r3, r3, #52
2294:..\..\FreeRTOS_Source/tasks.c **** }
 2381              		.loc 1 2294 0 discriminator 4
 2382 001c 1846     		mov	r0, r3
 2383 001e 1437     		adds	r7, r7, #20
 2384              		.cfi_def_cfa_offset 4
 2385 0020 BD46     		mov	sp, r7
 2386              		.cfi_def_cfa_register 13
 2387              		@ sp needed
 2388 0022 5DF8047B 		ldr	r7, [sp], #4
 2389              		.cfi_restore 7
 2390              		.cfi_def_cfa_offset 0
 2391 0026 7047     		bx	lr
 2392              	.L158:
 2393              		.align	2
 2394              	.L157:
 2395 0028 00000000 		.word	pxCurrentTCB
 2396              		.cfi_endproc
 2397              	.LFE89:
 2398              		.size	pcTaskGetName, .-pcTaskGetName
 2399              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2400              		.align	2
 2401              		.global	xTaskIncrementTick
 2402              		.thumb
 2403              		.thumb_func
 2404              		.type	xTaskIncrementTick, %function
 2405              	xTaskIncrementTick:
 2406              	.LFB90:
2295:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2296:..\..\FreeRTOS_Source/tasks.c **** 
2297:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2298:..\..\FreeRTOS_Source/tasks.c **** 
2299:..\..\FreeRTOS_Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2300:..\..\FreeRTOS_Source/tasks.c **** 	{
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 88


2301:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2302:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t x;
2303:..\..\FreeRTOS_Source/tasks.c **** 	char cNextChar;
2304:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xBreakLoop;
2305:..\..\FreeRTOS_Source/tasks.c **** 
2306:..\..\FreeRTOS_Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2307:..\..\FreeRTOS_Source/tasks.c **** 
2308:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2309:..\..\FreeRTOS_Source/tasks.c **** 		{
2310:..\..\FreeRTOS_Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2311:..\..\FreeRTOS_Source/tasks.c **** 
2312:..\..\FreeRTOS_Source/tasks.c **** 			do
2313:..\..\FreeRTOS_Source/tasks.c **** 			{
2314:..\..\FreeRTOS_Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2315:..\..\FreeRTOS_Source/tasks.c **** 
2316:..\..\FreeRTOS_Source/tasks.c **** 				/* Check each character in the name looking for a match or
2317:..\..\FreeRTOS_Source/tasks.c **** 				mismatch. */
2318:..\..\FreeRTOS_Source/tasks.c **** 				xBreakLoop = pdFALSE;
2319:..\..\FreeRTOS_Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2320:..\..\FreeRTOS_Source/tasks.c **** 				{
2321:..\..\FreeRTOS_Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2322:..\..\FreeRTOS_Source/tasks.c **** 
2323:..\..\FreeRTOS_Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2324:..\..\FreeRTOS_Source/tasks.c **** 					{
2325:..\..\FreeRTOS_Source/tasks.c **** 						/* Characters didn't match. */
2326:..\..\FreeRTOS_Source/tasks.c **** 						xBreakLoop = pdTRUE;
2327:..\..\FreeRTOS_Source/tasks.c **** 					}
2328:..\..\FreeRTOS_Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2329:..\..\FreeRTOS_Source/tasks.c **** 					{
2330:..\..\FreeRTOS_Source/tasks.c **** 						/* Both strings terminated, a match must have been
2331:..\..\FreeRTOS_Source/tasks.c **** 						found. */
2332:..\..\FreeRTOS_Source/tasks.c **** 						pxReturn = pxNextTCB;
2333:..\..\FreeRTOS_Source/tasks.c **** 						xBreakLoop = pdTRUE;
2334:..\..\FreeRTOS_Source/tasks.c **** 					}
2335:..\..\FreeRTOS_Source/tasks.c **** 					else
2336:..\..\FreeRTOS_Source/tasks.c **** 					{
2337:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2338:..\..\FreeRTOS_Source/tasks.c **** 					}
2339:..\..\FreeRTOS_Source/tasks.c **** 
2340:..\..\FreeRTOS_Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2341:..\..\FreeRTOS_Source/tasks.c **** 					{
2342:..\..\FreeRTOS_Source/tasks.c **** 						break;
2343:..\..\FreeRTOS_Source/tasks.c **** 					}
2344:..\..\FreeRTOS_Source/tasks.c **** 				}
2345:..\..\FreeRTOS_Source/tasks.c **** 
2346:..\..\FreeRTOS_Source/tasks.c **** 				if( pxReturn != NULL )
2347:..\..\FreeRTOS_Source/tasks.c **** 				{
2348:..\..\FreeRTOS_Source/tasks.c **** 					/* The handle has been found. */
2349:..\..\FreeRTOS_Source/tasks.c **** 					break;
2350:..\..\FreeRTOS_Source/tasks.c **** 				}
2351:..\..\FreeRTOS_Source/tasks.c **** 
2352:..\..\FreeRTOS_Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2353:..\..\FreeRTOS_Source/tasks.c **** 		}
2354:..\..\FreeRTOS_Source/tasks.c **** 		else
2355:..\..\FreeRTOS_Source/tasks.c **** 		{
2356:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2357:..\..\FreeRTOS_Source/tasks.c **** 		}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 89


2358:..\..\FreeRTOS_Source/tasks.c **** 
2359:..\..\FreeRTOS_Source/tasks.c **** 		return pxReturn;
2360:..\..\FreeRTOS_Source/tasks.c **** 	}
2361:..\..\FreeRTOS_Source/tasks.c **** 
2362:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2363:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2364:..\..\FreeRTOS_Source/tasks.c **** 
2365:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2366:..\..\FreeRTOS_Source/tasks.c **** 
2367:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2368:..\..\FreeRTOS_Source/tasks.c **** 	{
2369:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2370:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t* pxTCB;
2371:..\..\FreeRTOS_Source/tasks.c **** 
2372:..\..\FreeRTOS_Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2373:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2374:..\..\FreeRTOS_Source/tasks.c **** 
2375:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
2376:..\..\FreeRTOS_Source/tasks.c **** 		{
2377:..\..\FreeRTOS_Source/tasks.c **** 			/* Search the ready lists. */
2378:..\..\FreeRTOS_Source/tasks.c **** 			do
2379:..\..\FreeRTOS_Source/tasks.c **** 			{
2380:..\..\FreeRTOS_Source/tasks.c **** 				uxQueue--;
2381:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2382:..\..\FreeRTOS_Source/tasks.c **** 
2383:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB != NULL )
2384:..\..\FreeRTOS_Source/tasks.c **** 				{
2385:..\..\FreeRTOS_Source/tasks.c **** 					/* Found the handle. */
2386:..\..\FreeRTOS_Source/tasks.c **** 					break;
2387:..\..\FreeRTOS_Source/tasks.c **** 				}
2388:..\..\FreeRTOS_Source/tasks.c **** 
2389:..\..\FreeRTOS_Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2390:..\..\FreeRTOS_Source/tasks.c **** 
2391:..\..\FreeRTOS_Source/tasks.c **** 			/* Search the delayed lists. */
2392:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == NULL )
2393:..\..\FreeRTOS_Source/tasks.c **** 			{
2394:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2395:..\..\FreeRTOS_Source/tasks.c **** 			}
2396:..\..\FreeRTOS_Source/tasks.c **** 
2397:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == NULL )
2398:..\..\FreeRTOS_Source/tasks.c **** 			{
2399:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2400:..\..\FreeRTOS_Source/tasks.c **** 			}
2401:..\..\FreeRTOS_Source/tasks.c **** 
2402:..\..\FreeRTOS_Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2403:..\..\FreeRTOS_Source/tasks.c **** 			{
2404:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB == NULL )
2405:..\..\FreeRTOS_Source/tasks.c **** 				{
2406:..\..\FreeRTOS_Source/tasks.c **** 					/* Search the suspended list. */
2407:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2408:..\..\FreeRTOS_Source/tasks.c **** 				}
2409:..\..\FreeRTOS_Source/tasks.c **** 			}
2410:..\..\FreeRTOS_Source/tasks.c **** 			#endif
2411:..\..\FreeRTOS_Source/tasks.c **** 
2412:..\..\FreeRTOS_Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2413:..\..\FreeRTOS_Source/tasks.c **** 			{
2414:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB == NULL )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 90


2415:..\..\FreeRTOS_Source/tasks.c **** 				{
2416:..\..\FreeRTOS_Source/tasks.c **** 					/* Search the deleted list. */
2417:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2418:..\..\FreeRTOS_Source/tasks.c **** 				}
2419:..\..\FreeRTOS_Source/tasks.c **** 			}
2420:..\..\FreeRTOS_Source/tasks.c **** 			#endif
2421:..\..\FreeRTOS_Source/tasks.c **** 		}
2422:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xTaskResumeAll();
2423:..\..\FreeRTOS_Source/tasks.c **** 
2424:..\..\FreeRTOS_Source/tasks.c **** 		return pxTCB;
2425:..\..\FreeRTOS_Source/tasks.c **** 	}
2426:..\..\FreeRTOS_Source/tasks.c **** 
2427:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2428:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2429:..\..\FreeRTOS_Source/tasks.c **** 
2430:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2431:..\..\FreeRTOS_Source/tasks.c **** 
2432:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2433:..\..\FreeRTOS_Source/tasks.c **** 	{
2434:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2435:..\..\FreeRTOS_Source/tasks.c **** 
2436:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
2437:..\..\FreeRTOS_Source/tasks.c **** 		{
2438:..\..\FreeRTOS_Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2439:..\..\FreeRTOS_Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2440:..\..\FreeRTOS_Source/tasks.c **** 			{
2441:..\..\FreeRTOS_Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2442:..\..\FreeRTOS_Source/tasks.c **** 				task in the Ready state. */
2443:..\..\FreeRTOS_Source/tasks.c **** 				do
2444:..\..\FreeRTOS_Source/tasks.c **** 				{
2445:..\..\FreeRTOS_Source/tasks.c **** 					uxQueue--;
2446:..\..\FreeRTOS_Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2447:..\..\FreeRTOS_Source/tasks.c **** 
2448:..\..\FreeRTOS_Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2449:..\..\FreeRTOS_Source/tasks.c **** 
2450:..\..\FreeRTOS_Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2451:..\..\FreeRTOS_Source/tasks.c **** 				task in the Blocked state. */
2452:..\..\FreeRTOS_Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2453:..\..\FreeRTOS_Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2454:..\..\FreeRTOS_Source/tasks.c **** 
2455:..\..\FreeRTOS_Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2456:..\..\FreeRTOS_Source/tasks.c **** 				{
2457:..\..\FreeRTOS_Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2458:..\..\FreeRTOS_Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2459:..\..\FreeRTOS_Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2460:..\..\FreeRTOS_Source/tasks.c **** 				}
2461:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2462:..\..\FreeRTOS_Source/tasks.c **** 
2463:..\..\FreeRTOS_Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2464:..\..\FreeRTOS_Source/tasks.c **** 				{
2465:..\..\FreeRTOS_Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2466:..\..\FreeRTOS_Source/tasks.c **** 					each task in the Suspended state. */
2467:..\..\FreeRTOS_Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2468:..\..\FreeRTOS_Source/tasks.c **** 				}
2469:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2470:..\..\FreeRTOS_Source/tasks.c **** 
2471:..\..\FreeRTOS_Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 91


2472:..\..\FreeRTOS_Source/tasks.c **** 				{
2473:..\..\FreeRTOS_Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2474:..\..\FreeRTOS_Source/tasks.c **** 					{
2475:..\..\FreeRTOS_Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2476:..\..\FreeRTOS_Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2477:..\..\FreeRTOS_Source/tasks.c **** 						#else
2478:..\..\FreeRTOS_Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2479:..\..\FreeRTOS_Source/tasks.c **** 						#endif
2480:..\..\FreeRTOS_Source/tasks.c **** 					}
2481:..\..\FreeRTOS_Source/tasks.c **** 				}
2482:..\..\FreeRTOS_Source/tasks.c **** 				#else
2483:..\..\FreeRTOS_Source/tasks.c **** 				{
2484:..\..\FreeRTOS_Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2485:..\..\FreeRTOS_Source/tasks.c **** 					{
2486:..\..\FreeRTOS_Source/tasks.c **** 						*pulTotalRunTime = 0;
2487:..\..\FreeRTOS_Source/tasks.c **** 					}
2488:..\..\FreeRTOS_Source/tasks.c **** 				}
2489:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2490:..\..\FreeRTOS_Source/tasks.c **** 			}
2491:..\..\FreeRTOS_Source/tasks.c **** 			else
2492:..\..\FreeRTOS_Source/tasks.c **** 			{
2493:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2494:..\..\FreeRTOS_Source/tasks.c **** 			}
2495:..\..\FreeRTOS_Source/tasks.c **** 		}
2496:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xTaskResumeAll();
2497:..\..\FreeRTOS_Source/tasks.c **** 
2498:..\..\FreeRTOS_Source/tasks.c **** 		return uxTask;
2499:..\..\FreeRTOS_Source/tasks.c **** 	}
2500:..\..\FreeRTOS_Source/tasks.c **** 
2501:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2502:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2503:..\..\FreeRTOS_Source/tasks.c **** 
2504:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2505:..\..\FreeRTOS_Source/tasks.c **** 
2506:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2507:..\..\FreeRTOS_Source/tasks.c **** 	{
2508:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2509:..\..\FreeRTOS_Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2510:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2511:..\..\FreeRTOS_Source/tasks.c **** 		return xIdleTaskHandle;
2512:..\..\FreeRTOS_Source/tasks.c **** 	}
2513:..\..\FreeRTOS_Source/tasks.c **** 
2514:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2515:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2516:..\..\FreeRTOS_Source/tasks.c **** 
2517:..\..\FreeRTOS_Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2518:..\..\FreeRTOS_Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2519:..\..\FreeRTOS_Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2520:..\..\FreeRTOS_Source/tasks.c **** 1. */
2521:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2522:..\..\FreeRTOS_Source/tasks.c **** 
2523:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2524:..\..\FreeRTOS_Source/tasks.c **** 	{
2525:..\..\FreeRTOS_Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2526:..\..\FreeRTOS_Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2527:..\..\FreeRTOS_Source/tasks.c **** 		each stepped tick. */
2528:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 92


2529:..\..\FreeRTOS_Source/tasks.c **** 		xTickCount += xTicksToJump;
2530:..\..\FreeRTOS_Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2531:..\..\FreeRTOS_Source/tasks.c **** 	}
2532:..\..\FreeRTOS_Source/tasks.c **** 
2533:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2534:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2535:..\..\FreeRTOS_Source/tasks.c **** 
2536:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2537:..\..\FreeRTOS_Source/tasks.c **** 
2538:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2539:..\..\FreeRTOS_Source/tasks.c **** 	{
2540:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2541:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
2542:..\..\FreeRTOS_Source/tasks.c **** 
2543:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTCB );
2544:..\..\FreeRTOS_Source/tasks.c **** 
2545:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
2546:..\..\FreeRTOS_Source/tasks.c **** 		{
2547:..\..\FreeRTOS_Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2548:..\..\FreeRTOS_Source/tasks.c **** 			it is actually in the Blocked state. */
2549:..\..\FreeRTOS_Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2550:..\..\FreeRTOS_Source/tasks.c **** 			{
2551:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdPASS;
2552:..\..\FreeRTOS_Source/tasks.c **** 
2553:..\..\FreeRTOS_Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2554:..\..\FreeRTOS_Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2555:..\..\FreeRTOS_Source/tasks.c **** 				scheduler is suspended. */
2556:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2557:..\..\FreeRTOS_Source/tasks.c **** 
2558:..\..\FreeRTOS_Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2559:..\..\FreeRTOS_Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2560:..\..\FreeRTOS_Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2561:..\..\FreeRTOS_Source/tasks.c **** 				is used. */
2562:..\..\FreeRTOS_Source/tasks.c **** 				taskENTER_CRITICAL();
2563:..\..\FreeRTOS_Source/tasks.c **** 				{
2564:..\..\FreeRTOS_Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2565:..\..\FreeRTOS_Source/tasks.c **** 					{
2566:..\..\FreeRTOS_Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2567:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2568:..\..\FreeRTOS_Source/tasks.c **** 					}
2569:..\..\FreeRTOS_Source/tasks.c **** 					else
2570:..\..\FreeRTOS_Source/tasks.c **** 					{
2571:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:..\..\FreeRTOS_Source/tasks.c **** 					}
2573:..\..\FreeRTOS_Source/tasks.c **** 				}
2574:..\..\FreeRTOS_Source/tasks.c **** 				taskEXIT_CRITICAL();
2575:..\..\FreeRTOS_Source/tasks.c **** 
2576:..\..\FreeRTOS_Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2577:..\..\FreeRTOS_Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2578:..\..\FreeRTOS_Source/tasks.c **** 
2579:..\..\FreeRTOS_Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2580:..\..\FreeRTOS_Source/tasks.c **** 				switch if preemption is turned off. */
2581:..\..\FreeRTOS_Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2582:..\..\FreeRTOS_Source/tasks.c **** 				{
2583:..\..\FreeRTOS_Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2584:..\..\FreeRTOS_Source/tasks.c **** 					performed if the unblocked task has a priority that is
2585:..\..\FreeRTOS_Source/tasks.c **** 					equal to or higher than the currently executing task. */
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 93


2586:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2587:..\..\FreeRTOS_Source/tasks.c **** 					{
2588:..\..\FreeRTOS_Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2589:..\..\FreeRTOS_Source/tasks.c **** 						is unsuspended. */
2590:..\..\FreeRTOS_Source/tasks.c **** 						xYieldPending = pdTRUE;
2591:..\..\FreeRTOS_Source/tasks.c **** 					}
2592:..\..\FreeRTOS_Source/tasks.c **** 					else
2593:..\..\FreeRTOS_Source/tasks.c **** 					{
2594:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2595:..\..\FreeRTOS_Source/tasks.c **** 					}
2596:..\..\FreeRTOS_Source/tasks.c **** 				}
2597:..\..\FreeRTOS_Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2598:..\..\FreeRTOS_Source/tasks.c **** 			}
2599:..\..\FreeRTOS_Source/tasks.c **** 			else
2600:..\..\FreeRTOS_Source/tasks.c **** 			{
2601:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFAIL;
2602:..\..\FreeRTOS_Source/tasks.c **** 			}
2603:..\..\FreeRTOS_Source/tasks.c **** 		}
2604:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xTaskResumeAll();
2605:..\..\FreeRTOS_Source/tasks.c **** 
2606:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2607:..\..\FreeRTOS_Source/tasks.c **** 	}
2608:..\..\FreeRTOS_Source/tasks.c **** 
2609:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2610:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2611:..\..\FreeRTOS_Source/tasks.c **** 
2612:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2613:..\..\FreeRTOS_Source/tasks.c **** {
 2407              		.loc 1 2613 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 24
 2410              		@ frame_needed = 1, uses_anonymous_args = 0
 2411 0000 80B5     		push	{r7, lr}
 2412              		.cfi_def_cfa_offset 8
 2413              		.cfi_offset 7, -8
 2414              		.cfi_offset 14, -4
 2415 0002 86B0     		sub	sp, sp, #24
 2416              		.cfi_def_cfa_offset 32
 2417 0004 00AF     		add	r7, sp, #0
 2418              		.cfi_def_cfa_register 7
2614:..\..\FreeRTOS_Source/tasks.c **** TCB_t * pxTCB;
2615:..\..\FreeRTOS_Source/tasks.c **** TickType_t xItemValue;
2616:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2419              		.loc 1 2616 0
 2420 0006 0023     		movs	r3, #0
 2421 0008 7B61     		str	r3, [r7, #20]
2617:..\..\FreeRTOS_Source/tasks.c **** 
2618:..\..\FreeRTOS_Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2619:..\..\FreeRTOS_Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2620:..\..\FreeRTOS_Source/tasks.c **** 	tasks to be unblocked. */
2621:..\..\FreeRTOS_Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2622:..\..\FreeRTOS_Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2422              		.loc 1 2622 0
 2423 000a 474B     		ldr	r3, .L172
 2424 000c 1B68     		ldr	r3, [r3]
 2425 000e 002B     		cmp	r3, #0
 2426 0010 79D1     		bne	.L160
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 94


 2427              	.LBB42:
2623:..\..\FreeRTOS_Source/tasks.c **** 	{
2624:..\..\FreeRTOS_Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2625:..\..\FreeRTOS_Source/tasks.c **** 		block. */
2626:..\..\FreeRTOS_Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 2428              		.loc 1 2626 0
 2429 0012 464B     		ldr	r3, .L172+4
 2430 0014 1B68     		ldr	r3, [r3]
 2431 0016 0133     		adds	r3, r3, #1
 2432 0018 3B61     		str	r3, [r7, #16]
2627:..\..\FreeRTOS_Source/tasks.c **** 
2628:..\..\FreeRTOS_Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2629:..\..\FreeRTOS_Source/tasks.c **** 		delayed lists if it wraps to 0. */
2630:..\..\FreeRTOS_Source/tasks.c **** 		xTickCount = xConstTickCount;
 2433              		.loc 1 2630 0
 2434 001a 444A     		ldr	r2, .L172+4
 2435 001c 3B69     		ldr	r3, [r7, #16]
 2436 001e 1360     		str	r3, [r2]
2631:..\..\FreeRTOS_Source/tasks.c **** 
2632:..\..\FreeRTOS_Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 2437              		.loc 1 2632 0
 2438 0020 3B69     		ldr	r3, [r7, #16]
 2439 0022 002B     		cmp	r3, #0
 2440 0024 10D1     		bne	.L161
 2441              	.LBB43:
2633:..\..\FreeRTOS_Source/tasks.c **** 		{
2634:..\..\FreeRTOS_Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2442              		.loc 1 2634 0
 2443 0026 424B     		ldr	r3, .L172+8
 2444 0028 1B68     		ldr	r3, [r3]
 2445 002a FB60     		str	r3, [r7, #12]
 2446 002c 414B     		ldr	r3, .L172+12
 2447 002e 1B68     		ldr	r3, [r3]
 2448 0030 3F4A     		ldr	r2, .L172+8
 2449 0032 1360     		str	r3, [r2]
 2450 0034 3F4A     		ldr	r2, .L172+12
 2451 0036 FB68     		ldr	r3, [r7, #12]
 2452 0038 1360     		str	r3, [r2]
 2453 003a 3F4B     		ldr	r3, .L172+16
 2454 003c 1B68     		ldr	r3, [r3]
 2455 003e 0133     		adds	r3, r3, #1
 2456 0040 3D4A     		ldr	r2, .L172+16
 2457 0042 1360     		str	r3, [r2]
 2458 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2459              	.L161:
 2460              	.LBE43:
2635:..\..\FreeRTOS_Source/tasks.c **** 		}
2636:..\..\FreeRTOS_Source/tasks.c **** 		else
2637:..\..\FreeRTOS_Source/tasks.c **** 		{
2638:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2639:..\..\FreeRTOS_Source/tasks.c **** 		}
2640:..\..\FreeRTOS_Source/tasks.c **** 
2641:..\..\FreeRTOS_Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2642:..\..\FreeRTOS_Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2643:..\..\FreeRTOS_Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2644:..\..\FreeRTOS_Source/tasks.c **** 		look any further down the list. */
2645:..\..\FreeRTOS_Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 95


 2461              		.loc 1 2645 0
 2462 0048 3C4B     		ldr	r3, .L172+20
 2463 004a 1B68     		ldr	r3, [r3]
 2464 004c 3A69     		ldr	r2, [r7, #16]
 2465 004e 9A42     		cmp	r2, r3
 2466 0050 4AD3     		bcc	.L162
 2467              	.L167:
2646:..\..\FreeRTOS_Source/tasks.c **** 		{
2647:..\..\FreeRTOS_Source/tasks.c **** 			for( ;; )
2648:..\..\FreeRTOS_Source/tasks.c **** 			{
2649:..\..\FreeRTOS_Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2468              		.loc 1 2649 0
 2469 0052 374B     		ldr	r3, .L172+8
 2470 0054 1B68     		ldr	r3, [r3]
 2471 0056 1B68     		ldr	r3, [r3]
 2472 0058 002B     		cmp	r3, #0
 2473 005a 04D1     		bne	.L163
2650:..\..\FreeRTOS_Source/tasks.c **** 				{
2651:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2652:..\..\FreeRTOS_Source/tasks.c **** 					to the maximum possible value so it is extremely
2653:..\..\FreeRTOS_Source/tasks.c **** 					unlikely that the
2654:..\..\FreeRTOS_Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2655:..\..\FreeRTOS_Source/tasks.c **** 					next time through. */
2656:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2474              		.loc 1 2656 0
 2475 005c 374B     		ldr	r3, .L172+20
 2476 005e 4FF0FF32 		mov	r2, #-1
 2477 0062 1A60     		str	r2, [r3]
2657:..\..\FreeRTOS_Source/tasks.c **** 					break;
 2478              		.loc 1 2657 0
 2479 0064 40E0     		b	.L162
 2480              	.L163:
2658:..\..\FreeRTOS_Source/tasks.c **** 				}
2659:..\..\FreeRTOS_Source/tasks.c **** 				else
2660:..\..\FreeRTOS_Source/tasks.c **** 				{
2661:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2662:..\..\FreeRTOS_Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2663:..\..\FreeRTOS_Source/tasks.c **** 					at which the task at the head of the delayed list must
2664:..\..\FreeRTOS_Source/tasks.c **** 					be removed from the Blocked state. */
2665:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 2481              		.loc 1 2665 0
 2482 0066 324B     		ldr	r3, .L172+8
 2483 0068 1B68     		ldr	r3, [r3]
 2484 006a DB68     		ldr	r3, [r3, #12]
 2485 006c DB68     		ldr	r3, [r3, #12]
 2486 006e BB60     		str	r3, [r7, #8]
2666:..\..\FreeRTOS_Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2487              		.loc 1 2666 0
 2488 0070 BB68     		ldr	r3, [r7, #8]
 2489 0072 5B68     		ldr	r3, [r3, #4]
 2490 0074 7B60     		str	r3, [r7, #4]
2667:..\..\FreeRTOS_Source/tasks.c **** 
2668:..\..\FreeRTOS_Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2491              		.loc 1 2668 0
 2492 0076 3A69     		ldr	r2, [r7, #16]
 2493 0078 7B68     		ldr	r3, [r7, #4]
 2494 007a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 96


 2495 007c 03D2     		bcs	.L164
2669:..\..\FreeRTOS_Source/tasks.c **** 					{
2670:..\..\FreeRTOS_Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2671:..\..\FreeRTOS_Source/tasks.c **** 						item value is the time at which the task at the head
2672:..\..\FreeRTOS_Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2673:..\..\FreeRTOS_Source/tasks.c **** 						state -	so record the item value in
2674:..\..\FreeRTOS_Source/tasks.c **** 						xNextTaskUnblockTime. */
2675:..\..\FreeRTOS_Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2496              		.loc 1 2675 0
 2497 007e 2F4A     		ldr	r2, .L172+20
 2498 0080 7B68     		ldr	r3, [r7, #4]
 2499 0082 1360     		str	r3, [r2]
2676:..\..\FreeRTOS_Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2500              		.loc 1 2676 0
 2501 0084 30E0     		b	.L162
 2502              	.L164:
2677:..\..\FreeRTOS_Source/tasks.c **** 					}
2678:..\..\FreeRTOS_Source/tasks.c **** 					else
2679:..\..\FreeRTOS_Source/tasks.c **** 					{
2680:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2681:..\..\FreeRTOS_Source/tasks.c **** 					}
2682:..\..\FreeRTOS_Source/tasks.c **** 
2683:..\..\FreeRTOS_Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2684:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2503              		.loc 1 2684 0
 2504 0086 BB68     		ldr	r3, [r7, #8]
 2505 0088 0433     		adds	r3, r3, #4
 2506 008a 1846     		mov	r0, r3
 2507 008c FFF7FEFF 		bl	uxListRemove
2685:..\..\FreeRTOS_Source/tasks.c **** 
2686:..\..\FreeRTOS_Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2687:..\..\FreeRTOS_Source/tasks.c **** 					it from the event list. */
2688:..\..\FreeRTOS_Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2508              		.loc 1 2688 0
 2509 0090 BB68     		ldr	r3, [r7, #8]
 2510 0092 9B6A     		ldr	r3, [r3, #40]
 2511 0094 002B     		cmp	r3, #0
 2512 0096 04D0     		beq	.L165
2689:..\..\FreeRTOS_Source/tasks.c **** 					{
2690:..\..\FreeRTOS_Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2513              		.loc 1 2690 0
 2514 0098 BB68     		ldr	r3, [r7, #8]
 2515 009a 1833     		adds	r3, r3, #24
 2516 009c 1846     		mov	r0, r3
 2517 009e FFF7FEFF 		bl	uxListRemove
 2518              	.L165:
2691:..\..\FreeRTOS_Source/tasks.c **** 					}
2692:..\..\FreeRTOS_Source/tasks.c **** 					else
2693:..\..\FreeRTOS_Source/tasks.c **** 					{
2694:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2695:..\..\FreeRTOS_Source/tasks.c **** 					}
2696:..\..\FreeRTOS_Source/tasks.c **** 
2697:..\..\FreeRTOS_Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2698:..\..\FreeRTOS_Source/tasks.c **** 					list. */
2699:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2519              		.loc 1 2699 0
 2520 00a2 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 97


 2521 00a4 DB6A     		ldr	r3, [r3, #44]
 2522 00a6 1A46     		mov	r2, r3
 2523 00a8 0123     		movs	r3, #1
 2524 00aa 03FA02F2 		lsl	r2, r3, r2
 2525 00ae 244B     		ldr	r3, .L172+24
 2526 00b0 1B68     		ldr	r3, [r3]
 2527 00b2 1343     		orrs	r3, r3, r2
 2528 00b4 224A     		ldr	r2, .L172+24
 2529 00b6 1360     		str	r3, [r2]
 2530 00b8 BB68     		ldr	r3, [r7, #8]
 2531 00ba DA6A     		ldr	r2, [r3, #44]
 2532 00bc 1346     		mov	r3, r2
 2533 00be 9B00     		lsls	r3, r3, #2
 2534 00c0 1344     		add	r3, r3, r2
 2535 00c2 9B00     		lsls	r3, r3, #2
 2536 00c4 1F4A     		ldr	r2, .L172+28
 2537 00c6 1A44     		add	r2, r2, r3
 2538 00c8 BB68     		ldr	r3, [r7, #8]
 2539 00ca 0433     		adds	r3, r3, #4
 2540 00cc 1046     		mov	r0, r2
 2541 00ce 1946     		mov	r1, r3
 2542 00d0 FFF7FEFF 		bl	vListInsertEnd
2700:..\..\FreeRTOS_Source/tasks.c **** 
2701:..\..\FreeRTOS_Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2702:..\..\FreeRTOS_Source/tasks.c **** 					context switch if preemption is turned off. */
2703:..\..\FreeRTOS_Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2704:..\..\FreeRTOS_Source/tasks.c **** 					{
2705:..\..\FreeRTOS_Source/tasks.c **** 						/* Preemption is on, but a context switch should
2706:..\..\FreeRTOS_Source/tasks.c **** 						only be performed if the unblocked task has a
2707:..\..\FreeRTOS_Source/tasks.c **** 						priority that is equal to or higher than the
2708:..\..\FreeRTOS_Source/tasks.c **** 						currently executing task. */
2709:..\..\FreeRTOS_Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2543              		.loc 1 2709 0
 2544 00d4 BB68     		ldr	r3, [r7, #8]
 2545 00d6 DA6A     		ldr	r2, [r3, #44]
 2546 00d8 1B4B     		ldr	r3, .L172+32
 2547 00da 1B68     		ldr	r3, [r3]
 2548 00dc DB6A     		ldr	r3, [r3, #44]
 2549 00de 9A42     		cmp	r2, r3
 2550 00e0 01D3     		bcc	.L166
2710:..\..\FreeRTOS_Source/tasks.c **** 						{
2711:..\..\FreeRTOS_Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2551              		.loc 1 2711 0
 2552 00e2 0123     		movs	r3, #1
 2553 00e4 7B61     		str	r3, [r7, #20]
 2554              	.L166:
2712:..\..\FreeRTOS_Source/tasks.c **** 						}
2713:..\..\FreeRTOS_Source/tasks.c **** 						else
2714:..\..\FreeRTOS_Source/tasks.c **** 						{
2715:..\..\FreeRTOS_Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2716:..\..\FreeRTOS_Source/tasks.c **** 						}
2717:..\..\FreeRTOS_Source/tasks.c **** 					}
2718:..\..\FreeRTOS_Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2719:..\..\FreeRTOS_Source/tasks.c **** 				}
2720:..\..\FreeRTOS_Source/tasks.c **** 			}
 2555              		.loc 1 2720 0
 2556 00e6 B4E7     		b	.L167
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 98


 2557              	.L162:
2721:..\..\FreeRTOS_Source/tasks.c **** 		}
2722:..\..\FreeRTOS_Source/tasks.c **** 
2723:..\..\FreeRTOS_Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2724:..\..\FreeRTOS_Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2725:..\..\FreeRTOS_Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2726:..\..\FreeRTOS_Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2727:..\..\FreeRTOS_Source/tasks.c **** 		{
2728:..\..\FreeRTOS_Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2558              		.loc 1 2728 0
 2559 00e8 174B     		ldr	r3, .L172+32
 2560 00ea 1B68     		ldr	r3, [r3]
 2561 00ec DA6A     		ldr	r2, [r3, #44]
 2562 00ee 1549     		ldr	r1, .L172+28
 2563 00f0 1346     		mov	r3, r2
 2564 00f2 9B00     		lsls	r3, r3, #2
 2565 00f4 1344     		add	r3, r3, r2
 2566 00f6 9B00     		lsls	r3, r3, #2
 2567 00f8 0B44     		add	r3, r3, r1
 2568 00fa 1B68     		ldr	r3, [r3]
 2569 00fc 012B     		cmp	r3, #1
 2570 00fe 01D9     		bls	.L168
2729:..\..\FreeRTOS_Source/tasks.c **** 			{
2730:..\..\FreeRTOS_Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2571              		.loc 1 2730 0
 2572 0100 0123     		movs	r3, #1
 2573 0102 7B61     		str	r3, [r7, #20]
 2574              	.L168:
 2575              	.LBE42:
 2576 0104 04E0     		b	.L169
 2577              	.L160:
2731:..\..\FreeRTOS_Source/tasks.c **** 			}
2732:..\..\FreeRTOS_Source/tasks.c **** 			else
2733:..\..\FreeRTOS_Source/tasks.c **** 			{
2734:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2735:..\..\FreeRTOS_Source/tasks.c **** 			}
2736:..\..\FreeRTOS_Source/tasks.c **** 		}
2737:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2738:..\..\FreeRTOS_Source/tasks.c **** 
2739:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2740:..\..\FreeRTOS_Source/tasks.c **** 		{
2741:..\..\FreeRTOS_Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2742:..\..\FreeRTOS_Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2743:..\..\FreeRTOS_Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2744:..\..\FreeRTOS_Source/tasks.c **** 			{
2745:..\..\FreeRTOS_Source/tasks.c **** 				vApplicationTickHook();
2746:..\..\FreeRTOS_Source/tasks.c **** 			}
2747:..\..\FreeRTOS_Source/tasks.c **** 			else
2748:..\..\FreeRTOS_Source/tasks.c **** 			{
2749:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2750:..\..\FreeRTOS_Source/tasks.c **** 			}
2751:..\..\FreeRTOS_Source/tasks.c **** 		}
2752:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2753:..\..\FreeRTOS_Source/tasks.c **** 	}
2754:..\..\FreeRTOS_Source/tasks.c **** 	else
2755:..\..\FreeRTOS_Source/tasks.c **** 	{
2756:..\..\FreeRTOS_Source/tasks.c **** 		++uxPendedTicks;
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 99


 2578              		.loc 1 2756 0
 2579 0106 114B     		ldr	r3, .L172+36
 2580 0108 1B68     		ldr	r3, [r3]
 2581 010a 0133     		adds	r3, r3, #1
 2582 010c 0F4A     		ldr	r2, .L172+36
 2583 010e 1360     		str	r3, [r2]
 2584              	.L169:
2757:..\..\FreeRTOS_Source/tasks.c **** 
2758:..\..\FreeRTOS_Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2759:..\..\FreeRTOS_Source/tasks.c **** 		scheduler is locked. */
2760:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2761:..\..\FreeRTOS_Source/tasks.c **** 		{
2762:..\..\FreeRTOS_Source/tasks.c **** 			vApplicationTickHook();
2763:..\..\FreeRTOS_Source/tasks.c **** 		}
2764:..\..\FreeRTOS_Source/tasks.c **** 		#endif
2765:..\..\FreeRTOS_Source/tasks.c **** 	}
2766:..\..\FreeRTOS_Source/tasks.c **** 
2767:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2768:..\..\FreeRTOS_Source/tasks.c **** 	{
2769:..\..\FreeRTOS_Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2585              		.loc 1 2769 0
 2586 0110 0F4B     		ldr	r3, .L172+40
 2587 0112 1B68     		ldr	r3, [r3]
 2588 0114 002B     		cmp	r3, #0
 2589 0116 01D0     		beq	.L170
2770:..\..\FreeRTOS_Source/tasks.c **** 		{
2771:..\..\FreeRTOS_Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2590              		.loc 1 2771 0
 2591 0118 0123     		movs	r3, #1
 2592 011a 7B61     		str	r3, [r7, #20]
 2593              	.L170:
2772:..\..\FreeRTOS_Source/tasks.c **** 		}
2773:..\..\FreeRTOS_Source/tasks.c **** 		else
2774:..\..\FreeRTOS_Source/tasks.c **** 		{
2775:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2776:..\..\FreeRTOS_Source/tasks.c **** 		}
2777:..\..\FreeRTOS_Source/tasks.c **** 	}
2778:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2779:..\..\FreeRTOS_Source/tasks.c **** 
2780:..\..\FreeRTOS_Source/tasks.c **** 	return xSwitchRequired;
 2594              		.loc 1 2780 0
 2595 011c 7B69     		ldr	r3, [r7, #20]
2781:..\..\FreeRTOS_Source/tasks.c **** }
 2596              		.loc 1 2781 0
 2597 011e 1846     		mov	r0, r3
 2598 0120 1837     		adds	r7, r7, #24
 2599              		.cfi_def_cfa_offset 8
 2600 0122 BD46     		mov	sp, r7
 2601              		.cfi_def_cfa_register 13
 2602              		@ sp needed
 2603 0124 80BD     		pop	{r7, pc}
 2604              	.L173:
 2605 0126 00BF     		.align	2
 2606              	.L172:
 2607 0128 D8000000 		.word	uxSchedulerSuspended
 2608 012c B4000000 		.word	xTickCount
 2609 0130 68000000 		.word	pxDelayedTaskList
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 100


 2610 0134 6C000000 		.word	pxOverflowDelayedTaskList
 2611 0138 C8000000 		.word	xNumOfOverflows
 2612 013c D0000000 		.word	xNextTaskUnblockTime
 2613 0140 B8000000 		.word	uxTopReadyPriority
 2614 0144 04000000 		.word	pxReadyTasksLists
 2615 0148 00000000 		.word	pxCurrentTCB
 2616 014c C0000000 		.word	uxPendedTicks
 2617 0150 C4000000 		.word	xYieldPending
 2618              		.cfi_endproc
 2619              	.LFE90:
 2620              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2621              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2622              		.align	2
 2623              		.global	vTaskSwitchContext
 2624              		.thumb
 2625              		.thumb_func
 2626              		.type	vTaskSwitchContext, %function
 2627              	vTaskSwitchContext:
 2628              	.LFB91:
2782:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2783:..\..\FreeRTOS_Source/tasks.c **** 
2784:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2785:..\..\FreeRTOS_Source/tasks.c **** 
2786:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2787:..\..\FreeRTOS_Source/tasks.c **** 	{
2788:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *xTCB;
2789:..\..\FreeRTOS_Source/tasks.c **** 
2790:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2791:..\..\FreeRTOS_Source/tasks.c **** 		getting set. */
2792:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask == NULL )
2793:..\..\FreeRTOS_Source/tasks.c **** 		{
2794:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2795:..\..\FreeRTOS_Source/tasks.c **** 		}
2796:..\..\FreeRTOS_Source/tasks.c **** 		else
2797:..\..\FreeRTOS_Source/tasks.c **** 		{
2798:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = xTask;
2799:..\..\FreeRTOS_Source/tasks.c **** 		}
2800:..\..\FreeRTOS_Source/tasks.c **** 
2801:..\..\FreeRTOS_Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2802:..\..\FreeRTOS_Source/tasks.c **** 		the value can be accessed from an interrupt. */
2803:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
2804:..\..\FreeRTOS_Source/tasks.c **** 		{
2805:..\..\FreeRTOS_Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2806:..\..\FreeRTOS_Source/tasks.c **** 		}
2807:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
2808:..\..\FreeRTOS_Source/tasks.c **** 	}
2809:..\..\FreeRTOS_Source/tasks.c **** 
2810:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2812:..\..\FreeRTOS_Source/tasks.c **** 
2813:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:..\..\FreeRTOS_Source/tasks.c **** 
2815:..\..\FreeRTOS_Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2816:..\..\FreeRTOS_Source/tasks.c **** 	{
2817:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *xTCB;
2818:..\..\FreeRTOS_Source/tasks.c **** 	TaskHookFunction_t xReturn;
2819:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 101


2820:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2821:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask == NULL )
2822:..\..\FreeRTOS_Source/tasks.c **** 		{
2823:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:..\..\FreeRTOS_Source/tasks.c **** 		}
2825:..\..\FreeRTOS_Source/tasks.c **** 		else
2826:..\..\FreeRTOS_Source/tasks.c **** 		{
2827:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:..\..\FreeRTOS_Source/tasks.c **** 		}
2829:..\..\FreeRTOS_Source/tasks.c **** 
2830:..\..\FreeRTOS_Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2831:..\..\FreeRTOS_Source/tasks.c **** 		the value can be accessed from an interrupt. */
2832:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
2833:..\..\FreeRTOS_Source/tasks.c **** 		{
2834:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2835:..\..\FreeRTOS_Source/tasks.c **** 		}
2836:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
2837:..\..\FreeRTOS_Source/tasks.c **** 
2838:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2839:..\..\FreeRTOS_Source/tasks.c **** 	}
2840:..\..\FreeRTOS_Source/tasks.c **** 
2841:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2842:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2843:..\..\FreeRTOS_Source/tasks.c **** 
2844:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2845:..\..\FreeRTOS_Source/tasks.c **** 
2846:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2847:..\..\FreeRTOS_Source/tasks.c **** 	{
2848:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *xTCB;
2849:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
2850:..\..\FreeRTOS_Source/tasks.c **** 
2851:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2852:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask == NULL )
2853:..\..\FreeRTOS_Source/tasks.c **** 		{
2854:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2855:..\..\FreeRTOS_Source/tasks.c **** 		}
2856:..\..\FreeRTOS_Source/tasks.c **** 		else
2857:..\..\FreeRTOS_Source/tasks.c **** 		{
2858:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = xTask;
2859:..\..\FreeRTOS_Source/tasks.c **** 		}
2860:..\..\FreeRTOS_Source/tasks.c **** 
2861:..\..\FreeRTOS_Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2862:..\..\FreeRTOS_Source/tasks.c **** 		{
2863:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2864:..\..\FreeRTOS_Source/tasks.c **** 		}
2865:..\..\FreeRTOS_Source/tasks.c **** 		else
2866:..\..\FreeRTOS_Source/tasks.c **** 		{
2867:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdFAIL;
2868:..\..\FreeRTOS_Source/tasks.c **** 		}
2869:..\..\FreeRTOS_Source/tasks.c **** 
2870:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2871:..\..\FreeRTOS_Source/tasks.c **** 	}
2872:..\..\FreeRTOS_Source/tasks.c **** 
2873:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2874:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2875:..\..\FreeRTOS_Source/tasks.c **** 
2876:..\..\FreeRTOS_Source/tasks.c **** void vTaskSwitchContext( void )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 102


2877:..\..\FreeRTOS_Source/tasks.c **** {
 2629              		.loc 1 2877 0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 24
 2632              		@ frame_needed = 1, uses_anonymous_args = 0
 2633 0000 80B5     		push	{r7, lr}
 2634              		.cfi_def_cfa_offset 8
 2635              		.cfi_offset 7, -8
 2636              		.cfi_offset 14, -4
 2637 0002 86B0     		sub	sp, sp, #24
 2638              		.cfi_def_cfa_offset 32
 2639 0004 00AF     		add	r7, sp, #0
 2640              		.cfi_def_cfa_register 7
2878:..\..\FreeRTOS_Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2641              		.loc 1 2878 0
 2642 0006 2E4B     		ldr	r3, .L181
 2643 0008 1B68     		ldr	r3, [r3]
 2644 000a 002B     		cmp	r3, #0
 2645 000c 03D0     		beq	.L175
2879:..\..\FreeRTOS_Source/tasks.c **** 	{
2880:..\..\FreeRTOS_Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2881:..\..\FreeRTOS_Source/tasks.c **** 		switch. */
2882:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdTRUE;
 2646              		.loc 1 2882 0
 2647 000e 2D4B     		ldr	r3, .L181+4
 2648 0010 0122     		movs	r2, #1
 2649 0012 1A60     		str	r2, [r3]
 2650 0014 51E0     		b	.L174
 2651              	.L175:
2883:..\..\FreeRTOS_Source/tasks.c **** 	}
2884:..\..\FreeRTOS_Source/tasks.c **** 	else
2885:..\..\FreeRTOS_Source/tasks.c **** 	{
2886:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdFALSE;
 2652              		.loc 1 2886 0
 2653 0016 2B4B     		ldr	r3, .L181+4
 2654 0018 0022     		movs	r2, #0
 2655 001a 1A60     		str	r2, [r3]
 2656              	.LBB44:
2887:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2888:..\..\FreeRTOS_Source/tasks.c **** 
2889:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2890:..\..\FreeRTOS_Source/tasks.c **** 		{
2891:..\..\FreeRTOS_Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/count
2892:..\..\FreeRTOS_Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution t
2893:..\..\FreeRTOS_Source/tasks.c **** 
2894:..\..\FreeRTOS_Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2895:..\..\FreeRTOS_Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2896:..\..\FreeRTOS_Source/tasks.c **** 				#else
2897:..\..\FreeRTOS_Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2898:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2899:..\..\FreeRTOS_Source/tasks.c **** 
2900:..\..\FreeRTOS_Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2901:..\..\FreeRTOS_Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2902:..\..\FreeRTOS_Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2903:..\..\FreeRTOS_Source/tasks.c **** 				protection here so count values are only valid until the timer
2904:..\..\FreeRTOS_Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2905:..\..\FreeRTOS_Source/tasks.c **** 				against suspect run time stat counter implementations - which
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 103


2906:..\..\FreeRTOS_Source/tasks.c **** 				are provided by the application, not the kernel. */
2907:..\..\FreeRTOS_Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2908:..\..\FreeRTOS_Source/tasks.c **** 				{
2909:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2910:..\..\FreeRTOS_Source/tasks.c **** 				}
2911:..\..\FreeRTOS_Source/tasks.c **** 				else
2912:..\..\FreeRTOS_Source/tasks.c **** 				{
2913:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2914:..\..\FreeRTOS_Source/tasks.c **** 				}
2915:..\..\FreeRTOS_Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2916:..\..\FreeRTOS_Source/tasks.c **** 		}
2917:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2918:..\..\FreeRTOS_Source/tasks.c **** 
2919:..\..\FreeRTOS_Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2920:..\..\FreeRTOS_Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
 2657              		.loc 1 2920 0
 2658 001c 2A4B     		ldr	r3, .L181+8
 2659 001e 1B68     		ldr	r3, [r3]
 2660 0020 1B6B     		ldr	r3, [r3, #48]
 2661 0022 7B61     		str	r3, [r7, #20]
 2662 0024 4FF0A533 		mov	r3, #-1515870811
 2663 0028 3B61     		str	r3, [r7, #16]
 2664 002a 7B69     		ldr	r3, [r7, #20]
 2665 002c 1A68     		ldr	r2, [r3]
 2666 002e 3B69     		ldr	r3, [r7, #16]
 2667 0030 9A42     		cmp	r2, r3
 2668 0032 11D1     		bne	.L177
 2669              		.loc 1 2920 0 is_stmt 0 discriminator 2
 2670 0034 7B69     		ldr	r3, [r7, #20]
 2671 0036 0433     		adds	r3, r3, #4
 2672 0038 1A68     		ldr	r2, [r3]
 2673 003a 3B69     		ldr	r3, [r7, #16]
 2674 003c 9A42     		cmp	r2, r3
 2675 003e 0BD1     		bne	.L177
 2676              		.loc 1 2920 0 discriminator 4
 2677 0040 7B69     		ldr	r3, [r7, #20]
 2678 0042 0833     		adds	r3, r3, #8
 2679 0044 1A68     		ldr	r2, [r3]
 2680 0046 3B69     		ldr	r3, [r7, #16]
 2681 0048 9A42     		cmp	r2, r3
 2682 004a 05D1     		bne	.L177
 2683              		.loc 1 2920 0 discriminator 6
 2684 004c 7B69     		ldr	r3, [r7, #20]
 2685 004e 0C33     		adds	r3, r3, #12
 2686 0050 1A68     		ldr	r2, [r3]
 2687 0052 3B69     		ldr	r3, [r7, #16]
 2688 0054 9A42     		cmp	r2, r3
 2689 0056 08D0     		beq	.L178
 2690              	.L177:
 2691              		.loc 1 2920 0 discriminator 7
 2692 0058 1B4B     		ldr	r3, .L181+8
 2693 005a 1A68     		ldr	r2, [r3]
 2694 005c 1A4B     		ldr	r3, .L181+8
 2695 005e 1B68     		ldr	r3, [r3]
 2696 0060 3433     		adds	r3, r3, #52
 2697 0062 1046     		mov	r0, r2
 2698 0064 1946     		mov	r1, r3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 104


 2699 0066 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2700              	.L178:
 2701              	.LBE44:
 2702              	.LBB45:
2921:..\..\FreeRTOS_Source/tasks.c **** 
2922:..\..\FreeRTOS_Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2923:..\..\FreeRTOS_Source/tasks.c **** 		optimised asm code. */
2924:..\..\FreeRTOS_Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
 2703              		.loc 1 2924 0 is_stmt 1
 2704 006a 184B     		ldr	r3, .L181+12
 2705 006c 1B68     		ldr	r3, [r3]
 2706 006e 7B60     		str	r3, [r7, #4]
 2707              	.LBB46:
 2708              	.LBB47:
 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 2709              		.loc 2 134 0
 2710 0070 7B68     		ldr	r3, [r7, #4]
 2711              	@ 134 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2712 0072 B3FA83F3 		clz r3, r3
 2713              	@ 0 "" 2
 2714              		.thumb
 2715 0076 FB70     		strb	r3, [r7, #3]
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 2716              		.loc 2 135 0
 2717 0078 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2718              	.LBE47:
 2719              	.LBE46:
 2720              		.loc 1 2924 0
 2721 007a C3F11F03 		rsb	r3, r3, #31
 2722 007e FB60     		str	r3, [r7, #12]
 2723              	.LBB48:
 2724 0080 FA68     		ldr	r2, [r7, #12]
 2725 0082 1346     		mov	r3, r2
 2726 0084 9B00     		lsls	r3, r3, #2
 2727 0086 1344     		add	r3, r3, r2
 2728 0088 9B00     		lsls	r3, r3, #2
 2729 008a 114A     		ldr	r2, .L181+16
 2730 008c 1344     		add	r3, r3, r2
 2731 008e BB60     		str	r3, [r7, #8]
 2732 0090 BB68     		ldr	r3, [r7, #8]
 2733 0092 5B68     		ldr	r3, [r3, #4]
 2734 0094 5A68     		ldr	r2, [r3, #4]
 2735 0096 BB68     		ldr	r3, [r7, #8]
 2736 0098 5A60     		str	r2, [r3, #4]
 2737 009a BB68     		ldr	r3, [r7, #8]
 2738 009c 5A68     		ldr	r2, [r3, #4]
 2739 009e BB68     		ldr	r3, [r7, #8]
 2740 00a0 0833     		adds	r3, r3, #8
 2741 00a2 9A42     		cmp	r2, r3
 2742 00a4 04D1     		bne	.L180
 2743              		.loc 1 2924 0 is_stmt 0 discriminator 1
 2744 00a6 BB68     		ldr	r3, [r7, #8]
 2745 00a8 5B68     		ldr	r3, [r3, #4]
 2746 00aa 5A68     		ldr	r2, [r3, #4]
 2747 00ac BB68     		ldr	r3, [r7, #8]
 2748 00ae 5A60     		str	r2, [r3, #4]
 2749              	.L180:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 105


 2750              		.loc 1 2924 0 discriminator 3
 2751 00b0 BB68     		ldr	r3, [r7, #8]
 2752 00b2 5B68     		ldr	r3, [r3, #4]
 2753 00b4 DB68     		ldr	r3, [r3, #12]
 2754 00b6 044A     		ldr	r2, .L181+8
 2755 00b8 1360     		str	r3, [r2]
 2756              	.L174:
 2757              	.LBE48:
 2758              	.LBE45:
2925:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2926:..\..\FreeRTOS_Source/tasks.c **** 
2927:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2928:..\..\FreeRTOS_Source/tasks.c **** 		{
2929:..\..\FreeRTOS_Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2930:..\..\FreeRTOS_Source/tasks.c **** 			structure specific to this task. */
2931:..\..\FreeRTOS_Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2932:..\..\FreeRTOS_Source/tasks.c **** 		}
2933:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2934:..\..\FreeRTOS_Source/tasks.c **** 	}
2935:..\..\FreeRTOS_Source/tasks.c **** }
 2759              		.loc 1 2935 0 is_stmt 1
 2760 00ba 1837     		adds	r7, r7, #24
 2761              		.cfi_def_cfa_offset 8
 2762 00bc BD46     		mov	sp, r7
 2763              		.cfi_def_cfa_register 13
 2764              		@ sp needed
 2765 00be 80BD     		pop	{r7, pc}
 2766              	.L182:
 2767              		.align	2
 2768              	.L181:
 2769 00c0 D8000000 		.word	uxSchedulerSuspended
 2770 00c4 C4000000 		.word	xYieldPending
 2771 00c8 00000000 		.word	pxCurrentTCB
 2772 00cc B8000000 		.word	uxTopReadyPriority
 2773 00d0 04000000 		.word	pxReadyTasksLists
 2774              		.cfi_endproc
 2775              	.LFE91:
 2776              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2777              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2778              		.align	2
 2779              		.global	vTaskPlaceOnEventList
 2780              		.thumb
 2781              		.thumb_func
 2782              		.type	vTaskPlaceOnEventList, %function
 2783              	vTaskPlaceOnEventList:
 2784              	.LFB92:
2936:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2937:..\..\FreeRTOS_Source/tasks.c **** 
2938:..\..\FreeRTOS_Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2939:..\..\FreeRTOS_Source/tasks.c **** {
 2785              		.loc 1 2939 0
 2786              		.cfi_startproc
 2787              		@ args = 0, pretend = 0, frame = 8
 2788              		@ frame_needed = 1, uses_anonymous_args = 0
 2789 0000 80B5     		push	{r7, lr}
 2790              		.cfi_def_cfa_offset 8
 2791              		.cfi_offset 7, -8
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 106


 2792              		.cfi_offset 14, -4
 2793 0002 82B0     		sub	sp, sp, #8
 2794              		.cfi_def_cfa_offset 16
 2795 0004 00AF     		add	r7, sp, #0
 2796              		.cfi_def_cfa_register 7
 2797 0006 7860     		str	r0, [r7, #4]
 2798 0008 3960     		str	r1, [r7]
2940:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxEventList );
2941:..\..\FreeRTOS_Source/tasks.c **** 
2942:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2943:..\..\FreeRTOS_Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2944:..\..\FreeRTOS_Source/tasks.c **** 
2945:..\..\FreeRTOS_Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2946:..\..\FreeRTOS_Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2947:..\..\FreeRTOS_Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2948:..\..\FreeRTOS_Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2949:..\..\FreeRTOS_Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2799              		.loc 1 2949 0
 2800 000a 074B     		ldr	r3, .L184
 2801 000c 1B68     		ldr	r3, [r3]
 2802 000e 1833     		adds	r3, r3, #24
 2803 0010 7868     		ldr	r0, [r7, #4]
 2804 0012 1946     		mov	r1, r3
 2805 0014 FFF7FEFF 		bl	vListInsert
2950:..\..\FreeRTOS_Source/tasks.c **** 
2951:..\..\FreeRTOS_Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2806              		.loc 1 2951 0
 2807 0018 3868     		ldr	r0, [r7]
 2808 001a 0121     		movs	r1, #1
 2809 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2952:..\..\FreeRTOS_Source/tasks.c **** }
 2810              		.loc 1 2952 0
 2811 0020 0837     		adds	r7, r7, #8
 2812              		.cfi_def_cfa_offset 8
 2813 0022 BD46     		mov	sp, r7
 2814              		.cfi_def_cfa_register 13
 2815              		@ sp needed
 2816 0024 80BD     		pop	{r7, pc}
 2817              	.L185:
 2818 0026 00BF     		.align	2
 2819              	.L184:
 2820 0028 00000000 		.word	pxCurrentTCB
 2821              		.cfi_endproc
 2822              	.LFE92:
 2823              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2824              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2825              		.align	2
 2826              		.global	vTaskPlaceOnUnorderedEventList
 2827              		.thumb
 2828              		.thumb_func
 2829              		.type	vTaskPlaceOnUnorderedEventList, %function
 2830              	vTaskPlaceOnUnorderedEventList:
 2831              	.LFB93:
2953:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2954:..\..\FreeRTOS_Source/tasks.c **** 
2955:..\..\FreeRTOS_Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2956:..\..\FreeRTOS_Source/tasks.c **** {
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 107


 2832              		.loc 1 2956 0
 2833              		.cfi_startproc
 2834              		@ args = 0, pretend = 0, frame = 16
 2835              		@ frame_needed = 1, uses_anonymous_args = 0
 2836 0000 80B5     		push	{r7, lr}
 2837              		.cfi_def_cfa_offset 8
 2838              		.cfi_offset 7, -8
 2839              		.cfi_offset 14, -4
 2840 0002 84B0     		sub	sp, sp, #16
 2841              		.cfi_def_cfa_offset 24
 2842 0004 00AF     		add	r7, sp, #0
 2843              		.cfi_def_cfa_register 7
 2844 0006 F860     		str	r0, [r7, #12]
 2845 0008 B960     		str	r1, [r7, #8]
 2846 000a 7A60     		str	r2, [r7, #4]
2957:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxEventList );
2958:..\..\FreeRTOS_Source/tasks.c **** 
2959:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2960:..\..\FreeRTOS_Source/tasks.c **** 	the event groups implementation. */
2961:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2962:..\..\FreeRTOS_Source/tasks.c **** 
2963:..\..\FreeRTOS_Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2964:..\..\FreeRTOS_Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2965:..\..\FreeRTOS_Source/tasks.c **** 	task that is not in the Blocked state. */
2966:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2847              		.loc 1 2966 0
 2848 000c 094B     		ldr	r3, .L187
 2849 000e 1B68     		ldr	r3, [r3]
 2850 0010 BA68     		ldr	r2, [r7, #8]
 2851 0012 42F00042 		orr	r2, r2, #-2147483648
 2852 0016 9A61     		str	r2, [r3, #24]
2967:..\..\FreeRTOS_Source/tasks.c **** 
2968:..\..\FreeRTOS_Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2969:..\..\FreeRTOS_Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2970:..\..\FreeRTOS_Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2971:..\..\FreeRTOS_Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2972:..\..\FreeRTOS_Source/tasks.c **** 	the task level). */
2973:..\..\FreeRTOS_Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2853              		.loc 1 2973 0
 2854 0018 064B     		ldr	r3, .L187
 2855 001a 1B68     		ldr	r3, [r3]
 2856 001c 1833     		adds	r3, r3, #24
 2857 001e F868     		ldr	r0, [r7, #12]
 2858 0020 1946     		mov	r1, r3
 2859 0022 FFF7FEFF 		bl	vListInsertEnd
2974:..\..\FreeRTOS_Source/tasks.c **** 
2975:..\..\FreeRTOS_Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2860              		.loc 1 2975 0
 2861 0026 7868     		ldr	r0, [r7, #4]
 2862 0028 0121     		movs	r1, #1
 2863 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2976:..\..\FreeRTOS_Source/tasks.c **** }
 2864              		.loc 1 2976 0
 2865 002e 1037     		adds	r7, r7, #16
 2866              		.cfi_def_cfa_offset 8
 2867 0030 BD46     		mov	sp, r7
 2868              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 108


 2869              		@ sp needed
 2870 0032 80BD     		pop	{r7, pc}
 2871              	.L188:
 2872              		.align	2
 2873              	.L187:
 2874 0034 00000000 		.word	pxCurrentTCB
 2875              		.cfi_endproc
 2876              	.LFE93:
 2877              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2878              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2879              		.align	2
 2880              		.global	xTaskRemoveFromEventList
 2881              		.thumb
 2882              		.thumb_func
 2883              		.type	xTaskRemoveFromEventList, %function
 2884              	xTaskRemoveFromEventList:
 2885              	.LFB94:
2977:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2978:..\..\FreeRTOS_Source/tasks.c **** 
2979:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2980:..\..\FreeRTOS_Source/tasks.c **** 
2981:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2982:..\..\FreeRTOS_Source/tasks.c **** 	{
2983:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxEventList );
2984:..\..\FreeRTOS_Source/tasks.c **** 
2985:..\..\FreeRTOS_Source/tasks.c **** 		/* This function should not be called by application code hence the
2986:..\..\FreeRTOS_Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2987:..\..\FreeRTOS_Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2988:..\..\FreeRTOS_Source/tasks.c **** 		it should be called with the scheduler suspended. */
2989:..\..\FreeRTOS_Source/tasks.c **** 
2990:..\..\FreeRTOS_Source/tasks.c **** 
2991:..\..\FreeRTOS_Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2992:..\..\FreeRTOS_Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2993:..\..\FreeRTOS_Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2994:..\..\FreeRTOS_Source/tasks.c **** 		can be used in place of vListInsert. */
2995:..\..\FreeRTOS_Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2996:..\..\FreeRTOS_Source/tasks.c **** 
2997:..\..\FreeRTOS_Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2998:..\..\FreeRTOS_Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2999:..\..\FreeRTOS_Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3000:..\..\FreeRTOS_Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3001:..\..\FreeRTOS_Source/tasks.c **** 		{
3002:..\..\FreeRTOS_Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3003:..\..\FreeRTOS_Source/tasks.c **** 		}
3004:..\..\FreeRTOS_Source/tasks.c **** 
3005:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3006:..\..\FreeRTOS_Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3007:..\..\FreeRTOS_Source/tasks.c **** 	}
3008:..\..\FreeRTOS_Source/tasks.c **** 
3009:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TIMERS */
3010:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3011:..\..\FreeRTOS_Source/tasks.c **** 
3012:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3013:..\..\FreeRTOS_Source/tasks.c **** {
 2886              		.loc 1 3013 0
 2887              		.cfi_startproc
 2888              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 109


 2889              		@ frame_needed = 1, uses_anonymous_args = 0
 2890 0000 80B5     		push	{r7, lr}
 2891              		.cfi_def_cfa_offset 8
 2892              		.cfi_offset 7, -8
 2893              		.cfi_offset 14, -4
 2894 0002 84B0     		sub	sp, sp, #16
 2895              		.cfi_def_cfa_offset 24
 2896 0004 00AF     		add	r7, sp, #0
 2897              		.cfi_def_cfa_register 7
 2898 0006 7860     		str	r0, [r7, #4]
3014:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxUnblockedTCB;
3015:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xReturn;
3016:..\..\FreeRTOS_Source/tasks.c **** 
3017:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3018:..\..\FreeRTOS_Source/tasks.c **** 	called from a critical section within an ISR. */
3019:..\..\FreeRTOS_Source/tasks.c **** 
3020:..\..\FreeRTOS_Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3021:..\..\FreeRTOS_Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3022:..\..\FreeRTOS_Source/tasks.c **** 	the delayed list, and add it to the ready list.
3023:..\..\FreeRTOS_Source/tasks.c **** 
3024:..\..\FreeRTOS_Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3025:..\..\FreeRTOS_Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3026:..\..\FreeRTOS_Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3027:..\..\FreeRTOS_Source/tasks.c **** 
3028:..\..\FreeRTOS_Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3029:..\..\FreeRTOS_Source/tasks.c **** 	pxEventList is not empty. */
3030:..\..\FreeRTOS_Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 2899              		.loc 1 3030 0
 2900 0008 7B68     		ldr	r3, [r7, #4]
 2901 000a DB68     		ldr	r3, [r3, #12]
 2902 000c DB68     		ldr	r3, [r3, #12]
 2903 000e BB60     		str	r3, [r7, #8]
3031:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3032:..\..\FreeRTOS_Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2904              		.loc 1 3032 0
 2905 0010 BB68     		ldr	r3, [r7, #8]
 2906 0012 1833     		adds	r3, r3, #24
 2907 0014 1846     		mov	r0, r3
 2908 0016 FFF7FEFF 		bl	uxListRemove
3033:..\..\FreeRTOS_Source/tasks.c **** 
3034:..\..\FreeRTOS_Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2909              		.loc 1 3034 0
 2910 001a 1E4B     		ldr	r3, .L195
 2911 001c 1B68     		ldr	r3, [r3]
 2912 001e 002B     		cmp	r3, #0
 2913 0020 1ED1     		bne	.L190
3035:..\..\FreeRTOS_Source/tasks.c **** 	{
3036:..\..\FreeRTOS_Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 2914              		.loc 1 3036 0
 2915 0022 BB68     		ldr	r3, [r7, #8]
 2916 0024 0433     		adds	r3, r3, #4
 2917 0026 1846     		mov	r0, r3
 2918 0028 FFF7FEFF 		bl	uxListRemove
3037:..\..\FreeRTOS_Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2919              		.loc 1 3037 0
 2920 002c BB68     		ldr	r3, [r7, #8]
 2921 002e DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 110


 2922 0030 1A46     		mov	r2, r3
 2923 0032 0123     		movs	r3, #1
 2924 0034 03FA02F2 		lsl	r2, r3, r2
 2925 0038 174B     		ldr	r3, .L195+4
 2926 003a 1B68     		ldr	r3, [r3]
 2927 003c 1343     		orrs	r3, r3, r2
 2928 003e 164A     		ldr	r2, .L195+4
 2929 0040 1360     		str	r3, [r2]
 2930 0042 BB68     		ldr	r3, [r7, #8]
 2931 0044 DA6A     		ldr	r2, [r3, #44]
 2932 0046 1346     		mov	r3, r2
 2933 0048 9B00     		lsls	r3, r3, #2
 2934 004a 1344     		add	r3, r3, r2
 2935 004c 9B00     		lsls	r3, r3, #2
 2936 004e 134A     		ldr	r2, .L195+8
 2937 0050 1A44     		add	r2, r2, r3
 2938 0052 BB68     		ldr	r3, [r7, #8]
 2939 0054 0433     		adds	r3, r3, #4
 2940 0056 1046     		mov	r0, r2
 2941 0058 1946     		mov	r1, r3
 2942 005a FFF7FEFF 		bl	vListInsertEnd
 2943 005e 05E0     		b	.L191
 2944              	.L190:
3038:..\..\FreeRTOS_Source/tasks.c **** 	}
3039:..\..\FreeRTOS_Source/tasks.c **** 	else
3040:..\..\FreeRTOS_Source/tasks.c **** 	{
3041:..\..\FreeRTOS_Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3042:..\..\FreeRTOS_Source/tasks.c **** 		pending until the scheduler is resumed. */
3043:..\..\FreeRTOS_Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2945              		.loc 1 3043 0
 2946 0060 BB68     		ldr	r3, [r7, #8]
 2947 0062 1833     		adds	r3, r3, #24
 2948 0064 0E48     		ldr	r0, .L195+12
 2949 0066 1946     		mov	r1, r3
 2950 0068 FFF7FEFF 		bl	vListInsertEnd
 2951              	.L191:
3044:..\..\FreeRTOS_Source/tasks.c **** 	}
3045:..\..\FreeRTOS_Source/tasks.c **** 
3046:..\..\FreeRTOS_Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2952              		.loc 1 3046 0
 2953 006c BB68     		ldr	r3, [r7, #8]
 2954 006e DA6A     		ldr	r2, [r3, #44]
 2955 0070 0C4B     		ldr	r3, .L195+16
 2956 0072 1B68     		ldr	r3, [r3]
 2957 0074 DB6A     		ldr	r3, [r3, #44]
 2958 0076 9A42     		cmp	r2, r3
 2959 0078 05D9     		bls	.L192
3047:..\..\FreeRTOS_Source/tasks.c **** 	{
3048:..\..\FreeRTOS_Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3049:..\..\FreeRTOS_Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3050:..\..\FreeRTOS_Source/tasks.c **** 		it should force a context switch now. */
3051:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = pdTRUE;
 2960              		.loc 1 3051 0
 2961 007a 0123     		movs	r3, #1
 2962 007c FB60     		str	r3, [r7, #12]
3052:..\..\FreeRTOS_Source/tasks.c **** 
3053:..\..\FreeRTOS_Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 111


3054:..\..\FreeRTOS_Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3055:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdTRUE;
 2963              		.loc 1 3055 0
 2964 007e 0A4B     		ldr	r3, .L195+20
 2965 0080 0122     		movs	r2, #1
 2966 0082 1A60     		str	r2, [r3]
 2967 0084 01E0     		b	.L193
 2968              	.L192:
3056:..\..\FreeRTOS_Source/tasks.c **** 	}
3057:..\..\FreeRTOS_Source/tasks.c **** 	else
3058:..\..\FreeRTOS_Source/tasks.c **** 	{
3059:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = pdFALSE;
 2969              		.loc 1 3059 0
 2970 0086 0023     		movs	r3, #0
 2971 0088 FB60     		str	r3, [r7, #12]
 2972              	.L193:
3060:..\..\FreeRTOS_Source/tasks.c **** 	}
3061:..\..\FreeRTOS_Source/tasks.c **** 
3062:..\..\FreeRTOS_Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3063:..\..\FreeRTOS_Source/tasks.c **** 	{
3064:..\..\FreeRTOS_Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3065:..\..\FreeRTOS_Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3066:..\..\FreeRTOS_Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3067:..\..\FreeRTOS_Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3068:..\..\FreeRTOS_Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3069:..\..\FreeRTOS_Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3070:..\..\FreeRTOS_Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3071:..\..\FreeRTOS_Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3072:..\..\FreeRTOS_Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3073:..\..\FreeRTOS_Source/tasks.c **** 	}
3074:..\..\FreeRTOS_Source/tasks.c **** 	#endif
3075:..\..\FreeRTOS_Source/tasks.c **** 
3076:..\..\FreeRTOS_Source/tasks.c **** 	return xReturn;
 2973              		.loc 1 3076 0
 2974 008a FB68     		ldr	r3, [r7, #12]
3077:..\..\FreeRTOS_Source/tasks.c **** }
 2975              		.loc 1 3077 0
 2976 008c 1846     		mov	r0, r3
 2977 008e 1037     		adds	r7, r7, #16
 2978              		.cfi_def_cfa_offset 8
 2979 0090 BD46     		mov	sp, r7
 2980              		.cfi_def_cfa_register 13
 2981              		@ sp needed
 2982 0092 80BD     		pop	{r7, pc}
 2983              	.L196:
 2984              		.align	2
 2985              	.L195:
 2986 0094 D8000000 		.word	uxSchedulerSuspended
 2987 0098 B8000000 		.word	uxTopReadyPriority
 2988 009c 04000000 		.word	pxReadyTasksLists
 2989 00a0 70000000 		.word	xPendingReadyList
 2990 00a4 00000000 		.word	pxCurrentTCB
 2991 00a8 C4000000 		.word	xYieldPending
 2992              		.cfi_endproc
 2993              	.LFE94:
 2994              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2995              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 112


 2996              		.align	2
 2997              		.global	vTaskRemoveFromUnorderedEventList
 2998              		.thumb
 2999              		.thumb_func
 3000              		.type	vTaskRemoveFromUnorderedEventList, %function
 3001              	vTaskRemoveFromUnorderedEventList:
 3002              	.LFB95:
3078:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3079:..\..\FreeRTOS_Source/tasks.c **** 
3080:..\..\FreeRTOS_Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3081:..\..\FreeRTOS_Source/tasks.c **** {
 3003              		.loc 1 3081 0
 3004              		.cfi_startproc
 3005              		@ args = 0, pretend = 0, frame = 16
 3006              		@ frame_needed = 1, uses_anonymous_args = 0
 3007 0000 80B5     		push	{r7, lr}
 3008              		.cfi_def_cfa_offset 8
 3009              		.cfi_offset 7, -8
 3010              		.cfi_offset 14, -4
 3011 0002 84B0     		sub	sp, sp, #16
 3012              		.cfi_def_cfa_offset 24
 3013 0004 00AF     		add	r7, sp, #0
 3014              		.cfi_def_cfa_register 7
 3015 0006 7860     		str	r0, [r7, #4]
 3016 0008 3960     		str	r1, [r7]
3082:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxUnblockedTCB;
3083:..\..\FreeRTOS_Source/tasks.c **** 
3084:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3085:..\..\FreeRTOS_Source/tasks.c **** 	the event flags implementation. */
3086:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3087:..\..\FreeRTOS_Source/tasks.c **** 
3088:..\..\FreeRTOS_Source/tasks.c **** 	/* Store the new item value in the event list. */
3089:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3017              		.loc 1 3089 0
 3018 000a 3B68     		ldr	r3, [r7]
 3019 000c 43F00042 		orr	r2, r3, #-2147483648
 3020 0010 7B68     		ldr	r3, [r7, #4]
 3021 0012 1A60     		str	r2, [r3]
3090:..\..\FreeRTOS_Source/tasks.c **** 
3091:..\..\FreeRTOS_Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3092:..\..\FreeRTOS_Source/tasks.c **** 	event flags. */
3093:..\..\FreeRTOS_Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 3022              		.loc 1 3093 0
 3023 0014 7B68     		ldr	r3, [r7, #4]
 3024 0016 DB68     		ldr	r3, [r3, #12]
 3025 0018 FB60     		str	r3, [r7, #12]
3094:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3095:..\..\FreeRTOS_Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3026              		.loc 1 3095 0
 3027 001a 7868     		ldr	r0, [r7, #4]
 3028 001c FFF7FEFF 		bl	uxListRemove
3096:..\..\FreeRTOS_Source/tasks.c **** 
3097:..\..\FreeRTOS_Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3098:..\..\FreeRTOS_Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3099:..\..\FreeRTOS_Source/tasks.c **** 	lists. */
3100:..\..\FreeRTOS_Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3029              		.loc 1 3100 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 113


 3030 0020 FB68     		ldr	r3, [r7, #12]
 3031 0022 0433     		adds	r3, r3, #4
 3032 0024 1846     		mov	r0, r3
 3033 0026 FFF7FEFF 		bl	uxListRemove
3101:..\..\FreeRTOS_Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3034              		.loc 1 3101 0
 3035 002a FB68     		ldr	r3, [r7, #12]
 3036 002c DB6A     		ldr	r3, [r3, #44]
 3037 002e 1A46     		mov	r2, r3
 3038 0030 0123     		movs	r3, #1
 3039 0032 03FA02F2 		lsl	r2, r3, r2
 3040 0036 104B     		ldr	r3, .L199
 3041 0038 1B68     		ldr	r3, [r3]
 3042 003a 1343     		orrs	r3, r3, r2
 3043 003c 0E4A     		ldr	r2, .L199
 3044 003e 1360     		str	r3, [r2]
 3045 0040 FB68     		ldr	r3, [r7, #12]
 3046 0042 DA6A     		ldr	r2, [r3, #44]
 3047 0044 1346     		mov	r3, r2
 3048 0046 9B00     		lsls	r3, r3, #2
 3049 0048 1344     		add	r3, r3, r2
 3050 004a 9B00     		lsls	r3, r3, #2
 3051 004c 0B4A     		ldr	r2, .L199+4
 3052 004e 1A44     		add	r2, r2, r3
 3053 0050 FB68     		ldr	r3, [r7, #12]
 3054 0052 0433     		adds	r3, r3, #4
 3055 0054 1046     		mov	r0, r2
 3056 0056 1946     		mov	r1, r3
 3057 0058 FFF7FEFF 		bl	vListInsertEnd
3102:..\..\FreeRTOS_Source/tasks.c **** 
3103:..\..\FreeRTOS_Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3058              		.loc 1 3103 0
 3059 005c FB68     		ldr	r3, [r7, #12]
 3060 005e DA6A     		ldr	r2, [r3, #44]
 3061 0060 074B     		ldr	r3, .L199+8
 3062 0062 1B68     		ldr	r3, [r3]
 3063 0064 DB6A     		ldr	r3, [r3, #44]
 3064 0066 9A42     		cmp	r2, r3
 3065 0068 02D9     		bls	.L197
3104:..\..\FreeRTOS_Source/tasks.c **** 	{
3105:..\..\FreeRTOS_Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3106:..\..\FreeRTOS_Source/tasks.c **** 		a context switch is required.  This function is called with the
3107:..\..\FreeRTOS_Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3108:..\..\FreeRTOS_Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3109:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdTRUE;
 3066              		.loc 1 3109 0
 3067 006a 064B     		ldr	r3, .L199+12
 3068 006c 0122     		movs	r2, #1
 3069 006e 1A60     		str	r2, [r3]
 3070              	.L197:
3110:..\..\FreeRTOS_Source/tasks.c **** 	}
3111:..\..\FreeRTOS_Source/tasks.c **** }
 3071              		.loc 1 3111 0
 3072 0070 1037     		adds	r7, r7, #16
 3073              		.cfi_def_cfa_offset 8
 3074 0072 BD46     		mov	sp, r7
 3075              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 114


 3076              		@ sp needed
 3077 0074 80BD     		pop	{r7, pc}
 3078              	.L200:
 3079 0076 00BF     		.align	2
 3080              	.L199:
 3081 0078 B8000000 		.word	uxTopReadyPriority
 3082 007c 04000000 		.word	pxReadyTasksLists
 3083 0080 00000000 		.word	pxCurrentTCB
 3084 0084 C4000000 		.word	xYieldPending
 3085              		.cfi_endproc
 3086              	.LFE95:
 3087              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3088              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3089              		.align	2
 3090              		.global	vTaskSetTimeOutState
 3091              		.thumb
 3092              		.thumb_func
 3093              		.type	vTaskSetTimeOutState, %function
 3094              	vTaskSetTimeOutState:
 3095              	.LFB96:
3112:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3113:..\..\FreeRTOS_Source/tasks.c **** 
3114:..\..\FreeRTOS_Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3115:..\..\FreeRTOS_Source/tasks.c **** {
 3096              		.loc 1 3115 0
 3097              		.cfi_startproc
 3098              		@ args = 0, pretend = 0, frame = 8
 3099              		@ frame_needed = 1, uses_anonymous_args = 0
 3100 0000 80B5     		push	{r7, lr}
 3101              		.cfi_def_cfa_offset 8
 3102              		.cfi_offset 7, -8
 3103              		.cfi_offset 14, -4
 3104 0002 82B0     		sub	sp, sp, #8
 3105              		.cfi_def_cfa_offset 16
 3106 0004 00AF     		add	r7, sp, #0
 3107              		.cfi_def_cfa_register 7
 3108 0006 7860     		str	r0, [r7, #4]
3116:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTimeOut );
3117:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 3109              		.loc 1 3117 0
 3110 0008 FFF7FEFF 		bl	vPortEnterCritical
3118:..\..\FreeRTOS_Source/tasks.c **** 	{
3119:..\..\FreeRTOS_Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 3111              		.loc 1 3119 0
 3112 000c 064B     		ldr	r3, .L202
 3113 000e 1A68     		ldr	r2, [r3]
 3114 0010 7B68     		ldr	r3, [r7, #4]
 3115 0012 1A60     		str	r2, [r3]
3120:..\..\FreeRTOS_Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3116              		.loc 1 3120 0
 3117 0014 054B     		ldr	r3, .L202+4
 3118 0016 1A68     		ldr	r2, [r3]
 3119 0018 7B68     		ldr	r3, [r7, #4]
 3120 001a 5A60     		str	r2, [r3, #4]
3121:..\..\FreeRTOS_Source/tasks.c **** 	}
3122:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
 3121              		.loc 1 3122 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 115


 3122 001c FFF7FEFF 		bl	vPortExitCritical
3123:..\..\FreeRTOS_Source/tasks.c **** }
 3123              		.loc 1 3123 0
 3124 0020 0837     		adds	r7, r7, #8
 3125              		.cfi_def_cfa_offset 8
 3126 0022 BD46     		mov	sp, r7
 3127              		.cfi_def_cfa_register 13
 3128              		@ sp needed
 3129 0024 80BD     		pop	{r7, pc}
 3130              	.L203:
 3131 0026 00BF     		.align	2
 3132              	.L202:
 3133 0028 C8000000 		.word	xNumOfOverflows
 3134 002c B4000000 		.word	xTickCount
 3135              		.cfi_endproc
 3136              	.LFE96:
 3137              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3138              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3139              		.align	2
 3140              		.global	vTaskInternalSetTimeOutState
 3141              		.thumb
 3142              		.thumb_func
 3143              		.type	vTaskInternalSetTimeOutState, %function
 3144              	vTaskInternalSetTimeOutState:
 3145              	.LFB97:
3124:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3125:..\..\FreeRTOS_Source/tasks.c **** 
3126:..\..\FreeRTOS_Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3127:..\..\FreeRTOS_Source/tasks.c **** {
 3146              		.loc 1 3127 0
 3147              		.cfi_startproc
 3148              		@ args = 0, pretend = 0, frame = 8
 3149              		@ frame_needed = 1, uses_anonymous_args = 0
 3150              		@ link register save eliminated.
 3151 0000 80B4     		push	{r7}
 3152              		.cfi_def_cfa_offset 4
 3153              		.cfi_offset 7, -4
 3154 0002 83B0     		sub	sp, sp, #12
 3155              		.cfi_def_cfa_offset 16
 3156 0004 00AF     		add	r7, sp, #0
 3157              		.cfi_def_cfa_register 7
 3158 0006 7860     		str	r0, [r7, #4]
3128:..\..\FreeRTOS_Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3129:..\..\FreeRTOS_Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3159              		.loc 1 3129 0
 3160 0008 064B     		ldr	r3, .L205
 3161 000a 1A68     		ldr	r2, [r3]
 3162 000c 7B68     		ldr	r3, [r7, #4]
 3163 000e 1A60     		str	r2, [r3]
3130:..\..\FreeRTOS_Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3164              		.loc 1 3130 0
 3165 0010 054B     		ldr	r3, .L205+4
 3166 0012 1A68     		ldr	r2, [r3]
 3167 0014 7B68     		ldr	r3, [r7, #4]
 3168 0016 5A60     		str	r2, [r3, #4]
3131:..\..\FreeRTOS_Source/tasks.c **** }
 3169              		.loc 1 3131 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 116


 3170 0018 0C37     		adds	r7, r7, #12
 3171              		.cfi_def_cfa_offset 4
 3172 001a BD46     		mov	sp, r7
 3173              		.cfi_def_cfa_register 13
 3174              		@ sp needed
 3175 001c 5DF8047B 		ldr	r7, [sp], #4
 3176              		.cfi_restore 7
 3177              		.cfi_def_cfa_offset 0
 3178 0020 7047     		bx	lr
 3179              	.L206:
 3180 0022 00BF     		.align	2
 3181              	.L205:
 3182 0024 C8000000 		.word	xNumOfOverflows
 3183 0028 B4000000 		.word	xTickCount
 3184              		.cfi_endproc
 3185              	.LFE97:
 3186              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3187              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3188              		.align	2
 3189              		.global	xTaskCheckForTimeOut
 3190              		.thumb
 3191              		.thumb_func
 3192              		.type	xTaskCheckForTimeOut, %function
 3193              	xTaskCheckForTimeOut:
 3194              	.LFB98:
3132:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3133:..\..\FreeRTOS_Source/tasks.c **** 
3134:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3135:..\..\FreeRTOS_Source/tasks.c **** {
 3195              		.loc 1 3135 0
 3196              		.cfi_startproc
 3197              		@ args = 0, pretend = 0, frame = 24
 3198              		@ frame_needed = 1, uses_anonymous_args = 0
 3199 0000 80B5     		push	{r7, lr}
 3200              		.cfi_def_cfa_offset 8
 3201              		.cfi_offset 7, -8
 3202              		.cfi_offset 14, -4
 3203 0002 86B0     		sub	sp, sp, #24
 3204              		.cfi_def_cfa_offset 32
 3205 0004 00AF     		add	r7, sp, #0
 3206              		.cfi_def_cfa_register 7
 3207 0006 7860     		str	r0, [r7, #4]
 3208 0008 3960     		str	r1, [r7]
3136:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xReturn;
3137:..\..\FreeRTOS_Source/tasks.c **** 
3138:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTimeOut );
3139:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTicksToWait );
3140:..\..\FreeRTOS_Source/tasks.c **** 
3141:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 3209              		.loc 1 3141 0
 3210 000a FFF7FEFF 		bl	vPortEnterCritical
 3211              	.LBB49:
3142:..\..\FreeRTOS_Source/tasks.c **** 	{
3143:..\..\FreeRTOS_Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3144:..\..\FreeRTOS_Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3212              		.loc 1 3144 0
 3213 000e 1D4B     		ldr	r3, .L213
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 117


 3214 0010 1B68     		ldr	r3, [r3]
 3215 0012 3B61     		str	r3, [r7, #16]
3145:..\..\FreeRTOS_Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3216              		.loc 1 3145 0
 3217 0014 7B68     		ldr	r3, [r7, #4]
 3218 0016 5B68     		ldr	r3, [r3, #4]
 3219 0018 3A69     		ldr	r2, [r7, #16]
 3220 001a D31A     		subs	r3, r2, r3
 3221 001c FB60     		str	r3, [r7, #12]
3146:..\..\FreeRTOS_Source/tasks.c **** 
3147:..\..\FreeRTOS_Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3148:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3149:..\..\FreeRTOS_Source/tasks.c **** 			{
3150:..\..\FreeRTOS_Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3151:..\..\FreeRTOS_Source/tasks.c **** 				but has the same result. */
3152:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3153:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdTRUE;
3154:..\..\FreeRTOS_Source/tasks.c **** 			}
3155:..\..\FreeRTOS_Source/tasks.c **** 			else
3156:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3157:..\..\FreeRTOS_Source/tasks.c **** 
3158:..\..\FreeRTOS_Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3159:..\..\FreeRTOS_Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3222              		.loc 1 3159 0
 3223 001e 3B68     		ldr	r3, [r7]
 3224 0020 1B68     		ldr	r3, [r3]
 3225 0022 B3F1FF3F 		cmp	r3, #-1
 3226 0026 02D1     		bne	.L208
3160:..\..\FreeRTOS_Source/tasks.c **** 			{
3161:..\..\FreeRTOS_Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3162:..\..\FreeRTOS_Source/tasks.c **** 				specified is the maximum block time then the task should block
3163:..\..\FreeRTOS_Source/tasks.c **** 				indefinitely, and therefore never time out. */
3164:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFALSE;
 3227              		.loc 1 3164 0
 3228 0028 0023     		movs	r3, #0
 3229 002a 7B61     		str	r3, [r7, #20]
 3230 002c 23E0     		b	.L209
 3231              	.L208:
3165:..\..\FreeRTOS_Source/tasks.c **** 			}
3166:..\..\FreeRTOS_Source/tasks.c **** 			else
3167:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3168:..\..\FreeRTOS_Source/tasks.c **** 
3169:..\..\FreeRTOS_Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3232              		.loc 1 3169 0
 3233 002e 7B68     		ldr	r3, [r7, #4]
 3234 0030 1A68     		ldr	r2, [r3]
 3235 0032 154B     		ldr	r3, .L213+4
 3236 0034 1B68     		ldr	r3, [r3]
 3237 0036 9A42     		cmp	r2, r3
 3238 0038 07D0     		beq	.L210
 3239              		.loc 1 3169 0 is_stmt 0 discriminator 1
 3240 003a 7B68     		ldr	r3, [r7, #4]
 3241 003c 5A68     		ldr	r2, [r3, #4]
 3242 003e 3B69     		ldr	r3, [r7, #16]
 3243 0040 9A42     		cmp	r2, r3
 3244 0042 02D8     		bhi	.L210
3170:..\..\FreeRTOS_Source/tasks.c **** 		{
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 118


3171:..\..\FreeRTOS_Source/tasks.c **** 			/* The tick count is greater than the time at which
3172:..\..\FreeRTOS_Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3173:..\..\FreeRTOS_Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3174:..\..\FreeRTOS_Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3175:..\..\FreeRTOS_Source/tasks.c **** 			was called. */
3176:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdTRUE;
 3245              		.loc 1 3176 0 is_stmt 1
 3246 0044 0123     		movs	r3, #1
 3247 0046 7B61     		str	r3, [r7, #20]
 3248 0048 15E0     		b	.L209
 3249              	.L210:
3177:..\..\FreeRTOS_Source/tasks.c **** 		}
3178:..\..\FreeRTOS_Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 3250              		.loc 1 3178 0
 3251 004a 3B68     		ldr	r3, [r7]
 3252 004c 1A68     		ldr	r2, [r3]
 3253 004e FB68     		ldr	r3, [r7, #12]
 3254 0050 9A42     		cmp	r2, r3
 3255 0052 0BD9     		bls	.L211
3179:..\..\FreeRTOS_Source/tasks.c **** 		{
3180:..\..\FreeRTOS_Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3181:..\..\FreeRTOS_Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 3256              		.loc 1 3181 0
 3257 0054 3B68     		ldr	r3, [r7]
 3258 0056 1A68     		ldr	r2, [r3]
 3259 0058 FB68     		ldr	r3, [r7, #12]
 3260 005a D21A     		subs	r2, r2, r3
 3261 005c 3B68     		ldr	r3, [r7]
 3262 005e 1A60     		str	r2, [r3]
3182:..\..\FreeRTOS_Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3263              		.loc 1 3182 0
 3264 0060 7868     		ldr	r0, [r7, #4]
 3265 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3183:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdFALSE;
 3266              		.loc 1 3183 0
 3267 0066 0023     		movs	r3, #0
 3268 0068 7B61     		str	r3, [r7, #20]
 3269 006a 04E0     		b	.L209
 3270              	.L211:
3184:..\..\FreeRTOS_Source/tasks.c **** 		}
3185:..\..\FreeRTOS_Source/tasks.c **** 		else
3186:..\..\FreeRTOS_Source/tasks.c **** 		{
3187:..\..\FreeRTOS_Source/tasks.c **** 			*pxTicksToWait = 0;
 3271              		.loc 1 3187 0
 3272 006c 3B68     		ldr	r3, [r7]
 3273 006e 0022     		movs	r2, #0
 3274 0070 1A60     		str	r2, [r3]
3188:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdTRUE;
 3275              		.loc 1 3188 0
 3276 0072 0123     		movs	r3, #1
 3277 0074 7B61     		str	r3, [r7, #20]
 3278              	.L209:
 3279              	.LBE49:
3189:..\..\FreeRTOS_Source/tasks.c **** 		}
3190:..\..\FreeRTOS_Source/tasks.c **** 	}
3191:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
 3280              		.loc 1 3191 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 119


 3281 0076 FFF7FEFF 		bl	vPortExitCritical
3192:..\..\FreeRTOS_Source/tasks.c **** 
3193:..\..\FreeRTOS_Source/tasks.c **** 	return xReturn;
 3282              		.loc 1 3193 0
 3283 007a 7B69     		ldr	r3, [r7, #20]
3194:..\..\FreeRTOS_Source/tasks.c **** }
 3284              		.loc 1 3194 0
 3285 007c 1846     		mov	r0, r3
 3286 007e 1837     		adds	r7, r7, #24
 3287              		.cfi_def_cfa_offset 8
 3288 0080 BD46     		mov	sp, r7
 3289              		.cfi_def_cfa_register 13
 3290              		@ sp needed
 3291 0082 80BD     		pop	{r7, pc}
 3292              	.L214:
 3293              		.align	2
 3294              	.L213:
 3295 0084 B4000000 		.word	xTickCount
 3296 0088 C8000000 		.word	xNumOfOverflows
 3297              		.cfi_endproc
 3298              	.LFE98:
 3299              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3300              		.section	.text.vTaskMissedYield,"ax",%progbits
 3301              		.align	2
 3302              		.global	vTaskMissedYield
 3303              		.thumb
 3304              		.thumb_func
 3305              		.type	vTaskMissedYield, %function
 3306              	vTaskMissedYield:
 3307              	.LFB99:
3195:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3196:..\..\FreeRTOS_Source/tasks.c **** 
3197:..\..\FreeRTOS_Source/tasks.c **** void vTaskMissedYield( void )
3198:..\..\FreeRTOS_Source/tasks.c **** {
 3308              		.loc 1 3198 0
 3309              		.cfi_startproc
 3310              		@ args = 0, pretend = 0, frame = 0
 3311              		@ frame_needed = 1, uses_anonymous_args = 0
 3312              		@ link register save eliminated.
 3313 0000 80B4     		push	{r7}
 3314              		.cfi_def_cfa_offset 4
 3315              		.cfi_offset 7, -4
 3316 0002 00AF     		add	r7, sp, #0
 3317              		.cfi_def_cfa_register 7
3199:..\..\FreeRTOS_Source/tasks.c **** 	xYieldPending = pdTRUE;
 3318              		.loc 1 3199 0
 3319 0004 034B     		ldr	r3, .L216
 3320 0006 0122     		movs	r2, #1
 3321 0008 1A60     		str	r2, [r3]
3200:..\..\FreeRTOS_Source/tasks.c **** }
 3322              		.loc 1 3200 0
 3323 000a BD46     		mov	sp, r7
 3324              		.cfi_def_cfa_register 13
 3325              		@ sp needed
 3326 000c 5DF8047B 		ldr	r7, [sp], #4
 3327              		.cfi_restore 7
 3328              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 120


 3329 0010 7047     		bx	lr
 3330              	.L217:
 3331 0012 00BF     		.align	2
 3332              	.L216:
 3333 0014 C4000000 		.word	xYieldPending
 3334              		.cfi_endproc
 3335              	.LFE99:
 3336              		.size	vTaskMissedYield, .-vTaskMissedYield
 3337              		.section	.text.prvIdleTask,"ax",%progbits
 3338              		.align	2
 3339              		.thumb
 3340              		.thumb_func
 3341              		.type	prvIdleTask, %function
 3342              	prvIdleTask:
 3343              	.LFB100:
3201:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3202:..\..\FreeRTOS_Source/tasks.c **** 
3203:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3204:..\..\FreeRTOS_Source/tasks.c **** 
3205:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3206:..\..\FreeRTOS_Source/tasks.c **** 	{
3207:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn;
3208:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t const *pxTCB;
3209:..\..\FreeRTOS_Source/tasks.c **** 
3210:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask != NULL )
3211:..\..\FreeRTOS_Source/tasks.c **** 		{
3212:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3213:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3214:..\..\FreeRTOS_Source/tasks.c **** 		}
3215:..\..\FreeRTOS_Source/tasks.c **** 		else
3216:..\..\FreeRTOS_Source/tasks.c **** 		{
3217:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = 0U;
3218:..\..\FreeRTOS_Source/tasks.c **** 		}
3219:..\..\FreeRTOS_Source/tasks.c **** 
3220:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
3221:..\..\FreeRTOS_Source/tasks.c **** 	}
3222:..\..\FreeRTOS_Source/tasks.c **** 
3223:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3224:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3225:..\..\FreeRTOS_Source/tasks.c **** 
3226:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3227:..\..\FreeRTOS_Source/tasks.c **** 
3228:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3229:..\..\FreeRTOS_Source/tasks.c **** 	{
3230:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
3231:..\..\FreeRTOS_Source/tasks.c **** 
3232:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask != NULL )
3233:..\..\FreeRTOS_Source/tasks.c **** 		{
3234:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3235:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3236:..\..\FreeRTOS_Source/tasks.c **** 		}
3237:..\..\FreeRTOS_Source/tasks.c **** 	}
3238:..\..\FreeRTOS_Source/tasks.c **** 
3239:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3240:..\..\FreeRTOS_Source/tasks.c **** 
3241:..\..\FreeRTOS_Source/tasks.c **** /*
3242:..\..\FreeRTOS_Source/tasks.c ****  * -----------------------------------------------------------
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 121


3243:..\..\FreeRTOS_Source/tasks.c ****  * The Idle task.
3244:..\..\FreeRTOS_Source/tasks.c ****  * ----------------------------------------------------------
3245:..\..\FreeRTOS_Source/tasks.c ****  *
3246:..\..\FreeRTOS_Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3247:..\..\FreeRTOS_Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3248:..\..\FreeRTOS_Source/tasks.c ****  *
3249:..\..\FreeRTOS_Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3250:..\..\FreeRTOS_Source/tasks.c ****  *
3251:..\..\FreeRTOS_Source/tasks.c ****  */
3252:..\..\FreeRTOS_Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3253:..\..\FreeRTOS_Source/tasks.c **** {
 3344              		.loc 1 3253 0
 3345              		.cfi_startproc
 3346              		@ args = 0, pretend = 0, frame = 8
 3347              		@ frame_needed = 1, uses_anonymous_args = 0
 3348 0000 80B5     		push	{r7, lr}
 3349              		.cfi_def_cfa_offset 8
 3350              		.cfi_offset 7, -8
 3351              		.cfi_offset 14, -4
 3352 0002 82B0     		sub	sp, sp, #8
 3353              		.cfi_def_cfa_offset 16
 3354 0004 00AF     		add	r7, sp, #0
 3355              		.cfi_def_cfa_register 7
 3356 0006 7860     		str	r0, [r7, #4]
 3357              	.L219:
3254:..\..\FreeRTOS_Source/tasks.c **** 	/* Stop warnings. */
3255:..\..\FreeRTOS_Source/tasks.c **** 	( void ) pvParameters;
3256:..\..\FreeRTOS_Source/tasks.c **** 
3257:..\..\FreeRTOS_Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3258:..\..\FreeRTOS_Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3259:..\..\FreeRTOS_Source/tasks.c **** 
3260:..\..\FreeRTOS_Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3261:..\..\FreeRTOS_Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3262:..\..\FreeRTOS_Source/tasks.c **** 	any. */
3263:..\..\FreeRTOS_Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3264:..\..\FreeRTOS_Source/tasks.c **** 
3265:..\..\FreeRTOS_Source/tasks.c **** 	for( ;; )
3266:..\..\FreeRTOS_Source/tasks.c **** 	{
3267:..\..\FreeRTOS_Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3268:..\..\FreeRTOS_Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3269:..\..\FreeRTOS_Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3358              		.loc 1 3269 0 discriminator 1
 3359 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3270:..\..\FreeRTOS_Source/tasks.c **** 
3271:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3272:..\..\FreeRTOS_Source/tasks.c **** 		{
3273:..\..\FreeRTOS_Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3274:..\..\FreeRTOS_Source/tasks.c **** 			see if any other task has become available.  If we are using
3275:..\..\FreeRTOS_Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3276:..\..\FreeRTOS_Source/tasks.c **** 			will automatically get the processor anyway. */
3277:..\..\FreeRTOS_Source/tasks.c **** 			taskYIELD();
3278:..\..\FreeRTOS_Source/tasks.c **** 		}
3279:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3280:..\..\FreeRTOS_Source/tasks.c **** 
3281:..\..\FreeRTOS_Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3282:..\..\FreeRTOS_Source/tasks.c **** 		{
3283:..\..\FreeRTOS_Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 122


3284:..\..\FreeRTOS_Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3285:..\..\FreeRTOS_Source/tasks.c **** 			to run then the idle task should yield before the end of the
3286:..\..\FreeRTOS_Source/tasks.c **** 			timeslice.
3287:..\..\FreeRTOS_Source/tasks.c **** 
3288:..\..\FreeRTOS_Source/tasks.c **** 			A critical region is not required here as we are just reading from
3289:..\..\FreeRTOS_Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3290:..\..\FreeRTOS_Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3291:..\..\FreeRTOS_Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3292:..\..\FreeRTOS_Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3293:..\..\FreeRTOS_Source/tasks.c **** 			{
3294:..\..\FreeRTOS_Source/tasks.c **** 				taskYIELD();
3295:..\..\FreeRTOS_Source/tasks.c **** 			}
3296:..\..\FreeRTOS_Source/tasks.c **** 			else
3297:..\..\FreeRTOS_Source/tasks.c **** 			{
3298:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3299:..\..\FreeRTOS_Source/tasks.c **** 			}
3300:..\..\FreeRTOS_Source/tasks.c **** 		}
3301:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3302:..\..\FreeRTOS_Source/tasks.c **** 
3303:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3304:..\..\FreeRTOS_Source/tasks.c **** 		{
3305:..\..\FreeRTOS_Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3306:..\..\FreeRTOS_Source/tasks.c **** 
3307:..\..\FreeRTOS_Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3308:..\..\FreeRTOS_Source/tasks.c **** 			allows the application designer to add background functionality
3309:..\..\FreeRTOS_Source/tasks.c **** 			without the overhead of a separate task.
3310:..\..\FreeRTOS_Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3311:..\..\FreeRTOS_Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3312:..\..\FreeRTOS_Source/tasks.c **** 			vApplicationIdleHook();
3313:..\..\FreeRTOS_Source/tasks.c **** 		}
3314:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3315:..\..\FreeRTOS_Source/tasks.c **** 
3316:..\..\FreeRTOS_Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3317:..\..\FreeRTOS_Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3318:..\..\FreeRTOS_Source/tasks.c **** 		user defined low power mode	implementations require
3319:..\..\FreeRTOS_Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3320:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3321:..\..\FreeRTOS_Source/tasks.c **** 		{
3322:..\..\FreeRTOS_Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3323:..\..\FreeRTOS_Source/tasks.c **** 
3324:..\..\FreeRTOS_Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3325:..\..\FreeRTOS_Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3326:..\..\FreeRTOS_Source/tasks.c **** 			test of the expected idle time is performed without the
3327:..\..\FreeRTOS_Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3328:..\..\FreeRTOS_Source/tasks.c **** 			valid. */
3329:..\..\FreeRTOS_Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3330:..\..\FreeRTOS_Source/tasks.c **** 
3331:..\..\FreeRTOS_Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3332:..\..\FreeRTOS_Source/tasks.c **** 			{
3333:..\..\FreeRTOS_Source/tasks.c **** 				vTaskSuspendAll();
3334:..\..\FreeRTOS_Source/tasks.c **** 				{
3335:..\..\FreeRTOS_Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3336:..\..\FreeRTOS_Source/tasks.c **** 					time can be sampled again, and this time its value can
3337:..\..\FreeRTOS_Source/tasks.c **** 					be used. */
3338:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3339:..\..\FreeRTOS_Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3340:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 123


3341:..\..\FreeRTOS_Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3342:..\..\FreeRTOS_Source/tasks.c **** 					if the application does not want
3343:..\..\FreeRTOS_Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3344:..\..\FreeRTOS_Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3345:..\..\FreeRTOS_Source/tasks.c **** 
3346:..\..\FreeRTOS_Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3347:..\..\FreeRTOS_Source/tasks.c **** 					{
3348:..\..\FreeRTOS_Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3349:..\..\FreeRTOS_Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3350:..\..\FreeRTOS_Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3351:..\..\FreeRTOS_Source/tasks.c **** 					}
3352:..\..\FreeRTOS_Source/tasks.c **** 					else
3353:..\..\FreeRTOS_Source/tasks.c **** 					{
3354:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3355:..\..\FreeRTOS_Source/tasks.c **** 					}
3356:..\..\FreeRTOS_Source/tasks.c **** 				}
3357:..\..\FreeRTOS_Source/tasks.c **** 				( void ) xTaskResumeAll();
3358:..\..\FreeRTOS_Source/tasks.c **** 			}
3359:..\..\FreeRTOS_Source/tasks.c **** 			else
3360:..\..\FreeRTOS_Source/tasks.c **** 			{
3361:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3362:..\..\FreeRTOS_Source/tasks.c **** 			}
3363:..\..\FreeRTOS_Source/tasks.c **** 		}
3364:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3365:..\..\FreeRTOS_Source/tasks.c **** 	}
 3360              		.loc 1 3365 0 discriminator 1
 3361 000c FCE7     		b	.L219
 3362              		.cfi_endproc
 3363              	.LFE100:
 3364              		.size	prvIdleTask, .-prvIdleTask
 3365 000e 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3366              		.align	2
 3367              		.thumb
 3368              		.thumb_func
 3369              		.type	prvInitialiseTaskLists, %function
 3370              	prvInitialiseTaskLists:
 3371              	.LFB101:
3366:..\..\FreeRTOS_Source/tasks.c **** }
3367:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3368:..\..\FreeRTOS_Source/tasks.c **** 
3369:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3370:..\..\FreeRTOS_Source/tasks.c **** 
3371:..\..\FreeRTOS_Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3372:..\..\FreeRTOS_Source/tasks.c **** 	{
3373:..\..\FreeRTOS_Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3374:..\..\FreeRTOS_Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3375:..\..\FreeRTOS_Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3376:..\..\FreeRTOS_Source/tasks.c **** 
3377:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3378:..\..\FreeRTOS_Source/tasks.c **** 		{
3379:..\..\FreeRTOS_Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3380:..\..\FreeRTOS_Source/tasks.c **** 			eReturn = eAbortSleep;
3381:..\..\FreeRTOS_Source/tasks.c **** 		}
3382:..\..\FreeRTOS_Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3383:..\..\FreeRTOS_Source/tasks.c **** 		{
3384:..\..\FreeRTOS_Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3385:..\..\FreeRTOS_Source/tasks.c **** 			eReturn = eAbortSleep;
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 124


3386:..\..\FreeRTOS_Source/tasks.c **** 		}
3387:..\..\FreeRTOS_Source/tasks.c **** 		else
3388:..\..\FreeRTOS_Source/tasks.c **** 		{
3389:..\..\FreeRTOS_Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3390:..\..\FreeRTOS_Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3391:..\..\FreeRTOS_Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3392:..\..\FreeRTOS_Source/tasks.c **** 			interrupts. */
3393:..\..\FreeRTOS_Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3394:..\..\FreeRTOS_Source/tasks.c **** 			{
3395:..\..\FreeRTOS_Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3396:..\..\FreeRTOS_Source/tasks.c **** 			}
3397:..\..\FreeRTOS_Source/tasks.c **** 			else
3398:..\..\FreeRTOS_Source/tasks.c **** 			{
3399:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3400:..\..\FreeRTOS_Source/tasks.c **** 			}
3401:..\..\FreeRTOS_Source/tasks.c **** 		}
3402:..\..\FreeRTOS_Source/tasks.c **** 
3403:..\..\FreeRTOS_Source/tasks.c **** 		return eReturn;
3404:..\..\FreeRTOS_Source/tasks.c **** 	}
3405:..\..\FreeRTOS_Source/tasks.c **** 
3406:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3407:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3408:..\..\FreeRTOS_Source/tasks.c **** 
3409:..\..\FreeRTOS_Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3410:..\..\FreeRTOS_Source/tasks.c **** 
3411:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3412:..\..\FreeRTOS_Source/tasks.c **** 	{
3413:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3414:..\..\FreeRTOS_Source/tasks.c **** 
3415:..\..\FreeRTOS_Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3416:..\..\FreeRTOS_Source/tasks.c **** 		{
3417:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3418:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3419:..\..\FreeRTOS_Source/tasks.c **** 		}
3420:..\..\FreeRTOS_Source/tasks.c **** 	}
3421:..\..\FreeRTOS_Source/tasks.c **** 
3422:..\..\FreeRTOS_Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3423:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3424:..\..\FreeRTOS_Source/tasks.c **** 
3425:..\..\FreeRTOS_Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3426:..\..\FreeRTOS_Source/tasks.c **** 
3427:..\..\FreeRTOS_Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3428:..\..\FreeRTOS_Source/tasks.c **** 	{
3429:..\..\FreeRTOS_Source/tasks.c **** 	void *pvReturn = NULL;
3430:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3431:..\..\FreeRTOS_Source/tasks.c **** 
3432:..\..\FreeRTOS_Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3433:..\..\FreeRTOS_Source/tasks.c **** 		{
3434:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3435:..\..\FreeRTOS_Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3436:..\..\FreeRTOS_Source/tasks.c **** 		}
3437:..\..\FreeRTOS_Source/tasks.c **** 		else
3438:..\..\FreeRTOS_Source/tasks.c **** 		{
3439:..\..\FreeRTOS_Source/tasks.c **** 			pvReturn = NULL;
3440:..\..\FreeRTOS_Source/tasks.c **** 		}
3441:..\..\FreeRTOS_Source/tasks.c **** 
3442:..\..\FreeRTOS_Source/tasks.c **** 		return pvReturn;
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 125


3443:..\..\FreeRTOS_Source/tasks.c **** 	}
3444:..\..\FreeRTOS_Source/tasks.c **** 
3445:..\..\FreeRTOS_Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3446:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3447:..\..\FreeRTOS_Source/tasks.c **** 
3448:..\..\FreeRTOS_Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3449:..\..\FreeRTOS_Source/tasks.c **** 
3450:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3451:..\..\FreeRTOS_Source/tasks.c **** 	{
3452:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3453:..\..\FreeRTOS_Source/tasks.c **** 
3454:..\..\FreeRTOS_Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3455:..\..\FreeRTOS_Source/tasks.c **** 		the calling task. */
3456:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3457:..\..\FreeRTOS_Source/tasks.c **** 
3458:..\..\FreeRTOS_Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3459:..\..\FreeRTOS_Source/tasks.c **** 	}
3460:..\..\FreeRTOS_Source/tasks.c **** 
3461:..\..\FreeRTOS_Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3462:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3463:..\..\FreeRTOS_Source/tasks.c **** 
3464:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseTaskLists( void )
3465:..\..\FreeRTOS_Source/tasks.c **** {
 3372              		.loc 1 3465 0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 1, uses_anonymous_args = 0
 3376 0000 80B5     		push	{r7, lr}
 3377              		.cfi_def_cfa_offset 8
 3378              		.cfi_offset 7, -8
 3379              		.cfi_offset 14, -4
 3380 0002 82B0     		sub	sp, sp, #8
 3381              		.cfi_def_cfa_offset 16
 3382 0004 00AF     		add	r7, sp, #0
 3383              		.cfi_def_cfa_register 7
3466:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t uxPriority;
3467:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;	/*< Delayed tasks. */
3468:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;	/*< Delayed tasks (two lists are used - one for de
3469:..\..\FreeRTOS_Source/tasks.c **** 
3470:..\..\FreeRTOS_Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3384              		.loc 1 3470 0
 3385 0006 0023     		movs	r3, #0
 3386 0008 7B60     		str	r3, [r7, #4]
 3387 000a 0CE0     		b	.L221
 3388              	.L222:
3471:..\..\FreeRTOS_Source/tasks.c **** 	{
3472:..\..\FreeRTOS_Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3389              		.loc 1 3472 0 discriminator 3
 3390 000c 7A68     		ldr	r2, [r7, #4]
 3391 000e 1346     		mov	r3, r2
 3392 0010 9B00     		lsls	r3, r3, #2
 3393 0012 1344     		add	r3, r3, r2
 3394 0014 9B00     		lsls	r3, r3, #2
 3395 0016 114A     		ldr	r2, .L223
 3396 0018 1344     		add	r3, r3, r2
 3397 001a 1846     		mov	r0, r3
 3398 001c FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 126


3470:..\..\FreeRTOS_Source/tasks.c **** 	{
 3399              		.loc 1 3470 0 discriminator 3
 3400 0020 7B68     		ldr	r3, [r7, #4]
 3401 0022 0133     		adds	r3, r3, #1
 3402 0024 7B60     		str	r3, [r7, #4]
 3403              	.L221:
3470:..\..\FreeRTOS_Source/tasks.c **** 	{
 3404              		.loc 1 3470 0 is_stmt 0 discriminator 1
 3405 0026 7B68     		ldr	r3, [r7, #4]
 3406 0028 042B     		cmp	r3, #4
 3407 002a EFD9     		bls	.L222
3473:..\..\FreeRTOS_Source/tasks.c **** 	}
3474:..\..\FreeRTOS_Source/tasks.c **** 
3475:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3408              		.loc 1 3475 0 is_stmt 1
 3409 002c 0C48     		ldr	r0, .L223+4
 3410 002e FFF7FEFF 		bl	vListInitialise
3476:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3411              		.loc 1 3476 0
 3412 0032 0C48     		ldr	r0, .L223+8
 3413 0034 FFF7FEFF 		bl	vListInitialise
3477:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3414              		.loc 1 3477 0
 3415 0038 0B48     		ldr	r0, .L223+12
 3416 003a FFF7FEFF 		bl	vListInitialise
3478:..\..\FreeRTOS_Source/tasks.c **** 
3479:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3480:..\..\FreeRTOS_Source/tasks.c **** 	{
3481:..\..\FreeRTOS_Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3417              		.loc 1 3481 0
 3418 003e 0B48     		ldr	r0, .L223+16
 3419 0040 FFF7FEFF 		bl	vListInitialise
3482:..\..\FreeRTOS_Source/tasks.c **** 	}
3483:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3484:..\..\FreeRTOS_Source/tasks.c **** 
3485:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3486:..\..\FreeRTOS_Source/tasks.c **** 	{
3487:..\..\FreeRTOS_Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3420              		.loc 1 3487 0
 3421 0044 0A48     		ldr	r0, .L223+20
 3422 0046 FFF7FEFF 		bl	vListInitialise
3488:..\..\FreeRTOS_Source/tasks.c **** 	}
3489:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3490:..\..\FreeRTOS_Source/tasks.c **** 
3491:..\..\FreeRTOS_Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3492:..\..\FreeRTOS_Source/tasks.c **** 	using list2. */
3493:..\..\FreeRTOS_Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3423              		.loc 1 3493 0
 3424 004a 0A4B     		ldr	r3, .L223+24
 3425 004c 044A     		ldr	r2, .L223+4
 3426 004e 1A60     		str	r2, [r3]
3494:..\..\FreeRTOS_Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3427              		.loc 1 3494 0
 3428 0050 094B     		ldr	r3, .L223+28
 3429 0052 044A     		ldr	r2, .L223+8
 3430 0054 1A60     		str	r2, [r3]
3495:..\..\FreeRTOS_Source/tasks.c **** }
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 127


 3431              		.loc 1 3495 0
 3432 0056 0837     		adds	r7, r7, #8
 3433              		.cfi_def_cfa_offset 8
 3434 0058 BD46     		mov	sp, r7
 3435              		.cfi_def_cfa_register 13
 3436              		@ sp needed
 3437 005a 80BD     		pop	{r7, pc}
 3438              	.L224:
 3439              		.align	2
 3440              	.L223:
 3441 005c 04000000 		.word	pxReadyTasksLists
 3442 0060 DC000000 		.word	xDelayedTaskList1.7075
 3443 0064 F0000000 		.word	xDelayedTaskList2.7076
 3444 0068 70000000 		.word	xPendingReadyList
 3445 006c 84000000 		.word	xTasksWaitingTermination
 3446 0070 9C000000 		.word	xSuspendedTaskList
 3447 0074 68000000 		.word	pxDelayedTaskList
 3448 0078 6C000000 		.word	pxOverflowDelayedTaskList
 3449              		.cfi_endproc
 3450              	.LFE101:
 3451              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3452              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3453              		.align	2
 3454              		.thumb
 3455              		.thumb_func
 3456              		.type	prvCheckTasksWaitingTermination, %function
 3457              	prvCheckTasksWaitingTermination:
 3458              	.LFB102:
3496:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3497:..\..\FreeRTOS_Source/tasks.c **** 
3498:..\..\FreeRTOS_Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3499:..\..\FreeRTOS_Source/tasks.c **** {
 3459              		.loc 1 3499 0
 3460              		.cfi_startproc
 3461              		@ args = 0, pretend = 0, frame = 8
 3462              		@ frame_needed = 1, uses_anonymous_args = 0
 3463 0000 80B5     		push	{r7, lr}
 3464              		.cfi_def_cfa_offset 8
 3465              		.cfi_offset 7, -8
 3466              		.cfi_offset 14, -4
 3467 0002 82B0     		sub	sp, sp, #8
 3468              		.cfi_def_cfa_offset 16
 3469 0004 00AF     		add	r7, sp, #0
 3470              		.cfi_def_cfa_register 7
 3471              	.LBB50:
3500:..\..\FreeRTOS_Source/tasks.c **** 
3501:..\..\FreeRTOS_Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3502:..\..\FreeRTOS_Source/tasks.c **** 
3503:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3504:..\..\FreeRTOS_Source/tasks.c **** 	{
3505:..\..\FreeRTOS_Source/tasks.c **** 		TCB_t *pxTCB;
3506:..\..\FreeRTOS_Source/tasks.c **** 
3507:..\..\FreeRTOS_Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3508:..\..\FreeRTOS_Source/tasks.c **** 		being called too often in the idle task. */
3509:..\..\FreeRTOS_Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 3472              		.loc 1 3509 0
 3473 0006 19E0     		b	.L226
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 128


 3474              	.L227:
3510:..\..\FreeRTOS_Source/tasks.c **** 		{
3511:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
 3475              		.loc 1 3511 0
 3476 0008 FFF7FEFF 		bl	vPortEnterCritical
3512:..\..\FreeRTOS_Source/tasks.c **** 			{
3513:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 3477              		.loc 1 3513 0
 3478 000c 0F4B     		ldr	r3, .L228
 3479 000e DB68     		ldr	r3, [r3, #12]
 3480 0010 DB68     		ldr	r3, [r3, #12]
 3481 0012 7B60     		str	r3, [r7, #4]
3514:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3482              		.loc 1 3514 0
 3483 0014 7B68     		ldr	r3, [r7, #4]
 3484 0016 0433     		adds	r3, r3, #4
 3485 0018 1846     		mov	r0, r3
 3486 001a FFF7FEFF 		bl	uxListRemove
3515:..\..\FreeRTOS_Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 3487              		.loc 1 3515 0
 3488 001e 0C4B     		ldr	r3, .L228+4
 3489 0020 1B68     		ldr	r3, [r3]
 3490 0022 013B     		subs	r3, r3, #1
 3491 0024 0A4A     		ldr	r2, .L228+4
 3492 0026 1360     		str	r3, [r2]
3516:..\..\FreeRTOS_Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 3493              		.loc 1 3516 0
 3494 0028 0A4B     		ldr	r3, .L228+8
 3495 002a 1B68     		ldr	r3, [r3]
 3496 002c 013B     		subs	r3, r3, #1
 3497 002e 094A     		ldr	r2, .L228+8
 3498 0030 1360     		str	r3, [r2]
3517:..\..\FreeRTOS_Source/tasks.c **** 			}
3518:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 3499              		.loc 1 3518 0
 3500 0032 FFF7FEFF 		bl	vPortExitCritical
3519:..\..\FreeRTOS_Source/tasks.c **** 
3520:..\..\FreeRTOS_Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 3501              		.loc 1 3520 0
 3502 0036 7868     		ldr	r0, [r7, #4]
 3503 0038 FFF7FEFF 		bl	prvDeleteTCB
 3504              	.L226:
3509:..\..\FreeRTOS_Source/tasks.c **** 		{
 3505              		.loc 1 3509 0
 3506 003c 054B     		ldr	r3, .L228+8
 3507 003e 1B68     		ldr	r3, [r3]
 3508 0040 002B     		cmp	r3, #0
 3509 0042 E1D1     		bne	.L227
 3510              	.LBE50:
3521:..\..\FreeRTOS_Source/tasks.c **** 		}
3522:..\..\FreeRTOS_Source/tasks.c **** 	}
3523:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3524:..\..\FreeRTOS_Source/tasks.c **** }
 3511              		.loc 1 3524 0
 3512 0044 0837     		adds	r7, r7, #8
 3513              		.cfi_def_cfa_offset 8
 3514 0046 BD46     		mov	sp, r7
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 129


 3515              		.cfi_def_cfa_register 13
 3516              		@ sp needed
 3517 0048 80BD     		pop	{r7, pc}
 3518              	.L229:
 3519 004a 00BF     		.align	2
 3520              	.L228:
 3521 004c 84000000 		.word	xTasksWaitingTermination
 3522 0050 B0000000 		.word	uxCurrentNumberOfTasks
 3523 0054 98000000 		.word	uxDeletedTasksWaitingCleanUp
 3524              		.cfi_endproc
 3525              	.LFE102:
 3526              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3527              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 3528              		.align	2
 3529              		.thumb
 3530              		.thumb_func
 3531              		.type	prvTaskCheckFreeStackSpace, %function
 3532              	prvTaskCheckFreeStackSpace:
 3533              	.LFB103:
3525:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3526:..\..\FreeRTOS_Source/tasks.c **** 
3527:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3528:..\..\FreeRTOS_Source/tasks.c **** 
3529:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3530:..\..\FreeRTOS_Source/tasks.c **** 	{
3531:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3532:..\..\FreeRTOS_Source/tasks.c **** 
3533:..\..\FreeRTOS_Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3534:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3535:..\..\FreeRTOS_Source/tasks.c **** 
3536:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3537:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3538:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3539:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3540:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3541:..\..\FreeRTOS_Source/tasks.c **** 
3542:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3543:..\..\FreeRTOS_Source/tasks.c **** 		{
3544:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3545:..\..\FreeRTOS_Source/tasks.c **** 		}
3546:..\..\FreeRTOS_Source/tasks.c **** 		#else
3547:..\..\FreeRTOS_Source/tasks.c **** 		{
3548:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3549:..\..\FreeRTOS_Source/tasks.c **** 		}
3550:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3551:..\..\FreeRTOS_Source/tasks.c **** 
3552:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3553:..\..\FreeRTOS_Source/tasks.c **** 		{
3554:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3555:..\..\FreeRTOS_Source/tasks.c **** 		}
3556:..\..\FreeRTOS_Source/tasks.c **** 		#else
3557:..\..\FreeRTOS_Source/tasks.c **** 		{
3558:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3559:..\..\FreeRTOS_Source/tasks.c **** 		}
3560:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3561:..\..\FreeRTOS_Source/tasks.c **** 
3562:..\..\FreeRTOS_Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 130


3563:..\..\FreeRTOS_Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3564:..\..\FreeRTOS_Source/tasks.c **** 		state is just set to whatever is passed in. */
3565:..\..\FreeRTOS_Source/tasks.c **** 		if( eState != eInvalid )
3566:..\..\FreeRTOS_Source/tasks.c **** 		{
3567:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3568:..\..\FreeRTOS_Source/tasks.c **** 			{
3569:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3570:..\..\FreeRTOS_Source/tasks.c **** 			}
3571:..\..\FreeRTOS_Source/tasks.c **** 			else
3572:..\..\FreeRTOS_Source/tasks.c **** 			{
3573:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3574:..\..\FreeRTOS_Source/tasks.c **** 
3575:..\..\FreeRTOS_Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3576:..\..\FreeRTOS_Source/tasks.c **** 				{
3577:..\..\FreeRTOS_Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3578:..\..\FreeRTOS_Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3579:..\..\FreeRTOS_Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3580:..\..\FreeRTOS_Source/tasks.c **** 					if( eState == eSuspended )
3581:..\..\FreeRTOS_Source/tasks.c **** 					{
3582:..\..\FreeRTOS_Source/tasks.c **** 						vTaskSuspendAll();
3583:..\..\FreeRTOS_Source/tasks.c **** 						{
3584:..\..\FreeRTOS_Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3585:..\..\FreeRTOS_Source/tasks.c **** 							{
3586:..\..\FreeRTOS_Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3587:..\..\FreeRTOS_Source/tasks.c **** 							}
3588:..\..\FreeRTOS_Source/tasks.c **** 						}
3589:..\..\FreeRTOS_Source/tasks.c **** 						( void ) xTaskResumeAll();
3590:..\..\FreeRTOS_Source/tasks.c **** 					}
3591:..\..\FreeRTOS_Source/tasks.c **** 				}
3592:..\..\FreeRTOS_Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3593:..\..\FreeRTOS_Source/tasks.c **** 			}
3594:..\..\FreeRTOS_Source/tasks.c **** 		}
3595:..\..\FreeRTOS_Source/tasks.c **** 		else
3596:..\..\FreeRTOS_Source/tasks.c **** 		{
3597:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3598:..\..\FreeRTOS_Source/tasks.c **** 		}
3599:..\..\FreeRTOS_Source/tasks.c **** 
3600:..\..\FreeRTOS_Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3601:..\..\FreeRTOS_Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3602:..\..\FreeRTOS_Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3603:..\..\FreeRTOS_Source/tasks.c **** 		{
3604:..\..\FreeRTOS_Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3605:..\..\FreeRTOS_Source/tasks.c **** 			{
3606:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3607:..\..\FreeRTOS_Source/tasks.c **** 			}
3608:..\..\FreeRTOS_Source/tasks.c **** 			#else
3609:..\..\FreeRTOS_Source/tasks.c **** 			{
3610:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3611:..\..\FreeRTOS_Source/tasks.c **** 			}
3612:..\..\FreeRTOS_Source/tasks.c **** 			#endif
3613:..\..\FreeRTOS_Source/tasks.c **** 		}
3614:..\..\FreeRTOS_Source/tasks.c **** 		else
3615:..\..\FreeRTOS_Source/tasks.c **** 		{
3616:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3617:..\..\FreeRTOS_Source/tasks.c **** 		}
3618:..\..\FreeRTOS_Source/tasks.c **** 	}
3619:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 131


3620:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3621:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3622:..\..\FreeRTOS_Source/tasks.c **** 
3623:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3624:..\..\FreeRTOS_Source/tasks.c **** 
3625:..\..\FreeRTOS_Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3626:..\..\FreeRTOS_Source/tasks.c **** 	{
3627:..\..\FreeRTOS_Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3628:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTask = 0;
3629:..\..\FreeRTOS_Source/tasks.c **** 
3630:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3631:..\..\FreeRTOS_Source/tasks.c **** 		{
3632:..\..\FreeRTOS_Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3633:..\..\FreeRTOS_Source/tasks.c **** 
3634:..\..\FreeRTOS_Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3635:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3636:..\..\FreeRTOS_Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3637:..\..\FreeRTOS_Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3638:..\..\FreeRTOS_Source/tasks.c **** 			do
3639:..\..\FreeRTOS_Source/tasks.c **** 			{
3640:..\..\FreeRTOS_Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3641:..\..\FreeRTOS_Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3642:..\..\FreeRTOS_Source/tasks.c **** 				uxTask++;
3643:..\..\FreeRTOS_Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3644:..\..\FreeRTOS_Source/tasks.c **** 		}
3645:..\..\FreeRTOS_Source/tasks.c **** 		else
3646:..\..\FreeRTOS_Source/tasks.c **** 		{
3647:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3648:..\..\FreeRTOS_Source/tasks.c **** 		}
3649:..\..\FreeRTOS_Source/tasks.c **** 
3650:..\..\FreeRTOS_Source/tasks.c **** 		return uxTask;
3651:..\..\FreeRTOS_Source/tasks.c **** 	}
3652:..\..\FreeRTOS_Source/tasks.c **** 
3653:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3654:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3655:..\..\FreeRTOS_Source/tasks.c **** 
3656:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3657:..\..\FreeRTOS_Source/tasks.c **** 
3658:..\..\FreeRTOS_Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3659:..\..\FreeRTOS_Source/tasks.c **** 	{
 3534              		.loc 1 3659 0
 3535              		.cfi_startproc
 3536              		@ args = 0, pretend = 0, frame = 16
 3537              		@ frame_needed = 1, uses_anonymous_args = 0
 3538              		@ link register save eliminated.
 3539 0000 80B4     		push	{r7}
 3540              		.cfi_def_cfa_offset 4
 3541              		.cfi_offset 7, -4
 3542 0002 85B0     		sub	sp, sp, #20
 3543              		.cfi_def_cfa_offset 24
 3544 0004 00AF     		add	r7, sp, #0
 3545              		.cfi_def_cfa_register 7
 3546 0006 7860     		str	r0, [r7, #4]
3660:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulCount = 0U;
 3547              		.loc 1 3660 0
 3548 0008 0023     		movs	r3, #0
 3549 000a FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 132


3661:..\..\FreeRTOS_Source/tasks.c **** 
3662:..\..\FreeRTOS_Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 3550              		.loc 1 3662 0
 3551 000c 05E0     		b	.L231
 3552              	.L232:
3663:..\..\FreeRTOS_Source/tasks.c **** 		{
3664:..\..\FreeRTOS_Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3553              		.loc 1 3664 0
 3554 000e 7B68     		ldr	r3, [r7, #4]
 3555 0010 0133     		adds	r3, r3, #1
 3556 0012 7B60     		str	r3, [r7, #4]
3665:..\..\FreeRTOS_Source/tasks.c **** 			ulCount++;
 3557              		.loc 1 3665 0
 3558 0014 FB68     		ldr	r3, [r7, #12]
 3559 0016 0133     		adds	r3, r3, #1
 3560 0018 FB60     		str	r3, [r7, #12]
 3561              	.L231:
3662:..\..\FreeRTOS_Source/tasks.c **** 		{
 3562              		.loc 1 3662 0
 3563 001a 7B68     		ldr	r3, [r7, #4]
 3564 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3565 001e A52B     		cmp	r3, #165
 3566 0020 F5D0     		beq	.L232
3666:..\..\FreeRTOS_Source/tasks.c **** 		}
3667:..\..\FreeRTOS_Source/tasks.c **** 
3668:..\..\FreeRTOS_Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 3567              		.loc 1 3668 0
 3568 0022 FB68     		ldr	r3, [r7, #12]
 3569 0024 9B08     		lsrs	r3, r3, #2
 3570 0026 FB60     		str	r3, [r7, #12]
3669:..\..\FreeRTOS_Source/tasks.c **** 
3670:..\..\FreeRTOS_Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 3571              		.loc 1 3670 0
 3572 0028 FB68     		ldr	r3, [r7, #12]
 3573 002a 9BB2     		uxth	r3, r3
3671:..\..\FreeRTOS_Source/tasks.c **** 	}
 3574              		.loc 1 3671 0
 3575 002c 1846     		mov	r0, r3
 3576 002e 1437     		adds	r7, r7, #20
 3577              		.cfi_def_cfa_offset 4
 3578 0030 BD46     		mov	sp, r7
 3579              		.cfi_def_cfa_register 13
 3580              		@ sp needed
 3581 0032 5DF8047B 		ldr	r7, [sp], #4
 3582              		.cfi_restore 7
 3583              		.cfi_def_cfa_offset 0
 3584 0036 7047     		bx	lr
 3585              		.cfi_endproc
 3586              	.LFE103:
 3587              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 3588              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3589              		.align	2
 3590              		.global	uxTaskGetStackHighWaterMark
 3591              		.thumb
 3592              		.thumb_func
 3593              		.type	uxTaskGetStackHighWaterMark, %function
 3594              	uxTaskGetStackHighWaterMark:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 133


 3595              	.LFB104:
3672:..\..\FreeRTOS_Source/tasks.c **** 
3673:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3674:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3675:..\..\FreeRTOS_Source/tasks.c **** 
3676:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3677:..\..\FreeRTOS_Source/tasks.c **** 
3678:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3679:..\..\FreeRTOS_Source/tasks.c **** 	{
 3596              		.loc 1 3679 0
 3597              		.cfi_startproc
 3598              		@ args = 0, pretend = 0, frame = 24
 3599              		@ frame_needed = 1, uses_anonymous_args = 0
 3600 0000 80B5     		push	{r7, lr}
 3601              		.cfi_def_cfa_offset 8
 3602              		.cfi_offset 7, -8
 3603              		.cfi_offset 14, -4
 3604 0002 86B0     		sub	sp, sp, #24
 3605              		.cfi_def_cfa_offset 32
 3606 0004 00AF     		add	r7, sp, #0
 3607              		.cfi_def_cfa_register 7
 3608 0006 7860     		str	r0, [r7, #4]
3680:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3681:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t *pucEndOfStack;
3682:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn;
3683:..\..\FreeRTOS_Source/tasks.c **** 
3684:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3609              		.loc 1 3684 0
 3610 0008 7B68     		ldr	r3, [r7, #4]
 3611 000a 002B     		cmp	r3, #0
 3612 000c 02D1     		bne	.L235
 3613              		.loc 1 3684 0 is_stmt 0 discriminator 1
 3614 000e 094B     		ldr	r3, .L238
 3615 0010 1B68     		ldr	r3, [r3]
 3616 0012 00E0     		b	.L236
 3617              	.L235:
 3618              		.loc 1 3684 0 discriminator 2
 3619 0014 7B68     		ldr	r3, [r7, #4]
 3620              	.L236:
 3621              		.loc 1 3684 0 discriminator 4
 3622 0016 7B61     		str	r3, [r7, #20]
3685:..\..\FreeRTOS_Source/tasks.c **** 
3686:..\..\FreeRTOS_Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3687:..\..\FreeRTOS_Source/tasks.c **** 		{
3688:..\..\FreeRTOS_Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 3623              		.loc 1 3688 0 is_stmt 1 discriminator 4
 3624 0018 7B69     		ldr	r3, [r7, #20]
 3625 001a 1B6B     		ldr	r3, [r3, #48]
 3626 001c 3B61     		str	r3, [r7, #16]
3689:..\..\FreeRTOS_Source/tasks.c **** 		}
3690:..\..\FreeRTOS_Source/tasks.c **** 		#else
3691:..\..\FreeRTOS_Source/tasks.c **** 		{
3692:..\..\FreeRTOS_Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3693:..\..\FreeRTOS_Source/tasks.c **** 		}
3694:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3695:..\..\FreeRTOS_Source/tasks.c **** 
3696:..\..\FreeRTOS_Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 134


 3627              		.loc 1 3696 0 discriminator 4
 3628 001e 3869     		ldr	r0, [r7, #16]
 3629 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3630 0024 0346     		mov	r3, r0
 3631 0026 FB60     		str	r3, [r7, #12]
3697:..\..\FreeRTOS_Source/tasks.c **** 
3698:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
 3632              		.loc 1 3698 0 discriminator 4
 3633 0028 FB68     		ldr	r3, [r7, #12]
3699:..\..\FreeRTOS_Source/tasks.c **** 	}
 3634              		.loc 1 3699 0 discriminator 4
 3635 002a 1846     		mov	r0, r3
 3636 002c 1837     		adds	r7, r7, #24
 3637              		.cfi_def_cfa_offset 8
 3638 002e BD46     		mov	sp, r7
 3639              		.cfi_def_cfa_register 13
 3640              		@ sp needed
 3641 0030 80BD     		pop	{r7, pc}
 3642              	.L239:
 3643 0032 00BF     		.align	2
 3644              	.L238:
 3645 0034 00000000 		.word	pxCurrentTCB
 3646              		.cfi_endproc
 3647              	.LFE104:
 3648              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3649              		.section	.text.prvDeleteTCB,"ax",%progbits
 3650              		.align	2
 3651              		.thumb
 3652              		.thumb_func
 3653              		.type	prvDeleteTCB, %function
 3654              	prvDeleteTCB:
 3655              	.LFB105:
3700:..\..\FreeRTOS_Source/tasks.c **** 
3701:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3702:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3703:..\..\FreeRTOS_Source/tasks.c **** 
3704:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3705:..\..\FreeRTOS_Source/tasks.c **** 
3706:..\..\FreeRTOS_Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3707:..\..\FreeRTOS_Source/tasks.c **** 	{
 3656              		.loc 1 3707 0
 3657              		.cfi_startproc
 3658              		@ args = 0, pretend = 0, frame = 8
 3659              		@ frame_needed = 1, uses_anonymous_args = 0
 3660 0000 80B5     		push	{r7, lr}
 3661              		.cfi_def_cfa_offset 8
 3662              		.cfi_offset 7, -8
 3663              		.cfi_offset 14, -4
 3664 0002 82B0     		sub	sp, sp, #8
 3665              		.cfi_def_cfa_offset 16
 3666 0004 00AF     		add	r7, sp, #0
 3667              		.cfi_def_cfa_register 7
 3668 0006 7860     		str	r0, [r7, #4]
3708:..\..\FreeRTOS_Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3709:..\..\FreeRTOS_Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3710:..\..\FreeRTOS_Source/tasks.c **** 		want to allocate and clean RAM statically. */
3711:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 135


3712:..\..\FreeRTOS_Source/tasks.c **** 
3713:..\..\FreeRTOS_Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3714:..\..\FreeRTOS_Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3715:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3716:..\..\FreeRTOS_Source/tasks.c **** 		{
3717:..\..\FreeRTOS_Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3718:..\..\FreeRTOS_Source/tasks.c **** 		}
3719:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3720:..\..\FreeRTOS_Source/tasks.c **** 
3721:..\..\FreeRTOS_Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3722:..\..\FreeRTOS_Source/tasks.c **** 		{
3723:..\..\FreeRTOS_Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3724:..\..\FreeRTOS_Source/tasks.c **** 			the stack and TCB. */
3725:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 3669              		.loc 1 3725 0
 3670 0008 7B68     		ldr	r3, [r7, #4]
 3671 000a 1B6B     		ldr	r3, [r3, #48]
 3672 000c 1846     		mov	r0, r3
 3673 000e FFF7FEFF 		bl	vPortFree
3726:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTCB );
 3674              		.loc 1 3726 0
 3675 0012 7868     		ldr	r0, [r7, #4]
 3676 0014 FFF7FEFF 		bl	vPortFree
3727:..\..\FreeRTOS_Source/tasks.c **** 		}
3728:..\..\FreeRTOS_Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3729:..\..\FreeRTOS_Source/tasks.c **** 		{
3730:..\..\FreeRTOS_Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3731:..\..\FreeRTOS_Source/tasks.c **** 			check what was statically allocated before trying to free the
3732:..\..\FreeRTOS_Source/tasks.c **** 			memory. */
3733:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3734:..\..\FreeRTOS_Source/tasks.c **** 			{
3735:..\..\FreeRTOS_Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3736:..\..\FreeRTOS_Source/tasks.c **** 				must be freed. */
3737:..\..\FreeRTOS_Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3738:..\..\FreeRTOS_Source/tasks.c **** 				vPortFree( pxTCB );
3739:..\..\FreeRTOS_Source/tasks.c **** 			}
3740:..\..\FreeRTOS_Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3741:..\..\FreeRTOS_Source/tasks.c **** 			{
3742:..\..\FreeRTOS_Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3743:..\..\FreeRTOS_Source/tasks.c **** 				only memory that must be freed. */
3744:..\..\FreeRTOS_Source/tasks.c **** 				vPortFree( pxTCB );
3745:..\..\FreeRTOS_Source/tasks.c **** 			}
3746:..\..\FreeRTOS_Source/tasks.c **** 			else
3747:..\..\FreeRTOS_Source/tasks.c **** 			{
3748:..\..\FreeRTOS_Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3749:..\..\FreeRTOS_Source/tasks.c **** 				nothing needs to be freed. */
3750:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3751:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3752:..\..\FreeRTOS_Source/tasks.c **** 			}
3753:..\..\FreeRTOS_Source/tasks.c **** 		}
3754:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3755:..\..\FreeRTOS_Source/tasks.c **** 	}
 3677              		.loc 1 3755 0
 3678 0018 0837     		adds	r7, r7, #8
 3679              		.cfi_def_cfa_offset 8
 3680 001a BD46     		mov	sp, r7
 3681              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 136


 3682              		@ sp needed
 3683 001c 80BD     		pop	{r7, pc}
 3684              		.cfi_endproc
 3685              	.LFE105:
 3686              		.size	prvDeleteTCB, .-prvDeleteTCB
 3687 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 3688              		.align	2
 3689              		.thumb
 3690              		.thumb_func
 3691              		.type	prvResetNextTaskUnblockTime, %function
 3692              	prvResetNextTaskUnblockTime:
 3693              	.LFB106:
3756:..\..\FreeRTOS_Source/tasks.c **** 
3757:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3758:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3759:..\..\FreeRTOS_Source/tasks.c **** 
3760:..\..\FreeRTOS_Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3761:..\..\FreeRTOS_Source/tasks.c **** {
 3694              		.loc 1 3761 0
 3695              		.cfi_startproc
 3696              		@ args = 0, pretend = 0, frame = 8
 3697              		@ frame_needed = 1, uses_anonymous_args = 0
 3698              		@ link register save eliminated.
 3699 0000 80B4     		push	{r7}
 3700              		.cfi_def_cfa_offset 4
 3701              		.cfi_offset 7, -4
 3702 0002 83B0     		sub	sp, sp, #12
 3703              		.cfi_def_cfa_offset 16
 3704 0004 00AF     		add	r7, sp, #0
 3705              		.cfi_def_cfa_register 7
3762:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxTCB;
3763:..\..\FreeRTOS_Source/tasks.c **** 
3764:..\..\FreeRTOS_Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3706              		.loc 1 3764 0
 3707 0006 0C4B     		ldr	r3, .L244
 3708 0008 1B68     		ldr	r3, [r3]
 3709 000a 1B68     		ldr	r3, [r3]
 3710 000c 002B     		cmp	r3, #0
 3711 000e 04D1     		bne	.L242
3765:..\..\FreeRTOS_Source/tasks.c **** 	{
3766:..\..\FreeRTOS_Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3767:..\..\FreeRTOS_Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3768:..\..\FreeRTOS_Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3769:..\..\FreeRTOS_Source/tasks.c **** 		there is an item in the delayed list. */
3770:..\..\FreeRTOS_Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 3712              		.loc 1 3770 0
 3713 0010 0A4B     		ldr	r3, .L244+4
 3714 0012 4FF0FF32 		mov	r2, #-1
 3715 0016 1A60     		str	r2, [r3]
 3716 0018 08E0     		b	.L241
 3717              	.L242:
3771:..\..\FreeRTOS_Source/tasks.c **** 	}
3772:..\..\FreeRTOS_Source/tasks.c **** 	else
3773:..\..\FreeRTOS_Source/tasks.c **** 	{
3774:..\..\FreeRTOS_Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3775:..\..\FreeRTOS_Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3776:..\..\FreeRTOS_Source/tasks.c **** 		which the task at the head of the delayed list should be removed
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 137


3777:..\..\FreeRTOS_Source/tasks.c **** 		from the Blocked state. */
3778:..\..\FreeRTOS_Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 3718              		.loc 1 3778 0
 3719 001a 074B     		ldr	r3, .L244
 3720 001c 1B68     		ldr	r3, [r3]
 3721 001e DB68     		ldr	r3, [r3, #12]
 3722 0020 DB68     		ldr	r3, [r3, #12]
 3723 0022 7B60     		str	r3, [r7, #4]
3779:..\..\FreeRTOS_Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 3724              		.loc 1 3779 0
 3725 0024 7B68     		ldr	r3, [r7, #4]
 3726 0026 5B68     		ldr	r3, [r3, #4]
 3727 0028 044A     		ldr	r2, .L244+4
 3728 002a 1360     		str	r3, [r2]
 3729              	.L241:
3780:..\..\FreeRTOS_Source/tasks.c **** 	}
3781:..\..\FreeRTOS_Source/tasks.c **** }
 3730              		.loc 1 3781 0
 3731 002c 0C37     		adds	r7, r7, #12
 3732              		.cfi_def_cfa_offset 4
 3733 002e BD46     		mov	sp, r7
 3734              		.cfi_def_cfa_register 13
 3735              		@ sp needed
 3736 0030 5DF8047B 		ldr	r7, [sp], #4
 3737              		.cfi_restore 7
 3738              		.cfi_def_cfa_offset 0
 3739 0034 7047     		bx	lr
 3740              	.L245:
 3741 0036 00BF     		.align	2
 3742              	.L244:
 3743 0038 68000000 		.word	pxDelayedTaskList
 3744 003c D0000000 		.word	xNextTaskUnblockTime
 3745              		.cfi_endproc
 3746              	.LFE106:
 3747              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 3748              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3749              		.align	2
 3750              		.global	xTaskGetCurrentTaskHandle
 3751              		.thumb
 3752              		.thumb_func
 3753              		.type	xTaskGetCurrentTaskHandle, %function
 3754              	xTaskGetCurrentTaskHandle:
 3755              	.LFB107:
3782:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3783:..\..\FreeRTOS_Source/tasks.c **** 
3784:..\..\FreeRTOS_Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3785:..\..\FreeRTOS_Source/tasks.c **** 
3786:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3787:..\..\FreeRTOS_Source/tasks.c **** 	{
 3756              		.loc 1 3787 0
 3757              		.cfi_startproc
 3758              		@ args = 0, pretend = 0, frame = 8
 3759              		@ frame_needed = 1, uses_anonymous_args = 0
 3760              		@ link register save eliminated.
 3761 0000 80B4     		push	{r7}
 3762              		.cfi_def_cfa_offset 4
 3763              		.cfi_offset 7, -4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 138


 3764 0002 83B0     		sub	sp, sp, #12
 3765              		.cfi_def_cfa_offset 16
 3766 0004 00AF     		add	r7, sp, #0
 3767              		.cfi_def_cfa_register 7
3788:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xReturn;
3789:..\..\FreeRTOS_Source/tasks.c **** 
3790:..\..\FreeRTOS_Source/tasks.c **** 		/* A critical section is not required as this is not called from
3791:..\..\FreeRTOS_Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3792:..\..\FreeRTOS_Source/tasks.c **** 		individual execution thread. */
3793:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3768              		.loc 1 3793 0
 3769 0006 054B     		ldr	r3, .L248
 3770 0008 1B68     		ldr	r3, [r3]
 3771 000a 7B60     		str	r3, [r7, #4]
3794:..\..\FreeRTOS_Source/tasks.c **** 
3795:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 3772              		.loc 1 3795 0
 3773 000c 7B68     		ldr	r3, [r7, #4]
3796:..\..\FreeRTOS_Source/tasks.c **** 	}
 3774              		.loc 1 3796 0
 3775 000e 1846     		mov	r0, r3
 3776 0010 0C37     		adds	r7, r7, #12
 3777              		.cfi_def_cfa_offset 4
 3778 0012 BD46     		mov	sp, r7
 3779              		.cfi_def_cfa_register 13
 3780              		@ sp needed
 3781 0014 5DF8047B 		ldr	r7, [sp], #4
 3782              		.cfi_restore 7
 3783              		.cfi_def_cfa_offset 0
 3784 0018 7047     		bx	lr
 3785              	.L249:
 3786 001a 00BF     		.align	2
 3787              	.L248:
 3788 001c 00000000 		.word	pxCurrentTCB
 3789              		.cfi_endproc
 3790              	.LFE107:
 3791              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3792              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3793              		.align	2
 3794              		.global	xTaskPriorityInherit
 3795              		.thumb
 3796              		.thumb_func
 3797              		.type	xTaskPriorityInherit, %function
 3798              	xTaskPriorityInherit:
 3799              	.LFB108:
3797:..\..\FreeRTOS_Source/tasks.c **** 
3798:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3799:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3800:..\..\FreeRTOS_Source/tasks.c **** 
3801:..\..\FreeRTOS_Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3802:..\..\FreeRTOS_Source/tasks.c **** 
3803:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3804:..\..\FreeRTOS_Source/tasks.c **** 	{
3805:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
3806:..\..\FreeRTOS_Source/tasks.c **** 
3807:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3808:..\..\FreeRTOS_Source/tasks.c **** 		{
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 139


3809:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3810:..\..\FreeRTOS_Source/tasks.c **** 		}
3811:..\..\FreeRTOS_Source/tasks.c **** 		else
3812:..\..\FreeRTOS_Source/tasks.c **** 		{
3813:..\..\FreeRTOS_Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3814:..\..\FreeRTOS_Source/tasks.c **** 			{
3815:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3816:..\..\FreeRTOS_Source/tasks.c **** 			}
3817:..\..\FreeRTOS_Source/tasks.c **** 			else
3818:..\..\FreeRTOS_Source/tasks.c **** 			{
3819:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3820:..\..\FreeRTOS_Source/tasks.c **** 			}
3821:..\..\FreeRTOS_Source/tasks.c **** 		}
3822:..\..\FreeRTOS_Source/tasks.c **** 
3823:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
3824:..\..\FreeRTOS_Source/tasks.c **** 	}
3825:..\..\FreeRTOS_Source/tasks.c **** 
3826:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3827:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3828:..\..\FreeRTOS_Source/tasks.c **** 
3829:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3830:..\..\FreeRTOS_Source/tasks.c **** 
3831:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3832:..\..\FreeRTOS_Source/tasks.c **** 	{
 3800              		.loc 1 3832 0
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 16
 3803              		@ frame_needed = 1, uses_anonymous_args = 0
 3804 0000 80B5     		push	{r7, lr}
 3805              		.cfi_def_cfa_offset 8
 3806              		.cfi_offset 7, -8
 3807              		.cfi_offset 14, -4
 3808 0002 84B0     		sub	sp, sp, #16
 3809              		.cfi_def_cfa_offset 24
 3810 0004 00AF     		add	r7, sp, #0
 3811              		.cfi_def_cfa_register 7
 3812 0006 7860     		str	r0, [r7, #4]
3833:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3813              		.loc 1 3833 0
 3814 0008 7B68     		ldr	r3, [r7, #4]
 3815 000a BB60     		str	r3, [r7, #8]
3834:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3816              		.loc 1 3834 0
 3817 000c 0023     		movs	r3, #0
 3818 000e FB60     		str	r3, [r7, #12]
3835:..\..\FreeRTOS_Source/tasks.c **** 
3836:..\..\FreeRTOS_Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3837:..\..\FreeRTOS_Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3838:..\..\FreeRTOS_Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3839:..\..\FreeRTOS_Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3819              		.loc 1 3839 0
 3820 0010 7B68     		ldr	r3, [r7, #4]
 3821 0012 002B     		cmp	r3, #0
 3822 0014 6BD0     		beq	.L251
3840:..\..\FreeRTOS_Source/tasks.c **** 		{
3841:..\..\FreeRTOS_Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3842:..\..\FreeRTOS_Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 140


3843:..\..\FreeRTOS_Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3844:..\..\FreeRTOS_Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 3823              		.loc 1 3844 0
 3824 0016 BB68     		ldr	r3, [r7, #8]
 3825 0018 DA6A     		ldr	r2, [r3, #44]
 3826 001a 374B     		ldr	r3, .L259
 3827 001c 1B68     		ldr	r3, [r3]
 3828 001e DB6A     		ldr	r3, [r3, #44]
 3829 0020 9A42     		cmp	r2, r3
 3830 0022 5BD2     		bcs	.L252
3845:..\..\FreeRTOS_Source/tasks.c **** 			{
3846:..\..\FreeRTOS_Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3847:..\..\FreeRTOS_Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3848:..\..\FreeRTOS_Source/tasks.c **** 				not being used for anything else. */
3849:..\..\FreeRTOS_Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 3831              		.loc 1 3849 0
 3832 0024 BB68     		ldr	r3, [r7, #8]
 3833 0026 9B69     		ldr	r3, [r3, #24]
 3834 0028 002B     		cmp	r3, #0
 3835 002a 06DB     		blt	.L253
3850:..\..\FreeRTOS_Source/tasks.c **** 				{
3851:..\..\FreeRTOS_Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 3836              		.loc 1 3851 0
 3837 002c 324B     		ldr	r3, .L259
 3838 002e 1B68     		ldr	r3, [r3]
 3839 0030 DB6A     		ldr	r3, [r3, #44]
 3840 0032 C3F10502 		rsb	r2, r3, #5
 3841 0036 BB68     		ldr	r3, [r7, #8]
 3842 0038 9A61     		str	r2, [r3, #24]
 3843              	.L253:
3852:..\..\FreeRTOS_Source/tasks.c **** 				}
3853:..\..\FreeRTOS_Source/tasks.c **** 				else
3854:..\..\FreeRTOS_Source/tasks.c **** 				{
3855:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3856:..\..\FreeRTOS_Source/tasks.c **** 				}
3857:..\..\FreeRTOS_Source/tasks.c **** 
3858:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3859:..\..\FreeRTOS_Source/tasks.c **** 				to be moved into a new list. */
3860:..\..\FreeRTOS_Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 3844              		.loc 1 3860 0
 3845 003a BB68     		ldr	r3, [r7, #8]
 3846 003c 5969     		ldr	r1, [r3, #20]
 3847 003e BB68     		ldr	r3, [r7, #8]
 3848 0040 DA6A     		ldr	r2, [r3, #44]
 3849 0042 1346     		mov	r3, r2
 3850 0044 9B00     		lsls	r3, r3, #2
 3851 0046 1344     		add	r3, r3, r2
 3852 0048 9B00     		lsls	r3, r3, #2
 3853 004a 2C4A     		ldr	r2, .L259+4
 3854 004c 1344     		add	r3, r3, r2
 3855 004e 9942     		cmp	r1, r3
 3856 0050 3CD1     		bne	.L254
3861:..\..\FreeRTOS_Source/tasks.c **** 				{
3862:..\..\FreeRTOS_Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 3857              		.loc 1 3862 0
 3858 0052 BB68     		ldr	r3, [r7, #8]
 3859 0054 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 141


 3860 0056 1846     		mov	r0, r3
 3861 0058 FFF7FEFF 		bl	uxListRemove
 3862 005c 0346     		mov	r3, r0
 3863 005e 002B     		cmp	r3, #0
 3864 0060 15D1     		bne	.L255
3863:..\..\FreeRTOS_Source/tasks.c **** 					{
3864:..\..\FreeRTOS_Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 3865              		.loc 1 3864 0
 3866 0062 BB68     		ldr	r3, [r7, #8]
 3867 0064 DA6A     		ldr	r2, [r3, #44]
 3868 0066 2549     		ldr	r1, .L259+4
 3869 0068 1346     		mov	r3, r2
 3870 006a 9B00     		lsls	r3, r3, #2
 3871 006c 1344     		add	r3, r3, r2
 3872 006e 9B00     		lsls	r3, r3, #2
 3873 0070 0B44     		add	r3, r3, r1
 3874 0072 1B68     		ldr	r3, [r3]
 3875 0074 002B     		cmp	r3, #0
 3876 0076 0AD1     		bne	.L255
 3877              		.loc 1 3864 0 is_stmt 0 discriminator 1
 3878 0078 BB68     		ldr	r3, [r7, #8]
 3879 007a DB6A     		ldr	r3, [r3, #44]
 3880 007c 1A46     		mov	r2, r3
 3881 007e 0123     		movs	r3, #1
 3882 0080 9340     		lsls	r3, r3, r2
 3883 0082 DA43     		mvns	r2, r3
 3884 0084 1E4B     		ldr	r3, .L259+8
 3885 0086 1B68     		ldr	r3, [r3]
 3886 0088 1340     		ands	r3, r3, r2
 3887 008a 1D4A     		ldr	r2, .L259+8
 3888 008c 1360     		str	r3, [r2]
 3889              	.L255:
3865:..\..\FreeRTOS_Source/tasks.c **** 					}
3866:..\..\FreeRTOS_Source/tasks.c **** 					else
3867:..\..\FreeRTOS_Source/tasks.c **** 					{
3868:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3869:..\..\FreeRTOS_Source/tasks.c **** 					}
3870:..\..\FreeRTOS_Source/tasks.c **** 
3871:..\..\FreeRTOS_Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3872:..\..\FreeRTOS_Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 3890              		.loc 1 3872 0 is_stmt 1
 3891 008e 1A4B     		ldr	r3, .L259
 3892 0090 1B68     		ldr	r3, [r3]
 3893 0092 DA6A     		ldr	r2, [r3, #44]
 3894 0094 BB68     		ldr	r3, [r7, #8]
 3895 0096 DA62     		str	r2, [r3, #44]
3873:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3896              		.loc 1 3873 0
 3897 0098 BB68     		ldr	r3, [r7, #8]
 3898 009a DB6A     		ldr	r3, [r3, #44]
 3899 009c 1A46     		mov	r2, r3
 3900 009e 0123     		movs	r3, #1
 3901 00a0 03FA02F2 		lsl	r2, r3, r2
 3902 00a4 164B     		ldr	r3, .L259+8
 3903 00a6 1B68     		ldr	r3, [r3]
 3904 00a8 1343     		orrs	r3, r3, r2
 3905 00aa 154A     		ldr	r2, .L259+8
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 142


 3906 00ac 1360     		str	r3, [r2]
 3907 00ae BB68     		ldr	r3, [r7, #8]
 3908 00b0 DA6A     		ldr	r2, [r3, #44]
 3909 00b2 1346     		mov	r3, r2
 3910 00b4 9B00     		lsls	r3, r3, #2
 3911 00b6 1344     		add	r3, r3, r2
 3912 00b8 9B00     		lsls	r3, r3, #2
 3913 00ba 104A     		ldr	r2, .L259+4
 3914 00bc 1A44     		add	r2, r2, r3
 3915 00be BB68     		ldr	r3, [r7, #8]
 3916 00c0 0433     		adds	r3, r3, #4
 3917 00c2 1046     		mov	r0, r2
 3918 00c4 1946     		mov	r1, r3
 3919 00c6 FFF7FEFF 		bl	vListInsertEnd
 3920 00ca 04E0     		b	.L257
 3921              	.L254:
3874:..\..\FreeRTOS_Source/tasks.c **** 				}
3875:..\..\FreeRTOS_Source/tasks.c **** 				else
3876:..\..\FreeRTOS_Source/tasks.c **** 				{
3877:..\..\FreeRTOS_Source/tasks.c **** 					/* Just inherit the priority. */
3878:..\..\FreeRTOS_Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 3922              		.loc 1 3878 0
 3923 00cc 0A4B     		ldr	r3, .L259
 3924 00ce 1B68     		ldr	r3, [r3]
 3925 00d0 DA6A     		ldr	r2, [r3, #44]
 3926 00d2 BB68     		ldr	r3, [r7, #8]
 3927 00d4 DA62     		str	r2, [r3, #44]
 3928              	.L257:
3879:..\..\FreeRTOS_Source/tasks.c **** 				}
3880:..\..\FreeRTOS_Source/tasks.c **** 
3881:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3882:..\..\FreeRTOS_Source/tasks.c **** 
3883:..\..\FreeRTOS_Source/tasks.c **** 				/* Inheritance occurred. */
3884:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdTRUE;
 3929              		.loc 1 3884 0
 3930 00d6 0123     		movs	r3, #1
 3931 00d8 FB60     		str	r3, [r7, #12]
 3932 00da 08E0     		b	.L251
 3933              	.L252:
3885:..\..\FreeRTOS_Source/tasks.c **** 			}
3886:..\..\FreeRTOS_Source/tasks.c **** 			else
3887:..\..\FreeRTOS_Source/tasks.c **** 			{
3888:..\..\FreeRTOS_Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 3934              		.loc 1 3888 0
 3935 00dc BB68     		ldr	r3, [r7, #8]
 3936 00de 1A6C     		ldr	r2, [r3, #64]
 3937 00e0 054B     		ldr	r3, .L259
 3938 00e2 1B68     		ldr	r3, [r3]
 3939 00e4 DB6A     		ldr	r3, [r3, #44]
 3940 00e6 9A42     		cmp	r2, r3
 3941 00e8 01D2     		bcs	.L251
3889:..\..\FreeRTOS_Source/tasks.c **** 				{
3890:..\..\FreeRTOS_Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3891:..\..\FreeRTOS_Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3892:..\..\FreeRTOS_Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3893:..\..\FreeRTOS_Source/tasks.c **** 					priority of the task attempting to take the mutex.
3894:..\..\FreeRTOS_Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 143


3895:..\..\FreeRTOS_Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3896:..\..\FreeRTOS_Source/tasks.c **** 					not been the case. */
3897:..\..\FreeRTOS_Source/tasks.c **** 					xReturn = pdTRUE;
 3942              		.loc 1 3897 0
 3943 00ea 0123     		movs	r3, #1
 3944 00ec FB60     		str	r3, [r7, #12]
 3945              	.L251:
3898:..\..\FreeRTOS_Source/tasks.c **** 				}
3899:..\..\FreeRTOS_Source/tasks.c **** 				else
3900:..\..\FreeRTOS_Source/tasks.c **** 				{
3901:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3902:..\..\FreeRTOS_Source/tasks.c **** 				}
3903:..\..\FreeRTOS_Source/tasks.c **** 			}
3904:..\..\FreeRTOS_Source/tasks.c **** 		}
3905:..\..\FreeRTOS_Source/tasks.c **** 		else
3906:..\..\FreeRTOS_Source/tasks.c **** 		{
3907:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:..\..\FreeRTOS_Source/tasks.c **** 		}
3909:..\..\FreeRTOS_Source/tasks.c **** 
3910:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 3946              		.loc 1 3910 0
 3947 00ee FB68     		ldr	r3, [r7, #12]
3911:..\..\FreeRTOS_Source/tasks.c **** 	}
 3948              		.loc 1 3911 0
 3949 00f0 1846     		mov	r0, r3
 3950 00f2 1037     		adds	r7, r7, #16
 3951              		.cfi_def_cfa_offset 8
 3952 00f4 BD46     		mov	sp, r7
 3953              		.cfi_def_cfa_register 13
 3954              		@ sp needed
 3955 00f6 80BD     		pop	{r7, pc}
 3956              	.L260:
 3957              		.align	2
 3958              	.L259:
 3959 00f8 00000000 		.word	pxCurrentTCB
 3960 00fc 04000000 		.word	pxReadyTasksLists
 3961 0100 B8000000 		.word	uxTopReadyPriority
 3962              		.cfi_endproc
 3963              	.LFE108:
 3964              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3965              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3966              		.align	2
 3967              		.global	xTaskPriorityDisinherit
 3968              		.thumb
 3969              		.thumb_func
 3970              		.type	xTaskPriorityDisinherit, %function
 3971              	xTaskPriorityDisinherit:
 3972              	.LFB109:
3912:..\..\FreeRTOS_Source/tasks.c **** 
3913:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
3914:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3915:..\..\FreeRTOS_Source/tasks.c **** 
3916:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3917:..\..\FreeRTOS_Source/tasks.c **** 
3918:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3919:..\..\FreeRTOS_Source/tasks.c **** 	{
 3973              		.loc 1 3919 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 144


 3974              		.cfi_startproc
 3975              		@ args = 0, pretend = 0, frame = 16
 3976              		@ frame_needed = 1, uses_anonymous_args = 0
 3977 0000 80B5     		push	{r7, lr}
 3978              		.cfi_def_cfa_offset 8
 3979              		.cfi_offset 7, -8
 3980              		.cfi_offset 14, -4
 3981 0002 84B0     		sub	sp, sp, #16
 3982              		.cfi_def_cfa_offset 24
 3983 0004 00AF     		add	r7, sp, #0
 3984              		.cfi_def_cfa_register 7
 3985 0006 7860     		str	r0, [r7, #4]
3920:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3986              		.loc 1 3920 0
 3987 0008 7B68     		ldr	r3, [r7, #4]
 3988 000a BB60     		str	r3, [r7, #8]
3921:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3989              		.loc 1 3921 0
 3990 000c 0023     		movs	r3, #0
 3991 000e FB60     		str	r3, [r7, #12]
3922:..\..\FreeRTOS_Source/tasks.c **** 
3923:..\..\FreeRTOS_Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3992              		.loc 1 3923 0
 3993 0010 7B68     		ldr	r3, [r7, #4]
 3994 0012 002B     		cmp	r3, #0
 3995 0014 51D0     		beq	.L262
3924:..\..\FreeRTOS_Source/tasks.c **** 		{
3925:..\..\FreeRTOS_Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3926:..\..\FreeRTOS_Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3927:..\..\FreeRTOS_Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3928:..\..\FreeRTOS_Source/tasks.c **** 			be the running state task. */
3929:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3930:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3931:..\..\FreeRTOS_Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3996              		.loc 1 3931 0
 3997 0016 BB68     		ldr	r3, [r7, #8]
 3998 0018 5B6C     		ldr	r3, [r3, #68]
 3999 001a 5A1E     		subs	r2, r3, #1
 4000 001c BB68     		ldr	r3, [r7, #8]
 4001 001e 5A64     		str	r2, [r3, #68]
3932:..\..\FreeRTOS_Source/tasks.c **** 
3933:..\..\FreeRTOS_Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3934:..\..\FreeRTOS_Source/tasks.c **** 			task? */
3935:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4002              		.loc 1 3935 0
 4003 0020 BB68     		ldr	r3, [r7, #8]
 4004 0022 DA6A     		ldr	r2, [r3, #44]
 4005 0024 BB68     		ldr	r3, [r7, #8]
 4006 0026 1B6C     		ldr	r3, [r3, #64]
 4007 0028 9A42     		cmp	r2, r3
 4008 002a 46D0     		beq	.L262
3936:..\..\FreeRTOS_Source/tasks.c **** 			{
3937:..\..\FreeRTOS_Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3938:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4009              		.loc 1 3938 0
 4010 002c BB68     		ldr	r3, [r7, #8]
 4011 002e 5B6C     		ldr	r3, [r3, #68]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 145


 4012 0030 002B     		cmp	r3, #0
 4013 0032 42D1     		bne	.L262
3939:..\..\FreeRTOS_Source/tasks.c **** 				{
3940:..\..\FreeRTOS_Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3941:..\..\FreeRTOS_Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3942:..\..\FreeRTOS_Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3943:..\..\FreeRTOS_Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3944:..\..\FreeRTOS_Source/tasks.c **** 					the holding task from the ready list. */
3945:..\..\FreeRTOS_Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4014              		.loc 1 3945 0
 4015 0034 BB68     		ldr	r3, [r7, #8]
 4016 0036 0433     		adds	r3, r3, #4
 4017 0038 1846     		mov	r0, r3
 4018 003a FFF7FEFF 		bl	uxListRemove
 4019 003e 0346     		mov	r3, r0
 4020 0040 002B     		cmp	r3, #0
 4021 0042 15D1     		bne	.L263
3946:..\..\FreeRTOS_Source/tasks.c **** 					{
3947:..\..\FreeRTOS_Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4022              		.loc 1 3947 0
 4023 0044 BB68     		ldr	r3, [r7, #8]
 4024 0046 DA6A     		ldr	r2, [r3, #44]
 4025 0048 1E49     		ldr	r1, .L266
 4026 004a 1346     		mov	r3, r2
 4027 004c 9B00     		lsls	r3, r3, #2
 4028 004e 1344     		add	r3, r3, r2
 4029 0050 9B00     		lsls	r3, r3, #2
 4030 0052 0B44     		add	r3, r3, r1
 4031 0054 1B68     		ldr	r3, [r3]
 4032 0056 002B     		cmp	r3, #0
 4033 0058 0AD1     		bne	.L263
 4034              		.loc 1 3947 0 is_stmt 0 discriminator 1
 4035 005a BB68     		ldr	r3, [r7, #8]
 4036 005c DB6A     		ldr	r3, [r3, #44]
 4037 005e 1A46     		mov	r2, r3
 4038 0060 0123     		movs	r3, #1
 4039 0062 9340     		lsls	r3, r3, r2
 4040 0064 DA43     		mvns	r2, r3
 4041 0066 184B     		ldr	r3, .L266+4
 4042 0068 1B68     		ldr	r3, [r3]
 4043 006a 1340     		ands	r3, r3, r2
 4044 006c 164A     		ldr	r2, .L266+4
 4045 006e 1360     		str	r3, [r2]
 4046              	.L263:
3948:..\..\FreeRTOS_Source/tasks.c **** 					}
3949:..\..\FreeRTOS_Source/tasks.c **** 					else
3950:..\..\FreeRTOS_Source/tasks.c **** 					{
3951:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3952:..\..\FreeRTOS_Source/tasks.c **** 					}
3953:..\..\FreeRTOS_Source/tasks.c **** 
3954:..\..\FreeRTOS_Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3955:..\..\FreeRTOS_Source/tasks.c **** 					new	ready list. */
3956:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3957:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4047              		.loc 1 3957 0 is_stmt 1
 4048 0070 BB68     		ldr	r3, [r7, #8]
 4049 0072 1A6C     		ldr	r2, [r3, #64]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 146


 4050 0074 BB68     		ldr	r3, [r7, #8]
 4051 0076 DA62     		str	r2, [r3, #44]
3958:..\..\FreeRTOS_Source/tasks.c **** 
3959:..\..\FreeRTOS_Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3960:..\..\FreeRTOS_Source/tasks.c **** 					any other purpose if this task is running, and it must be
3961:..\..\FreeRTOS_Source/tasks.c **** 					running to give back the mutex. */
3962:..\..\FreeRTOS_Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4052              		.loc 1 3962 0
 4053 0078 BB68     		ldr	r3, [r7, #8]
 4054 007a DB6A     		ldr	r3, [r3, #44]
 4055 007c C3F10502 		rsb	r2, r3, #5
 4056 0080 BB68     		ldr	r3, [r7, #8]
 4057 0082 9A61     		str	r2, [r3, #24]
3963:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4058              		.loc 1 3963 0
 4059 0084 BB68     		ldr	r3, [r7, #8]
 4060 0086 DB6A     		ldr	r3, [r3, #44]
 4061 0088 1A46     		mov	r2, r3
 4062 008a 0123     		movs	r3, #1
 4063 008c 03FA02F2 		lsl	r2, r3, r2
 4064 0090 0D4B     		ldr	r3, .L266+4
 4065 0092 1B68     		ldr	r3, [r3]
 4066 0094 1343     		orrs	r3, r3, r2
 4067 0096 0C4A     		ldr	r2, .L266+4
 4068 0098 1360     		str	r3, [r2]
 4069 009a BB68     		ldr	r3, [r7, #8]
 4070 009c DA6A     		ldr	r2, [r3, #44]
 4071 009e 1346     		mov	r3, r2
 4072 00a0 9B00     		lsls	r3, r3, #2
 4073 00a2 1344     		add	r3, r3, r2
 4074 00a4 9B00     		lsls	r3, r3, #2
 4075 00a6 074A     		ldr	r2, .L266
 4076 00a8 1A44     		add	r2, r2, r3
 4077 00aa BB68     		ldr	r3, [r7, #8]
 4078 00ac 0433     		adds	r3, r3, #4
 4079 00ae 1046     		mov	r0, r2
 4080 00b0 1946     		mov	r1, r3
 4081 00b2 FFF7FEFF 		bl	vListInsertEnd
3964:..\..\FreeRTOS_Source/tasks.c **** 
3965:..\..\FreeRTOS_Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3966:..\..\FreeRTOS_Source/tasks.c **** 					This is only actually required in the corner case whereby
3967:..\..\FreeRTOS_Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3968:..\..\FreeRTOS_Source/tasks.c **** 					in an order different to that in which they were taken.
3969:..\..\FreeRTOS_Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3970:..\..\FreeRTOS_Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3971:..\..\FreeRTOS_Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3972:..\..\FreeRTOS_Source/tasks.c **** 					a task is waiting on it or not. */
3973:..\..\FreeRTOS_Source/tasks.c **** 					xReturn = pdTRUE;
 4082              		.loc 1 3973 0
 4083 00b6 0123     		movs	r3, #1
 4084 00b8 FB60     		str	r3, [r7, #12]
 4085              	.L262:
3974:..\..\FreeRTOS_Source/tasks.c **** 				}
3975:..\..\FreeRTOS_Source/tasks.c **** 				else
3976:..\..\FreeRTOS_Source/tasks.c **** 				{
3977:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3978:..\..\FreeRTOS_Source/tasks.c **** 				}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 147


3979:..\..\FreeRTOS_Source/tasks.c **** 			}
3980:..\..\FreeRTOS_Source/tasks.c **** 			else
3981:..\..\FreeRTOS_Source/tasks.c **** 			{
3982:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3983:..\..\FreeRTOS_Source/tasks.c **** 			}
3984:..\..\FreeRTOS_Source/tasks.c **** 		}
3985:..\..\FreeRTOS_Source/tasks.c **** 		else
3986:..\..\FreeRTOS_Source/tasks.c **** 		{
3987:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3988:..\..\FreeRTOS_Source/tasks.c **** 		}
3989:..\..\FreeRTOS_Source/tasks.c **** 
3990:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 4086              		.loc 1 3990 0
 4087 00ba FB68     		ldr	r3, [r7, #12]
3991:..\..\FreeRTOS_Source/tasks.c **** 	}
 4088              		.loc 1 3991 0
 4089 00bc 1846     		mov	r0, r3
 4090 00be 1037     		adds	r7, r7, #16
 4091              		.cfi_def_cfa_offset 8
 4092 00c0 BD46     		mov	sp, r7
 4093              		.cfi_def_cfa_register 13
 4094              		@ sp needed
 4095 00c2 80BD     		pop	{r7, pc}
 4096              	.L267:
 4097              		.align	2
 4098              	.L266:
 4099 00c4 04000000 		.word	pxReadyTasksLists
 4100 00c8 B8000000 		.word	uxTopReadyPriority
 4101              		.cfi_endproc
 4102              	.LFE109:
 4103              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4104              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4105              		.align	2
 4106              		.global	vTaskPriorityDisinheritAfterTimeout
 4107              		.thumb
 4108              		.thumb_func
 4109              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 4110              	vTaskPriorityDisinheritAfterTimeout:
 4111              	.LFB110:
3992:..\..\FreeRTOS_Source/tasks.c **** 
3993:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
3994:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3995:..\..\FreeRTOS_Source/tasks.c **** 
3996:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3997:..\..\FreeRTOS_Source/tasks.c **** 
3998:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3999:..\..\FreeRTOS_Source/tasks.c **** 	{
 4112              		.loc 1 3999 0
 4113              		.cfi_startproc
 4114              		@ args = 0, pretend = 0, frame = 24
 4115              		@ frame_needed = 1, uses_anonymous_args = 0
 4116 0000 80B5     		push	{r7, lr}
 4117              		.cfi_def_cfa_offset 8
 4118              		.cfi_offset 7, -8
 4119              		.cfi_offset 14, -4
 4120 0002 86B0     		sub	sp, sp, #24
 4121              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 148


 4122 0004 00AF     		add	r7, sp, #0
 4123              		.cfi_def_cfa_register 7
 4124 0006 7860     		str	r0, [r7, #4]
 4125 0008 3960     		str	r1, [r7]
4000:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4126              		.loc 1 4000 0
 4127 000a 7B68     		ldr	r3, [r7, #4]
 4128 000c 3B61     		str	r3, [r7, #16]
4001:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4002:..\..\FreeRTOS_Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 4129              		.loc 1 4002 0
 4130 000e 0123     		movs	r3, #1
 4131 0010 FB60     		str	r3, [r7, #12]
4003:..\..\FreeRTOS_Source/tasks.c **** 
4004:..\..\FreeRTOS_Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4132              		.loc 1 4004 0
 4133 0012 7B68     		ldr	r3, [r7, #4]
 4134 0014 002B     		cmp	r3, #0
 4135 0016 65D0     		beq	.L268
4005:..\..\FreeRTOS_Source/tasks.c **** 		{
4006:..\..\FreeRTOS_Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4007:..\..\FreeRTOS_Source/tasks.c **** 			one mutex. */
4008:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4009:..\..\FreeRTOS_Source/tasks.c **** 
4010:..\..\FreeRTOS_Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4011:..\..\FreeRTOS_Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4012:..\..\FreeRTOS_Source/tasks.c **** 			holding task's base priority and the priority of the highest
4013:..\..\FreeRTOS_Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4014:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 4136              		.loc 1 4014 0
 4137 0018 3B69     		ldr	r3, [r7, #16]
 4138 001a 1A6C     		ldr	r2, [r3, #64]
 4139 001c 3B68     		ldr	r3, [r7]
 4140 001e 9A42     		cmp	r2, r3
 4141 0020 02D2     		bcs	.L270
4015:..\..\FreeRTOS_Source/tasks.c **** 			{
4016:..\..\FreeRTOS_Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 4142              		.loc 1 4016 0
 4143 0022 3B68     		ldr	r3, [r7]
 4144 0024 7B61     		str	r3, [r7, #20]
 4145 0026 02E0     		b	.L271
 4146              	.L270:
4017:..\..\FreeRTOS_Source/tasks.c **** 			}
4018:..\..\FreeRTOS_Source/tasks.c **** 			else
4019:..\..\FreeRTOS_Source/tasks.c **** 			{
4020:..\..\FreeRTOS_Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 4147              		.loc 1 4020 0
 4148 0028 3B69     		ldr	r3, [r7, #16]
 4149 002a 1B6C     		ldr	r3, [r3, #64]
 4150 002c 7B61     		str	r3, [r7, #20]
 4151              	.L271:
4021:..\..\FreeRTOS_Source/tasks.c **** 			}
4022:..\..\FreeRTOS_Source/tasks.c **** 
4023:..\..\FreeRTOS_Source/tasks.c **** 			/* Does the priority need to change? */
4024:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 4152              		.loc 1 4024 0
 4153 002e 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 149


 4154 0030 DA6A     		ldr	r2, [r3, #44]
 4155 0032 7B69     		ldr	r3, [r7, #20]
 4156 0034 9A42     		cmp	r2, r3
 4157 0036 55D0     		beq	.L268
4025:..\..\FreeRTOS_Source/tasks.c **** 			{
4026:..\..\FreeRTOS_Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4027:..\..\FreeRTOS_Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4028:..\..\FreeRTOS_Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4029:..\..\FreeRTOS_Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4030:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 4158              		.loc 1 4030 0
 4159 0038 3B69     		ldr	r3, [r7, #16]
 4160 003a 5A6C     		ldr	r2, [r3, #68]
 4161 003c FB68     		ldr	r3, [r7, #12]
 4162 003e 9A42     		cmp	r2, r3
 4163 0040 50D1     		bne	.L268
4031:..\..\FreeRTOS_Source/tasks.c **** 				{
4032:..\..\FreeRTOS_Source/tasks.c **** 					/* If a task has timed out because it already holds the
4033:..\..\FreeRTOS_Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4034:..\..\FreeRTOS_Source/tasks.c **** 					its own priority. */
4035:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4036:..\..\FreeRTOS_Source/tasks.c **** 
4037:..\..\FreeRTOS_Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4038:..\..\FreeRTOS_Source/tasks.c **** 					priority to facilitate determining the subject task's
4039:..\..\FreeRTOS_Source/tasks.c **** 					state. */
4040:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4041:..\..\FreeRTOS_Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 4164              		.loc 1 4041 0
 4165 0042 3B69     		ldr	r3, [r7, #16]
 4166 0044 DB6A     		ldr	r3, [r3, #44]
 4167 0046 BB60     		str	r3, [r7, #8]
4042:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 4168              		.loc 1 4042 0
 4169 0048 3B69     		ldr	r3, [r7, #16]
 4170 004a 7A69     		ldr	r2, [r7, #20]
 4171 004c DA62     		str	r2, [r3, #44]
4043:..\..\FreeRTOS_Source/tasks.c **** 
4044:..\..\FreeRTOS_Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4045:..\..\FreeRTOS_Source/tasks.c **** 					being used for anything else. */
4046:..\..\FreeRTOS_Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 4172              		.loc 1 4046 0
 4173 004e 3B69     		ldr	r3, [r7, #16]
 4174 0050 9B69     		ldr	r3, [r3, #24]
 4175 0052 002B     		cmp	r3, #0
 4176 0054 04DB     		blt	.L272
4047:..\..\FreeRTOS_Source/tasks.c **** 					{
4048:..\..\FreeRTOS_Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 4177              		.loc 1 4048 0
 4178 0056 7B69     		ldr	r3, [r7, #20]
 4179 0058 C3F10502 		rsb	r2, r3, #5
 4180 005c 3B69     		ldr	r3, [r7, #16]
 4181 005e 9A61     		str	r2, [r3, #24]
 4182              	.L272:
4049:..\..\FreeRTOS_Source/tasks.c **** 					}
4050:..\..\FreeRTOS_Source/tasks.c **** 					else
4051:..\..\FreeRTOS_Source/tasks.c **** 					{
4052:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 150


4053:..\..\FreeRTOS_Source/tasks.c **** 					}
4054:..\..\FreeRTOS_Source/tasks.c **** 
4055:..\..\FreeRTOS_Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4056:..\..\FreeRTOS_Source/tasks.c **** 					then the task that holds the mutex could be in either the
4057:..\..\FreeRTOS_Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4058:..\..\FreeRTOS_Source/tasks.c **** 					from its current state list if it is in the Ready state as
4059:..\..\FreeRTOS_Source/tasks.c **** 					the task's priority is going to change and there is one
4060:..\..\FreeRTOS_Source/tasks.c **** 					Ready list per priority. */
4061:..\..\FreeRTOS_Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 4183              		.loc 1 4061 0
 4184 0060 3B69     		ldr	r3, [r7, #16]
 4185 0062 5969     		ldr	r1, [r3, #20]
 4186 0064 BA68     		ldr	r2, [r7, #8]
 4187 0066 1346     		mov	r3, r2
 4188 0068 9B00     		lsls	r3, r3, #2
 4189 006a 1344     		add	r3, r3, r2
 4190 006c 9B00     		lsls	r3, r3, #2
 4191 006e 1F4A     		ldr	r2, .L275
 4192 0070 1344     		add	r3, r3, r2
 4193 0072 9942     		cmp	r1, r3
 4194 0074 36D1     		bne	.L268
4062:..\..\FreeRTOS_Source/tasks.c **** 					{
4063:..\..\FreeRTOS_Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4195              		.loc 1 4063 0
 4196 0076 3B69     		ldr	r3, [r7, #16]
 4197 0078 0433     		adds	r3, r3, #4
 4198 007a 1846     		mov	r0, r3
 4199 007c FFF7FEFF 		bl	uxListRemove
 4200 0080 0346     		mov	r3, r0
 4201 0082 002B     		cmp	r3, #0
 4202 0084 15D1     		bne	.L273
4064:..\..\FreeRTOS_Source/tasks.c **** 						{
4065:..\..\FreeRTOS_Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4203              		.loc 1 4065 0
 4204 0086 3B69     		ldr	r3, [r7, #16]
 4205 0088 DA6A     		ldr	r2, [r3, #44]
 4206 008a 1849     		ldr	r1, .L275
 4207 008c 1346     		mov	r3, r2
 4208 008e 9B00     		lsls	r3, r3, #2
 4209 0090 1344     		add	r3, r3, r2
 4210 0092 9B00     		lsls	r3, r3, #2
 4211 0094 0B44     		add	r3, r3, r1
 4212 0096 1B68     		ldr	r3, [r3]
 4213 0098 002B     		cmp	r3, #0
 4214 009a 0AD1     		bne	.L273
 4215              		.loc 1 4065 0 is_stmt 0 discriminator 1
 4216 009c 3B69     		ldr	r3, [r7, #16]
 4217 009e DB6A     		ldr	r3, [r3, #44]
 4218 00a0 1A46     		mov	r2, r3
 4219 00a2 0123     		movs	r3, #1
 4220 00a4 9340     		lsls	r3, r3, r2
 4221 00a6 DA43     		mvns	r2, r3
 4222 00a8 114B     		ldr	r3, .L275+4
 4223 00aa 1B68     		ldr	r3, [r3]
 4224 00ac 1340     		ands	r3, r3, r2
 4225 00ae 104A     		ldr	r2, .L275+4
 4226 00b0 1360     		str	r3, [r2]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 151


 4227              	.L273:
4066:..\..\FreeRTOS_Source/tasks.c **** 						}
4067:..\..\FreeRTOS_Source/tasks.c **** 						else
4068:..\..\FreeRTOS_Source/tasks.c **** 						{
4069:..\..\FreeRTOS_Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4070:..\..\FreeRTOS_Source/tasks.c **** 						}
4071:..\..\FreeRTOS_Source/tasks.c **** 
4072:..\..\FreeRTOS_Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 4228              		.loc 1 4072 0 is_stmt 1
 4229 00b2 3B69     		ldr	r3, [r7, #16]
 4230 00b4 DB6A     		ldr	r3, [r3, #44]
 4231 00b6 1A46     		mov	r2, r3
 4232 00b8 0123     		movs	r3, #1
 4233 00ba 03FA02F2 		lsl	r2, r3, r2
 4234 00be 0C4B     		ldr	r3, .L275+4
 4235 00c0 1B68     		ldr	r3, [r3]
 4236 00c2 1343     		orrs	r3, r3, r2
 4237 00c4 0A4A     		ldr	r2, .L275+4
 4238 00c6 1360     		str	r3, [r2]
 4239 00c8 3B69     		ldr	r3, [r7, #16]
 4240 00ca DA6A     		ldr	r2, [r3, #44]
 4241 00cc 1346     		mov	r3, r2
 4242 00ce 9B00     		lsls	r3, r3, #2
 4243 00d0 1344     		add	r3, r3, r2
 4244 00d2 9B00     		lsls	r3, r3, #2
 4245 00d4 054A     		ldr	r2, .L275
 4246 00d6 1A44     		add	r2, r2, r3
 4247 00d8 3B69     		ldr	r3, [r7, #16]
 4248 00da 0433     		adds	r3, r3, #4
 4249 00dc 1046     		mov	r0, r2
 4250 00de 1946     		mov	r1, r3
 4251 00e0 FFF7FEFF 		bl	vListInsertEnd
 4252              	.L268:
4073:..\..\FreeRTOS_Source/tasks.c **** 					}
4074:..\..\FreeRTOS_Source/tasks.c **** 					else
4075:..\..\FreeRTOS_Source/tasks.c **** 					{
4076:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4077:..\..\FreeRTOS_Source/tasks.c **** 					}
4078:..\..\FreeRTOS_Source/tasks.c **** 				}
4079:..\..\FreeRTOS_Source/tasks.c **** 				else
4080:..\..\FreeRTOS_Source/tasks.c **** 				{
4081:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4082:..\..\FreeRTOS_Source/tasks.c **** 				}
4083:..\..\FreeRTOS_Source/tasks.c **** 			}
4084:..\..\FreeRTOS_Source/tasks.c **** 			else
4085:..\..\FreeRTOS_Source/tasks.c **** 			{
4086:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4087:..\..\FreeRTOS_Source/tasks.c **** 			}
4088:..\..\FreeRTOS_Source/tasks.c **** 		}
4089:..\..\FreeRTOS_Source/tasks.c **** 		else
4090:..\..\FreeRTOS_Source/tasks.c **** 		{
4091:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:..\..\FreeRTOS_Source/tasks.c **** 		}
4093:..\..\FreeRTOS_Source/tasks.c **** 	}
 4253              		.loc 1 4093 0
 4254 00e4 1837     		adds	r7, r7, #24
 4255              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 152


 4256 00e6 BD46     		mov	sp, r7
 4257              		.cfi_def_cfa_register 13
 4258              		@ sp needed
 4259 00e8 80BD     		pop	{r7, pc}
 4260              	.L276:
 4261 00ea 00BF     		.align	2
 4262              	.L275:
 4263 00ec 04000000 		.word	pxReadyTasksLists
 4264 00f0 B8000000 		.word	uxTopReadyPriority
 4265              		.cfi_endproc
 4266              	.LFE110:
 4267              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 4268              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4269              		.align	2
 4270              		.global	uxTaskResetEventItemValue
 4271              		.thumb
 4272              		.thumb_func
 4273              		.type	uxTaskResetEventItemValue, %function
 4274              	uxTaskResetEventItemValue:
 4275              	.LFB111:
4094:..\..\FreeRTOS_Source/tasks.c **** 
4095:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
4096:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4097:..\..\FreeRTOS_Source/tasks.c **** 
4098:..\..\FreeRTOS_Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:..\..\FreeRTOS_Source/tasks.c **** 
4100:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskEnterCritical( void )
4101:..\..\FreeRTOS_Source/tasks.c **** 	{
4102:..\..\FreeRTOS_Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4103:..\..\FreeRTOS_Source/tasks.c **** 
4104:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4105:..\..\FreeRTOS_Source/tasks.c **** 		{
4106:..\..\FreeRTOS_Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4107:..\..\FreeRTOS_Source/tasks.c **** 
4108:..\..\FreeRTOS_Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4109:..\..\FreeRTOS_Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4110:..\..\FreeRTOS_Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4111:..\..\FreeRTOS_Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4112:..\..\FreeRTOS_Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4113:..\..\FreeRTOS_Source/tasks.c **** 			critical section. */
4114:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4115:..\..\FreeRTOS_Source/tasks.c **** 			{
4116:..\..\FreeRTOS_Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4117:..\..\FreeRTOS_Source/tasks.c **** 			}
4118:..\..\FreeRTOS_Source/tasks.c **** 		}
4119:..\..\FreeRTOS_Source/tasks.c **** 		else
4120:..\..\FreeRTOS_Source/tasks.c **** 		{
4121:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4122:..\..\FreeRTOS_Source/tasks.c **** 		}
4123:..\..\FreeRTOS_Source/tasks.c **** 	}
4124:..\..\FreeRTOS_Source/tasks.c **** 
4125:..\..\FreeRTOS_Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4126:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4127:..\..\FreeRTOS_Source/tasks.c **** 
4128:..\..\FreeRTOS_Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4129:..\..\FreeRTOS_Source/tasks.c **** 
4130:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskExitCritical( void )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 153


4131:..\..\FreeRTOS_Source/tasks.c **** 	{
4132:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4133:..\..\FreeRTOS_Source/tasks.c **** 		{
4134:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4135:..\..\FreeRTOS_Source/tasks.c **** 			{
4136:..\..\FreeRTOS_Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4137:..\..\FreeRTOS_Source/tasks.c **** 
4138:..\..\FreeRTOS_Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4139:..\..\FreeRTOS_Source/tasks.c **** 				{
4140:..\..\FreeRTOS_Source/tasks.c **** 					portENABLE_INTERRUPTS();
4141:..\..\FreeRTOS_Source/tasks.c **** 				}
4142:..\..\FreeRTOS_Source/tasks.c **** 				else
4143:..\..\FreeRTOS_Source/tasks.c **** 				{
4144:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4145:..\..\FreeRTOS_Source/tasks.c **** 				}
4146:..\..\FreeRTOS_Source/tasks.c **** 			}
4147:..\..\FreeRTOS_Source/tasks.c **** 			else
4148:..\..\FreeRTOS_Source/tasks.c **** 			{
4149:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4150:..\..\FreeRTOS_Source/tasks.c **** 			}
4151:..\..\FreeRTOS_Source/tasks.c **** 		}
4152:..\..\FreeRTOS_Source/tasks.c **** 		else
4153:..\..\FreeRTOS_Source/tasks.c **** 		{
4154:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4155:..\..\FreeRTOS_Source/tasks.c **** 		}
4156:..\..\FreeRTOS_Source/tasks.c **** 	}
4157:..\..\FreeRTOS_Source/tasks.c **** 
4158:..\..\FreeRTOS_Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4159:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4160:..\..\FreeRTOS_Source/tasks.c **** 
4161:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4162:..\..\FreeRTOS_Source/tasks.c **** 
4163:..\..\FreeRTOS_Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4164:..\..\FreeRTOS_Source/tasks.c **** 	{
4165:..\..\FreeRTOS_Source/tasks.c **** 	size_t x;
4166:..\..\FreeRTOS_Source/tasks.c **** 
4167:..\..\FreeRTOS_Source/tasks.c **** 		/* Start by copying the entire string. */
4168:..\..\FreeRTOS_Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4169:..\..\FreeRTOS_Source/tasks.c **** 
4170:..\..\FreeRTOS_Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4171:..\..\FreeRTOS_Source/tasks.c **** 		printed out. */
4172:..\..\FreeRTOS_Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4173:..\..\FreeRTOS_Source/tasks.c **** 		{
4174:..\..\FreeRTOS_Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4175:..\..\FreeRTOS_Source/tasks.c **** 		}
4176:..\..\FreeRTOS_Source/tasks.c **** 
4177:..\..\FreeRTOS_Source/tasks.c **** 		/* Terminate. */
4178:..\..\FreeRTOS_Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4179:..\..\FreeRTOS_Source/tasks.c **** 
4180:..\..\FreeRTOS_Source/tasks.c **** 		/* Return the new end of string. */
4181:..\..\FreeRTOS_Source/tasks.c **** 		return &( pcBuffer[ x ] );
4182:..\..\FreeRTOS_Source/tasks.c **** 	}
4183:..\..\FreeRTOS_Source/tasks.c **** 
4184:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4185:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4186:..\..\FreeRTOS_Source/tasks.c **** 
4187:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 154


4188:..\..\FreeRTOS_Source/tasks.c **** 
4189:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4190:..\..\FreeRTOS_Source/tasks.c **** 	{
4191:..\..\FreeRTOS_Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4192:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4193:..\..\FreeRTOS_Source/tasks.c **** 	char cStatus;
4194:..\..\FreeRTOS_Source/tasks.c **** 
4195:..\..\FreeRTOS_Source/tasks.c **** 		/*
4196:..\..\FreeRTOS_Source/tasks.c **** 		 * PLEASE NOTE:
4197:..\..\FreeRTOS_Source/tasks.c **** 		 *
4198:..\..\FreeRTOS_Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4199:..\..\FreeRTOS_Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4200:..\..\FreeRTOS_Source/tasks.c **** 		 * scheduler.
4201:..\..\FreeRTOS_Source/tasks.c **** 		 *
4202:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4203:..\..\FreeRTOS_Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4204:..\..\FreeRTOS_Source/tasks.c **** 		 * displays task names, states and stack usage.
4205:..\..\FreeRTOS_Source/tasks.c **** 		 *
4206:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4207:..\..\FreeRTOS_Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4208:..\..\FreeRTOS_Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4209:..\..\FreeRTOS_Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4210:..\..\FreeRTOS_Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4211:..\..\FreeRTOS_Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4212:..\..\FreeRTOS_Source/tasks.c **** 		 * snprintf() implementation!).
4213:..\..\FreeRTOS_Source/tasks.c **** 		 *
4214:..\..\FreeRTOS_Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4215:..\..\FreeRTOS_Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4216:..\..\FreeRTOS_Source/tasks.c **** 		 * through a call to vTaskList().
4217:..\..\FreeRTOS_Source/tasks.c **** 		 */
4218:..\..\FreeRTOS_Source/tasks.c **** 
4219:..\..\FreeRTOS_Source/tasks.c **** 
4220:..\..\FreeRTOS_Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4221:..\..\FreeRTOS_Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4222:..\..\FreeRTOS_Source/tasks.c **** 
4223:..\..\FreeRTOS_Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4224:..\..\FreeRTOS_Source/tasks.c **** 		function is executing. */
4225:..\..\FreeRTOS_Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4226:..\..\FreeRTOS_Source/tasks.c **** 
4227:..\..\FreeRTOS_Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4228:..\..\FreeRTOS_Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4229:..\..\FreeRTOS_Source/tasks.c **** 		equate to NULL. */
4230:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4231:..\..\FreeRTOS_Source/tasks.c **** 
4232:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4233:..\..\FreeRTOS_Source/tasks.c **** 		{
4234:..\..\FreeRTOS_Source/tasks.c **** 			/* Generate the (binary) data. */
4235:..\..\FreeRTOS_Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4236:..\..\FreeRTOS_Source/tasks.c **** 
4237:..\..\FreeRTOS_Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4238:..\..\FreeRTOS_Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4239:..\..\FreeRTOS_Source/tasks.c **** 			{
4240:..\..\FreeRTOS_Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4241:..\..\FreeRTOS_Source/tasks.c **** 				{
4242:..\..\FreeRTOS_Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4243:..\..\FreeRTOS_Source/tasks.c **** 										break;
4244:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 155


4245:..\..\FreeRTOS_Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4246:..\..\FreeRTOS_Source/tasks.c **** 										break;
4247:..\..\FreeRTOS_Source/tasks.c **** 
4248:..\..\FreeRTOS_Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4249:..\..\FreeRTOS_Source/tasks.c **** 										break;
4250:..\..\FreeRTOS_Source/tasks.c **** 
4251:..\..\FreeRTOS_Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4252:..\..\FreeRTOS_Source/tasks.c **** 										break;
4253:..\..\FreeRTOS_Source/tasks.c **** 
4254:..\..\FreeRTOS_Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4255:..\..\FreeRTOS_Source/tasks.c **** 										break;
4256:..\..\FreeRTOS_Source/tasks.c **** 
4257:..\..\FreeRTOS_Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4258:..\..\FreeRTOS_Source/tasks.c **** 					default:			/* Should not get here, but it is included
4259:..\..\FreeRTOS_Source/tasks.c **** 										to prevent static checking errors. */
4260:..\..\FreeRTOS_Source/tasks.c **** 										cStatus = ( char ) 0x00;
4261:..\..\FreeRTOS_Source/tasks.c **** 										break;
4262:..\..\FreeRTOS_Source/tasks.c **** 				}
4263:..\..\FreeRTOS_Source/tasks.c **** 
4264:..\..\FreeRTOS_Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4265:..\..\FreeRTOS_Source/tasks.c **** 				can be printed in tabular form more easily. */
4266:..\..\FreeRTOS_Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4267:..\..\FreeRTOS_Source/tasks.c **** 
4268:..\..\FreeRTOS_Source/tasks.c **** 				/* Write the rest of the string. */
4269:..\..\FreeRTOS_Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4270:..\..\FreeRTOS_Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers.
4271:..\..\FreeRTOS_Source/tasks.c **** 			}
4272:..\..\FreeRTOS_Source/tasks.c **** 
4273:..\..\FreeRTOS_Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4274:..\..\FreeRTOS_Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4275:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4276:..\..\FreeRTOS_Source/tasks.c **** 		}
4277:..\..\FreeRTOS_Source/tasks.c **** 		else
4278:..\..\FreeRTOS_Source/tasks.c **** 		{
4279:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4280:..\..\FreeRTOS_Source/tasks.c **** 		}
4281:..\..\FreeRTOS_Source/tasks.c **** 	}
4282:..\..\FreeRTOS_Source/tasks.c **** 
4283:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4284:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
4285:..\..\FreeRTOS_Source/tasks.c **** 
4286:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4287:..\..\FreeRTOS_Source/tasks.c **** 
4288:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4289:..\..\FreeRTOS_Source/tasks.c **** 	{
4290:..\..\FreeRTOS_Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4291:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4292:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4293:..\..\FreeRTOS_Source/tasks.c **** 
4294:..\..\FreeRTOS_Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4295:..\..\FreeRTOS_Source/tasks.c **** 		{
4296:..\..\FreeRTOS_Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4297:..\..\FreeRTOS_Source/tasks.c **** 		}
4298:..\..\FreeRTOS_Source/tasks.c **** 		#endif
4299:..\..\FreeRTOS_Source/tasks.c **** 
4300:..\..\FreeRTOS_Source/tasks.c **** 		/*
4301:..\..\FreeRTOS_Source/tasks.c **** 		 * PLEASE NOTE:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 156


4302:..\..\FreeRTOS_Source/tasks.c **** 		 *
4303:..\..\FreeRTOS_Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4304:..\..\FreeRTOS_Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4305:..\..\FreeRTOS_Source/tasks.c **** 		 * scheduler.
4306:..\..\FreeRTOS_Source/tasks.c **** 		 *
4307:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4308:..\..\FreeRTOS_Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4309:..\..\FreeRTOS_Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4310:..\..\FreeRTOS_Source/tasks.c **** 		 * in both absolute and percentage terms.
4311:..\..\FreeRTOS_Source/tasks.c **** 		 *
4312:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4313:..\..\FreeRTOS_Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4314:..\..\FreeRTOS_Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4315:..\..\FreeRTOS_Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4316:..\..\FreeRTOS_Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4317:..\..\FreeRTOS_Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4318:..\..\FreeRTOS_Source/tasks.c **** 		 * a full snprintf() implementation!).
4319:..\..\FreeRTOS_Source/tasks.c **** 		 *
4320:..\..\FreeRTOS_Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4321:..\..\FreeRTOS_Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4322:..\..\FreeRTOS_Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4323:..\..\FreeRTOS_Source/tasks.c **** 		 */
4324:..\..\FreeRTOS_Source/tasks.c **** 
4325:..\..\FreeRTOS_Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4326:..\..\FreeRTOS_Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4327:..\..\FreeRTOS_Source/tasks.c **** 
4328:..\..\FreeRTOS_Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4329:..\..\FreeRTOS_Source/tasks.c **** 		function is executing. */
4330:..\..\FreeRTOS_Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4331:..\..\FreeRTOS_Source/tasks.c **** 
4332:..\..\FreeRTOS_Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4333:..\..\FreeRTOS_Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4334:..\..\FreeRTOS_Source/tasks.c **** 		equate to NULL. */
4335:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4336:..\..\FreeRTOS_Source/tasks.c **** 
4337:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4338:..\..\FreeRTOS_Source/tasks.c **** 		{
4339:..\..\FreeRTOS_Source/tasks.c **** 			/* Generate the (binary) data. */
4340:..\..\FreeRTOS_Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4341:..\..\FreeRTOS_Source/tasks.c **** 
4342:..\..\FreeRTOS_Source/tasks.c **** 			/* For percentage calculations. */
4343:..\..\FreeRTOS_Source/tasks.c **** 			ulTotalTime /= 100UL;
4344:..\..\FreeRTOS_Source/tasks.c **** 
4345:..\..\FreeRTOS_Source/tasks.c **** 			/* Avoid divide by zero errors. */
4346:..\..\FreeRTOS_Source/tasks.c **** 			if( ulTotalTime > 0UL )
4347:..\..\FreeRTOS_Source/tasks.c **** 			{
4348:..\..\FreeRTOS_Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4349:..\..\FreeRTOS_Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4350:..\..\FreeRTOS_Source/tasks.c **** 				{
4351:..\..\FreeRTOS_Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4352:..\..\FreeRTOS_Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4353:..\..\FreeRTOS_Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4354:..\..\FreeRTOS_Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4355:..\..\FreeRTOS_Source/tasks.c **** 
4356:..\..\FreeRTOS_Source/tasks.c **** 					/* Write the task name to the string, padding with
4357:..\..\FreeRTOS_Source/tasks.c **** 					spaces so it can be printed in tabular form more
4358:..\..\FreeRTOS_Source/tasks.c **** 					easily. */
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 157


4359:..\..\FreeRTOS_Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4360:..\..\FreeRTOS_Source/tasks.c **** 
4361:..\..\FreeRTOS_Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4362:..\..\FreeRTOS_Source/tasks.c **** 					{
4363:..\..\FreeRTOS_Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4364:..\..\FreeRTOS_Source/tasks.c **** 						{
4365:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4366:..\..\FreeRTOS_Source/tasks.c **** 						}
4367:..\..\FreeRTOS_Source/tasks.c **** 						#else
4368:..\..\FreeRTOS_Source/tasks.c **** 						{
4369:..\..\FreeRTOS_Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4370:..\..\FreeRTOS_Source/tasks.c **** 							printf() library can be used. */
4371:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4372:..\..\FreeRTOS_Source/tasks.c **** 						}
4373:..\..\FreeRTOS_Source/tasks.c **** 						#endif
4374:..\..\FreeRTOS_Source/tasks.c **** 					}
4375:..\..\FreeRTOS_Source/tasks.c **** 					else
4376:..\..\FreeRTOS_Source/tasks.c **** 					{
4377:..\..\FreeRTOS_Source/tasks.c **** 						/* If the percentage is zero here then the task has
4378:..\..\FreeRTOS_Source/tasks.c **** 						consumed less than 1% of the total run time. */
4379:..\..\FreeRTOS_Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4380:..\..\FreeRTOS_Source/tasks.c **** 						{
4381:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4382:..\..\FreeRTOS_Source/tasks.c **** 						}
4383:..\..\FreeRTOS_Source/tasks.c **** 						#else
4384:..\..\FreeRTOS_Source/tasks.c **** 						{
4385:..\..\FreeRTOS_Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4386:..\..\FreeRTOS_Source/tasks.c **** 							printf() library can be used. */
4387:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4388:..\..\FreeRTOS_Source/tasks.c **** 						}
4389:..\..\FreeRTOS_Source/tasks.c **** 						#endif
4390:..\..\FreeRTOS_Source/tasks.c **** 					}
4391:..\..\FreeRTOS_Source/tasks.c **** 
4392:..\..\FreeRTOS_Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4393:..\..\FreeRTOS_Source/tasks.c **** 				}
4394:..\..\FreeRTOS_Source/tasks.c **** 			}
4395:..\..\FreeRTOS_Source/tasks.c **** 			else
4396:..\..\FreeRTOS_Source/tasks.c **** 			{
4397:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4398:..\..\FreeRTOS_Source/tasks.c **** 			}
4399:..\..\FreeRTOS_Source/tasks.c **** 
4400:..\..\FreeRTOS_Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4401:..\..\FreeRTOS_Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4402:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4403:..\..\FreeRTOS_Source/tasks.c **** 		}
4404:..\..\FreeRTOS_Source/tasks.c **** 		else
4405:..\..\FreeRTOS_Source/tasks.c **** 		{
4406:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4407:..\..\FreeRTOS_Source/tasks.c **** 		}
4408:..\..\FreeRTOS_Source/tasks.c **** 	}
4409:..\..\FreeRTOS_Source/tasks.c **** 
4410:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4411:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4412:..\..\FreeRTOS_Source/tasks.c **** 
4413:..\..\FreeRTOS_Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4414:..\..\FreeRTOS_Source/tasks.c **** {
 4276              		.loc 1 4414 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 158


 4277              		.cfi_startproc
 4278              		@ args = 0, pretend = 0, frame = 8
 4279              		@ frame_needed = 1, uses_anonymous_args = 0
 4280              		@ link register save eliminated.
 4281 0000 80B4     		push	{r7}
 4282              		.cfi_def_cfa_offset 4
 4283              		.cfi_offset 7, -4
 4284 0002 83B0     		sub	sp, sp, #12
 4285              		.cfi_def_cfa_offset 16
 4286 0004 00AF     		add	r7, sp, #0
 4287              		.cfi_def_cfa_register 7
4415:..\..\FreeRTOS_Source/tasks.c **** TickType_t uxReturn;
4416:..\..\FreeRTOS_Source/tasks.c **** 
4417:..\..\FreeRTOS_Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4288              		.loc 1 4417 0
 4289 0006 094B     		ldr	r3, .L279
 4290 0008 1B68     		ldr	r3, [r3]
 4291 000a 9B69     		ldr	r3, [r3, #24]
 4292 000c 7B60     		str	r3, [r7, #4]
4418:..\..\FreeRTOS_Source/tasks.c **** 
4419:..\..\FreeRTOS_Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4420:..\..\FreeRTOS_Source/tasks.c **** 	queues and semaphores. */
4421:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4293              		.loc 1 4421 0
 4294 000e 074B     		ldr	r3, .L279
 4295 0010 1B68     		ldr	r3, [r3]
 4296 0012 064A     		ldr	r2, .L279
 4297 0014 1268     		ldr	r2, [r2]
 4298 0016 D26A     		ldr	r2, [r2, #44]
 4299 0018 C2F10502 		rsb	r2, r2, #5
 4300 001c 9A61     		str	r2, [r3, #24]
4422:..\..\FreeRTOS_Source/tasks.c **** 
4423:..\..\FreeRTOS_Source/tasks.c **** 	return uxReturn;
 4301              		.loc 1 4423 0
 4302 001e 7B68     		ldr	r3, [r7, #4]
4424:..\..\FreeRTOS_Source/tasks.c **** }
 4303              		.loc 1 4424 0
 4304 0020 1846     		mov	r0, r3
 4305 0022 0C37     		adds	r7, r7, #12
 4306              		.cfi_def_cfa_offset 4
 4307 0024 BD46     		mov	sp, r7
 4308              		.cfi_def_cfa_register 13
 4309              		@ sp needed
 4310 0026 5DF8047B 		ldr	r7, [sp], #4
 4311              		.cfi_restore 7
 4312              		.cfi_def_cfa_offset 0
 4313 002a 7047     		bx	lr
 4314              	.L280:
 4315              		.align	2
 4316              	.L279:
 4317 002c 00000000 		.word	pxCurrentTCB
 4318              		.cfi_endproc
 4319              	.LFE111:
 4320              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4321              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4322              		.align	2
 4323              		.global	pvTaskIncrementMutexHeldCount
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 159


 4324              		.thumb
 4325              		.thumb_func
 4326              		.type	pvTaskIncrementMutexHeldCount, %function
 4327              	pvTaskIncrementMutexHeldCount:
 4328              	.LFB112:
4425:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4426:..\..\FreeRTOS_Source/tasks.c **** 
4427:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4428:..\..\FreeRTOS_Source/tasks.c **** 
4429:..\..\FreeRTOS_Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4430:..\..\FreeRTOS_Source/tasks.c **** 	{
 4329              		.loc 1 4430 0
 4330              		.cfi_startproc
 4331              		@ args = 0, pretend = 0, frame = 0
 4332              		@ frame_needed = 1, uses_anonymous_args = 0
 4333              		@ link register save eliminated.
 4334 0000 80B4     		push	{r7}
 4335              		.cfi_def_cfa_offset 4
 4336              		.cfi_offset 7, -4
 4337 0002 00AF     		add	r7, sp, #0
 4338              		.cfi_def_cfa_register 7
4431:..\..\FreeRTOS_Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4432:..\..\FreeRTOS_Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4433:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 4339              		.loc 1 4433 0
 4340 0004 074B     		ldr	r3, .L284
 4341 0006 1B68     		ldr	r3, [r3]
 4342 0008 002B     		cmp	r3, #0
 4343 000a 04D0     		beq	.L282
4434:..\..\FreeRTOS_Source/tasks.c **** 		{
4435:..\..\FreeRTOS_Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4344              		.loc 1 4435 0
 4345 000c 054B     		ldr	r3, .L284
 4346 000e 1B68     		ldr	r3, [r3]
 4347 0010 5A6C     		ldr	r2, [r3, #68]
 4348 0012 0132     		adds	r2, r2, #1
 4349 0014 5A64     		str	r2, [r3, #68]
 4350              	.L282:
4436:..\..\FreeRTOS_Source/tasks.c **** 		}
4437:..\..\FreeRTOS_Source/tasks.c **** 
4438:..\..\FreeRTOS_Source/tasks.c **** 		return pxCurrentTCB;
 4351              		.loc 1 4438 0
 4352 0016 034B     		ldr	r3, .L284
 4353 0018 1B68     		ldr	r3, [r3]
4439:..\..\FreeRTOS_Source/tasks.c **** 	}
 4354              		.loc 1 4439 0
 4355 001a 1846     		mov	r0, r3
 4356 001c BD46     		mov	sp, r7
 4357              		.cfi_def_cfa_register 13
 4358              		@ sp needed
 4359 001e 5DF8047B 		ldr	r7, [sp], #4
 4360              		.cfi_restore 7
 4361              		.cfi_def_cfa_offset 0
 4362 0022 7047     		bx	lr
 4363              	.L285:
 4364              		.align	2
 4365              	.L284:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 160


 4366 0024 00000000 		.word	pxCurrentTCB
 4367              		.cfi_endproc
 4368              	.LFE112:
 4369              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4370              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4371              		.align	2
 4372              		.global	ulTaskNotifyTake
 4373              		.thumb
 4374              		.thumb_func
 4375              		.type	ulTaskNotifyTake, %function
 4376              	ulTaskNotifyTake:
 4377              	.LFB113:
4440:..\..\FreeRTOS_Source/tasks.c **** 
4441:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
4442:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4443:..\..\FreeRTOS_Source/tasks.c **** 
4444:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4445:..\..\FreeRTOS_Source/tasks.c **** 
4446:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4447:..\..\FreeRTOS_Source/tasks.c **** 	{
 4378              		.loc 1 4447 0
 4379              		.cfi_startproc
 4380              		@ args = 0, pretend = 0, frame = 16
 4381              		@ frame_needed = 1, uses_anonymous_args = 0
 4382 0000 80B5     		push	{r7, lr}
 4383              		.cfi_def_cfa_offset 8
 4384              		.cfi_offset 7, -8
 4385              		.cfi_offset 14, -4
 4386 0002 84B0     		sub	sp, sp, #16
 4387              		.cfi_def_cfa_offset 24
 4388 0004 00AF     		add	r7, sp, #0
 4389              		.cfi_def_cfa_register 7
 4390 0006 7860     		str	r0, [r7, #4]
 4391 0008 3960     		str	r1, [r7]
4448:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulReturn;
4449:..\..\FreeRTOS_Source/tasks.c **** 
4450:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4392              		.loc 1 4450 0
 4393 000a FFF7FEFF 		bl	vPortEnterCritical
4451:..\..\FreeRTOS_Source/tasks.c **** 		{
4452:..\..\FreeRTOS_Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4453:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4394              		.loc 1 4453 0
 4395 000e 1E4B     		ldr	r3, .L292
 4396 0010 1B68     		ldr	r3, [r3]
 4397 0012 9B6C     		ldr	r3, [r3, #72]
 4398 0014 002B     		cmp	r3, #0
 4399 0016 13D1     		bne	.L287
4454:..\..\FreeRTOS_Source/tasks.c **** 			{
4455:..\..\FreeRTOS_Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4456:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4400              		.loc 1 4456 0
 4401 0018 1B4B     		ldr	r3, .L292
 4402 001a 1B68     		ldr	r3, [r3]
 4403 001c 0122     		movs	r2, #1
 4404 001e 83F84C20 		strb	r2, [r3, #76]
4457:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 161


4458:..\..\FreeRTOS_Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4405              		.loc 1 4458 0
 4406 0022 3B68     		ldr	r3, [r7]
 4407 0024 002B     		cmp	r3, #0
 4408 0026 0BD0     		beq	.L287
4459:..\..\FreeRTOS_Source/tasks.c **** 				{
4460:..\..\FreeRTOS_Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4409              		.loc 1 4460 0
 4410 0028 3868     		ldr	r0, [r7]
 4411 002a 0121     		movs	r1, #1
 4412 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4461:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4462:..\..\FreeRTOS_Source/tasks.c **** 
4463:..\..\FreeRTOS_Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4464:..\..\FreeRTOS_Source/tasks.c **** 					section (some will yield immediately, others wait until the
4465:..\..\FreeRTOS_Source/tasks.c **** 					critical section exits) - but it is not something that
4466:..\..\FreeRTOS_Source/tasks.c **** 					application code should ever do. */
4467:..\..\FreeRTOS_Source/tasks.c **** 					portYIELD_WITHIN_API();
 4413              		.loc 1 4467 0
 4414 0030 164B     		ldr	r3, .L292+4
 4415 0032 4FF08052 		mov	r2, #268435456
 4416 0036 1A60     		str	r2, [r3]
 4417              	@ 4467 "..\..\FreeRTOS_Source\tasks.c" 1
 4418 0038 BFF34F8F 		dsb
 4419              	@ 0 "" 2
 4420              	@ 4467 "..\..\FreeRTOS_Source\tasks.c" 1
 4421 003c BFF36F8F 		isb
 4422              	@ 0 "" 2
 4423              		.thumb
 4424              	.L287:
4468:..\..\FreeRTOS_Source/tasks.c **** 				}
4469:..\..\FreeRTOS_Source/tasks.c **** 				else
4470:..\..\FreeRTOS_Source/tasks.c **** 				{
4471:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4472:..\..\FreeRTOS_Source/tasks.c **** 				}
4473:..\..\FreeRTOS_Source/tasks.c **** 			}
4474:..\..\FreeRTOS_Source/tasks.c **** 			else
4475:..\..\FreeRTOS_Source/tasks.c **** 			{
4476:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4477:..\..\FreeRTOS_Source/tasks.c **** 			}
4478:..\..\FreeRTOS_Source/tasks.c **** 		}
4479:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4425              		.loc 1 4479 0
 4426 0040 FFF7FEFF 		bl	vPortExitCritical
4480:..\..\FreeRTOS_Source/tasks.c **** 
4481:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4427              		.loc 1 4481 0
 4428 0044 FFF7FEFF 		bl	vPortEnterCritical
4482:..\..\FreeRTOS_Source/tasks.c **** 		{
4483:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4484:..\..\FreeRTOS_Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4429              		.loc 1 4484 0
 4430 0048 0F4B     		ldr	r3, .L292
 4431 004a 1B68     		ldr	r3, [r3]
 4432 004c 9B6C     		ldr	r3, [r3, #72]
 4433 004e FB60     		str	r3, [r7, #12]
4485:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 162


4486:..\..\FreeRTOS_Source/tasks.c **** 			if( ulReturn != 0UL )
 4434              		.loc 1 4486 0
 4435 0050 FB68     		ldr	r3, [r7, #12]
 4436 0052 002B     		cmp	r3, #0
 4437 0054 0CD0     		beq	.L288
4487:..\..\FreeRTOS_Source/tasks.c **** 			{
4488:..\..\FreeRTOS_Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4438              		.loc 1 4488 0
 4439 0056 7B68     		ldr	r3, [r7, #4]
 4440 0058 002B     		cmp	r3, #0
 4441 005a 04D0     		beq	.L289
4489:..\..\FreeRTOS_Source/tasks.c **** 				{
4490:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4442              		.loc 1 4490 0
 4443 005c 0A4B     		ldr	r3, .L292
 4444 005e 1B68     		ldr	r3, [r3]
 4445 0060 0022     		movs	r2, #0
 4446 0062 9A64     		str	r2, [r3, #72]
 4447 0064 04E0     		b	.L288
 4448              	.L289:
4491:..\..\FreeRTOS_Source/tasks.c **** 				}
4492:..\..\FreeRTOS_Source/tasks.c **** 				else
4493:..\..\FreeRTOS_Source/tasks.c **** 				{
4494:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 4449              		.loc 1 4494 0
 4450 0066 084B     		ldr	r3, .L292
 4451 0068 1B68     		ldr	r3, [r3]
 4452 006a FA68     		ldr	r2, [r7, #12]
 4453 006c 013A     		subs	r2, r2, #1
 4454 006e 9A64     		str	r2, [r3, #72]
 4455              	.L288:
4495:..\..\FreeRTOS_Source/tasks.c **** 				}
4496:..\..\FreeRTOS_Source/tasks.c **** 			}
4497:..\..\FreeRTOS_Source/tasks.c **** 			else
4498:..\..\FreeRTOS_Source/tasks.c **** 			{
4499:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4500:..\..\FreeRTOS_Source/tasks.c **** 			}
4501:..\..\FreeRTOS_Source/tasks.c **** 
4502:..\..\FreeRTOS_Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4456              		.loc 1 4502 0
 4457 0070 054B     		ldr	r3, .L292
 4458 0072 1B68     		ldr	r3, [r3]
 4459 0074 0022     		movs	r2, #0
 4460 0076 83F84C20 		strb	r2, [r3, #76]
4503:..\..\FreeRTOS_Source/tasks.c **** 		}
4504:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4461              		.loc 1 4504 0
 4462 007a FFF7FEFF 		bl	vPortExitCritical
4505:..\..\FreeRTOS_Source/tasks.c **** 
4506:..\..\FreeRTOS_Source/tasks.c **** 		return ulReturn;
 4463              		.loc 1 4506 0
 4464 007e FB68     		ldr	r3, [r7, #12]
4507:..\..\FreeRTOS_Source/tasks.c **** 	}
 4465              		.loc 1 4507 0
 4466 0080 1846     		mov	r0, r3
 4467 0082 1037     		adds	r7, r7, #16
 4468              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 163


 4469 0084 BD46     		mov	sp, r7
 4470              		.cfi_def_cfa_register 13
 4471              		@ sp needed
 4472 0086 80BD     		pop	{r7, pc}
 4473              	.L293:
 4474              		.align	2
 4475              	.L292:
 4476 0088 00000000 		.word	pxCurrentTCB
 4477 008c 04ED00E0 		.word	-536810236
 4478              		.cfi_endproc
 4479              	.LFE113:
 4480              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4481              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4482              		.align	2
 4483              		.global	xTaskNotifyWait
 4484              		.thumb
 4485              		.thumb_func
 4486              		.type	xTaskNotifyWait, %function
 4487              	xTaskNotifyWait:
 4488              	.LFB114:
4508:..\..\FreeRTOS_Source/tasks.c **** 
4509:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4510:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4511:..\..\FreeRTOS_Source/tasks.c **** 
4512:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4513:..\..\FreeRTOS_Source/tasks.c **** 
4514:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4515:..\..\FreeRTOS_Source/tasks.c **** 	{
 4489              		.loc 1 4515 0
 4490              		.cfi_startproc
 4491              		@ args = 0, pretend = 0, frame = 24
 4492              		@ frame_needed = 1, uses_anonymous_args = 0
 4493 0000 80B5     		push	{r7, lr}
 4494              		.cfi_def_cfa_offset 8
 4495              		.cfi_offset 7, -8
 4496              		.cfi_offset 14, -4
 4497 0002 86B0     		sub	sp, sp, #24
 4498              		.cfi_def_cfa_offset 32
 4499 0004 00AF     		add	r7, sp, #0
 4500              		.cfi_def_cfa_register 7
 4501 0006 F860     		str	r0, [r7, #12]
 4502 0008 B960     		str	r1, [r7, #8]
 4503 000a 7A60     		str	r2, [r7, #4]
 4504 000c 3B60     		str	r3, [r7]
4516:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
4517:..\..\FreeRTOS_Source/tasks.c **** 
4518:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4505              		.loc 1 4518 0
 4506 000e FFF7FEFF 		bl	vPortEnterCritical
4519:..\..\FreeRTOS_Source/tasks.c **** 		{
4520:..\..\FreeRTOS_Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4521:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4507              		.loc 1 4521 0
 4508 0012 264B     		ldr	r3, .L300
 4509 0014 1B68     		ldr	r3, [r3]
 4510 0016 93F84C30 		ldrb	r3, [r3, #76]
 4511 001a DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 164


 4512 001c 022B     		cmp	r3, #2
 4513 001e 1AD0     		beq	.L295
4522:..\..\FreeRTOS_Source/tasks.c **** 			{
4523:..\..\FreeRTOS_Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4524:..\..\FreeRTOS_Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4525:..\..\FreeRTOS_Source/tasks.c **** 				clear the value to zero. */
4526:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 4514              		.loc 1 4526 0
 4515 0020 224B     		ldr	r3, .L300
 4516 0022 1B68     		ldr	r3, [r3]
 4517 0024 996C     		ldr	r1, [r3, #72]
 4518 0026 FA68     		ldr	r2, [r7, #12]
 4519 0028 D243     		mvns	r2, r2
 4520 002a 0A40     		ands	r2, r2, r1
 4521 002c 9A64     		str	r2, [r3, #72]
4527:..\..\FreeRTOS_Source/tasks.c **** 
4528:..\..\FreeRTOS_Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4529:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4522              		.loc 1 4529 0
 4523 002e 1F4B     		ldr	r3, .L300
 4524 0030 1B68     		ldr	r3, [r3]
 4525 0032 0122     		movs	r2, #1
 4526 0034 83F84C20 		strb	r2, [r3, #76]
4530:..\..\FreeRTOS_Source/tasks.c **** 
4531:..\..\FreeRTOS_Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4527              		.loc 1 4531 0
 4528 0038 3B68     		ldr	r3, [r7]
 4529 003a 002B     		cmp	r3, #0
 4530 003c 0BD0     		beq	.L295
4532:..\..\FreeRTOS_Source/tasks.c **** 				{
4533:..\..\FreeRTOS_Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4531              		.loc 1 4533 0
 4532 003e 3868     		ldr	r0, [r7]
 4533 0040 0121     		movs	r1, #1
 4534 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4534:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4535:..\..\FreeRTOS_Source/tasks.c **** 
4536:..\..\FreeRTOS_Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4537:..\..\FreeRTOS_Source/tasks.c **** 					section (some will yield immediately, others wait until the
4538:..\..\FreeRTOS_Source/tasks.c **** 					critical section exits) - but it is not something that
4539:..\..\FreeRTOS_Source/tasks.c **** 					application code should ever do. */
4540:..\..\FreeRTOS_Source/tasks.c **** 					portYIELD_WITHIN_API();
 4535              		.loc 1 4540 0
 4536 0046 1A4B     		ldr	r3, .L300+4
 4537 0048 4FF08052 		mov	r2, #268435456
 4538 004c 1A60     		str	r2, [r3]
 4539              	@ 4540 "..\..\FreeRTOS_Source\tasks.c" 1
 4540 004e BFF34F8F 		dsb
 4541              	@ 0 "" 2
 4542              	@ 4540 "..\..\FreeRTOS_Source\tasks.c" 1
 4543 0052 BFF36F8F 		isb
 4544              	@ 0 "" 2
 4545              		.thumb
 4546              	.L295:
4541:..\..\FreeRTOS_Source/tasks.c **** 				}
4542:..\..\FreeRTOS_Source/tasks.c **** 				else
4543:..\..\FreeRTOS_Source/tasks.c **** 				{
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 165


4544:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4545:..\..\FreeRTOS_Source/tasks.c **** 				}
4546:..\..\FreeRTOS_Source/tasks.c **** 			}
4547:..\..\FreeRTOS_Source/tasks.c **** 			else
4548:..\..\FreeRTOS_Source/tasks.c **** 			{
4549:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4550:..\..\FreeRTOS_Source/tasks.c **** 			}
4551:..\..\FreeRTOS_Source/tasks.c **** 		}
4552:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4547              		.loc 1 4552 0
 4548 0056 FFF7FEFF 		bl	vPortExitCritical
4553:..\..\FreeRTOS_Source/tasks.c **** 
4554:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4549              		.loc 1 4554 0
 4550 005a FFF7FEFF 		bl	vPortEnterCritical
4555:..\..\FreeRTOS_Source/tasks.c **** 		{
4556:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4557:..\..\FreeRTOS_Source/tasks.c **** 
4558:..\..\FreeRTOS_Source/tasks.c **** 			if( pulNotificationValue != NULL )
 4551              		.loc 1 4558 0
 4552 005e 7B68     		ldr	r3, [r7, #4]
 4553 0060 002B     		cmp	r3, #0
 4554 0062 04D0     		beq	.L296
4559:..\..\FreeRTOS_Source/tasks.c **** 			{
4560:..\..\FreeRTOS_Source/tasks.c **** 				/* Output the current notification value, which may or may not
4561:..\..\FreeRTOS_Source/tasks.c **** 				have changed. */
4562:..\..\FreeRTOS_Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 4555              		.loc 1 4562 0
 4556 0064 114B     		ldr	r3, .L300
 4557 0066 1B68     		ldr	r3, [r3]
 4558 0068 9A6C     		ldr	r2, [r3, #72]
 4559 006a 7B68     		ldr	r3, [r7, #4]
 4560 006c 1A60     		str	r2, [r3]
 4561              	.L296:
4563:..\..\FreeRTOS_Source/tasks.c **** 			}
4564:..\..\FreeRTOS_Source/tasks.c **** 
4565:..\..\FreeRTOS_Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4566:..\..\FreeRTOS_Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4567:..\..\FreeRTOS_Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4568:..\..\FreeRTOS_Source/tasks.c **** 			unblocked because of a timeout. */
4569:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4562              		.loc 1 4569 0
 4563 006e 0F4B     		ldr	r3, .L300
 4564 0070 1B68     		ldr	r3, [r3]
 4565 0072 93F84C30 		ldrb	r3, [r3, #76]
 4566 0076 DBB2     		uxtb	r3, r3
 4567 0078 022B     		cmp	r3, #2
 4568 007a 02D0     		beq	.L297
4570:..\..\FreeRTOS_Source/tasks.c **** 			{
4571:..\..\FreeRTOS_Source/tasks.c **** 				/* A notification was not received. */
4572:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFALSE;
 4569              		.loc 1 4572 0
 4570 007c 0023     		movs	r3, #0
 4571 007e 7B61     		str	r3, [r7, #20]
 4572 0080 08E0     		b	.L298
 4573              	.L297:
4573:..\..\FreeRTOS_Source/tasks.c **** 			}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 166


4574:..\..\FreeRTOS_Source/tasks.c **** 			else
4575:..\..\FreeRTOS_Source/tasks.c **** 			{
4576:..\..\FreeRTOS_Source/tasks.c **** 				/* A notification was already pending or a notification was
4577:..\..\FreeRTOS_Source/tasks.c **** 				received while the task was waiting. */
4578:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 4574              		.loc 1 4578 0
 4575 0082 0A4B     		ldr	r3, .L300
 4576 0084 1B68     		ldr	r3, [r3]
 4577 0086 996C     		ldr	r1, [r3, #72]
 4578 0088 BA68     		ldr	r2, [r7, #8]
 4579 008a D243     		mvns	r2, r2
 4580 008c 0A40     		ands	r2, r2, r1
 4581 008e 9A64     		str	r2, [r3, #72]
4579:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdTRUE;
 4582              		.loc 1 4579 0
 4583 0090 0123     		movs	r3, #1
 4584 0092 7B61     		str	r3, [r7, #20]
 4585              	.L298:
4580:..\..\FreeRTOS_Source/tasks.c **** 			}
4581:..\..\FreeRTOS_Source/tasks.c **** 
4582:..\..\FreeRTOS_Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4586              		.loc 1 4582 0
 4587 0094 054B     		ldr	r3, .L300
 4588 0096 1B68     		ldr	r3, [r3]
 4589 0098 0022     		movs	r2, #0
 4590 009a 83F84C20 		strb	r2, [r3, #76]
4583:..\..\FreeRTOS_Source/tasks.c **** 		}
4584:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4591              		.loc 1 4584 0
 4592 009e FFF7FEFF 		bl	vPortExitCritical
4585:..\..\FreeRTOS_Source/tasks.c **** 
4586:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 4593              		.loc 1 4586 0
 4594 00a2 7B69     		ldr	r3, [r7, #20]
4587:..\..\FreeRTOS_Source/tasks.c **** 	}
 4595              		.loc 1 4587 0
 4596 00a4 1846     		mov	r0, r3
 4597 00a6 1837     		adds	r7, r7, #24
 4598              		.cfi_def_cfa_offset 8
 4599 00a8 BD46     		mov	sp, r7
 4600              		.cfi_def_cfa_register 13
 4601              		@ sp needed
 4602 00aa 80BD     		pop	{r7, pc}
 4603              	.L301:
 4604              		.align	2
 4605              	.L300:
 4606 00ac 00000000 		.word	pxCurrentTCB
 4607 00b0 04ED00E0 		.word	-536810236
 4608              		.cfi_endproc
 4609              	.LFE114:
 4610              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4611              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4612              		.align	2
 4613              		.global	xTaskGenericNotify
 4614              		.thumb
 4615              		.thumb_func
 4616              		.type	xTaskGenericNotify, %function
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 167


 4617              	xTaskGenericNotify:
 4618              	.LFB115:
4588:..\..\FreeRTOS_Source/tasks.c **** 
4589:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4590:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4591:..\..\FreeRTOS_Source/tasks.c **** 
4592:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4593:..\..\FreeRTOS_Source/tasks.c **** 
4594:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4595:..\..\FreeRTOS_Source/tasks.c **** 	{
 4619              		.loc 1 4595 0
 4620              		.cfi_startproc
 4621              		@ args = 0, pretend = 0, frame = 32
 4622              		@ frame_needed = 1, uses_anonymous_args = 0
 4623 0000 80B5     		push	{r7, lr}
 4624              		.cfi_def_cfa_offset 8
 4625              		.cfi_offset 7, -8
 4626              		.cfi_offset 14, -4
 4627 0002 88B0     		sub	sp, sp, #32
 4628              		.cfi_def_cfa_offset 40
 4629 0004 00AF     		add	r7, sp, #0
 4630              		.cfi_def_cfa_register 7
 4631 0006 F860     		str	r0, [r7, #12]
 4632 0008 B960     		str	r1, [r7, #8]
 4633 000a 3B60     		str	r3, [r7]
 4634 000c 1346     		mov	r3, r2
 4635 000e FB71     		strb	r3, [r7, #7]
4596:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
4597:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4636              		.loc 1 4597 0
 4637 0010 0123     		movs	r3, #1
 4638 0012 FB61     		str	r3, [r7, #28]
4598:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4599:..\..\FreeRTOS_Source/tasks.c **** 
4600:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToNotify );
4601:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4639              		.loc 1 4601 0
 4640 0014 FB68     		ldr	r3, [r7, #12]
 4641 0016 BB61     		str	r3, [r7, #24]
4602:..\..\FreeRTOS_Source/tasks.c **** 
4603:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4642              		.loc 1 4603 0
 4643 0018 FFF7FEFF 		bl	vPortEnterCritical
4604:..\..\FreeRTOS_Source/tasks.c **** 		{
4605:..\..\FreeRTOS_Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4644              		.loc 1 4605 0
 4645 001c 3B68     		ldr	r3, [r7]
 4646 001e 002B     		cmp	r3, #0
 4647 0020 03D0     		beq	.L303
4606:..\..\FreeRTOS_Source/tasks.c **** 			{
4607:..\..\FreeRTOS_Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4648              		.loc 1 4607 0
 4649 0022 BB69     		ldr	r3, [r7, #24]
 4650 0024 9A6C     		ldr	r2, [r3, #72]
 4651 0026 3B68     		ldr	r3, [r7]
 4652 0028 1A60     		str	r2, [r3]
 4653              	.L303:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 168


4608:..\..\FreeRTOS_Source/tasks.c **** 			}
4609:..\..\FreeRTOS_Source/tasks.c **** 
4610:..\..\FreeRTOS_Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4654              		.loc 1 4610 0
 4655 002a BB69     		ldr	r3, [r7, #24]
 4656 002c 93F84C30 		ldrb	r3, [r3, #76]
 4657 0030 FB75     		strb	r3, [r7, #23]
4611:..\..\FreeRTOS_Source/tasks.c **** 
4612:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4658              		.loc 1 4612 0
 4659 0032 BB69     		ldr	r3, [r7, #24]
 4660 0034 0222     		movs	r2, #2
 4661 0036 83F84C20 		strb	r2, [r3, #76]
4613:..\..\FreeRTOS_Source/tasks.c **** 
4614:..\..\FreeRTOS_Source/tasks.c **** 			switch( eAction )
 4662              		.loc 1 4614 0
 4663 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4664 003c 042B     		cmp	r3, #4
 4665 003e 28D8     		bhi	.L316
 4666 0040 01A2     		adr	r2, .L306
 4667 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4668 0046 00BF     		.p2align 2
 4669              	.L306:
 4670 0048 93000000 		.word	.L316+1
 4671 004c 5D000000 		.word	.L307+1
 4672 0050 6B000000 		.word	.L308+1
 4673 0054 77000000 		.word	.L309+1
 4674 0058 7F000000 		.word	.L310+1
 4675              		.p2align 1
 4676              	.L307:
4615:..\..\FreeRTOS_Source/tasks.c **** 			{
4616:..\..\FreeRTOS_Source/tasks.c **** 				case eSetBits	:
4617:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4677              		.loc 1 4617 0
 4678 005c BB69     		ldr	r3, [r7, #24]
 4679 005e 9A6C     		ldr	r2, [r3, #72]
 4680 0060 BB68     		ldr	r3, [r7, #8]
 4681 0062 1A43     		orrs	r2, r2, r3
 4682 0064 BB69     		ldr	r3, [r7, #24]
 4683 0066 9A64     		str	r2, [r3, #72]
4618:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4684              		.loc 1 4618 0
 4685 0068 14E0     		b	.L311
 4686              	.L308:
4619:..\..\FreeRTOS_Source/tasks.c **** 
4620:..\..\FreeRTOS_Source/tasks.c **** 				case eIncrement	:
4621:..\..\FreeRTOS_Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4687              		.loc 1 4621 0
 4688 006a BB69     		ldr	r3, [r7, #24]
 4689 006c 9B6C     		ldr	r3, [r3, #72]
 4690 006e 5A1C     		adds	r2, r3, #1
 4691 0070 BB69     		ldr	r3, [r7, #24]
 4692 0072 9A64     		str	r2, [r3, #72]
4622:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4693              		.loc 1 4622 0
 4694 0074 0EE0     		b	.L311
 4695              	.L309:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 169


4623:..\..\FreeRTOS_Source/tasks.c **** 
4624:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithOverwrite	:
4625:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4696              		.loc 1 4625 0
 4697 0076 BB69     		ldr	r3, [r7, #24]
 4698 0078 BA68     		ldr	r2, [r7, #8]
 4699 007a 9A64     		str	r2, [r3, #72]
4626:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4700              		.loc 1 4626 0
 4701 007c 0AE0     		b	.L311
 4702              	.L310:
4627:..\..\FreeRTOS_Source/tasks.c **** 
4628:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4629:..\..\FreeRTOS_Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4703              		.loc 1 4629 0
 4704 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4705 0080 022B     		cmp	r3, #2
 4706 0082 03D0     		beq	.L312
4630:..\..\FreeRTOS_Source/tasks.c **** 					{
4631:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4707              		.loc 1 4631 0
 4708 0084 BB69     		ldr	r3, [r7, #24]
 4709 0086 BA68     		ldr	r2, [r7, #8]
 4710 0088 9A64     		str	r2, [r3, #72]
4632:..\..\FreeRTOS_Source/tasks.c **** 					}
4633:..\..\FreeRTOS_Source/tasks.c **** 					else
4634:..\..\FreeRTOS_Source/tasks.c **** 					{
4635:..\..\FreeRTOS_Source/tasks.c **** 						/* The value could not be written to the task. */
4636:..\..\FreeRTOS_Source/tasks.c **** 						xReturn = pdFAIL;
4637:..\..\FreeRTOS_Source/tasks.c **** 					}
4638:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4711              		.loc 1 4638 0
 4712 008a 03E0     		b	.L311
 4713              	.L312:
4636:..\..\FreeRTOS_Source/tasks.c **** 					}
 4714              		.loc 1 4636 0
 4715 008c 0023     		movs	r3, #0
 4716 008e FB61     		str	r3, [r7, #28]
 4717              		.loc 1 4638 0
 4718 0090 00E0     		b	.L311
 4719              	.L316:
4639:..\..\FreeRTOS_Source/tasks.c **** 
4640:..\..\FreeRTOS_Source/tasks.c **** 				case eNoAction:
4641:..\..\FreeRTOS_Source/tasks.c **** 					/* The task is being notified without its notify value being
4642:..\..\FreeRTOS_Source/tasks.c **** 					updated. */
4643:..\..\FreeRTOS_Source/tasks.c **** 					break;
4644:..\..\FreeRTOS_Source/tasks.c **** 
4645:..\..\FreeRTOS_Source/tasks.c **** 				default:
4646:..\..\FreeRTOS_Source/tasks.c **** 					/* Should not get here if all enums are handled.
4647:..\..\FreeRTOS_Source/tasks.c **** 					Artificially force an assert. */
4648:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( ( volatile uint32_t ) 0 );
4649:..\..\FreeRTOS_Source/tasks.c **** 
4650:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4720              		.loc 1 4650 0
 4721 0092 00BF     		nop
 4722              	.L311:
4651:..\..\FreeRTOS_Source/tasks.c **** 			}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 170


4652:..\..\FreeRTOS_Source/tasks.c **** 
4653:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY();
4654:..\..\FreeRTOS_Source/tasks.c **** 
4655:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4656:..\..\FreeRTOS_Source/tasks.c **** 			notification then unblock it now. */
4657:..\..\FreeRTOS_Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4723              		.loc 1 4657 0
 4724 0094 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4725 0096 012B     		cmp	r3, #1
 4726 0098 2CD1     		bne	.L314
4658:..\..\FreeRTOS_Source/tasks.c **** 			{
4659:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4727              		.loc 1 4659 0
 4728 009a BB69     		ldr	r3, [r7, #24]
 4729 009c 0433     		adds	r3, r3, #4
 4730 009e 1846     		mov	r0, r3
 4731 00a0 FFF7FEFF 		bl	uxListRemove
4660:..\..\FreeRTOS_Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4732              		.loc 1 4660 0
 4733 00a4 BB69     		ldr	r3, [r7, #24]
 4734 00a6 DB6A     		ldr	r3, [r3, #44]
 4735 00a8 1A46     		mov	r2, r3
 4736 00aa 0123     		movs	r3, #1
 4737 00ac 03FA02F2 		lsl	r2, r3, r2
 4738 00b0 144B     		ldr	r3, .L317
 4739 00b2 1B68     		ldr	r3, [r3]
 4740 00b4 1343     		orrs	r3, r3, r2
 4741 00b6 134A     		ldr	r2, .L317
 4742 00b8 1360     		str	r3, [r2]
 4743 00ba BB69     		ldr	r3, [r7, #24]
 4744 00bc DA6A     		ldr	r2, [r3, #44]
 4745 00be 1346     		mov	r3, r2
 4746 00c0 9B00     		lsls	r3, r3, #2
 4747 00c2 1344     		add	r3, r3, r2
 4748 00c4 9B00     		lsls	r3, r3, #2
 4749 00c6 104A     		ldr	r2, .L317+4
 4750 00c8 1A44     		add	r2, r2, r3
 4751 00ca BB69     		ldr	r3, [r7, #24]
 4752 00cc 0433     		adds	r3, r3, #4
 4753 00ce 1046     		mov	r0, r2
 4754 00d0 1946     		mov	r1, r3
 4755 00d2 FFF7FEFF 		bl	vListInsertEnd
4661:..\..\FreeRTOS_Source/tasks.c **** 
4662:..\..\FreeRTOS_Source/tasks.c **** 				/* The task should not have been on an event list. */
4663:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4664:..\..\FreeRTOS_Source/tasks.c **** 
4665:..\..\FreeRTOS_Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4666:..\..\FreeRTOS_Source/tasks.c **** 				{
4667:..\..\FreeRTOS_Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4668:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4669:..\..\FreeRTOS_Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4670:..\..\FreeRTOS_Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4671:..\..\FreeRTOS_Source/tasks.c **** 					because it will automatically get reset to a new value when
4672:..\..\FreeRTOS_Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4673:..\..\FreeRTOS_Source/tasks.c **** 					tickless idling is used it might be more important to enter
4674:..\..\FreeRTOS_Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4675:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 171


4676:..\..\FreeRTOS_Source/tasks.c **** 					earliest possible time. */
4677:..\..\FreeRTOS_Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4678:..\..\FreeRTOS_Source/tasks.c **** 				}
4679:..\..\FreeRTOS_Source/tasks.c **** 				#endif
4680:..\..\FreeRTOS_Source/tasks.c **** 
4681:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4756              		.loc 1 4681 0
 4757 00d6 BB69     		ldr	r3, [r7, #24]
 4758 00d8 DA6A     		ldr	r2, [r3, #44]
 4759 00da 0C4B     		ldr	r3, .L317+8
 4760 00dc 1B68     		ldr	r3, [r3]
 4761 00de DB6A     		ldr	r3, [r3, #44]
 4762 00e0 9A42     		cmp	r2, r3
 4763 00e2 07D9     		bls	.L314
4682:..\..\FreeRTOS_Source/tasks.c **** 				{
4683:..\..\FreeRTOS_Source/tasks.c **** 					/* The notified task has a priority above the currently
4684:..\..\FreeRTOS_Source/tasks.c **** 					executing task so a yield is required. */
4685:..\..\FreeRTOS_Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 4764              		.loc 1 4685 0
 4765 00e4 0A4B     		ldr	r3, .L317+12
 4766 00e6 4FF08052 		mov	r2, #268435456
 4767 00ea 1A60     		str	r2, [r3]
 4768              	@ 4685 "..\..\FreeRTOS_Source\tasks.c" 1
 4769 00ec BFF34F8F 		dsb
 4770              	@ 0 "" 2
 4771              	@ 4685 "..\..\FreeRTOS_Source\tasks.c" 1
 4772 00f0 BFF36F8F 		isb
 4773              	@ 0 "" 2
 4774              		.thumb
 4775              	.L314:
4686:..\..\FreeRTOS_Source/tasks.c **** 				}
4687:..\..\FreeRTOS_Source/tasks.c **** 				else
4688:..\..\FreeRTOS_Source/tasks.c **** 				{
4689:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4690:..\..\FreeRTOS_Source/tasks.c **** 				}
4691:..\..\FreeRTOS_Source/tasks.c **** 			}
4692:..\..\FreeRTOS_Source/tasks.c **** 			else
4693:..\..\FreeRTOS_Source/tasks.c **** 			{
4694:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4695:..\..\FreeRTOS_Source/tasks.c **** 			}
4696:..\..\FreeRTOS_Source/tasks.c **** 		}
4697:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4776              		.loc 1 4697 0
 4777 00f4 FFF7FEFF 		bl	vPortExitCritical
4698:..\..\FreeRTOS_Source/tasks.c **** 
4699:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 4778              		.loc 1 4699 0
 4779 00f8 FB69     		ldr	r3, [r7, #28]
4700:..\..\FreeRTOS_Source/tasks.c **** 	}
 4780              		.loc 1 4700 0
 4781 00fa 1846     		mov	r0, r3
 4782 00fc 2037     		adds	r7, r7, #32
 4783              		.cfi_def_cfa_offset 8
 4784 00fe BD46     		mov	sp, r7
 4785              		.cfi_def_cfa_register 13
 4786              		@ sp needed
 4787 0100 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 172


 4788              	.L318:
 4789 0102 00BF     		.align	2
 4790              	.L317:
 4791 0104 B8000000 		.word	uxTopReadyPriority
 4792 0108 04000000 		.word	pxReadyTasksLists
 4793 010c 00000000 		.word	pxCurrentTCB
 4794 0110 04ED00E0 		.word	-536810236
 4795              		.cfi_endproc
 4796              	.LFE115:
 4797              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4798              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4799              		.align	2
 4800              		.global	xTaskGenericNotifyFromISR
 4801              		.thumb
 4802              		.thumb_func
 4803              		.type	xTaskGenericNotifyFromISR, %function
 4804              	xTaskGenericNotifyFromISR:
 4805              	.LFB116:
4701:..\..\FreeRTOS_Source/tasks.c **** 
4702:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4703:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4704:..\..\FreeRTOS_Source/tasks.c **** 
4705:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4706:..\..\FreeRTOS_Source/tasks.c **** 
4707:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4708:..\..\FreeRTOS_Source/tasks.c **** 	{
 4806              		.loc 1 4708 0
 4807              		.cfi_startproc
 4808              		@ args = 4, pretend = 0, frame = 48
 4809              		@ frame_needed = 1, uses_anonymous_args = 0
 4810 0000 80B5     		push	{r7, lr}
 4811              		.cfi_def_cfa_offset 8
 4812              		.cfi_offset 7, -8
 4813              		.cfi_offset 14, -4
 4814 0002 8CB0     		sub	sp, sp, #48
 4815              		.cfi_def_cfa_offset 56
 4816 0004 00AF     		add	r7, sp, #0
 4817              		.cfi_def_cfa_register 7
 4818 0006 F860     		str	r0, [r7, #12]
 4819 0008 B960     		str	r1, [r7, #8]
 4820 000a 3B60     		str	r3, [r7]
 4821 000c 1346     		mov	r3, r2
 4822 000e FB71     		strb	r3, [r7, #7]
4709:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
4710:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4711:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4823              		.loc 1 4711 0
 4824 0010 0123     		movs	r3, #1
 4825 0012 FB62     		str	r3, [r7, #44]
4712:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4713:..\..\FreeRTOS_Source/tasks.c **** 
4714:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToNotify );
4715:..\..\FreeRTOS_Source/tasks.c **** 
4716:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4717:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4718:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4719:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 173


4720:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4721:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4722:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4723:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4724:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4725:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4726:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4727:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4728:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4729:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4730:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
4731:..\..\FreeRTOS_Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4732:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4733:..\..\FreeRTOS_Source/tasks.c **** 
4734:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4826              		.loc 1 4734 0
 4827 0014 FB68     		ldr	r3, [r7, #12]
 4828 0016 BB62     		str	r3, [r7, #40]
 4829              	.LBB51:
 4830              	.LBB52:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4831              		.loc 2 211 0
 4832              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4833 0018 EFF31182 			mrs r2, basepri											
 4834 001c 4FF0A003 		mov r3, #160												
 4835 0020 83F31188 		msr basepri, r3											
 4836 0024 BFF36F8F 		isb														
 4837 0028 BFF34F8F 		dsb														
 4838              	
 4839              	@ 0 "" 2
 4840              		.thumb
 4841 002c FA61     		str	r2, [r7, #28]
 4842 002e BB61     		str	r3, [r7, #24]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 4843              		.loc 2 223 0
 4844 0030 FB69     		ldr	r3, [r7, #28]
 4845              	.LBE52:
 4846              	.LBE51:
4735:..\..\FreeRTOS_Source/tasks.c **** 
4736:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4847              		.loc 1 4736 0
 4848 0032 7B62     		str	r3, [r7, #36]
4737:..\..\FreeRTOS_Source/tasks.c **** 		{
4738:..\..\FreeRTOS_Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4849              		.loc 1 4738 0
 4850 0034 3B68     		ldr	r3, [r7]
 4851 0036 002B     		cmp	r3, #0
 4852 0038 03D0     		beq	.L321
4739:..\..\FreeRTOS_Source/tasks.c **** 			{
4740:..\..\FreeRTOS_Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4853              		.loc 1 4740 0
 4854 003a BB6A     		ldr	r3, [r7, #40]
 4855 003c 9A6C     		ldr	r2, [r3, #72]
 4856 003e 3B68     		ldr	r3, [r7]
 4857 0040 1A60     		str	r2, [r3]
 4858              	.L321:
4741:..\..\FreeRTOS_Source/tasks.c **** 			}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 174


4742:..\..\FreeRTOS_Source/tasks.c **** 
4743:..\..\FreeRTOS_Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4859              		.loc 1 4743 0
 4860 0042 BB6A     		ldr	r3, [r7, #40]
 4861 0044 93F84C30 		ldrb	r3, [r3, #76]
 4862 0048 87F82330 		strb	r3, [r7, #35]
4744:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4863              		.loc 1 4744 0
 4864 004c BB6A     		ldr	r3, [r7, #40]
 4865 004e 0222     		movs	r2, #2
 4866 0050 83F84C20 		strb	r2, [r3, #76]
4745:..\..\FreeRTOS_Source/tasks.c **** 
4746:..\..\FreeRTOS_Source/tasks.c **** 			switch( eAction )
 4867              		.loc 1 4746 0
 4868 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4869 0056 042B     		cmp	r3, #4
 4870 0058 28D8     		bhi	.L337
 4871 005a 01A2     		adr	r2, .L324
 4872 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4873              		.p2align 2
 4874              	.L324:
 4875 0060 AD000000 		.word	.L337+1
 4876 0064 75000000 		.word	.L325+1
 4877 0068 83000000 		.word	.L326+1
 4878 006c 8F000000 		.word	.L327+1
 4879 0070 97000000 		.word	.L328+1
 4880              		.p2align 1
 4881              	.L325:
4747:..\..\FreeRTOS_Source/tasks.c **** 			{
4748:..\..\FreeRTOS_Source/tasks.c **** 				case eSetBits	:
4749:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4882              		.loc 1 4749 0
 4883 0074 BB6A     		ldr	r3, [r7, #40]
 4884 0076 9A6C     		ldr	r2, [r3, #72]
 4885 0078 BB68     		ldr	r3, [r7, #8]
 4886 007a 1A43     		orrs	r2, r2, r3
 4887 007c BB6A     		ldr	r3, [r7, #40]
 4888 007e 9A64     		str	r2, [r3, #72]
4750:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4889              		.loc 1 4750 0
 4890 0080 15E0     		b	.L329
 4891              	.L326:
4751:..\..\FreeRTOS_Source/tasks.c **** 
4752:..\..\FreeRTOS_Source/tasks.c **** 				case eIncrement	:
4753:..\..\FreeRTOS_Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4892              		.loc 1 4753 0
 4893 0082 BB6A     		ldr	r3, [r7, #40]
 4894 0084 9B6C     		ldr	r3, [r3, #72]
 4895 0086 5A1C     		adds	r2, r3, #1
 4896 0088 BB6A     		ldr	r3, [r7, #40]
 4897 008a 9A64     		str	r2, [r3, #72]
4754:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4898              		.loc 1 4754 0
 4899 008c 0FE0     		b	.L329
 4900              	.L327:
4755:..\..\FreeRTOS_Source/tasks.c **** 
4756:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithOverwrite	:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 175


4757:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4901              		.loc 1 4757 0
 4902 008e BB6A     		ldr	r3, [r7, #40]
 4903 0090 BA68     		ldr	r2, [r7, #8]
 4904 0092 9A64     		str	r2, [r3, #72]
4758:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4905              		.loc 1 4758 0
 4906 0094 0BE0     		b	.L329
 4907              	.L328:
4759:..\..\FreeRTOS_Source/tasks.c **** 
4760:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4761:..\..\FreeRTOS_Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4908              		.loc 1 4761 0
 4909 0096 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 4910 009a 022B     		cmp	r3, #2
 4911 009c 03D0     		beq	.L330
4762:..\..\FreeRTOS_Source/tasks.c **** 					{
4763:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4912              		.loc 1 4763 0
 4913 009e BB6A     		ldr	r3, [r7, #40]
 4914 00a0 BA68     		ldr	r2, [r7, #8]
 4915 00a2 9A64     		str	r2, [r3, #72]
4764:..\..\FreeRTOS_Source/tasks.c **** 					}
4765:..\..\FreeRTOS_Source/tasks.c **** 					else
4766:..\..\FreeRTOS_Source/tasks.c **** 					{
4767:..\..\FreeRTOS_Source/tasks.c **** 						/* The value could not be written to the task. */
4768:..\..\FreeRTOS_Source/tasks.c **** 						xReturn = pdFAIL;
4769:..\..\FreeRTOS_Source/tasks.c **** 					}
4770:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4916              		.loc 1 4770 0
 4917 00a4 03E0     		b	.L329
 4918              	.L330:
4768:..\..\FreeRTOS_Source/tasks.c **** 					}
 4919              		.loc 1 4768 0
 4920 00a6 0023     		movs	r3, #0
 4921 00a8 FB62     		str	r3, [r7, #44]
 4922              		.loc 1 4770 0
 4923 00aa 00E0     		b	.L329
 4924              	.L337:
4771:..\..\FreeRTOS_Source/tasks.c **** 
4772:..\..\FreeRTOS_Source/tasks.c **** 				case eNoAction :
4773:..\..\FreeRTOS_Source/tasks.c **** 					/* The task is being notified without its notify value being
4774:..\..\FreeRTOS_Source/tasks.c **** 					updated. */
4775:..\..\FreeRTOS_Source/tasks.c **** 					break;
4776:..\..\FreeRTOS_Source/tasks.c **** 
4777:..\..\FreeRTOS_Source/tasks.c **** 				default:
4778:..\..\FreeRTOS_Source/tasks.c **** 					/* Should not get here if all enums are handled.
4779:..\..\FreeRTOS_Source/tasks.c **** 					Artificially force an assert. */
4780:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( ( volatile uint32_t ) 0 );
4781:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4925              		.loc 1 4781 0
 4926 00ac 00BF     		nop
 4927              	.L329:
4782:..\..\FreeRTOS_Source/tasks.c **** 			}
4783:..\..\FreeRTOS_Source/tasks.c **** 
4784:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4785:..\..\FreeRTOS_Source/tasks.c **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 176


4786:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4787:..\..\FreeRTOS_Source/tasks.c **** 			notification then unblock it now. */
4788:..\..\FreeRTOS_Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4928              		.loc 1 4788 0
 4929 00ae 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 4930 00b2 012B     		cmp	r3, #1
 4931 00b4 38D1     		bne	.L332
4789:..\..\FreeRTOS_Source/tasks.c **** 			{
4790:..\..\FreeRTOS_Source/tasks.c **** 				/* The task should not have been on an event list. */
4791:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4792:..\..\FreeRTOS_Source/tasks.c **** 
4793:..\..\FreeRTOS_Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4932              		.loc 1 4793 0
 4933 00b6 214B     		ldr	r3, .L338
 4934 00b8 1B68     		ldr	r3, [r3]
 4935 00ba 002B     		cmp	r3, #0
 4936 00bc 1ED1     		bne	.L333
4794:..\..\FreeRTOS_Source/tasks.c **** 				{
4795:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4937              		.loc 1 4795 0
 4938 00be BB6A     		ldr	r3, [r7, #40]
 4939 00c0 0433     		adds	r3, r3, #4
 4940 00c2 1846     		mov	r0, r3
 4941 00c4 FFF7FEFF 		bl	uxListRemove
4796:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4942              		.loc 1 4796 0
 4943 00c8 BB6A     		ldr	r3, [r7, #40]
 4944 00ca DB6A     		ldr	r3, [r3, #44]
 4945 00cc 1A46     		mov	r2, r3
 4946 00ce 0123     		movs	r3, #1
 4947 00d0 03FA02F2 		lsl	r2, r3, r2
 4948 00d4 1A4B     		ldr	r3, .L338+4
 4949 00d6 1B68     		ldr	r3, [r3]
 4950 00d8 1343     		orrs	r3, r3, r2
 4951 00da 194A     		ldr	r2, .L338+4
 4952 00dc 1360     		str	r3, [r2]
 4953 00de BB6A     		ldr	r3, [r7, #40]
 4954 00e0 DA6A     		ldr	r2, [r3, #44]
 4955 00e2 1346     		mov	r3, r2
 4956 00e4 9B00     		lsls	r3, r3, #2
 4957 00e6 1344     		add	r3, r3, r2
 4958 00e8 9B00     		lsls	r3, r3, #2
 4959 00ea 164A     		ldr	r2, .L338+8
 4960 00ec 1A44     		add	r2, r2, r3
 4961 00ee BB6A     		ldr	r3, [r7, #40]
 4962 00f0 0433     		adds	r3, r3, #4
 4963 00f2 1046     		mov	r0, r2
 4964 00f4 1946     		mov	r1, r3
 4965 00f6 FFF7FEFF 		bl	vListInsertEnd
 4966 00fa 05E0     		b	.L334
 4967              	.L333:
4797:..\..\FreeRTOS_Source/tasks.c **** 				}
4798:..\..\FreeRTOS_Source/tasks.c **** 				else
4799:..\..\FreeRTOS_Source/tasks.c **** 				{
4800:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4801:..\..\FreeRTOS_Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4802:..\..\FreeRTOS_Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 177


 4968              		.loc 1 4802 0
 4969 00fc BB6A     		ldr	r3, [r7, #40]
 4970 00fe 1833     		adds	r3, r3, #24
 4971 0100 1148     		ldr	r0, .L338+12
 4972 0102 1946     		mov	r1, r3
 4973 0104 FFF7FEFF 		bl	vListInsertEnd
 4974              	.L334:
4803:..\..\FreeRTOS_Source/tasks.c **** 				}
4804:..\..\FreeRTOS_Source/tasks.c **** 
4805:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4975              		.loc 1 4805 0
 4976 0108 BB6A     		ldr	r3, [r7, #40]
 4977 010a DA6A     		ldr	r2, [r3, #44]
 4978 010c 0F4B     		ldr	r3, .L338+16
 4979 010e 1B68     		ldr	r3, [r3]
 4980 0110 DB6A     		ldr	r3, [r3, #44]
 4981 0112 9A42     		cmp	r2, r3
 4982 0114 08D9     		bls	.L332
4806:..\..\FreeRTOS_Source/tasks.c **** 				{
4807:..\..\FreeRTOS_Source/tasks.c **** 					/* The notified task has a priority above the currently
4808:..\..\FreeRTOS_Source/tasks.c **** 					executing task so a yield is required. */
4809:..\..\FreeRTOS_Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 4983              		.loc 1 4809 0
 4984 0116 BB6B     		ldr	r3, [r7, #56]
 4985 0118 002B     		cmp	r3, #0
 4986 011a 02D0     		beq	.L335
4810:..\..\FreeRTOS_Source/tasks.c **** 					{
4811:..\..\FreeRTOS_Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 4987              		.loc 1 4811 0
 4988 011c BB6B     		ldr	r3, [r7, #56]
 4989 011e 0122     		movs	r2, #1
 4990 0120 1A60     		str	r2, [r3]
 4991              	.L335:
4812:..\..\FreeRTOS_Source/tasks.c **** 					}
4813:..\..\FreeRTOS_Source/tasks.c **** 
4814:..\..\FreeRTOS_Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4815:..\..\FreeRTOS_Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4816:..\..\FreeRTOS_Source/tasks.c **** 					safe FreeRTOS function. */
4817:..\..\FreeRTOS_Source/tasks.c **** 					xYieldPending = pdTRUE;
 4992              		.loc 1 4817 0
 4993 0122 0B4B     		ldr	r3, .L338+20
 4994 0124 0122     		movs	r2, #1
 4995 0126 1A60     		str	r2, [r3]
 4996              	.L332:
 4997 0128 7B6A     		ldr	r3, [r7, #36]
 4998 012a 7B61     		str	r3, [r7, #20]
 4999              	.LBB53:
 5000              	.LBB54:
 5001              		.loc 2 229 0
 5002 012c 7B69     		ldr	r3, [r7, #20]
 5003              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5004 012e 83F31188 			msr basepri, r3	
 5005              	@ 0 "" 2
 5006              		.thumb
 5007              	.LBE54:
 5008              	.LBE53:
4818:..\..\FreeRTOS_Source/tasks.c **** 				}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 178


4819:..\..\FreeRTOS_Source/tasks.c **** 				else
4820:..\..\FreeRTOS_Source/tasks.c **** 				{
4821:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4822:..\..\FreeRTOS_Source/tasks.c **** 				}
4823:..\..\FreeRTOS_Source/tasks.c **** 			}
4824:..\..\FreeRTOS_Source/tasks.c **** 		}
4825:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4826:..\..\FreeRTOS_Source/tasks.c **** 
4827:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 5009              		.loc 1 4827 0
 5010 0132 FB6A     		ldr	r3, [r7, #44]
4828:..\..\FreeRTOS_Source/tasks.c **** 	}
 5011              		.loc 1 4828 0
 5012 0134 1846     		mov	r0, r3
 5013 0136 3037     		adds	r7, r7, #48
 5014              		.cfi_def_cfa_offset 8
 5015 0138 BD46     		mov	sp, r7
 5016              		.cfi_def_cfa_register 13
 5017              		@ sp needed
 5018 013a 80BD     		pop	{r7, pc}
 5019              	.L339:
 5020              		.align	2
 5021              	.L338:
 5022 013c D8000000 		.word	uxSchedulerSuspended
 5023 0140 B8000000 		.word	uxTopReadyPriority
 5024 0144 04000000 		.word	pxReadyTasksLists
 5025 0148 70000000 		.word	xPendingReadyList
 5026 014c 00000000 		.word	pxCurrentTCB
 5027 0150 C4000000 		.word	xYieldPending
 5028              		.cfi_endproc
 5029              	.LFE116:
 5030              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 5031              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5032              		.align	2
 5033              		.global	vTaskNotifyGiveFromISR
 5034              		.thumb
 5035              		.thumb_func
 5036              		.type	vTaskNotifyGiveFromISR, %function
 5037              	vTaskNotifyGiveFromISR:
 5038              	.LFB117:
4829:..\..\FreeRTOS_Source/tasks.c **** 
4830:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4831:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4832:..\..\FreeRTOS_Source/tasks.c **** 
4833:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4834:..\..\FreeRTOS_Source/tasks.c **** 
4835:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4836:..\..\FreeRTOS_Source/tasks.c **** 	{
 5039              		.loc 1 4836 0
 5040              		.cfi_startproc
 5041              		@ args = 0, pretend = 0, frame = 32
 5042              		@ frame_needed = 1, uses_anonymous_args = 0
 5043 0000 80B5     		push	{r7, lr}
 5044              		.cfi_def_cfa_offset 8
 5045              		.cfi_offset 7, -8
 5046              		.cfi_offset 14, -4
 5047 0002 88B0     		sub	sp, sp, #32
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 179


 5048              		.cfi_def_cfa_offset 40
 5049 0004 00AF     		add	r7, sp, #0
 5050              		.cfi_def_cfa_register 7
 5051 0006 7860     		str	r0, [r7, #4]
 5052 0008 3960     		str	r1, [r7]
4837:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
4838:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4839:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4840:..\..\FreeRTOS_Source/tasks.c **** 
4841:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToNotify );
4842:..\..\FreeRTOS_Source/tasks.c **** 
4843:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4844:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4845:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4846:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4847:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4848:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4849:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4850:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4851:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4852:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4853:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4854:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4855:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4856:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4857:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
4858:..\..\FreeRTOS_Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4859:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4860:..\..\FreeRTOS_Source/tasks.c **** 
4861:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5053              		.loc 1 4861 0
 5054 000a 7B68     		ldr	r3, [r7, #4]
 5055 000c FB61     		str	r3, [r7, #28]
 5056              	.LBB55:
 5057              	.LBB56:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 5058              		.loc 2 211 0
 5059              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5060 000e EFF31182 			mrs r2, basepri											
 5061 0012 4FF0A003 		mov r3, #160												
 5062 0016 83F31188 		msr basepri, r3											
 5063 001a BFF36F8F 		isb														
 5064 001e BFF34F8F 		dsb														
 5065              	
 5066              	@ 0 "" 2
 5067              		.thumb
 5068 0022 3A61     		str	r2, [r7, #16]
 5069 0024 FB60     		str	r3, [r7, #12]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 5070              		.loc 2 223 0
 5071 0026 3B69     		ldr	r3, [r7, #16]
 5072              	.LBE56:
 5073              	.LBE55:
4862:..\..\FreeRTOS_Source/tasks.c **** 
4863:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5074              		.loc 1 4863 0
 5075 0028 BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 180


4864:..\..\FreeRTOS_Source/tasks.c **** 		{
4865:..\..\FreeRTOS_Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5076              		.loc 1 4865 0
 5077 002a FB69     		ldr	r3, [r7, #28]
 5078 002c 93F84C30 		ldrb	r3, [r3, #76]
 5079 0030 FB75     		strb	r3, [r7, #23]
4866:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5080              		.loc 1 4866 0
 5081 0032 FB69     		ldr	r3, [r7, #28]
 5082 0034 0222     		movs	r2, #2
 5083 0036 83F84C20 		strb	r2, [r3, #76]
4867:..\..\FreeRTOS_Source/tasks.c **** 
4868:..\..\FreeRTOS_Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4869:..\..\FreeRTOS_Source/tasks.c **** 			semaphore. */
4870:..\..\FreeRTOS_Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5084              		.loc 1 4870 0
 5085 003a FB69     		ldr	r3, [r7, #28]
 5086 003c 9B6C     		ldr	r3, [r3, #72]
 5087 003e 5A1C     		adds	r2, r3, #1
 5088 0040 FB69     		ldr	r3, [r7, #28]
 5089 0042 9A64     		str	r2, [r3, #72]
4871:..\..\FreeRTOS_Source/tasks.c **** 
4872:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4873:..\..\FreeRTOS_Source/tasks.c **** 
4874:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4875:..\..\FreeRTOS_Source/tasks.c **** 			notification then unblock it now. */
4876:..\..\FreeRTOS_Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5090              		.loc 1 4876 0
 5091 0044 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5092 0046 012B     		cmp	r3, #1
 5093 0048 38D1     		bne	.L342
4877:..\..\FreeRTOS_Source/tasks.c **** 			{
4878:..\..\FreeRTOS_Source/tasks.c **** 				/* The task should not have been on an event list. */
4879:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4880:..\..\FreeRTOS_Source/tasks.c **** 
4881:..\..\FreeRTOS_Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5094              		.loc 1 4881 0
 5095 004a 204B     		ldr	r3, .L346
 5096 004c 1B68     		ldr	r3, [r3]
 5097 004e 002B     		cmp	r3, #0
 5098 0050 1ED1     		bne	.L343
4882:..\..\FreeRTOS_Source/tasks.c **** 				{
4883:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5099              		.loc 1 4883 0
 5100 0052 FB69     		ldr	r3, [r7, #28]
 5101 0054 0433     		adds	r3, r3, #4
 5102 0056 1846     		mov	r0, r3
 5103 0058 FFF7FEFF 		bl	uxListRemove
4884:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5104              		.loc 1 4884 0
 5105 005c FB69     		ldr	r3, [r7, #28]
 5106 005e DB6A     		ldr	r3, [r3, #44]
 5107 0060 1A46     		mov	r2, r3
 5108 0062 0123     		movs	r3, #1
 5109 0064 03FA02F2 		lsl	r2, r3, r2
 5110 0068 194B     		ldr	r3, .L346+4
 5111 006a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 181


 5112 006c 1343     		orrs	r3, r3, r2
 5113 006e 184A     		ldr	r2, .L346+4
 5114 0070 1360     		str	r3, [r2]
 5115 0072 FB69     		ldr	r3, [r7, #28]
 5116 0074 DA6A     		ldr	r2, [r3, #44]
 5117 0076 1346     		mov	r3, r2
 5118 0078 9B00     		lsls	r3, r3, #2
 5119 007a 1344     		add	r3, r3, r2
 5120 007c 9B00     		lsls	r3, r3, #2
 5121 007e 154A     		ldr	r2, .L346+8
 5122 0080 1A44     		add	r2, r2, r3
 5123 0082 FB69     		ldr	r3, [r7, #28]
 5124 0084 0433     		adds	r3, r3, #4
 5125 0086 1046     		mov	r0, r2
 5126 0088 1946     		mov	r1, r3
 5127 008a FFF7FEFF 		bl	vListInsertEnd
 5128 008e 05E0     		b	.L344
 5129              	.L343:
4885:..\..\FreeRTOS_Source/tasks.c **** 				}
4886:..\..\FreeRTOS_Source/tasks.c **** 				else
4887:..\..\FreeRTOS_Source/tasks.c **** 				{
4888:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4889:..\..\FreeRTOS_Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4890:..\..\FreeRTOS_Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5130              		.loc 1 4890 0
 5131 0090 FB69     		ldr	r3, [r7, #28]
 5132 0092 1833     		adds	r3, r3, #24
 5133 0094 1048     		ldr	r0, .L346+12
 5134 0096 1946     		mov	r1, r3
 5135 0098 FFF7FEFF 		bl	vListInsertEnd
 5136              	.L344:
4891:..\..\FreeRTOS_Source/tasks.c **** 				}
4892:..\..\FreeRTOS_Source/tasks.c **** 
4893:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5137              		.loc 1 4893 0
 5138 009c FB69     		ldr	r3, [r7, #28]
 5139 009e DA6A     		ldr	r2, [r3, #44]
 5140 00a0 0E4B     		ldr	r3, .L346+16
 5141 00a2 1B68     		ldr	r3, [r3]
 5142 00a4 DB6A     		ldr	r3, [r3, #44]
 5143 00a6 9A42     		cmp	r2, r3
 5144 00a8 08D9     		bls	.L342
4894:..\..\FreeRTOS_Source/tasks.c **** 				{
4895:..\..\FreeRTOS_Source/tasks.c **** 					/* The notified task has a priority above the currently
4896:..\..\FreeRTOS_Source/tasks.c **** 					executing task so a yield is required. */
4897:..\..\FreeRTOS_Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5145              		.loc 1 4897 0
 5146 00aa 3B68     		ldr	r3, [r7]
 5147 00ac 002B     		cmp	r3, #0
 5148 00ae 02D0     		beq	.L345
4898:..\..\FreeRTOS_Source/tasks.c **** 					{
4899:..\..\FreeRTOS_Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5149              		.loc 1 4899 0
 5150 00b0 3B68     		ldr	r3, [r7]
 5151 00b2 0122     		movs	r2, #1
 5152 00b4 1A60     		str	r2, [r3]
 5153              	.L345:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 182


4900:..\..\FreeRTOS_Source/tasks.c **** 					}
4901:..\..\FreeRTOS_Source/tasks.c **** 
4902:..\..\FreeRTOS_Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4903:..\..\FreeRTOS_Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
4904:..\..\FreeRTOS_Source/tasks.c **** 					safe FreeRTOS function. */
4905:..\..\FreeRTOS_Source/tasks.c **** 					xYieldPending = pdTRUE;
 5154              		.loc 1 4905 0
 5155 00b6 0A4B     		ldr	r3, .L346+20
 5156 00b8 0122     		movs	r2, #1
 5157 00ba 1A60     		str	r2, [r3]
 5158              	.L342:
 5159 00bc BB69     		ldr	r3, [r7, #24]
 5160 00be BB60     		str	r3, [r7, #8]
 5161              	.LBB57:
 5162              	.LBB58:
 5163              		.loc 2 229 0
 5164 00c0 BB68     		ldr	r3, [r7, #8]
 5165              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5166 00c2 83F31188 			msr basepri, r3	
 5167              	@ 0 "" 2
 5168              		.thumb
 5169              	.LBE58:
 5170              	.LBE57:
4906:..\..\FreeRTOS_Source/tasks.c **** 				}
4907:..\..\FreeRTOS_Source/tasks.c **** 				else
4908:..\..\FreeRTOS_Source/tasks.c **** 				{
4909:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4910:..\..\FreeRTOS_Source/tasks.c **** 				}
4911:..\..\FreeRTOS_Source/tasks.c **** 			}
4912:..\..\FreeRTOS_Source/tasks.c **** 		}
4913:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4914:..\..\FreeRTOS_Source/tasks.c **** 	}
 5171              		.loc 1 4914 0
 5172 00c6 2037     		adds	r7, r7, #32
 5173              		.cfi_def_cfa_offset 8
 5174 00c8 BD46     		mov	sp, r7
 5175              		.cfi_def_cfa_register 13
 5176              		@ sp needed
 5177 00ca 80BD     		pop	{r7, pc}
 5178              	.L347:
 5179              		.align	2
 5180              	.L346:
 5181 00cc D8000000 		.word	uxSchedulerSuspended
 5182 00d0 B8000000 		.word	uxTopReadyPriority
 5183 00d4 04000000 		.word	pxReadyTasksLists
 5184 00d8 70000000 		.word	xPendingReadyList
 5185 00dc 00000000 		.word	pxCurrentTCB
 5186 00e0 C4000000 		.word	xYieldPending
 5187              		.cfi_endproc
 5188              	.LFE117:
 5189              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5190              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5191              		.align	2
 5192              		.global	xTaskNotifyStateClear
 5193              		.thumb
 5194              		.thumb_func
 5195              		.type	xTaskNotifyStateClear, %function
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 183


 5196              	xTaskNotifyStateClear:
 5197              	.LFB118:
4915:..\..\FreeRTOS_Source/tasks.c **** 
4916:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4917:..\..\FreeRTOS_Source/tasks.c **** 
4918:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4919:..\..\FreeRTOS_Source/tasks.c **** 
4920:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4921:..\..\FreeRTOS_Source/tasks.c **** 
4922:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4923:..\..\FreeRTOS_Source/tasks.c **** 	{
 5198              		.loc 1 4923 0
 5199              		.cfi_startproc
 5200              		@ args = 0, pretend = 0, frame = 16
 5201              		@ frame_needed = 1, uses_anonymous_args = 0
 5202 0000 80B5     		push	{r7, lr}
 5203              		.cfi_def_cfa_offset 8
 5204              		.cfi_offset 7, -8
 5205              		.cfi_offset 14, -4
 5206 0002 84B0     		sub	sp, sp, #16
 5207              		.cfi_def_cfa_offset 24
 5208 0004 00AF     		add	r7, sp, #0
 5209              		.cfi_def_cfa_register 7
 5210 0006 7860     		str	r0, [r7, #4]
4924:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
4925:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
4926:..\..\FreeRTOS_Source/tasks.c **** 
4927:..\..\FreeRTOS_Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4928:..\..\FreeRTOS_Source/tasks.c **** 		its notification state cleared. */
4929:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5211              		.loc 1 4929 0
 5212 0008 7B68     		ldr	r3, [r7, #4]
 5213 000a 002B     		cmp	r3, #0
 5214 000c 02D1     		bne	.L349
 5215              		.loc 1 4929 0 is_stmt 0 discriminator 1
 5216 000e 0E4B     		ldr	r3, .L354
 5217 0010 1B68     		ldr	r3, [r3]
 5218 0012 00E0     		b	.L350
 5219              	.L349:
 5220              		.loc 1 4929 0 discriminator 2
 5221 0014 7B68     		ldr	r3, [r7, #4]
 5222              	.L350:
 5223              		.loc 1 4929 0 discriminator 4
 5224 0016 BB60     		str	r3, [r7, #8]
4930:..\..\FreeRTOS_Source/tasks.c **** 
4931:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 5225              		.loc 1 4931 0 is_stmt 1 discriminator 4
 5226 0018 FFF7FEFF 		bl	vPortEnterCritical
4932:..\..\FreeRTOS_Source/tasks.c **** 		{
4933:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5227              		.loc 1 4933 0 discriminator 4
 5228 001c BB68     		ldr	r3, [r7, #8]
 5229 001e 93F84C30 		ldrb	r3, [r3, #76]
 5230 0022 DBB2     		uxtb	r3, r3
 5231 0024 022B     		cmp	r3, #2
 5232 0026 06D1     		bne	.L351
4934:..\..\FreeRTOS_Source/tasks.c **** 			{
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 184


4935:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5233              		.loc 1 4935 0
 5234 0028 BB68     		ldr	r3, [r7, #8]
 5235 002a 0022     		movs	r2, #0
 5236 002c 83F84C20 		strb	r2, [r3, #76]
4936:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdPASS;
 5237              		.loc 1 4936 0
 5238 0030 0123     		movs	r3, #1
 5239 0032 FB60     		str	r3, [r7, #12]
 5240 0034 01E0     		b	.L352
 5241              	.L351:
4937:..\..\FreeRTOS_Source/tasks.c **** 			}
4938:..\..\FreeRTOS_Source/tasks.c **** 			else
4939:..\..\FreeRTOS_Source/tasks.c **** 			{
4940:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFAIL;
 5242              		.loc 1 4940 0
 5243 0036 0023     		movs	r3, #0
 5244 0038 FB60     		str	r3, [r7, #12]
 5245              	.L352:
4941:..\..\FreeRTOS_Source/tasks.c **** 			}
4942:..\..\FreeRTOS_Source/tasks.c **** 		}
4943:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 5246              		.loc 1 4943 0
 5247 003a FFF7FEFF 		bl	vPortExitCritical
4944:..\..\FreeRTOS_Source/tasks.c **** 
4945:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 5248              		.loc 1 4945 0
 5249 003e FB68     		ldr	r3, [r7, #12]
4946:..\..\FreeRTOS_Source/tasks.c **** 	}
 5250              		.loc 1 4946 0
 5251 0040 1846     		mov	r0, r3
 5252 0042 1037     		adds	r7, r7, #16
 5253              		.cfi_def_cfa_offset 8
 5254 0044 BD46     		mov	sp, r7
 5255              		.cfi_def_cfa_register 13
 5256              		@ sp needed
 5257 0046 80BD     		pop	{r7, pc}
 5258              	.L355:
 5259              		.align	2
 5260              	.L354:
 5261 0048 00000000 		.word	pxCurrentTCB
 5262              		.cfi_endproc
 5263              	.LFE118:
 5264              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5265              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5266              		.align	2
 5267              		.thumb
 5268              		.thumb_func
 5269              		.type	prvAddCurrentTaskToDelayedList, %function
 5270              	prvAddCurrentTaskToDelayedList:
 5271              	.LFB119:
4947:..\..\FreeRTOS_Source/tasks.c **** 
4948:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4949:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4950:..\..\FreeRTOS_Source/tasks.c **** 
4951:..\..\FreeRTOS_Source/tasks.c **** 
4952:..\..\FreeRTOS_Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 185


4953:..\..\FreeRTOS_Source/tasks.c **** {
 5272              		.loc 1 4953 0
 5273              		.cfi_startproc
 5274              		@ args = 0, pretend = 0, frame = 16
 5275              		@ frame_needed = 1, uses_anonymous_args = 0
 5276 0000 80B5     		push	{r7, lr}
 5277              		.cfi_def_cfa_offset 8
 5278              		.cfi_offset 7, -8
 5279              		.cfi_offset 14, -4
 5280 0002 84B0     		sub	sp, sp, #16
 5281              		.cfi_def_cfa_offset 24
 5282 0004 00AF     		add	r7, sp, #0
 5283              		.cfi_def_cfa_register 7
 5284 0006 7860     		str	r0, [r7, #4]
 5285 0008 3960     		str	r1, [r7]
4954:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTimeToWake;
4955:..\..\FreeRTOS_Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 5286              		.loc 1 4955 0
 5287 000a 284B     		ldr	r3, .L361
 5288 000c 1B68     		ldr	r3, [r3]
 5289 000e FB60     		str	r3, [r7, #12]
4956:..\..\FreeRTOS_Source/tasks.c **** 
4957:..\..\FreeRTOS_Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4958:..\..\FreeRTOS_Source/tasks.c **** 	{
4959:..\..\FreeRTOS_Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4960:..\..\FreeRTOS_Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4961:..\..\FreeRTOS_Source/tasks.c **** 		when the task leaves the Blocked state. */
4962:..\..\FreeRTOS_Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4963:..\..\FreeRTOS_Source/tasks.c **** 	}
4964:..\..\FreeRTOS_Source/tasks.c **** 	#endif
4965:..\..\FreeRTOS_Source/tasks.c **** 
4966:..\..\FreeRTOS_Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4967:..\..\FreeRTOS_Source/tasks.c **** 	as the same list item is used for both lists. */
4968:..\..\FreeRTOS_Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5290              		.loc 1 4968 0
 5291 0010 274B     		ldr	r3, .L361+4
 5292 0012 1B68     		ldr	r3, [r3]
 5293 0014 0433     		adds	r3, r3, #4
 5294 0016 1846     		mov	r0, r3
 5295 0018 FFF7FEFF 		bl	uxListRemove
 5296 001c 0346     		mov	r3, r0
 5297 001e 002B     		cmp	r3, #0
 5298 0020 0BD1     		bne	.L357
4969:..\..\FreeRTOS_Source/tasks.c **** 	{
4970:..\..\FreeRTOS_Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4971:..\..\FreeRTOS_Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4972:..\..\FreeRTOS_Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 5299              		.loc 1 4972 0
 5300 0022 234B     		ldr	r3, .L361+4
 5301 0024 1B68     		ldr	r3, [r3]
 5302 0026 DB6A     		ldr	r3, [r3, #44]
 5303 0028 1A46     		mov	r2, r3
 5304 002a 0123     		movs	r3, #1
 5305 002c 9340     		lsls	r3, r3, r2
 5306 002e DA43     		mvns	r2, r3
 5307 0030 204B     		ldr	r3, .L361+8
 5308 0032 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 186


 5309 0034 1340     		ands	r3, r3, r2
 5310 0036 1F4A     		ldr	r2, .L361+8
 5311 0038 1360     		str	r3, [r2]
 5312              	.L357:
4973:..\..\FreeRTOS_Source/tasks.c **** 	}
4974:..\..\FreeRTOS_Source/tasks.c **** 	else
4975:..\..\FreeRTOS_Source/tasks.c **** 	{
4976:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4977:..\..\FreeRTOS_Source/tasks.c **** 	}
4978:..\..\FreeRTOS_Source/tasks.c **** 
4979:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4980:..\..\FreeRTOS_Source/tasks.c **** 	{
4981:..\..\FreeRTOS_Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5313              		.loc 1 4981 0
 5314 003a 7B68     		ldr	r3, [r7, #4]
 5315 003c B3F1FF3F 		cmp	r3, #-1
 5316 0040 0AD1     		bne	.L358
 5317              		.loc 1 4981 0 is_stmt 0 discriminator 1
 5318 0042 3B68     		ldr	r3, [r7]
 5319 0044 002B     		cmp	r3, #0
 5320 0046 07D0     		beq	.L358
4982:..\..\FreeRTOS_Source/tasks.c **** 		{
4983:..\..\FreeRTOS_Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4984:..\..\FreeRTOS_Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4985:..\..\FreeRTOS_Source/tasks.c **** 			indefinitely. */
4986:..\..\FreeRTOS_Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5321              		.loc 1 4986 0 is_stmt 1
 5322 0048 194B     		ldr	r3, .L361+4
 5323 004a 1B68     		ldr	r3, [r3]
 5324 004c 0433     		adds	r3, r3, #4
 5325 004e 1A48     		ldr	r0, .L361+12
 5326 0050 1946     		mov	r1, r3
 5327 0052 FFF7FEFF 		bl	vListInsertEnd
 5328 0056 26E0     		b	.L356
 5329              	.L358:
4987:..\..\FreeRTOS_Source/tasks.c **** 		}
4988:..\..\FreeRTOS_Source/tasks.c **** 		else
4989:..\..\FreeRTOS_Source/tasks.c **** 		{
4990:..\..\FreeRTOS_Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4991:..\..\FreeRTOS_Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4992:..\..\FreeRTOS_Source/tasks.c **** 			kernel will manage it correctly. */
4993:..\..\FreeRTOS_Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 5330              		.loc 1 4993 0
 5331 0058 FA68     		ldr	r2, [r7, #12]
 5332 005a 7B68     		ldr	r3, [r7, #4]
 5333 005c 1344     		add	r3, r3, r2
 5334 005e BB60     		str	r3, [r7, #8]
4994:..\..\FreeRTOS_Source/tasks.c **** 
4995:..\..\FreeRTOS_Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4996:..\..\FreeRTOS_Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 5335              		.loc 1 4996 0
 5336 0060 134B     		ldr	r3, .L361+4
 5337 0062 1B68     		ldr	r3, [r3]
 5338 0064 BA68     		ldr	r2, [r7, #8]
 5339 0066 5A60     		str	r2, [r3, #4]
4997:..\..\FreeRTOS_Source/tasks.c **** 
4998:..\..\FreeRTOS_Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 187


 5340              		.loc 1 4998 0
 5341 0068 BA68     		ldr	r2, [r7, #8]
 5342 006a FB68     		ldr	r3, [r7, #12]
 5343 006c 9A42     		cmp	r2, r3
 5344 006e 09D2     		bcs	.L360
4999:..\..\FreeRTOS_Source/tasks.c **** 			{
5000:..\..\FreeRTOS_Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5001:..\..\FreeRTOS_Source/tasks.c **** 				list. */
5002:..\..\FreeRTOS_Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5345              		.loc 1 5002 0
 5346 0070 124B     		ldr	r3, .L361+16
 5347 0072 1A68     		ldr	r2, [r3]
 5348 0074 0E4B     		ldr	r3, .L361+4
 5349 0076 1B68     		ldr	r3, [r3]
 5350 0078 0433     		adds	r3, r3, #4
 5351 007a 1046     		mov	r0, r2
 5352 007c 1946     		mov	r1, r3
 5353 007e FFF7FEFF 		bl	vListInsert
 5354 0082 10E0     		b	.L356
 5355              	.L360:
5003:..\..\FreeRTOS_Source/tasks.c **** 			}
5004:..\..\FreeRTOS_Source/tasks.c **** 			else
5005:..\..\FreeRTOS_Source/tasks.c **** 			{
5006:..\..\FreeRTOS_Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5007:..\..\FreeRTOS_Source/tasks.c **** 				is used. */
5008:..\..\FreeRTOS_Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5356              		.loc 1 5008 0
 5357 0084 0E4B     		ldr	r3, .L361+20
 5358 0086 1A68     		ldr	r2, [r3]
 5359 0088 094B     		ldr	r3, .L361+4
 5360 008a 1B68     		ldr	r3, [r3]
 5361 008c 0433     		adds	r3, r3, #4
 5362 008e 1046     		mov	r0, r2
 5363 0090 1946     		mov	r1, r3
 5364 0092 FFF7FEFF 		bl	vListInsert
5009:..\..\FreeRTOS_Source/tasks.c **** 
5010:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5011:..\..\FreeRTOS_Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5012:..\..\FreeRTOS_Source/tasks.c **** 				needs to be updated too. */
5013:..\..\FreeRTOS_Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 5365              		.loc 1 5013 0
 5366 0096 0B4B     		ldr	r3, .L361+24
 5367 0098 1B68     		ldr	r3, [r3]
 5368 009a BA68     		ldr	r2, [r7, #8]
 5369 009c 9A42     		cmp	r2, r3
 5370 009e 02D2     		bcs	.L356
5014:..\..\FreeRTOS_Source/tasks.c **** 				{
5015:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 5371              		.loc 1 5015 0
 5372 00a0 084A     		ldr	r2, .L361+24
 5373 00a2 BB68     		ldr	r3, [r7, #8]
 5374 00a4 1360     		str	r3, [r2]
 5375              	.L356:
5016:..\..\FreeRTOS_Source/tasks.c **** 				}
5017:..\..\FreeRTOS_Source/tasks.c **** 				else
5018:..\..\FreeRTOS_Source/tasks.c **** 				{
5019:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 188


5020:..\..\FreeRTOS_Source/tasks.c **** 				}
5021:..\..\FreeRTOS_Source/tasks.c **** 			}
5022:..\..\FreeRTOS_Source/tasks.c **** 		}
5023:..\..\FreeRTOS_Source/tasks.c **** 	}
5024:..\..\FreeRTOS_Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5025:..\..\FreeRTOS_Source/tasks.c **** 	{
5026:..\..\FreeRTOS_Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5027:..\..\FreeRTOS_Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5028:..\..\FreeRTOS_Source/tasks.c **** 		will manage it correctly. */
5029:..\..\FreeRTOS_Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5030:..\..\FreeRTOS_Source/tasks.c **** 
5031:..\..\FreeRTOS_Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5032:..\..\FreeRTOS_Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5033:..\..\FreeRTOS_Source/tasks.c **** 
5034:..\..\FreeRTOS_Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5035:..\..\FreeRTOS_Source/tasks.c **** 		{
5036:..\..\FreeRTOS_Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5037:..\..\FreeRTOS_Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5038:..\..\FreeRTOS_Source/tasks.c **** 		}
5039:..\..\FreeRTOS_Source/tasks.c **** 		else
5040:..\..\FreeRTOS_Source/tasks.c **** 		{
5041:..\..\FreeRTOS_Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5042:..\..\FreeRTOS_Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5043:..\..\FreeRTOS_Source/tasks.c **** 
5044:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5045:..\..\FreeRTOS_Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5046:..\..\FreeRTOS_Source/tasks.c **** 			too. */
5047:..\..\FreeRTOS_Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5048:..\..\FreeRTOS_Source/tasks.c **** 			{
5049:..\..\FreeRTOS_Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5050:..\..\FreeRTOS_Source/tasks.c **** 			}
5051:..\..\FreeRTOS_Source/tasks.c **** 			else
5052:..\..\FreeRTOS_Source/tasks.c **** 			{
5053:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5054:..\..\FreeRTOS_Source/tasks.c **** 			}
5055:..\..\FreeRTOS_Source/tasks.c **** 		}
5056:..\..\FreeRTOS_Source/tasks.c **** 
5057:..\..\FreeRTOS_Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5058:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5059:..\..\FreeRTOS_Source/tasks.c **** 	}
5060:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5061:..\..\FreeRTOS_Source/tasks.c **** }
 5376              		.loc 1 5061 0
 5377 00a6 1037     		adds	r7, r7, #16
 5378              		.cfi_def_cfa_offset 8
 5379 00a8 BD46     		mov	sp, r7
 5380              		.cfi_def_cfa_register 13
 5381              		@ sp needed
 5382 00aa 80BD     		pop	{r7, pc}
 5383              	.L362:
 5384              		.align	2
 5385              	.L361:
 5386 00ac B4000000 		.word	xTickCount
 5387 00b0 00000000 		.word	pxCurrentTCB
 5388 00b4 B8000000 		.word	uxTopReadyPriority
 5389 00b8 9C000000 		.word	xSuspendedTaskList
 5390 00bc 6C000000 		.word	pxOverflowDelayedTaskList
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 189


 5391 00c0 68000000 		.word	pxDelayedTaskList
 5392 00c4 D0000000 		.word	xNextTaskUnblockTime
 5393              		.cfi_endproc
 5394              	.LFE119:
 5395              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 5396              		.bss
 5397              		.align	2
 5398              	xDelayedTaskList1.7075:
 5399 00dc 00000000 		.space	20
 5399      00000000 
 5399      00000000 
 5399      00000000 
 5399      00000000 
 5400              		.align	2
 5401              	xDelayedTaskList2.7076:
 5402 00f0 00000000 		.space	20
 5402      00000000 
 5402      00000000 
 5402      00000000 
 5402      00000000 
 5403              		.text
 5404              	.Letext0:
 5405              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 5406              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 5407              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 5408              		.file 6 "..\\..\\FreeRTOS_Source\\include/projdefs.h"
 5409              		.file 7 "..\\..\\FreeRTOS_Source\\include/list.h"
 5410              		.file 8 "..\\..\\FreeRTOS_Source\\include/task.h"
 5411              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 5412              		.section	.debug_info,"",%progbits
 5413              	.Ldebug_info0:
 5414 0000 F1160000 		.4byte	0x16f1
 5415 0004 0400     		.2byte	0x4
 5416 0006 00000000 		.4byte	.Ldebug_abbrev0
 5417 000a 04       		.byte	0x4
 5418 000b 01       		.uleb128 0x1
 5419 000c 87070000 		.4byte	.LASF228
 5420 0010 01       		.byte	0x1
 5421 0011 B90D0000 		.4byte	.LASF229
 5422 0015 AF0A0000 		.4byte	.LASF230
 5423 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5424 001d 00000000 		.4byte	0
 5425 0021 00000000 		.4byte	.Ldebug_line0
 5426 0025 02       		.uleb128 0x2
 5427 0026 20040000 		.4byte	.LASF2
 5428 002a 03       		.byte	0x3
 5429 002b D4       		.byte	0xd4
 5430 002c 30000000 		.4byte	0x30
 5431 0030 03       		.uleb128 0x3
 5432 0031 04       		.byte	0x4
 5433 0032 07       		.byte	0x7
 5434 0033 CF000000 		.4byte	.LASF0
 5435 0037 04       		.uleb128 0x4
 5436 0038 04       		.byte	0x4
 5437 0039 05       		.byte	0x5
 5438 003a 696E7400 		.ascii	"int\000"
 5439 003e 03       		.uleb128 0x3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 190


 5440 003f 01       		.byte	0x1
 5441 0040 06       		.byte	0x6
 5442 0041 0A0E0000 		.4byte	.LASF1
 5443 0045 02       		.uleb128 0x2
 5444 0046 A50A0000 		.4byte	.LASF3
 5445 004a 04       		.byte	0x4
 5446 004b 1D       		.byte	0x1d
 5447 004c 50000000 		.4byte	0x50
 5448 0050 03       		.uleb128 0x3
 5449 0051 01       		.byte	0x1
 5450 0052 08       		.byte	0x8
 5451 0053 600C0000 		.4byte	.LASF4
 5452 0057 03       		.uleb128 0x3
 5453 0058 02       		.byte	0x2
 5454 0059 05       		.byte	0x5
 5455 005a AB090000 		.4byte	.LASF5
 5456 005e 02       		.uleb128 0x2
 5457 005f A4030000 		.4byte	.LASF6
 5458 0063 04       		.byte	0x4
 5459 0064 2B       		.byte	0x2b
 5460 0065 69000000 		.4byte	0x69
 5461 0069 03       		.uleb128 0x3
 5462 006a 02       		.byte	0x2
 5463 006b 07       		.byte	0x7
 5464 006c 160E0000 		.4byte	.LASF7
 5465 0070 02       		.uleb128 0x2
 5466 0071 35010000 		.4byte	.LASF8
 5467 0075 04       		.byte	0x4
 5468 0076 3F       		.byte	0x3f
 5469 0077 7B000000 		.4byte	0x7b
 5470 007b 03       		.uleb128 0x3
 5471 007c 04       		.byte	0x4
 5472 007d 05       		.byte	0x5
 5473 007e CD090000 		.4byte	.LASF9
 5474 0082 02       		.uleb128 0x2
 5475 0083 8D0C0000 		.4byte	.LASF10
 5476 0087 04       		.byte	0x4
 5477 0088 41       		.byte	0x41
 5478 0089 8D000000 		.4byte	0x8d
 5479 008d 03       		.uleb128 0x3
 5480 008e 04       		.byte	0x4
 5481 008f 07       		.byte	0x7
 5482 0090 950B0000 		.4byte	.LASF11
 5483 0094 03       		.uleb128 0x3
 5484 0095 08       		.byte	0x8
 5485 0096 05       		.byte	0x5
 5486 0097 E0060000 		.4byte	.LASF12
 5487 009b 03       		.uleb128 0x3
 5488 009c 08       		.byte	0x8
 5489 009d 07       		.byte	0x7
 5490 009e 13030000 		.4byte	.LASF13
 5491 00a2 03       		.uleb128 0x3
 5492 00a3 04       		.byte	0x4
 5493 00a4 07       		.byte	0x7
 5494 00a5 6D0B0000 		.4byte	.LASF14
 5495 00a9 05       		.uleb128 0x5
 5496 00aa 04       		.byte	0x4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 191


 5497 00ab 06       		.uleb128 0x6
 5498 00ac 04       		.byte	0x4
 5499 00ad B1000000 		.4byte	0xb1
 5500 00b1 03       		.uleb128 0x3
 5501 00b2 01       		.byte	0x1
 5502 00b3 08       		.byte	0x8
 5503 00b4 98050000 		.4byte	.LASF15
 5504 00b8 06       		.uleb128 0x6
 5505 00b9 04       		.byte	0x4
 5506 00ba BE000000 		.4byte	0xbe
 5507 00be 07       		.uleb128 0x7
 5508 00bf B1000000 		.4byte	0xb1
 5509 00c3 02       		.uleb128 0x2
 5510 00c4 6D060000 		.4byte	.LASF16
 5511 00c8 05       		.byte	0x5
 5512 00c9 15       		.byte	0x15
 5513 00ca 45000000 		.4byte	0x45
 5514 00ce 02       		.uleb128 0x2
 5515 00cf 23090000 		.4byte	.LASF17
 5516 00d3 05       		.byte	0x5
 5517 00d4 21       		.byte	0x21
 5518 00d5 5E000000 		.4byte	0x5e
 5519 00d9 02       		.uleb128 0x2
 5520 00da FB0B0000 		.4byte	.LASF18
 5521 00de 05       		.byte	0x5
 5522 00df 2C       		.byte	0x2c
 5523 00e0 70000000 		.4byte	0x70
 5524 00e4 02       		.uleb128 0x2
 5525 00e5 70020000 		.4byte	.LASF19
 5526 00e9 05       		.byte	0x5
 5527 00ea 2D       		.byte	0x2d
 5528 00eb 82000000 		.4byte	0x82
 5529 00ef 03       		.uleb128 0x3
 5530 00f0 04       		.byte	0x4
 5531 00f1 04       		.byte	0x4
 5532 00f2 BB020000 		.4byte	.LASF20
 5533 00f6 03       		.uleb128 0x3
 5534 00f7 08       		.byte	0x8
 5535 00f8 04       		.byte	0x4
 5536 00f9 4A0E0000 		.4byte	.LASF21
 5537 00fd 08       		.uleb128 0x8
 5538 00fe E4000000 		.4byte	0xe4
 5539 0102 08       		.uleb128 0x8
 5540 0103 C3000000 		.4byte	0xc3
 5541 0107 02       		.uleb128 0x2
 5542 0108 71070000 		.4byte	.LASF22
 5543 010c 06       		.byte	0x6
 5544 010d 23       		.byte	0x23
 5545 010e 12010000 		.4byte	0x112
 5546 0112 06       		.uleb128 0x6
 5547 0113 04       		.byte	0x4
 5548 0114 18010000 		.4byte	0x118
 5549 0118 09       		.uleb128 0x9
 5550 0119 23010000 		.4byte	0x123
 5551 011d 0A       		.uleb128 0xa
 5552 011e A9000000 		.4byte	0xa9
 5553 0122 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 192


 5554 0123 02       		.uleb128 0x2
 5555 0124 02010000 		.4byte	.LASF23
 5556 0128 02       		.byte	0x2
 5557 0129 37       		.byte	0x37
 5558 012a E4000000 		.4byte	0xe4
 5559 012e 02       		.uleb128 0x2
 5560 012f 1F070000 		.4byte	.LASF24
 5561 0133 02       		.byte	0x2
 5562 0134 38       		.byte	0x38
 5563 0135 7B000000 		.4byte	0x7b
 5564 0139 02       		.uleb128 0x2
 5565 013a CF050000 		.4byte	.LASF25
 5566 013e 02       		.byte	0x2
 5567 013f 39       		.byte	0x39
 5568 0140 8D000000 		.4byte	0x8d
 5569 0144 02       		.uleb128 0x2
 5570 0145 EC080000 		.4byte	.LASF26
 5571 0149 02       		.byte	0x2
 5572 014a 3F       		.byte	0x3f
 5573 014b E4000000 		.4byte	0xe4
 5574 014f 06       		.uleb128 0x6
 5575 0150 04       		.byte	0x4
 5576 0151 C3000000 		.4byte	0xc3
 5577 0155 0B       		.uleb128 0xb
 5578 0156 3F010000 		.4byte	.LASF32
 5579 015a 14       		.byte	0x14
 5580 015b 07       		.byte	0x7
 5581 015c 8C       		.byte	0x8c
 5582 015d 9E010000 		.4byte	0x19e
 5583 0161 0C       		.uleb128 0xc
 5584 0162 C2090000 		.4byte	.LASF27
 5585 0166 07       		.byte	0x7
 5586 0167 8F       		.byte	0x8f
 5587 0168 44010000 		.4byte	0x144
 5588 016c 00       		.byte	0
 5589 016d 0C       		.uleb128 0xc
 5590 016e 80070000 		.4byte	.LASF28
 5591 0172 07       		.byte	0x7
 5592 0173 90       		.byte	0x90
 5593 0174 9E010000 		.4byte	0x19e
 5594 0178 04       		.byte	0x4
 5595 0179 0C       		.uleb128 0xc
 5596 017a 80030000 		.4byte	.LASF29
 5597 017e 07       		.byte	0x7
 5598 017f 91       		.byte	0x91
 5599 0180 9E010000 		.4byte	0x19e
 5600 0184 08       		.byte	0x8
 5601 0185 0C       		.uleb128 0xc
 5602 0186 210D0000 		.4byte	.LASF30
 5603 018a 07       		.byte	0x7
 5604 018b 92       		.byte	0x92
 5605 018c A9000000 		.4byte	0xa9
 5606 0190 0C       		.byte	0xc
 5607 0191 0C       		.uleb128 0xc
 5608 0192 460C0000 		.4byte	.LASF31
 5609 0196 07       		.byte	0x7
 5610 0197 93       		.byte	0x93
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 193


 5611 0198 D5010000 		.4byte	0x1d5
 5612 019c 10       		.byte	0x10
 5613 019d 00       		.byte	0
 5614 019e 06       		.uleb128 0x6
 5615 019f 04       		.byte	0x4
 5616 01a0 55010000 		.4byte	0x155
 5617 01a4 0B       		.uleb128 0xb
 5618 01a5 4F040000 		.4byte	.LASF33
 5619 01a9 14       		.byte	0x14
 5620 01aa 07       		.byte	0x7
 5621 01ab A4       		.byte	0xa4
 5622 01ac D5010000 		.4byte	0x1d5
 5623 01b0 0C       		.uleb128 0xc
 5624 01b1 0B000000 		.4byte	.LASF34
 5625 01b5 07       		.byte	0x7
 5626 01b6 A7       		.byte	0xa7
 5627 01b7 22020000 		.4byte	0x222
 5628 01bb 00       		.byte	0
 5629 01bc 0C       		.uleb128 0xc
 5630 01bd FA000000 		.4byte	.LASF35
 5631 01c1 07       		.byte	0x7
 5632 01c2 A8       		.byte	0xa8
 5633 01c3 27020000 		.4byte	0x227
 5634 01c7 04       		.byte	0x4
 5635 01c8 0C       		.uleb128 0xc
 5636 01c9 0F060000 		.4byte	.LASF36
 5637 01cd 07       		.byte	0x7
 5638 01ce A9       		.byte	0xa9
 5639 01cf 17020000 		.4byte	0x217
 5640 01d3 08       		.byte	0x8
 5641 01d4 00       		.byte	0
 5642 01d5 06       		.uleb128 0x6
 5643 01d6 04       		.byte	0x4
 5644 01d7 A4010000 		.4byte	0x1a4
 5645 01db 02       		.uleb128 0x2
 5646 01dc 9D050000 		.4byte	.LASF37
 5647 01e0 07       		.byte	0x7
 5648 01e1 96       		.byte	0x96
 5649 01e2 55010000 		.4byte	0x155
 5650 01e6 0B       		.uleb128 0xb
 5651 01e7 32040000 		.4byte	.LASF38
 5652 01eb 0C       		.byte	0xc
 5653 01ec 07       		.byte	0x7
 5654 01ed 98       		.byte	0x98
 5655 01ee 17020000 		.4byte	0x217
 5656 01f2 0C       		.uleb128 0xc
 5657 01f3 C2090000 		.4byte	.LASF27
 5658 01f7 07       		.byte	0x7
 5659 01f8 9B       		.byte	0x9b
 5660 01f9 44010000 		.4byte	0x144
 5661 01fd 00       		.byte	0
 5662 01fe 0C       		.uleb128 0xc
 5663 01ff 80070000 		.4byte	.LASF28
 5664 0203 07       		.byte	0x7
 5665 0204 9C       		.byte	0x9c
 5666 0205 9E010000 		.4byte	0x19e
 5667 0209 04       		.byte	0x4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 194


 5668 020a 0C       		.uleb128 0xc
 5669 020b 80030000 		.4byte	.LASF29
 5670 020f 07       		.byte	0x7
 5671 0210 9D       		.byte	0x9d
 5672 0211 9E010000 		.4byte	0x19e
 5673 0215 08       		.byte	0x8
 5674 0216 00       		.byte	0
 5675 0217 02       		.uleb128 0x2
 5676 0218 29060000 		.4byte	.LASF39
 5677 021c 07       		.byte	0x7
 5678 021d 9F       		.byte	0x9f
 5679 021e E6010000 		.4byte	0x1e6
 5680 0222 08       		.uleb128 0x8
 5681 0223 39010000 		.4byte	0x139
 5682 0227 06       		.uleb128 0x6
 5683 0228 04       		.byte	0x4
 5684 0229 DB010000 		.4byte	0x1db
 5685 022d 02       		.uleb128 0x2
 5686 022e D8080000 		.4byte	.LASF40
 5687 0232 07       		.byte	0x7
 5688 0233 AB       		.byte	0xab
 5689 0234 A4010000 		.4byte	0x1a4
 5690 0238 02       		.uleb128 0x2
 5691 0239 7E080000 		.4byte	.LASF41
 5692 023d 08       		.byte	0x8
 5693 023e 3E       		.byte	0x3e
 5694 023f 43020000 		.4byte	0x243
 5695 0243 06       		.uleb128 0x6
 5696 0244 04       		.byte	0x4
 5697 0245 49020000 		.4byte	0x249
 5698 0249 0D       		.uleb128 0xd
 5699 024a 14050000 		.4byte	.LASF42
 5700 024e 50       		.byte	0x50
 5701 024f 01       		.byte	0x1
 5702 0250 0D01     		.2byte	0x10d
 5703 0252 D9020000 		.4byte	0x2d9
 5704 0256 0E       		.uleb128 0xe
 5705 0257 660E0000 		.4byte	.LASF43
 5706 025b 01       		.byte	0x1
 5707 025c 0F01     		.2byte	0x10f
 5708 025e BA030000 		.4byte	0x3ba
 5709 0262 00       		.byte	0
 5710 0263 0E       		.uleb128 0xe
 5711 0264 350E0000 		.4byte	.LASF44
 5712 0268 01       		.byte	0x1
 5713 0269 1501     		.2byte	0x115
 5714 026b DB010000 		.4byte	0x1db
 5715 026f 04       		.byte	0x4
 5716 0270 0E       		.uleb128 0xe
 5717 0271 E90C0000 		.4byte	.LASF45
 5718 0275 01       		.byte	0x1
 5719 0276 1601     		.2byte	0x116
 5720 0278 DB010000 		.4byte	0x1db
 5721 027c 18       		.byte	0x18
 5722 027d 0E       		.uleb128 0xe
 5723 027e 1B000000 		.4byte	.LASF46
 5724 0282 01       		.byte	0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 195


 5725 0283 1701     		.2byte	0x117
 5726 0285 39010000 		.4byte	0x139
 5727 0289 2C       		.byte	0x2c
 5728 028a 0E       		.uleb128 0xe
 5729 028b 500A0000 		.4byte	.LASF47
 5730 028f 01       		.byte	0x1
 5731 0290 1801     		.2byte	0x118
 5732 0292 B4030000 		.4byte	0x3b4
 5733 0296 30       		.byte	0x30
 5734 0297 0E       		.uleb128 0xe
 5735 0298 00000000 		.4byte	.LASF48
 5736 029c 01       		.byte	0x1
 5737 029d 1901     		.2byte	0x119
 5738 029f C5030000 		.4byte	0x3c5
 5739 02a3 34       		.byte	0x34
 5740 02a4 0E       		.uleb128 0xe
 5741 02a5 CA0C0000 		.4byte	.LASF49
 5742 02a9 01       		.byte	0x1
 5743 02aa 2901     		.2byte	0x129
 5744 02ac 39010000 		.4byte	0x139
 5745 02b0 40       		.byte	0x40
 5746 02b1 0E       		.uleb128 0xe
 5747 02b2 59050000 		.4byte	.LASF50
 5748 02b6 01       		.byte	0x1
 5749 02b7 2A01     		.2byte	0x12a
 5750 02b9 39010000 		.4byte	0x139
 5751 02bd 44       		.byte	0x44
 5752 02be 0E       		.uleb128 0xe
 5753 02bf 27050000 		.4byte	.LASF51
 5754 02c3 01       		.byte	0x1
 5755 02c4 4501     		.2byte	0x145
 5756 02c6 FD000000 		.4byte	0xfd
 5757 02ca 48       		.byte	0x48
 5758 02cb 0E       		.uleb128 0xe
 5759 02cc 79020000 		.4byte	.LASF52
 5760 02d0 01       		.byte	0x1
 5761 02d1 4601     		.2byte	0x146
 5762 02d3 02010000 		.4byte	0x102
 5763 02d7 4C       		.byte	0x4c
 5764 02d8 00       		.byte	0
 5765 02d9 0F       		.uleb128 0xf
 5766 02da 01       		.byte	0x1
 5767 02db 08       		.byte	0x8
 5768 02dc 48       		.byte	0x48
 5769 02dd 06030000 		.4byte	0x306
 5770 02e1 10       		.uleb128 0x10
 5771 02e2 340C0000 		.4byte	.LASF53
 5772 02e6 00       		.sleb128 0
 5773 02e7 10       		.uleb128 0x10
 5774 02e8 75060000 		.4byte	.LASF54
 5775 02ec 01       		.sleb128 1
 5776 02ed 10       		.uleb128 0x10
 5777 02ee 360D0000 		.4byte	.LASF55
 5778 02f2 02       		.sleb128 2
 5779 02f3 10       		.uleb128 0x10
 5780 02f4 3E000000 		.4byte	.LASF56
 5781 02f8 03       		.sleb128 3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 196


 5782 02f9 10       		.uleb128 0x10
 5783 02fa EE060000 		.4byte	.LASF57
 5784 02fe 04       		.sleb128 4
 5785 02ff 10       		.uleb128 0x10
 5786 0300 49000000 		.4byte	.LASF58
 5787 0304 05       		.sleb128 5
 5788 0305 00       		.byte	0
 5789 0306 02       		.uleb128 0x2
 5790 0307 CD080000 		.4byte	.LASF59
 5791 030b 08       		.byte	0x8
 5792 030c 4F       		.byte	0x4f
 5793 030d D9020000 		.4byte	0x2d9
 5794 0311 0F       		.uleb128 0xf
 5795 0312 01       		.byte	0x1
 5796 0313 08       		.byte	0x8
 5797 0314 53       		.byte	0x53
 5798 0315 38030000 		.4byte	0x338
 5799 0319 10       		.uleb128 0x10
 5800 031a A4000000 		.4byte	.LASF60
 5801 031e 00       		.sleb128 0
 5802 031f 10       		.uleb128 0x10
 5803 0320 0B090000 		.4byte	.LASF61
 5804 0324 01       		.sleb128 1
 5805 0325 10       		.uleb128 0x10
 5806 0326 27040000 		.4byte	.LASF62
 5807 032a 02       		.sleb128 2
 5808 032b 10       		.uleb128 0x10
 5809 032c FC020000 		.4byte	.LASF63
 5810 0330 03       		.sleb128 3
 5811 0331 10       		.uleb128 0x10
 5812 0332 A8050000 		.4byte	.LASF64
 5813 0336 04       		.sleb128 4
 5814 0337 00       		.byte	0
 5815 0338 02       		.uleb128 0x2
 5816 0339 12040000 		.4byte	.LASF65
 5817 033d 08       		.byte	0x8
 5818 033e 59       		.byte	0x59
 5819 033f 11030000 		.4byte	0x311
 5820 0343 0B       		.uleb128 0xb
 5821 0344 0E010000 		.4byte	.LASF66
 5822 0348 08       		.byte	0x8
 5823 0349 08       		.byte	0x8
 5824 034a 5E       		.byte	0x5e
 5825 034b 68030000 		.4byte	0x368
 5826 034f 0C       		.uleb128 0xc
 5827 0350 E1010000 		.4byte	.LASF67
 5828 0354 08       		.byte	0x8
 5829 0355 60       		.byte	0x60
 5830 0356 2E010000 		.4byte	0x12e
 5831 035a 00       		.byte	0
 5832 035b 0C       		.uleb128 0xc
 5833 035c 53070000 		.4byte	.LASF68
 5834 0360 08       		.byte	0x8
 5835 0361 61       		.byte	0x61
 5836 0362 44010000 		.4byte	0x144
 5837 0366 04       		.byte	0x4
 5838 0367 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 197


 5839 0368 02       		.uleb128 0x2
 5840 0369 4A080000 		.4byte	.LASF69
 5841 036d 08       		.byte	0x8
 5842 036e 62       		.byte	0x62
 5843 036f 43030000 		.4byte	0x343
 5844 0373 0B       		.uleb128 0xb
 5845 0374 14090000 		.4byte	.LASF70
 5846 0378 0C       		.byte	0xc
 5847 0379 08       		.byte	0x8
 5848 037a 67       		.byte	0x67
 5849 037b A4030000 		.4byte	0x3a4
 5850 037f 0C       		.uleb128 0xc
 5851 0380 E8050000 		.4byte	.LASF71
 5852 0384 08       		.byte	0x8
 5853 0385 69       		.byte	0x69
 5854 0386 A9000000 		.4byte	0xa9
 5855 038a 00       		.byte	0
 5856 038b 0C       		.uleb128 0xc
 5857 038c 0F070000 		.4byte	.LASF72
 5858 0390 08       		.byte	0x8
 5859 0391 6A       		.byte	0x6a
 5860 0392 E4000000 		.4byte	0xe4
 5861 0396 04       		.byte	0x4
 5862 0397 0C       		.uleb128 0xc
 5863 0398 08020000 		.4byte	.LASF73
 5864 039c 08       		.byte	0x8
 5865 039d 6B       		.byte	0x6b
 5866 039e E4000000 		.4byte	0xe4
 5867 03a2 08       		.byte	0x8
 5868 03a3 00       		.byte	0
 5869 03a4 02       		.uleb128 0x2
 5870 03a5 9E060000 		.4byte	.LASF74
 5871 03a9 08       		.byte	0x8
 5872 03aa 6C       		.byte	0x6c
 5873 03ab 73030000 		.4byte	0x373
 5874 03af 07       		.uleb128 0x7
 5875 03b0 B8000000 		.4byte	0xb8
 5876 03b4 06       		.uleb128 0x6
 5877 03b5 04       		.byte	0x4
 5878 03b6 23010000 		.4byte	0x123
 5879 03ba 06       		.uleb128 0x6
 5880 03bb 04       		.byte	0x4
 5881 03bc C0030000 		.4byte	0x3c0
 5882 03c0 08       		.uleb128 0x8
 5883 03c1 23010000 		.4byte	0x123
 5884 03c5 11       		.uleb128 0x11
 5885 03c6 B1000000 		.4byte	0xb1
 5886 03ca D5030000 		.4byte	0x3d5
 5887 03ce 12       		.uleb128 0x12
 5888 03cf A2000000 		.4byte	0xa2
 5889 03d3 0B       		.byte	0xb
 5890 03d4 00       		.byte	0
 5891 03d5 13       		.uleb128 0x13
 5892 03d6 52020000 		.4byte	.LASF75
 5893 03da 01       		.byte	0x1
 5894 03db 5301     		.2byte	0x153
 5895 03dd 49020000 		.4byte	0x249
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 198


 5896 03e1 13       		.uleb128 0x13
 5897 03e2 0E0D0000 		.4byte	.LASF76
 5898 03e6 01       		.byte	0x1
 5899 03e7 5701     		.2byte	0x157
 5900 03e9 D5030000 		.4byte	0x3d5
 5901 03ed 14       		.uleb128 0x14
 5902 03ee C2060000 		.4byte	.LASF81
 5903 03f2 02       		.byte	0x2
 5904 03f3 CF       		.byte	0xcf
 5905 03f4 E4000000 		.4byte	0xe4
 5906 03f8 03       		.byte	0x3
 5907 03f9 14040000 		.4byte	0x414
 5908 03fd 15       		.uleb128 0x15
 5909 03fe 96020000 		.4byte	.LASF77
 5910 0402 02       		.byte	0x2
 5911 0403 D1       		.byte	0xd1
 5912 0404 E4000000 		.4byte	0xe4
 5913 0408 15       		.uleb128 0x15
 5914 0409 C2050000 		.4byte	.LASF78
 5915 040d 02       		.byte	0x2
 5916 040e D1       		.byte	0xd1
 5917 040f E4000000 		.4byte	0xe4
 5918 0413 00       		.byte	0
 5919 0414 16       		.uleb128 0x16
 5920 0415 9C040000 		.4byte	.LASF79
 5921 0419 02       		.byte	0x2
 5922 041a E3       		.byte	0xe3
 5923 041b 03       		.byte	0x3
 5924 041c 2C040000 		.4byte	0x42c
 5925 0420 17       		.uleb128 0x17
 5926 0421 93080000 		.4byte	.LASF83
 5927 0425 02       		.byte	0x2
 5928 0426 E3       		.byte	0xe3
 5929 0427 E4000000 		.4byte	0xe4
 5930 042b 00       		.byte	0
 5931 042c 16       		.uleb128 0x16
 5932 042d A70B0000 		.4byte	.LASF80
 5933 0431 02       		.byte	0x2
 5934 0432 BF       		.byte	0xbf
 5935 0433 03       		.byte	0x3
 5936 0434 44040000 		.4byte	0x444
 5937 0438 15       		.uleb128 0x15
 5938 0439 C2050000 		.4byte	.LASF78
 5939 043d 02       		.byte	0x2
 5940 043e C1       		.byte	0xc1
 5941 043f E4000000 		.4byte	0xe4
 5942 0443 00       		.byte	0
 5943 0444 14       		.uleb128 0x14
 5944 0445 F7060000 		.4byte	.LASF82
 5945 0449 02       		.byte	0x2
 5946 044a 82       		.byte	0x82
 5947 044b C3000000 		.4byte	0xc3
 5948 044f 03       		.byte	0x3
 5949 0450 6B040000 		.4byte	0x46b
 5950 0454 17       		.uleb128 0x17
 5951 0455 B4010000 		.4byte	.LASF84
 5952 0459 02       		.byte	0x2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 199


 5953 045a 82       		.byte	0x82
 5954 045b E4000000 		.4byte	0xe4
 5955 045f 15       		.uleb128 0x15
 5956 0460 2A0B0000 		.4byte	.LASF85
 5957 0464 02       		.byte	0x2
 5958 0465 84       		.byte	0x84
 5959 0466 C3000000 		.4byte	0xc3
 5960 046a 00       		.byte	0
 5961 046b 18       		.uleb128 0x18
 5962 046c 48060000 		.4byte	.LASF109
 5963 0470 01       		.byte	0x1
 5964 0471 D302     		.2byte	0x2d3
 5965 0473 2E010000 		.4byte	0x12e
 5966 0477 00000000 		.4byte	.LFB68
 5967 047b 82000000 		.4byte	.LFE68-.LFB68
 5968 047f 01       		.uleb128 0x1
 5969 0480 9C       		.byte	0x9c
 5970 0481 17050000 		.4byte	0x517
 5971 0485 19       		.uleb128 0x19
 5972 0486 93060000 		.4byte	.LASF86
 5973 048a 01       		.byte	0x1
 5974 048b D302     		.2byte	0x2d3
 5975 048d 07010000 		.4byte	0x107
 5976 0491 02       		.uleb128 0x2
 5977 0492 91       		.byte	0x91
 5978 0493 64       		.sleb128 -28
 5979 0494 19       		.uleb128 0x19
 5980 0495 4B020000 		.4byte	.LASF87
 5981 0499 01       		.byte	0x1
 5982 049a D402     		.2byte	0x2d4
 5983 049c AF030000 		.4byte	0x3af
 5984 04a0 02       		.uleb128 0x2
 5985 04a1 91       		.byte	0x91
 5986 04a2 60       		.sleb128 -32
 5987 04a3 19       		.uleb128 0x19
 5988 04a4 D0020000 		.4byte	.LASF88
 5989 04a8 01       		.byte	0x1
 5990 04a9 D502     		.2byte	0x2d5
 5991 04ab 17050000 		.4byte	0x517
 5992 04af 02       		.uleb128 0x2
 5993 04b0 91       		.byte	0x91
 5994 04b1 5E       		.sleb128 -34
 5995 04b2 19       		.uleb128 0x19
 5996 04b3 B5090000 		.4byte	.LASF89
 5997 04b7 01       		.byte	0x1
 5998 04b8 D602     		.2byte	0x2d6
 5999 04ba 1C050000 		.4byte	0x51c
 6000 04be 02       		.uleb128 0x2
 6001 04bf 91       		.byte	0x91
 6002 04c0 58       		.sleb128 -40
 6003 04c1 19       		.uleb128 0x19
 6004 04c2 1B000000 		.4byte	.LASF46
 6005 04c6 01       		.byte	0x1
 6006 04c7 D702     		.2byte	0x2d7
 6007 04c9 39010000 		.4byte	0x139
 6008 04cd 02       		.uleb128 0x2
 6009 04ce 91       		.byte	0x91
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 200


 6010 04cf 00       		.sleb128 0
 6011 04d0 19       		.uleb128 0x19
 6012 04d1 A60E0000 		.4byte	.LASF90
 6013 04d5 01       		.byte	0x1
 6014 04d6 D802     		.2byte	0x2d8
 6015 04d8 21050000 		.4byte	0x521
 6016 04dc 02       		.uleb128 0x2
 6017 04dd 91       		.byte	0x91
 6018 04de 04       		.sleb128 4
 6019 04df 1A       		.uleb128 0x1a
 6020 04e0 8A060000 		.4byte	.LASF91
 6021 04e4 01       		.byte	0x1
 6022 04e5 DA02     		.2byte	0x2da
 6023 04e7 2C050000 		.4byte	0x52c
 6024 04eb 02       		.uleb128 0x2
 6025 04ec 91       		.byte	0x91
 6026 04ed 74       		.sleb128 -12
 6027 04ee 1A       		.uleb128 0x1a
 6028 04ef 650B0000 		.4byte	.LASF92
 6029 04f3 01       		.byte	0x1
 6030 04f4 DB02     		.2byte	0x2db
 6031 04f6 2E010000 		.4byte	0x12e
 6032 04fa 02       		.uleb128 0x2
 6033 04fb 91       		.byte	0x91
 6034 04fc 70       		.sleb128 -16
 6035 04fd 1B       		.uleb128 0x1b
 6036 04fe 10000000 		.4byte	.LBB27
 6037 0502 34000000 		.4byte	.LBE27-.LBB27
 6038 0506 1A       		.uleb128 0x1a
 6039 0507 500A0000 		.4byte	.LASF47
 6040 050b 01       		.byte	0x1
 6041 050c F802     		.2byte	0x2f8
 6042 050e B4030000 		.4byte	0x3b4
 6043 0512 02       		.uleb128 0x2
 6044 0513 91       		.byte	0x91
 6045 0514 6C       		.sleb128 -20
 6046 0515 00       		.byte	0
 6047 0516 00       		.byte	0
 6048 0517 07       		.uleb128 0x7
 6049 0518 CE000000 		.4byte	0xce
 6050 051c 07       		.uleb128 0x7
 6051 051d A9000000 		.4byte	0xa9
 6052 0521 07       		.uleb128 0x7
 6053 0522 26050000 		.4byte	0x526
 6054 0526 06       		.uleb128 0x6
 6055 0527 04       		.byte	0x4
 6056 0528 38020000 		.4byte	0x238
 6057 052c 06       		.uleb128 0x6
 6058 052d 04       		.byte	0x4
 6059 052e E1030000 		.4byte	0x3e1
 6060 0532 1C       		.uleb128 0x1c
 6061 0533 75000000 		.4byte	.LASF95
 6062 0537 01       		.byte	0x1
 6063 0538 2E03     		.2byte	0x32e
 6064 053a 00000000 		.4byte	.LFB69
 6065 053e EC000000 		.4byte	.LFE69-.LFB69
 6066 0542 01       		.uleb128 0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 201


 6067 0543 9C       		.byte	0x9c
 6068 0544 DD050000 		.4byte	0x5dd
 6069 0548 19       		.uleb128 0x19
 6070 0549 93060000 		.4byte	.LASF86
 6071 054d 01       		.byte	0x1
 6072 054e 2E03     		.2byte	0x32e
 6073 0550 07010000 		.4byte	0x107
 6074 0554 02       		.uleb128 0x2
 6075 0555 91       		.byte	0x91
 6076 0556 6C       		.sleb128 -20
 6077 0557 19       		.uleb128 0x19
 6078 0558 4B020000 		.4byte	.LASF87
 6079 055c 01       		.byte	0x1
 6080 055d 2F03     		.2byte	0x32f
 6081 055f AF030000 		.4byte	0x3af
 6082 0563 02       		.uleb128 0x2
 6083 0564 91       		.byte	0x91
 6084 0565 68       		.sleb128 -24
 6085 0566 19       		.uleb128 0x19
 6086 0567 DB050000 		.4byte	.LASF93
 6087 056b 01       		.byte	0x1
 6088 056c 3003     		.2byte	0x330
 6089 056e DD050000 		.4byte	0x5dd
 6090 0572 02       		.uleb128 0x2
 6091 0573 91       		.byte	0x91
 6092 0574 64       		.sleb128 -28
 6093 0575 19       		.uleb128 0x19
 6094 0576 B5090000 		.4byte	.LASF89
 6095 057a 01       		.byte	0x1
 6096 057b 3103     		.2byte	0x331
 6097 057d 1C050000 		.4byte	0x51c
 6098 0581 02       		.uleb128 0x2
 6099 0582 91       		.byte	0x91
 6100 0583 60       		.sleb128 -32
 6101 0584 19       		.uleb128 0x19
 6102 0585 1B000000 		.4byte	.LASF46
 6103 0589 01       		.byte	0x1
 6104 058a 3203     		.2byte	0x332
 6105 058c 39010000 		.4byte	0x139
 6106 0590 02       		.uleb128 0x2
 6107 0591 91       		.byte	0x91
 6108 0592 00       		.sleb128 0
 6109 0593 19       		.uleb128 0x19
 6110 0594 A60E0000 		.4byte	.LASF90
 6111 0598 01       		.byte	0x1
 6112 0599 3303     		.2byte	0x333
 6113 059b 21050000 		.4byte	0x521
 6114 059f 02       		.uleb128 0x2
 6115 05a0 91       		.byte	0x91
 6116 05a1 04       		.sleb128 4
 6117 05a2 19       		.uleb128 0x19
 6118 05a3 8A060000 		.4byte	.LASF91
 6119 05a7 01       		.byte	0x1
 6120 05a8 3403     		.2byte	0x334
 6121 05aa 2C050000 		.4byte	0x52c
 6122 05ae 02       		.uleb128 0x2
 6123 05af 91       		.byte	0x91
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 202


 6124 05b0 08       		.sleb128 8
 6125 05b1 19       		.uleb128 0x19
 6126 05b2 910D0000 		.4byte	.LASF94
 6127 05b6 01       		.byte	0x1
 6128 05b7 3503     		.2byte	0x335
 6129 05b9 E2050000 		.4byte	0x5e2
 6130 05bd 02       		.uleb128 0x2
 6131 05be 91       		.byte	0x91
 6132 05bf 0C       		.sleb128 12
 6133 05c0 1A       		.uleb128 0x1a
 6134 05c1 660E0000 		.4byte	.LASF43
 6135 05c5 01       		.byte	0x1
 6136 05c6 3703     		.2byte	0x337
 6137 05c8 B4030000 		.4byte	0x3b4
 6138 05cc 02       		.uleb128 0x2
 6139 05cd 91       		.byte	0x91
 6140 05ce 70       		.sleb128 -16
 6141 05cf 1D       		.uleb128 0x1d
 6142 05d0 7800     		.ascii	"x\000"
 6143 05d2 01       		.byte	0x1
 6144 05d3 3803     		.2byte	0x338
 6145 05d5 39010000 		.4byte	0x139
 6146 05d9 02       		.uleb128 0x2
 6147 05da 91       		.byte	0x91
 6148 05db 74       		.sleb128 -12
 6149 05dc 00       		.byte	0
 6150 05dd 07       		.uleb128 0x7
 6151 05de E4000000 		.4byte	0xe4
 6152 05e2 07       		.uleb128 0x7
 6153 05e3 E7050000 		.4byte	0x5e7
 6154 05e7 06       		.uleb128 0x6
 6155 05e8 04       		.byte	0x4
 6156 05e9 ED050000 		.4byte	0x5ed
 6157 05ed 07       		.uleb128 0x7
 6158 05ee A4030000 		.4byte	0x3a4
 6159 05f2 1C       		.uleb128 0x1c
 6160 05f3 54060000 		.4byte	.LASF96
 6161 05f7 01       		.byte	0x1
 6162 05f8 FC03     		.2byte	0x3fc
 6163 05fa 00000000 		.4byte	.LFB70
 6164 05fe D8000000 		.4byte	.LFE70-.LFB70
 6165 0602 01       		.uleb128 0x1
 6166 0603 9C       		.byte	0x9c
 6167 0604 18060000 		.4byte	0x618
 6168 0608 19       		.uleb128 0x19
 6169 0609 8A060000 		.4byte	.LASF91
 6170 060d 01       		.byte	0x1
 6171 060e FC03     		.2byte	0x3fc
 6172 0610 2C050000 		.4byte	0x52c
 6173 0614 02       		.uleb128 0x2
 6174 0615 91       		.byte	0x91
 6175 0616 74       		.sleb128 -12
 6176 0617 00       		.byte	0
 6177 0618 1E       		.uleb128 0x1e
 6178 0619 2C090000 		.4byte	.LASF99
 6179 061d 01       		.byte	0x1
 6180 061e 5104     		.2byte	0x451
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 203


 6181 0620 00000000 		.4byte	.LFB71
 6182 0624 FC000000 		.4byte	.LFE71-.LFB71
 6183 0628 01       		.uleb128 0x1
 6184 0629 9C       		.byte	0x9c
 6185 062a 4D060000 		.4byte	0x64d
 6186 062e 19       		.uleb128 0x19
 6187 062f 580A0000 		.4byte	.LASF97
 6188 0633 01       		.byte	0x1
 6189 0634 5104     		.2byte	0x451
 6190 0636 38020000 		.4byte	0x238
 6191 063a 02       		.uleb128 0x2
 6192 063b 91       		.byte	0x91
 6193 063c 6C       		.sleb128 -20
 6194 063d 1A       		.uleb128 0x1a
 6195 063e 440E0000 		.4byte	.LASF98
 6196 0642 01       		.byte	0x1
 6197 0643 5304     		.2byte	0x453
 6198 0645 2C050000 		.4byte	0x52c
 6199 0649 02       		.uleb128 0x2
 6200 064a 91       		.byte	0x91
 6201 064b 74       		.sleb128 -12
 6202 064c 00       		.byte	0
 6203 064d 1E       		.uleb128 0x1e
 6204 064e D90C0000 		.4byte	.LASF100
 6205 0652 01       		.byte	0x1
 6206 0653 AD04     		.2byte	0x4ad
 6207 0655 00000000 		.4byte	.LFB72
 6208 0659 A0000000 		.4byte	.LFE72-.LFB72
 6209 065d 01       		.uleb128 0x1
 6210 065e 9C       		.byte	0x9c
 6211 065f C8060000 		.4byte	0x6c8
 6212 0663 19       		.uleb128 0x19
 6213 0664 920A0000 		.4byte	.LASF101
 6214 0668 01       		.byte	0x1
 6215 0669 AD04     		.2byte	0x4ad
 6216 066b C8060000 		.4byte	0x6c8
 6217 066f 02       		.uleb128 0x2
 6218 0670 91       		.byte	0x91
 6219 0671 64       		.sleb128 -28
 6220 0672 19       		.uleb128 0x19
 6221 0673 FB0D0000 		.4byte	.LASF102
 6222 0677 01       		.byte	0x1
 6223 0678 AD04     		.2byte	0x4ad
 6224 067a D3060000 		.4byte	0x6d3
 6225 067e 02       		.uleb128 0x2
 6226 067f 91       		.byte	0x91
 6227 0680 60       		.sleb128 -32
 6228 0681 1A       		.uleb128 0x1a
 6229 0682 290E0000 		.4byte	.LASF103
 6230 0686 01       		.byte	0x1
 6231 0687 AF04     		.2byte	0x4af
 6232 0689 44010000 		.4byte	0x144
 6233 068d 02       		.uleb128 0x2
 6234 068e 91       		.byte	0x91
 6235 068f 6C       		.sleb128 -20
 6236 0690 1A       		.uleb128 0x1a
 6237 0691 4C0D0000 		.4byte	.LASF104
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 204


 6238 0695 01       		.byte	0x1
 6239 0696 B004     		.2byte	0x4b0
 6240 0698 2E010000 		.4byte	0x12e
 6241 069c 02       		.uleb128 0x2
 6242 069d 91       		.byte	0x91
 6243 069e 68       		.sleb128 -24
 6244 069f 1A       		.uleb128 0x1a
 6245 06a0 F6050000 		.4byte	.LASF105
 6246 06a4 01       		.byte	0x1
 6247 06a5 B004     		.2byte	0x4b0
 6248 06a7 2E010000 		.4byte	0x12e
 6249 06ab 02       		.uleb128 0x2
 6250 06ac 91       		.byte	0x91
 6251 06ad 74       		.sleb128 -12
 6252 06ae 1B       		.uleb128 0x1b
 6253 06af 12000000 		.4byte	.LBB28
 6254 06b3 62000000 		.4byte	.LBE28-.LBB28
 6255 06b7 1A       		.uleb128 0x1a
 6256 06b8 79040000 		.4byte	.LASF106
 6257 06bc 01       		.byte	0x1
 6258 06bd BA04     		.2byte	0x4ba
 6259 06bf D3060000 		.4byte	0x6d3
 6260 06c3 02       		.uleb128 0x2
 6261 06c4 91       		.byte	0x91
 6262 06c5 70       		.sleb128 -16
 6263 06c6 00       		.byte	0
 6264 06c7 00       		.byte	0
 6265 06c8 07       		.uleb128 0x7
 6266 06c9 CD060000 		.4byte	0x6cd
 6267 06cd 06       		.uleb128 0x6
 6268 06ce 04       		.byte	0x4
 6269 06cf 44010000 		.4byte	0x144
 6270 06d3 07       		.uleb128 0x7
 6271 06d4 44010000 		.4byte	0x144
 6272 06d8 1E       		.uleb128 0x1e
 6273 06d9 EB040000 		.4byte	.LASF107
 6274 06dd 01       		.byte	0x1
 6275 06de 0105     		.2byte	0x501
 6276 06e0 00000000 		.4byte	.LFB73
 6277 06e4 44000000 		.4byte	.LFE73-.LFB73
 6278 06e8 01       		.uleb128 0x1
 6279 06e9 9C       		.byte	0x9c
 6280 06ea 0D070000 		.4byte	0x70d
 6281 06ee 19       		.uleb128 0x19
 6282 06ef 520C0000 		.4byte	.LASF108
 6283 06f3 01       		.byte	0x1
 6284 06f4 0105     		.2byte	0x501
 6285 06f6 D3060000 		.4byte	0x6d3
 6286 06fa 02       		.uleb128 0x2
 6287 06fb 91       		.byte	0x91
 6288 06fc 6C       		.sleb128 -20
 6289 06fd 1A       		.uleb128 0x1a
 6290 06fe 4C0D0000 		.4byte	.LASF104
 6291 0702 01       		.byte	0x1
 6292 0703 0305     		.2byte	0x503
 6293 0705 2E010000 		.4byte	0x12e
 6294 0709 02       		.uleb128 0x2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 205


 6295 070a 91       		.byte	0x91
 6296 070b 74       		.sleb128 -12
 6297 070c 00       		.byte	0
 6298 070d 18       		.uleb128 0x18
 6299 070e 7C060000 		.4byte	.LASF110
 6300 0712 01       		.byte	0x1
 6301 0713 2E05     		.2byte	0x52e
 6302 0715 06030000 		.4byte	0x306
 6303 0719 00000000 		.4byte	.LFB74
 6304 071d B0000000 		.4byte	.LFE74-.LFB74
 6305 0721 01       		.uleb128 0x1
 6306 0722 9C       		.byte	0x9c
 6307 0723 82070000 		.4byte	0x782
 6308 0727 19       		.uleb128 0x19
 6309 0728 05090000 		.4byte	.LASF111
 6310 072c 01       		.byte	0x1
 6311 072d 2E05     		.2byte	0x52e
 6312 072f 38020000 		.4byte	0x238
 6313 0733 02       		.uleb128 0x2
 6314 0734 91       		.byte	0x91
 6315 0735 5C       		.sleb128 -36
 6316 0736 1A       		.uleb128 0x1a
 6317 0737 15020000 		.4byte	.LASF112
 6318 073b 01       		.byte	0x1
 6319 073c 3005     		.2byte	0x530
 6320 073e 06030000 		.4byte	0x306
 6321 0742 02       		.uleb128 0x2
 6322 0743 91       		.byte	0x91
 6323 0744 77       		.sleb128 -9
 6324 0745 1A       		.uleb128 0x1a
 6325 0746 32000000 		.4byte	.LASF113
 6326 074a 01       		.byte	0x1
 6327 074b 3105     		.2byte	0x531
 6328 074d 82070000 		.4byte	0x782
 6329 0751 02       		.uleb128 0x2
 6330 0752 91       		.byte	0x91
 6331 0753 6C       		.sleb128 -20
 6332 0754 1A       		.uleb128 0x1a
 6333 0755 C1000000 		.4byte	.LASF114
 6334 0759 01       		.byte	0x1
 6335 075a 3105     		.2byte	0x531
 6336 075c 82070000 		.4byte	0x782
 6337 0760 02       		.uleb128 0x2
 6338 0761 91       		.byte	0x91
 6339 0762 68       		.sleb128 -24
 6340 0763 1A       		.uleb128 0x1a
 6341 0764 F0010000 		.4byte	.LASF115
 6342 0768 01       		.byte	0x1
 6343 0769 3105     		.2byte	0x531
 6344 076b 82070000 		.4byte	0x782
 6345 076f 02       		.uleb128 0x2
 6346 0770 91       		.byte	0x91
 6347 0771 64       		.sleb128 -28
 6348 0772 1A       		.uleb128 0x1a
 6349 0773 440E0000 		.4byte	.LASF98
 6350 0777 01       		.byte	0x1
 6351 0778 3205     		.2byte	0x532
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 206


 6352 077a 8D070000 		.4byte	0x78d
 6353 077e 02       		.uleb128 0x2
 6354 077f 91       		.byte	0x91
 6355 0780 70       		.sleb128 -16
 6356 0781 00       		.byte	0
 6357 0782 06       		.uleb128 0x6
 6358 0783 04       		.byte	0x4
 6359 0784 88070000 		.4byte	0x788
 6360 0788 07       		.uleb128 0x7
 6361 0789 2D020000 		.4byte	0x22d
 6362 078d 07       		.uleb128 0x7
 6363 078e 92070000 		.4byte	0x792
 6364 0792 06       		.uleb128 0x6
 6365 0793 04       		.byte	0x4
 6366 0794 98070000 		.4byte	0x798
 6367 0798 07       		.uleb128 0x7
 6368 0799 E1030000 		.4byte	0x3e1
 6369 079d 18       		.uleb128 0x18
 6370 079e 67040000 		.4byte	.LASF116
 6371 07a2 01       		.byte	0x1
 6372 07a3 8A05     		.2byte	0x58a
 6373 07a5 39010000 		.4byte	0x139
 6374 07a9 00000000 		.4byte	.LFB75
 6375 07ad 34000000 		.4byte	.LFE75-.LFB75
 6376 07b1 01       		.uleb128 0x1
 6377 07b2 9C       		.byte	0x9c
 6378 07b3 E5070000 		.4byte	0x7e5
 6379 07b7 19       		.uleb128 0x19
 6380 07b8 05090000 		.4byte	.LASF111
 6381 07bc 01       		.byte	0x1
 6382 07bd 8A05     		.2byte	0x58a
 6383 07bf E5070000 		.4byte	0x7e5
 6384 07c3 02       		.uleb128 0x2
 6385 07c4 91       		.byte	0x91
 6386 07c5 6C       		.sleb128 -20
 6387 07c6 1A       		.uleb128 0x1a
 6388 07c7 440E0000 		.4byte	.LASF98
 6389 07cb 01       		.byte	0x1
 6390 07cc 8C05     		.2byte	0x58c
 6391 07ce 92070000 		.4byte	0x792
 6392 07d2 02       		.uleb128 0x2
 6393 07d3 91       		.byte	0x91
 6394 07d4 74       		.sleb128 -12
 6395 07d5 1A       		.uleb128 0x1a
 6396 07d6 2B020000 		.4byte	.LASF117
 6397 07da 01       		.byte	0x1
 6398 07db 8D05     		.2byte	0x58d
 6399 07dd 39010000 		.4byte	0x139
 6400 07e1 02       		.uleb128 0x2
 6401 07e2 91       		.byte	0x91
 6402 07e3 70       		.sleb128 -16
 6403 07e4 00       		.byte	0
 6404 07e5 07       		.uleb128 0x7
 6405 07e6 38020000 		.4byte	0x238
 6406 07ea 1F       		.uleb128 0x1f
 6407 07eb 1F080000 		.4byte	.LASF118
 6408 07ef 01       		.byte	0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 207


 6409 07f0 A005     		.2byte	0x5a0
 6410 07f2 39010000 		.4byte	0x139
 6411 07f6 00000000 		.4byte	.LFB76
 6412 07fa 58000000 		.4byte	.LFE76-.LFB76
 6413 07fe 01       		.uleb128 0x1
 6414 07ff 9C       		.byte	0x9c
 6415 0800 89080000 		.4byte	0x889
 6416 0804 19       		.uleb128 0x19
 6417 0805 05090000 		.4byte	.LASF111
 6418 0809 01       		.byte	0x1
 6419 080a A005     		.2byte	0x5a0
 6420 080c E5070000 		.4byte	0x7e5
 6421 0810 02       		.uleb128 0x2
 6422 0811 91       		.byte	0x91
 6423 0812 5C       		.sleb128 -36
 6424 0813 1A       		.uleb128 0x1a
 6425 0814 440E0000 		.4byte	.LASF98
 6426 0818 01       		.byte	0x1
 6427 0819 A205     		.2byte	0x5a2
 6428 081b 92070000 		.4byte	0x792
 6429 081f 02       		.uleb128 0x2
 6430 0820 91       		.byte	0x91
 6431 0821 70       		.sleb128 -16
 6432 0822 1A       		.uleb128 0x1a
 6433 0823 2B020000 		.4byte	.LASF117
 6434 0827 01       		.byte	0x1
 6435 0828 A305     		.2byte	0x5a3
 6436 082a 39010000 		.4byte	0x139
 6437 082e 02       		.uleb128 0x2
 6438 082f 91       		.byte	0x91
 6439 0830 6C       		.sleb128 -20
 6440 0831 1A       		.uleb128 0x1a
 6441 0832 43030000 		.4byte	.LASF119
 6442 0836 01       		.byte	0x1
 6443 0837 A305     		.2byte	0x5a3
 6444 0839 39010000 		.4byte	0x139
 6445 083d 02       		.uleb128 0x2
 6446 083e 91       		.byte	0x91
 6447 083f 74       		.sleb128 -12
 6448 0840 20       		.uleb128 0x20
 6449 0841 ED030000 		.4byte	0x3ed
 6450 0845 08000000 		.4byte	.LBB29
 6451 0849 1A000000 		.4byte	.LBE29-.LBB29
 6452 084d 01       		.byte	0x1
 6453 084e B705     		.2byte	0x5b7
 6454 0850 6F080000 		.4byte	0x86f
 6455 0854 1B       		.uleb128 0x1b
 6456 0855 08000000 		.4byte	.LBB30
 6457 0859 1A000000 		.4byte	.LBE30-.LBB30
 6458 085d 21       		.uleb128 0x21
 6459 085e FD030000 		.4byte	0x3fd
 6460 0862 02       		.uleb128 0x2
 6461 0863 91       		.byte	0x91
 6462 0864 68       		.sleb128 -24
 6463 0865 21       		.uleb128 0x21
 6464 0866 08040000 		.4byte	0x408
 6465 086a 02       		.uleb128 0x2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 208


 6466 086b 91       		.byte	0x91
 6467 086c 64       		.sleb128 -28
 6468 086d 00       		.byte	0
 6469 086e 00       		.byte	0
 6470 086f 22       		.uleb128 0x22
 6471 0870 14040000 		.4byte	0x414
 6472 0874 3E000000 		.4byte	.LBB31
 6473 0878 06000000 		.4byte	.LBE31-.LBB31
 6474 087c 01       		.byte	0x1
 6475 087d BE05     		.2byte	0x5be
 6476 087f 23       		.uleb128 0x23
 6477 0880 20040000 		.4byte	0x420
 6478 0884 02       		.uleb128 0x2
 6479 0885 91       		.byte	0x91
 6480 0886 60       		.sleb128 -32
 6481 0887 00       		.byte	0
 6482 0888 00       		.byte	0
 6483 0889 1E       		.uleb128 0x1e
 6484 088a BC080000 		.4byte	.LASF120
 6485 088e 01       		.byte	0x1
 6486 088f C805     		.2byte	0x5c8
 6487 0891 00000000 		.4byte	.LFB77
 6488 0895 38010000 		.4byte	.LFE77-.LFB77
 6489 0899 01       		.uleb128 0x1
 6490 089a 9C       		.byte	0x9c
 6491 089b FA080000 		.4byte	0x8fa
 6492 089f 19       		.uleb128 0x19
 6493 08a0 05090000 		.4byte	.LASF111
 6494 08a4 01       		.byte	0x1
 6495 08a5 C805     		.2byte	0x5c8
 6496 08a7 38020000 		.4byte	0x238
 6497 08ab 02       		.uleb128 0x2
 6498 08ac 91       		.byte	0x91
 6499 08ad 64       		.sleb128 -28
 6500 08ae 19       		.uleb128 0x19
 6501 08af 63070000 		.4byte	.LASF121
 6502 08b3 01       		.byte	0x1
 6503 08b4 C805     		.2byte	0x5c8
 6504 08b6 39010000 		.4byte	0x139
 6505 08ba 02       		.uleb128 0x2
 6506 08bb 91       		.byte	0x91
 6507 08bc 60       		.sleb128 -32
 6508 08bd 1A       		.uleb128 0x1a
 6509 08be 440E0000 		.4byte	.LASF98
 6510 08c2 01       		.byte	0x1
 6511 08c3 CA05     		.2byte	0x5ca
 6512 08c5 2C050000 		.4byte	0x52c
 6513 08c9 02       		.uleb128 0x2
 6514 08ca 91       		.byte	0x91
 6515 08cb 70       		.sleb128 -16
 6516 08cc 1A       		.uleb128 0x1a
 6517 08cd DD0E0000 		.4byte	.LASF122
 6518 08d1 01       		.byte	0x1
 6519 08d2 CB05     		.2byte	0x5cb
 6520 08d4 39010000 		.4byte	0x139
 6521 08d8 02       		.uleb128 0x2
 6522 08d9 91       		.byte	0x91
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 209


 6523 08da 6C       		.sleb128 -20
 6524 08db 1A       		.uleb128 0x1a
 6525 08dc F80C0000 		.4byte	.LASF123
 6526 08e0 01       		.byte	0x1
 6527 08e1 CB05     		.2byte	0x5cb
 6528 08e3 39010000 		.4byte	0x139
 6529 08e7 02       		.uleb128 0x2
 6530 08e8 91       		.byte	0x91
 6531 08e9 68       		.sleb128 -24
 6532 08ea 1A       		.uleb128 0x1a
 6533 08eb 87020000 		.4byte	.LASF124
 6534 08ef 01       		.byte	0x1
 6535 08f0 CC05     		.2byte	0x5cc
 6536 08f2 2E010000 		.4byte	0x12e
 6537 08f6 02       		.uleb128 0x2
 6538 08f7 91       		.byte	0x91
 6539 08f8 74       		.sleb128 -12
 6540 08f9 00       		.byte	0
 6541 08fa 1E       		.uleb128 0x1e
 6542 08fb 3F0D0000 		.4byte	.LASF125
 6543 08ff 01       		.byte	0x1
 6544 0900 6C06     		.2byte	0x66c
 6545 0902 00000000 		.4byte	.LFB78
 6546 0906 00010000 		.4byte	.LFE78-.LFB78
 6547 090a 01       		.uleb128 0x1
 6548 090b 9C       		.byte	0x9c
 6549 090c 2F090000 		.4byte	0x92f
 6550 0910 19       		.uleb128 0x19
 6551 0911 6E0A0000 		.4byte	.LASF126
 6552 0915 01       		.byte	0x1
 6553 0916 6C06     		.2byte	0x66c
 6554 0918 38020000 		.4byte	0x238
 6555 091c 02       		.uleb128 0x2
 6556 091d 91       		.byte	0x91
 6557 091e 6C       		.sleb128 -20
 6558 091f 1A       		.uleb128 0x1a
 6559 0920 440E0000 		.4byte	.LASF98
 6560 0924 01       		.byte	0x1
 6561 0925 6E06     		.2byte	0x66e
 6562 0927 2C050000 		.4byte	0x52c
 6563 092b 02       		.uleb128 0x2
 6564 092c 91       		.byte	0x91
 6565 092d 74       		.sleb128 -12
 6566 092e 00       		.byte	0
 6567 092f 24       		.uleb128 0x24
 6568 0930 1B0A0000 		.4byte	.LASF169
 6569 0934 01       		.byte	0x1
 6570 0935 D106     		.2byte	0x6d1
 6571 0937 2E010000 		.4byte	0x12e
 6572 093b 00000000 		.4byte	.LFB79
 6573 093f 48000000 		.4byte	.LFE79-.LFB79
 6574 0943 01       		.uleb128 0x1
 6575 0944 9C       		.byte	0x9c
 6576 0945 77090000 		.4byte	0x977
 6577 0949 19       		.uleb128 0x19
 6578 094a 05090000 		.4byte	.LASF111
 6579 094e 01       		.byte	0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 210


 6580 094f D106     		.2byte	0x6d1
 6581 0951 E5070000 		.4byte	0x7e5
 6582 0955 02       		.uleb128 0x2
 6583 0956 91       		.byte	0x91
 6584 0957 6C       		.sleb128 -20
 6585 0958 1A       		.uleb128 0x1a
 6586 0959 650B0000 		.4byte	.LASF92
 6587 095d 01       		.byte	0x1
 6588 095e D306     		.2byte	0x6d3
 6589 0960 2E010000 		.4byte	0x12e
 6590 0964 02       		.uleb128 0x2
 6591 0965 91       		.byte	0x91
 6592 0966 74       		.sleb128 -12
 6593 0967 1A       		.uleb128 0x1a
 6594 0968 440E0000 		.4byte	.LASF98
 6595 096c 01       		.byte	0x1
 6596 096d D406     		.2byte	0x6d4
 6597 096f 8D070000 		.4byte	0x78d
 6598 0973 02       		.uleb128 0x2
 6599 0974 91       		.byte	0x91
 6600 0975 70       		.sleb128 -16
 6601 0976 00       		.byte	0
 6602 0977 1E       		.uleb128 0x1e
 6603 0978 730E0000 		.4byte	.LASF127
 6604 097c 01       		.byte	0x1
 6605 097d FF06     		.2byte	0x6ff
 6606 097f 00000000 		.4byte	.LFB80
 6607 0983 A0000000 		.4byte	.LFE80-.LFB80
 6608 0987 01       		.uleb128 0x1
 6609 0988 9C       		.byte	0x9c
 6610 0989 AC090000 		.4byte	0x9ac
 6611 098d 19       		.uleb128 0x19
 6612 098e 1D020000 		.4byte	.LASF128
 6613 0992 01       		.byte	0x1
 6614 0993 FF06     		.2byte	0x6ff
 6615 0995 38020000 		.4byte	0x238
 6616 0999 02       		.uleb128 0x2
 6617 099a 91       		.byte	0x91
 6618 099b 6C       		.sleb128 -20
 6619 099c 1A       		.uleb128 0x1a
 6620 099d 440E0000 		.4byte	.LASF98
 6621 09a1 01       		.byte	0x1
 6622 09a2 0107     		.2byte	0x701
 6623 09a4 AC090000 		.4byte	0x9ac
 6624 09a8 02       		.uleb128 0x2
 6625 09a9 91       		.byte	0x91
 6626 09aa 74       		.sleb128 -12
 6627 09ab 00       		.byte	0
 6628 09ac 07       		.uleb128 0x7
 6629 09ad 2C050000 		.4byte	0x52c
 6630 09b1 18       		.uleb128 0x18
 6631 09b2 D3030000 		.4byte	.LASF129
 6632 09b6 01       		.byte	0x1
 6633 09b7 3507     		.2byte	0x735
 6634 09b9 2E010000 		.4byte	0x12e
 6635 09bd 00000000 		.4byte	.LFB81
 6636 09c1 C4000000 		.4byte	.LFE81-.LFB81
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 211


 6637 09c5 01       		.uleb128 0x1
 6638 09c6 9C       		.byte	0x9c
 6639 09c7 500A0000 		.4byte	0xa50
 6640 09cb 19       		.uleb128 0x19
 6641 09cc 1D020000 		.4byte	.LASF128
 6642 09d0 01       		.byte	0x1
 6643 09d1 3507     		.2byte	0x735
 6644 09d3 38020000 		.4byte	0x238
 6645 09d7 02       		.uleb128 0x2
 6646 09d8 91       		.byte	0x91
 6647 09d9 5C       		.sleb128 -36
 6648 09da 1A       		.uleb128 0x1a
 6649 09db 87020000 		.4byte	.LASF124
 6650 09df 01       		.byte	0x1
 6651 09e0 3707     		.2byte	0x737
 6652 09e2 2E010000 		.4byte	0x12e
 6653 09e6 02       		.uleb128 0x2
 6654 09e7 91       		.byte	0x91
 6655 09e8 74       		.sleb128 -12
 6656 09e9 1A       		.uleb128 0x1a
 6657 09ea 440E0000 		.4byte	.LASF98
 6658 09ee 01       		.byte	0x1
 6659 09ef 3807     		.2byte	0x738
 6660 09f1 AC090000 		.4byte	0x9ac
 6661 09f5 02       		.uleb128 0x2
 6662 09f6 91       		.byte	0x91
 6663 09f7 70       		.sleb128 -16
 6664 09f8 1A       		.uleb128 0x1a
 6665 09f9 59020000 		.4byte	.LASF130
 6666 09fd 01       		.byte	0x1
 6667 09fe 3907     		.2byte	0x739
 6668 0a00 39010000 		.4byte	0x139
 6669 0a04 02       		.uleb128 0x2
 6670 0a05 91       		.byte	0x91
 6671 0a06 6C       		.sleb128 -20
 6672 0a07 20       		.uleb128 0x20
 6673 0a08 ED030000 		.4byte	0x3ed
 6674 0a0c 10000000 		.4byte	.LBB33
 6675 0a10 1A000000 		.4byte	.LBE33-.LBB33
 6676 0a14 01       		.byte	0x1
 6677 0a15 4F07     		.2byte	0x74f
 6678 0a17 360A0000 		.4byte	0xa36
 6679 0a1b 1B       		.uleb128 0x1b
 6680 0a1c 10000000 		.4byte	.LBB34
 6681 0a20 1A000000 		.4byte	.LBE34-.LBB34
 6682 0a24 21       		.uleb128 0x21
 6683 0a25 FD030000 		.4byte	0x3fd
 6684 0a29 02       		.uleb128 0x2
 6685 0a2a 91       		.byte	0x91
 6686 0a2b 68       		.sleb128 -24
 6687 0a2c 21       		.uleb128 0x21
 6688 0a2d 08040000 		.4byte	0x408
 6689 0a31 02       		.uleb128 0x2
 6690 0a32 91       		.byte	0x91
 6691 0a33 64       		.sleb128 -28
 6692 0a34 00       		.byte	0
 6693 0a35 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 212


 6694 0a36 22       		.uleb128 0x22
 6695 0a37 14040000 		.4byte	0x414
 6696 0a3b A0000000 		.4byte	.LBB35
 6697 0a3f 06000000 		.4byte	.LBE35-.LBB35
 6698 0a43 01       		.byte	0x1
 6699 0a44 7307     		.2byte	0x773
 6700 0a46 23       		.uleb128 0x23
 6701 0a47 20040000 		.4byte	0x420
 6702 0a4b 02       		.uleb128 0x2
 6703 0a4c 91       		.byte	0x91
 6704 0a4d 60       		.sleb128 -32
 6705 0a4e 00       		.byte	0
 6706 0a4f 00       		.byte	0
 6707 0a50 1E       		.uleb128 0x1e
 6708 0a51 0A0C0000 		.4byte	.LASF131
 6709 0a55 01       		.byte	0x1
 6710 0a56 7B07     		.2byte	0x77b
 6711 0a58 00000000 		.4byte	.LFB82
 6712 0a5c 6C000000 		.4byte	.LFE82-.LFB82
 6713 0a60 01       		.uleb128 0x1
 6714 0a61 9C       		.byte	0x9c
 6715 0a62 990A0000 		.4byte	0xa99
 6716 0a66 1A       		.uleb128 0x1a
 6717 0a67 650B0000 		.4byte	.LASF92
 6718 0a6b 01       		.byte	0x1
 6719 0a6c 7D07     		.2byte	0x77d
 6720 0a6e 2E010000 		.4byte	0x12e
 6721 0a72 02       		.uleb128 0x2
 6722 0a73 91       		.byte	0x91
 6723 0a74 74       		.sleb128 -12
 6724 0a75 22       		.uleb128 0x22
 6725 0a76 2C040000 		.4byte	0x42c
 6726 0a7a 22000000 		.4byte	.LBB37
 6727 0a7e 12000000 		.4byte	.LBE37-.LBB37
 6728 0a82 01       		.byte	0x1
 6729 0a83 C307     		.2byte	0x7c3
 6730 0a85 1B       		.uleb128 0x1b
 6731 0a86 22000000 		.4byte	.LBB38
 6732 0a8a 12000000 		.4byte	.LBE38-.LBB38
 6733 0a8e 21       		.uleb128 0x21
 6734 0a8f 38040000 		.4byte	0x438
 6735 0a93 02       		.uleb128 0x2
 6736 0a94 91       		.byte	0x91
 6737 0a95 70       		.sleb128 -16
 6738 0a96 00       		.byte	0
 6739 0a97 00       		.byte	0
 6740 0a98 00       		.byte	0
 6741 0a99 1E       		.uleb128 0x1e
 6742 0a9a 55040000 		.4byte	.LASF132
 6743 0a9e 01       		.byte	0x1
 6744 0a9f F507     		.2byte	0x7f5
 6745 0aa1 00000000 		.4byte	.LFB83
 6746 0aa5 2C000000 		.4byte	.LFE83-.LFB83
 6747 0aa9 01       		.uleb128 0x1
 6748 0aaa 9C       		.byte	0x9c
 6749 0aab D30A0000 		.4byte	0xad3
 6750 0aaf 22       		.uleb128 0x22
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 213


 6751 0ab0 2C040000 		.4byte	0x42c
 6752 0ab4 06000000 		.4byte	.LBB39
 6753 0ab8 12000000 		.4byte	.LBE39-.LBB39
 6754 0abc 01       		.byte	0x1
 6755 0abd FA07     		.2byte	0x7fa
 6756 0abf 1B       		.uleb128 0x1b
 6757 0ac0 06000000 		.4byte	.LBB40
 6758 0ac4 12000000 		.4byte	.LBE40-.LBB40
 6759 0ac8 21       		.uleb128 0x21
 6760 0ac9 38040000 		.4byte	0x438
 6761 0acd 02       		.uleb128 0x2
 6762 0ace 91       		.byte	0x91
 6763 0acf 74       		.sleb128 -12
 6764 0ad0 00       		.byte	0
 6765 0ad1 00       		.byte	0
 6766 0ad2 00       		.byte	0
 6767 0ad3 25       		.uleb128 0x25
 6768 0ad4 E6030000 		.4byte	.LASF162
 6769 0ad8 01       		.byte	0x1
 6770 0ad9 0008     		.2byte	0x800
 6771 0adb 00000000 		.4byte	.LFB84
 6772 0adf 1C000000 		.4byte	.LFE84-.LFB84
 6773 0ae3 01       		.uleb128 0x1
 6774 0ae4 9C       		.byte	0x9c
 6775 0ae5 18       		.uleb128 0x18
 6776 0ae6 E3090000 		.4byte	.LASF133
 6777 0aea 01       		.byte	0x1
 6778 0aeb 4908     		.2byte	0x849
 6779 0aed 2E010000 		.4byte	0x12e
 6780 0af1 00000000 		.4byte	.LFB85
 6781 0af5 20010000 		.4byte	.LFE85-.LFB85
 6782 0af9 01       		.uleb128 0x1
 6783 0afa 9C       		.byte	0x9c
 6784 0afb 370B0000 		.4byte	0xb37
 6785 0aff 1A       		.uleb128 0x1a
 6786 0b00 440E0000 		.4byte	.LASF98
 6787 0b04 01       		.byte	0x1
 6788 0b05 4B08     		.2byte	0x84b
 6789 0b07 2C050000 		.4byte	0x52c
 6790 0b0b 02       		.uleb128 0x2
 6791 0b0c 91       		.byte	0x91
 6792 0b0d 74       		.sleb128 -12
 6793 0b0e 1A       		.uleb128 0x1a
 6794 0b0f 4C0D0000 		.4byte	.LASF104
 6795 0b13 01       		.byte	0x1
 6796 0b14 4C08     		.2byte	0x84c
 6797 0b16 2E010000 		.4byte	0x12e
 6798 0b1a 02       		.uleb128 0x2
 6799 0b1b 91       		.byte	0x91
 6800 0b1c 70       		.sleb128 -16
 6801 0b1d 1B       		.uleb128 0x1b
 6802 0b1e A2000000 		.4byte	.LBB41
 6803 0b22 2E000000 		.4byte	.LBE41-.LBB41
 6804 0b26 1A       		.uleb128 0x1a
 6805 0b27 52000000 		.4byte	.LASF134
 6806 0b2b 01       		.byte	0x1
 6807 0b2c 8408     		.2byte	0x884
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 214


 6808 0b2e 39010000 		.4byte	0x139
 6809 0b32 02       		.uleb128 0x2
 6810 0b33 91       		.byte	0x91
 6811 0b34 6C       		.sleb128 -20
 6812 0b35 00       		.byte	0
 6813 0b36 00       		.byte	0
 6814 0b37 1F       		.uleb128 0x1f
 6815 0b38 38080000 		.4byte	.LASF135
 6816 0b3c 01       		.byte	0x1
 6817 0b3d B708     		.2byte	0x8b7
 6818 0b3f 44010000 		.4byte	0x144
 6819 0b43 00000000 		.4byte	.LFB86
 6820 0b47 20000000 		.4byte	.LFE86-.LFB86
 6821 0b4b 01       		.uleb128 0x1
 6822 0b4c 9C       		.byte	0x9c
 6823 0b4d 610B0000 		.4byte	0xb61
 6824 0b51 1A       		.uleb128 0x1a
 6825 0b52 030C0000 		.4byte	.LASF136
 6826 0b56 01       		.byte	0x1
 6827 0b57 B908     		.2byte	0x8b9
 6828 0b59 44010000 		.4byte	0x144
 6829 0b5d 02       		.uleb128 0x2
 6830 0b5e 91       		.byte	0x91
 6831 0b5f 74       		.sleb128 -12
 6832 0b60 00       		.byte	0
 6833 0b61 1F       		.uleb128 0x1f
 6834 0b62 2A030000 		.4byte	.LASF137
 6835 0b66 01       		.byte	0x1
 6836 0b67 C608     		.2byte	0x8c6
 6837 0b69 44010000 		.4byte	0x144
 6838 0b6d 00000000 		.4byte	.LFB87
 6839 0b71 24000000 		.4byte	.LFE87-.LFB87
 6840 0b75 01       		.uleb128 0x1
 6841 0b76 9C       		.byte	0x9c
 6842 0b77 9A0B0000 		.4byte	0xb9a
 6843 0b7b 1A       		.uleb128 0x1a
 6844 0b7c 650B0000 		.4byte	.LASF92
 6845 0b80 01       		.byte	0x1
 6846 0b81 C808     		.2byte	0x8c8
 6847 0b83 44010000 		.4byte	0x144
 6848 0b87 02       		.uleb128 0x2
 6849 0b88 91       		.byte	0x91
 6850 0b89 70       		.sleb128 -16
 6851 0b8a 1A       		.uleb128 0x1a
 6852 0b8b 59020000 		.4byte	.LASF130
 6853 0b8f 01       		.byte	0x1
 6854 0b90 C908     		.2byte	0x8c9
 6855 0b92 39010000 		.4byte	0x139
 6856 0b96 02       		.uleb128 0x2
 6857 0b97 91       		.byte	0x91
 6858 0b98 74       		.sleb128 -12
 6859 0b99 00       		.byte	0
 6860 0b9a 26       		.uleb128 0x26
 6861 0b9b 34020000 		.4byte	.LASF187
 6862 0b9f 01       		.byte	0x1
 6863 0ba0 E508     		.2byte	0x8e5
 6864 0ba2 39010000 		.4byte	0x139
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 215


 6865 0ba6 00000000 		.4byte	.LFB88
 6866 0baa 18000000 		.4byte	.LFE88-.LFB88
 6867 0bae 01       		.uleb128 0x1
 6868 0baf 9C       		.byte	0x9c
 6869 0bb0 1F       		.uleb128 0x1f
 6870 0bb1 ED0B0000 		.4byte	.LASF138
 6871 0bb5 01       		.byte	0x1
 6872 0bb6 ED08     		.2byte	0x8ed
 6873 0bb8 AB000000 		.4byte	0xab
 6874 0bbc 00000000 		.4byte	.LFB89
 6875 0bc0 2C000000 		.4byte	.LFE89-.LFB89
 6876 0bc4 01       		.uleb128 0x1
 6877 0bc5 9C       		.byte	0x9c
 6878 0bc6 E90B0000 		.4byte	0xbe9
 6879 0bca 19       		.uleb128 0x19
 6880 0bcb DF080000 		.4byte	.LASF139
 6881 0bcf 01       		.byte	0x1
 6882 0bd0 ED08     		.2byte	0x8ed
 6883 0bd2 38020000 		.4byte	0x238
 6884 0bd6 02       		.uleb128 0x2
 6885 0bd7 91       		.byte	0x91
 6886 0bd8 6C       		.sleb128 -20
 6887 0bd9 1A       		.uleb128 0x1a
 6888 0bda 440E0000 		.4byte	.LASF98
 6889 0bde 01       		.byte	0x1
 6890 0bdf EF08     		.2byte	0x8ef
 6891 0be1 2C050000 		.4byte	0x52c
 6892 0be5 02       		.uleb128 0x2
 6893 0be6 91       		.byte	0x91
 6894 0be7 74       		.sleb128 -12
 6895 0be8 00       		.byte	0
 6896 0be9 18       		.uleb128 0x18
 6897 0bea A1010000 		.4byte	.LASF140
 6898 0bee 01       		.byte	0x1
 6899 0bef 340A     		.2byte	0xa34
 6900 0bf1 2E010000 		.4byte	0x12e
 6901 0bf5 00000000 		.4byte	.LFB90
 6902 0bf9 54010000 		.4byte	.LFE90-.LFB90
 6903 0bfd 01       		.uleb128 0x1
 6904 0bfe 9C       		.byte	0x9c
 6905 0bff 630C0000 		.4byte	0xc63
 6906 0c03 1A       		.uleb128 0x1a
 6907 0c04 440E0000 		.4byte	.LASF98
 6908 0c08 01       		.byte	0x1
 6909 0c09 360A     		.2byte	0xa36
 6910 0c0b 2C050000 		.4byte	0x52c
 6911 0c0f 02       		.uleb128 0x2
 6912 0c10 91       		.byte	0x91
 6913 0c11 68       		.sleb128 -24
 6914 0c12 1A       		.uleb128 0x1a
 6915 0c13 C2090000 		.4byte	.LASF27
 6916 0c17 01       		.byte	0x1
 6917 0c18 370A     		.2byte	0xa37
 6918 0c1a 44010000 		.4byte	0x144
 6919 0c1e 02       		.uleb128 0x2
 6920 0c1f 91       		.byte	0x91
 6921 0c20 64       		.sleb128 -28
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 216


 6922 0c21 1A       		.uleb128 0x1a
 6923 0c22 320A0000 		.4byte	.LASF141
 6924 0c26 01       		.byte	0x1
 6925 0c27 380A     		.2byte	0xa38
 6926 0c29 2E010000 		.4byte	0x12e
 6927 0c2d 02       		.uleb128 0x2
 6928 0c2e 91       		.byte	0x91
 6929 0c2f 74       		.sleb128 -12
 6930 0c30 1B       		.uleb128 0x1b
 6931 0c31 12000000 		.4byte	.LBB42
 6932 0c35 F2000000 		.4byte	.LBE42-.LBB42
 6933 0c39 1A       		.uleb128 0x1a
 6934 0c3a 79040000 		.4byte	.LASF106
 6935 0c3e 01       		.byte	0x1
 6936 0c3f 420A     		.2byte	0xa42
 6937 0c41 D3060000 		.4byte	0x6d3
 6938 0c45 02       		.uleb128 0x2
 6939 0c46 91       		.byte	0x91
 6940 0c47 70       		.sleb128 -16
 6941 0c48 1B       		.uleb128 0x1b
 6942 0c49 26000000 		.4byte	.LBB43
 6943 0c4d 22000000 		.4byte	.LBE43-.LBB43
 6944 0c51 1A       		.uleb128 0x1a
 6945 0c52 CE040000 		.4byte	.LASF142
 6946 0c56 01       		.byte	0x1
 6947 0c57 4A0A     		.2byte	0xa4a
 6948 0c59 630C0000 		.4byte	0xc63
 6949 0c5d 02       		.uleb128 0x2
 6950 0c5e 91       		.byte	0x91
 6951 0c5f 6C       		.sleb128 -20
 6952 0c60 00       		.byte	0
 6953 0c61 00       		.byte	0
 6954 0c62 00       		.byte	0
 6955 0c63 06       		.uleb128 0x6
 6956 0c64 04       		.byte	0x4
 6957 0c65 2D020000 		.4byte	0x22d
 6958 0c69 1E       		.uleb128 0x1e
 6959 0c6a 5B090000 		.4byte	.LASF143
 6960 0c6e 01       		.byte	0x1
 6961 0c6f 3C0B     		.2byte	0xb3c
 6962 0c71 00000000 		.4byte	.LFB91
 6963 0c75 D4000000 		.4byte	.LFE91-.LFB91
 6964 0c79 01       		.uleb128 0x1
 6965 0c7a 9C       		.byte	0x9c
 6966 0c7b 0D0D0000 		.4byte	0xd0d
 6967 0c7f 27       		.uleb128 0x27
 6968 0c80 1C000000 		.4byte	.LBB44
 6969 0c84 4E000000 		.4byte	.LBE44-.LBB44
 6970 0c88 AB0C0000 		.4byte	0xcab
 6971 0c8c 1A       		.uleb128 0x1a
 6972 0c8d 3D0C0000 		.4byte	.LASF144
 6973 0c91 01       		.byte	0x1
 6974 0c92 680B     		.2byte	0xb68
 6975 0c94 0D0D0000 		.4byte	0xd0d
 6976 0c98 02       		.uleb128 0x2
 6977 0c99 91       		.byte	0x91
 6978 0c9a 74       		.sleb128 -12
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 217


 6979 0c9b 1A       		.uleb128 0x1a
 6980 0c9c 2A070000 		.4byte	.LASF145
 6981 0ca0 01       		.byte	0x1
 6982 0ca1 680B     		.2byte	0xb68
 6983 0ca3 DD050000 		.4byte	0x5dd
 6984 0ca7 02       		.uleb128 0x2
 6985 0ca8 91       		.byte	0x91
 6986 0ca9 70       		.sleb128 -16
 6987 0caa 00       		.byte	0
 6988 0cab 1B       		.uleb128 0x1b
 6989 0cac 6A000000 		.4byte	.LBB45
 6990 0cb0 50000000 		.4byte	.LBE45-.LBB45
 6991 0cb4 1A       		.uleb128 0x1a
 6992 0cb5 BC0C0000 		.4byte	.LASF146
 6993 0cb9 01       		.byte	0x1
 6994 0cba 6C0B     		.2byte	0xb6c
 6995 0cbc 39010000 		.4byte	0x139
 6996 0cc0 02       		.uleb128 0x2
 6997 0cc1 91       		.byte	0x91
 6998 0cc2 6C       		.sleb128 -20
 6999 0cc3 20       		.uleb128 0x20
 7000 0cc4 44040000 		.4byte	0x444
 7001 0cc8 70000000 		.4byte	.LBB46
 7002 0ccc 0A000000 		.4byte	.LBE46-.LBB46
 7003 0cd0 01       		.byte	0x1
 7004 0cd1 6C0B     		.2byte	0xb6c
 7005 0cd3 F20C0000 		.4byte	0xcf2
 7006 0cd7 23       		.uleb128 0x23
 7007 0cd8 54040000 		.4byte	0x454
 7008 0cdc 02       		.uleb128 0x2
 7009 0cdd 91       		.byte	0x91
 7010 0cde 64       		.sleb128 -28
 7011 0cdf 1B       		.uleb128 0x1b
 7012 0ce0 70000000 		.4byte	.LBB47
 7013 0ce4 0A000000 		.4byte	.LBE47-.LBB47
 7014 0ce8 21       		.uleb128 0x21
 7015 0ce9 5F040000 		.4byte	0x45f
 7016 0ced 02       		.uleb128 0x2
 7017 0cee 91       		.byte	0x91
 7018 0cef 63       		.sleb128 -29
 7019 0cf0 00       		.byte	0
 7020 0cf1 00       		.byte	0
 7021 0cf2 1B       		.uleb128 0x1b
 7022 0cf3 80000000 		.4byte	.LBB48
 7023 0cf7 3A000000 		.4byte	.LBE48-.LBB48
 7024 0cfb 1A       		.uleb128 0x1a
 7025 0cfc 26000000 		.4byte	.LASF147
 7026 0d00 01       		.byte	0x1
 7027 0d01 6C0B     		.2byte	0xb6c
 7028 0d03 180D0000 		.4byte	0xd18
 7029 0d07 02       		.uleb128 0x2
 7030 0d08 91       		.byte	0x91
 7031 0d09 68       		.sleb128 -24
 7032 0d0a 00       		.byte	0
 7033 0d0b 00       		.byte	0
 7034 0d0c 00       		.byte	0
 7035 0d0d 07       		.uleb128 0x7
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 218


 7036 0d0e 120D0000 		.4byte	0xd12
 7037 0d12 06       		.uleb128 0x6
 7038 0d13 04       		.byte	0x4
 7039 0d14 DD050000 		.4byte	0x5dd
 7040 0d18 07       		.uleb128 0x7
 7041 0d19 630C0000 		.4byte	0xc63
 7042 0d1d 1E       		.uleb128 0x1e
 7043 0d1e D5040000 		.4byte	.LASF148
 7044 0d22 01       		.byte	0x1
 7045 0d23 7A0B     		.2byte	0xb7a
 7046 0d25 00000000 		.4byte	.LFB92
 7047 0d29 2C000000 		.4byte	.LFE92-.LFB92
 7048 0d2d 01       		.uleb128 0x1
 7049 0d2e 9C       		.byte	0x9c
 7050 0d2f 520D0000 		.4byte	0xd52
 7051 0d33 19       		.uleb128 0x19
 7052 0d34 DC000000 		.4byte	.LASF149
 7053 0d38 01       		.byte	0x1
 7054 0d39 7A0B     		.2byte	0xb7a
 7055 0d3b 180D0000 		.4byte	0xd18
 7056 0d3f 02       		.uleb128 0x2
 7057 0d40 91       		.byte	0x91
 7058 0d41 74       		.sleb128 -12
 7059 0d42 19       		.uleb128 0x19
 7060 0d43 140D0000 		.4byte	.LASF150
 7061 0d47 01       		.byte	0x1
 7062 0d48 7A0B     		.2byte	0xb7a
 7063 0d4a D3060000 		.4byte	0x6d3
 7064 0d4e 02       		.uleb128 0x2
 7065 0d4f 91       		.byte	0x91
 7066 0d50 70       		.sleb128 -16
 7067 0d51 00       		.byte	0
 7068 0d52 1E       		.uleb128 0x1e
 7069 0d53 6E0C0000 		.4byte	.LASF151
 7070 0d57 01       		.byte	0x1
 7071 0d58 8B0B     		.2byte	0xb8b
 7072 0d5a 00000000 		.4byte	.LFB93
 7073 0d5e 38000000 		.4byte	.LFE93-.LFB93
 7074 0d62 01       		.uleb128 0x1
 7075 0d63 9C       		.byte	0x9c
 7076 0d64 960D0000 		.4byte	0xd96
 7077 0d68 19       		.uleb128 0x19
 7078 0d69 DC000000 		.4byte	.LASF149
 7079 0d6d 01       		.byte	0x1
 7080 0d6e 8B0B     		.2byte	0xb8b
 7081 0d70 630C0000 		.4byte	0xc63
 7082 0d74 02       		.uleb128 0x2
 7083 0d75 91       		.byte	0x91
 7084 0d76 74       		.sleb128 -12
 7085 0d77 19       		.uleb128 0x19
 7086 0d78 C2090000 		.4byte	.LASF27
 7087 0d7c 01       		.byte	0x1
 7088 0d7d 8B0B     		.2byte	0xb8b
 7089 0d7f D3060000 		.4byte	0x6d3
 7090 0d83 02       		.uleb128 0x2
 7091 0d84 91       		.byte	0x91
 7092 0d85 70       		.sleb128 -16
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 219


 7093 0d86 19       		.uleb128 0x19
 7094 0d87 140D0000 		.4byte	.LASF150
 7095 0d8b 01       		.byte	0x1
 7096 0d8c 8B0B     		.2byte	0xb8b
 7097 0d8e D3060000 		.4byte	0x6d3
 7098 0d92 02       		.uleb128 0x2
 7099 0d93 91       		.byte	0x91
 7100 0d94 6C       		.sleb128 -20
 7101 0d95 00       		.byte	0
 7102 0d96 18       		.uleb128 0x18
 7103 0d97 7F050000 		.4byte	.LASF152
 7104 0d9b 01       		.byte	0x1
 7105 0d9c C40B     		.2byte	0xbc4
 7106 0d9e 2E010000 		.4byte	0x12e
 7107 0da2 00000000 		.4byte	.LFB94
 7108 0da6 AC000000 		.4byte	.LFE94-.LFB94
 7109 0daa 01       		.uleb128 0x1
 7110 0dab 9C       		.byte	0x9c
 7111 0dac DE0D0000 		.4byte	0xdde
 7112 0db0 19       		.uleb128 0x19
 7113 0db1 DC000000 		.4byte	.LASF149
 7114 0db5 01       		.byte	0x1
 7115 0db6 C40B     		.2byte	0xbc4
 7116 0db8 DE0D0000 		.4byte	0xdde
 7117 0dbc 02       		.uleb128 0x2
 7118 0dbd 91       		.byte	0x91
 7119 0dbe 6C       		.sleb128 -20
 7120 0dbf 1A       		.uleb128 0x1a
 7121 0dc0 C1020000 		.4byte	.LASF153
 7122 0dc4 01       		.byte	0x1
 7123 0dc5 C60B     		.2byte	0xbc6
 7124 0dc7 2C050000 		.4byte	0x52c
 7125 0dcb 02       		.uleb128 0x2
 7126 0dcc 91       		.byte	0x91
 7127 0dcd 70       		.sleb128 -16
 7128 0dce 1A       		.uleb128 0x1a
 7129 0dcf 650B0000 		.4byte	.LASF92
 7130 0dd3 01       		.byte	0x1
 7131 0dd4 C70B     		.2byte	0xbc7
 7132 0dd6 2E010000 		.4byte	0x12e
 7133 0dda 02       		.uleb128 0x2
 7134 0ddb 91       		.byte	0x91
 7135 0ddc 74       		.sleb128 -12
 7136 0ddd 00       		.byte	0
 7137 0dde 07       		.uleb128 0x7
 7138 0ddf 82070000 		.4byte	0x782
 7139 0de3 1E       		.uleb128 0x1e
 7140 0de4 37050000 		.4byte	.LASF154
 7141 0de8 01       		.byte	0x1
 7142 0de9 080C     		.2byte	0xc08
 7143 0deb 00000000 		.4byte	.LFB95
 7144 0def 88000000 		.4byte	.LFE95-.LFB95
 7145 0df3 01       		.uleb128 0x1
 7146 0df4 9C       		.byte	0x9c
 7147 0df5 270E0000 		.4byte	0xe27
 7148 0df9 19       		.uleb128 0x19
 7149 0dfa 960E0000 		.4byte	.LASF155
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 220


 7150 0dfe 01       		.byte	0x1
 7151 0dff 080C     		.2byte	0xc08
 7152 0e01 27020000 		.4byte	0x227
 7153 0e05 02       		.uleb128 0x2
 7154 0e06 91       		.byte	0x91
 7155 0e07 6C       		.sleb128 -20
 7156 0e08 19       		.uleb128 0x19
 7157 0e09 C2090000 		.4byte	.LASF27
 7158 0e0d 01       		.byte	0x1
 7159 0e0e 080C     		.2byte	0xc08
 7160 0e10 D3060000 		.4byte	0x6d3
 7161 0e14 02       		.uleb128 0x2
 7162 0e15 91       		.byte	0x91
 7163 0e16 68       		.sleb128 -24
 7164 0e17 1A       		.uleb128 0x1a
 7165 0e18 C1020000 		.4byte	.LASF153
 7166 0e1c 01       		.byte	0x1
 7167 0e1d 0A0C     		.2byte	0xc0a
 7168 0e1f 2C050000 		.4byte	0x52c
 7169 0e23 02       		.uleb128 0x2
 7170 0e24 91       		.byte	0x91
 7171 0e25 74       		.sleb128 -12
 7172 0e26 00       		.byte	0
 7173 0e27 1E       		.uleb128 0x1e
 7174 0e28 72010000 		.4byte	.LASF156
 7175 0e2c 01       		.byte	0x1
 7176 0e2d 2A0C     		.2byte	0xc2a
 7177 0e2f 00000000 		.4byte	.LFB96
 7178 0e33 30000000 		.4byte	.LFE96-.LFB96
 7179 0e37 01       		.uleb128 0x1
 7180 0e38 9C       		.byte	0x9c
 7181 0e39 4D0E0000 		.4byte	0xe4d
 7182 0e3d 19       		.uleb128 0x19
 7183 0e3e 15080000 		.4byte	.LASF157
 7184 0e42 01       		.byte	0x1
 7185 0e43 2A0C     		.2byte	0xc2a
 7186 0e45 4D0E0000 		.4byte	0xe4d
 7187 0e49 02       		.uleb128 0x2
 7188 0e4a 91       		.byte	0x91
 7189 0e4b 74       		.sleb128 -12
 7190 0e4c 00       		.byte	0
 7191 0e4d 07       		.uleb128 0x7
 7192 0e4e 520E0000 		.4byte	0xe52
 7193 0e52 06       		.uleb128 0x6
 7194 0e53 04       		.byte	0x4
 7195 0e54 68030000 		.4byte	0x368
 7196 0e58 28       		.uleb128 0x28
 7197 0e59 54080000 		.4byte	.LASF158
 7198 0e5d 01       		.byte	0x1
 7199 0e5e 360C     		.2byte	0xc36
 7200 0e60 00000000 		.4byte	.LFB97
 7201 0e64 2C000000 		.4byte	.LFE97-.LFB97
 7202 0e68 01       		.uleb128 0x1
 7203 0e69 9C       		.byte	0x9c
 7204 0e6a 7E0E0000 		.4byte	0xe7e
 7205 0e6e 19       		.uleb128 0x19
 7206 0e6f 15080000 		.4byte	.LASF157
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 221


 7207 0e73 01       		.byte	0x1
 7208 0e74 360C     		.2byte	0xc36
 7209 0e76 4D0E0000 		.4byte	0xe4d
 7210 0e7a 02       		.uleb128 0x2
 7211 0e7b 91       		.byte	0x91
 7212 0e7c 74       		.sleb128 -12
 7213 0e7d 00       		.byte	0
 7214 0e7e 18       		.uleb128 0x18
 7215 0e7f 7D0A0000 		.4byte	.LASF159
 7216 0e83 01       		.byte	0x1
 7217 0e84 3E0C     		.2byte	0xc3e
 7218 0e86 2E010000 		.4byte	0x12e
 7219 0e8a 00000000 		.4byte	.LFB98
 7220 0e8e 8C000000 		.4byte	.LFE98-.LFB98
 7221 0e92 01       		.uleb128 0x1
 7222 0e93 9C       		.byte	0x9c
 7223 0e94 EE0E0000 		.4byte	0xeee
 7224 0e98 19       		.uleb128 0x19
 7225 0e99 15080000 		.4byte	.LASF157
 7226 0e9d 01       		.byte	0x1
 7227 0e9e 3E0C     		.2byte	0xc3e
 7228 0ea0 4D0E0000 		.4byte	0xe4d
 7229 0ea4 02       		.uleb128 0x2
 7230 0ea5 91       		.byte	0x91
 7231 0ea6 64       		.sleb128 -28
 7232 0ea7 19       		.uleb128 0x19
 7233 0ea8 AE0C0000 		.4byte	.LASF160
 7234 0eac 01       		.byte	0x1
 7235 0ead 3E0C     		.2byte	0xc3e
 7236 0eaf C8060000 		.4byte	0x6c8
 7237 0eb3 02       		.uleb128 0x2
 7238 0eb4 91       		.byte	0x91
 7239 0eb5 60       		.sleb128 -32
 7240 0eb6 1A       		.uleb128 0x1a
 7241 0eb7 650B0000 		.4byte	.LASF92
 7242 0ebb 01       		.byte	0x1
 7243 0ebc 400C     		.2byte	0xc40
 7244 0ebe 2E010000 		.4byte	0x12e
 7245 0ec2 02       		.uleb128 0x2
 7246 0ec3 91       		.byte	0x91
 7247 0ec4 74       		.sleb128 -12
 7248 0ec5 1B       		.uleb128 0x1b
 7249 0ec6 0E000000 		.4byte	.LBB49
 7250 0eca 68000000 		.4byte	.LBE49-.LBB49
 7251 0ece 1A       		.uleb128 0x1a
 7252 0ecf 79040000 		.4byte	.LASF106
 7253 0ed3 01       		.byte	0x1
 7254 0ed4 480C     		.2byte	0xc48
 7255 0ed6 D3060000 		.4byte	0x6d3
 7256 0eda 02       		.uleb128 0x2
 7257 0edb 91       		.byte	0x91
 7258 0edc 70       		.sleb128 -16
 7259 0edd 1A       		.uleb128 0x1a
 7260 0ede EF020000 		.4byte	.LASF161
 7261 0ee2 01       		.byte	0x1
 7262 0ee3 490C     		.2byte	0xc49
 7263 0ee5 D3060000 		.4byte	0x6d3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 222


 7264 0ee9 02       		.uleb128 0x2
 7265 0eea 91       		.byte	0x91
 7266 0eeb 6C       		.sleb128 -20
 7267 0eec 00       		.byte	0
 7268 0eed 00       		.byte	0
 7269 0eee 25       		.uleb128 0x25
 7270 0eef 760B0000 		.4byte	.LASF163
 7271 0ef3 01       		.byte	0x1
 7272 0ef4 7D0C     		.2byte	0xc7d
 7273 0ef6 00000000 		.4byte	.LFB99
 7274 0efa 18000000 		.4byte	.LFE99-.LFB99
 7275 0efe 01       		.uleb128 0x1
 7276 0eff 9C       		.byte	0x9c
 7277 0f00 1C       		.uleb128 0x1c
 7278 0f01 03060000 		.4byte	.LASF164
 7279 0f05 01       		.byte	0x1
 7280 0f06 B40C     		.2byte	0xcb4
 7281 0f08 00000000 		.4byte	.LFB100
 7282 0f0c 0E000000 		.4byte	.LFE100-.LFB100
 7283 0f10 01       		.uleb128 0x1
 7284 0f11 9C       		.byte	0x9c
 7285 0f12 260F0000 		.4byte	0xf26
 7286 0f16 19       		.uleb128 0x19
 7287 0f17 B5090000 		.4byte	.LASF89
 7288 0f1b 01       		.byte	0x1
 7289 0f1c B40C     		.2byte	0xcb4
 7290 0f1e A9000000 		.4byte	0xa9
 7291 0f22 02       		.uleb128 0x2
 7292 0f23 91       		.byte	0x91
 7293 0f24 74       		.sleb128 -12
 7294 0f25 00       		.byte	0
 7295 0f26 1C       		.uleb128 0x1c
 7296 0f27 7F0E0000 		.4byte	.LASF165
 7297 0f2b 01       		.byte	0x1
 7298 0f2c 880D     		.2byte	0xd88
 7299 0f2e 00000000 		.4byte	.LFB101
 7300 0f32 7C000000 		.4byte	.LFE101-.LFB101
 7301 0f36 01       		.uleb128 0x1
 7302 0f37 9C       		.byte	0x9c
 7303 0f38 700F0000 		.4byte	0xf70
 7304 0f3c 1A       		.uleb128 0x1a
 7305 0f3d 1B000000 		.4byte	.LASF46
 7306 0f41 01       		.byte	0x1
 7307 0f42 8A0D     		.2byte	0xd8a
 7308 0f44 39010000 		.4byte	0x139
 7309 0f48 02       		.uleb128 0x2
 7310 0f49 91       		.byte	0x91
 7311 0f4a 74       		.sleb128 -12
 7312 0f4b 1A       		.uleb128 0x1a
 7313 0f4c BD010000 		.4byte	.LASF166
 7314 0f50 01       		.byte	0x1
 7315 0f51 8B0D     		.2byte	0xd8b
 7316 0f53 2D020000 		.4byte	0x22d
 7317 0f57 05       		.uleb128 0x5
 7318 0f58 03       		.byte	0x3
 7319 0f59 DC000000 		.4byte	xDelayedTaskList1.7075
 7320 0f5d 1A       		.uleb128 0x1a
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 223


 7321 0f5e CF010000 		.4byte	.LASF167
 7322 0f62 01       		.byte	0x1
 7323 0f63 8C0D     		.2byte	0xd8c
 7324 0f65 2D020000 		.4byte	0x22d
 7325 0f69 05       		.uleb128 0x5
 7326 0f6a 03       		.byte	0x3
 7327 0f6b F0000000 		.4byte	xDelayedTaskList2.7076
 7328 0f6f 00       		.byte	0
 7329 0f70 1C       		.uleb128 0x1c
 7330 0f71 B40E0000 		.4byte	.LASF168
 7331 0f75 01       		.byte	0x1
 7332 0f76 AA0D     		.2byte	0xdaa
 7333 0f78 00000000 		.4byte	.LFB102
 7334 0f7c 58000000 		.4byte	.LFE102-.LFB102
 7335 0f80 01       		.uleb128 0x1
 7336 0f81 9C       		.byte	0x9c
 7337 0f82 A00F0000 		.4byte	0xfa0
 7338 0f86 1B       		.uleb128 0x1b
 7339 0f87 06000000 		.4byte	.LBB50
 7340 0f8b 3E000000 		.4byte	.LBE50-.LBB50
 7341 0f8f 1A       		.uleb128 0x1a
 7342 0f90 440E0000 		.4byte	.LASF98
 7343 0f94 01       		.byte	0x1
 7344 0f95 B10D     		.2byte	0xdb1
 7345 0f97 2C050000 		.4byte	0x52c
 7346 0f9b 02       		.uleb128 0x2
 7347 0f9c 91       		.byte	0x91
 7348 0f9d 74       		.sleb128 -12
 7349 0f9e 00       		.byte	0
 7350 0f9f 00       		.byte	0
 7351 0fa0 24       		.uleb128 0x24
 7352 0fa1 760D0000 		.4byte	.LASF170
 7353 0fa5 01       		.byte	0x1
 7354 0fa6 4A0E     		.2byte	0xe4a
 7355 0fa8 CE000000 		.4byte	0xce
 7356 0fac 00000000 		.4byte	.LFB103
 7357 0fb0 38000000 		.4byte	.LFE103-.LFB103
 7358 0fb4 01       		.uleb128 0x1
 7359 0fb5 9C       		.byte	0x9c
 7360 0fb6 D90F0000 		.4byte	0xfd9
 7361 0fba 19       		.uleb128 0x19
 7362 0fbb 42040000 		.4byte	.LASF171
 7363 0fbf 01       		.byte	0x1
 7364 0fc0 4A0E     		.2byte	0xe4a
 7365 0fc2 D90F0000 		.4byte	0xfd9
 7366 0fc6 02       		.uleb128 0x2
 7367 0fc7 91       		.byte	0x91
 7368 0fc8 6C       		.sleb128 -20
 7369 0fc9 1A       		.uleb128 0x1a
 7370 0fca AC040000 		.4byte	.LASF172
 7371 0fce 01       		.byte	0x1
 7372 0fcf 4C0E     		.2byte	0xe4c
 7373 0fd1 E4000000 		.4byte	0xe4
 7374 0fd5 02       		.uleb128 0x2
 7375 0fd6 91       		.byte	0x91
 7376 0fd7 74       		.sleb128 -12
 7377 0fd8 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 224


 7378 0fd9 06       		.uleb128 0x6
 7379 0fda 04       		.byte	0x4
 7380 0fdb DF0F0000 		.4byte	0xfdf
 7381 0fdf 07       		.uleb128 0x7
 7382 0fe0 C3000000 		.4byte	0xc3
 7383 0fe4 18       		.uleb128 0x18
 7384 0fe5 F6030000 		.4byte	.LASF173
 7385 0fe9 01       		.byte	0x1
 7386 0fea 5E0E     		.2byte	0xe5e
 7387 0fec 39010000 		.4byte	0x139
 7388 0ff0 00000000 		.4byte	.LFB104
 7389 0ff4 38000000 		.4byte	.LFE104-.LFB104
 7390 0ff8 01       		.uleb128 0x1
 7391 0ff9 9C       		.byte	0x9c
 7392 0ffa 3B100000 		.4byte	0x103b
 7393 0ffe 19       		.uleb128 0x19
 7394 0fff 05090000 		.4byte	.LASF111
 7395 1003 01       		.byte	0x1
 7396 1004 5E0E     		.2byte	0xe5e
 7397 1006 38020000 		.4byte	0x238
 7398 100a 02       		.uleb128 0x2
 7399 100b 91       		.byte	0x91
 7400 100c 64       		.sleb128 -28
 7401 100d 1A       		.uleb128 0x1a
 7402 100e 440E0000 		.4byte	.LASF98
 7403 1012 01       		.byte	0x1
 7404 1013 600E     		.2byte	0xe60
 7405 1015 2C050000 		.4byte	0x52c
 7406 1019 02       		.uleb128 0x2
 7407 101a 91       		.byte	0x91
 7408 101b 74       		.sleb128 -12
 7409 101c 1A       		.uleb128 0x1a
 7410 101d CE0B0000 		.4byte	.LASF174
 7411 1021 01       		.byte	0x1
 7412 1022 610E     		.2byte	0xe61
 7413 1024 4F010000 		.4byte	0x14f
 7414 1028 02       		.uleb128 0x2
 7415 1029 91       		.byte	0x91
 7416 102a 70       		.sleb128 -16
 7417 102b 1A       		.uleb128 0x1a
 7418 102c 2B020000 		.4byte	.LASF117
 7419 1030 01       		.byte	0x1
 7420 1031 620E     		.2byte	0xe62
 7421 1033 39010000 		.4byte	0x139
 7422 1037 02       		.uleb128 0x2
 7423 1038 91       		.byte	0x91
 7424 1039 6C       		.sleb128 -20
 7425 103a 00       		.byte	0
 7426 103b 1C       		.uleb128 0x1c
 7427 103c 290D0000 		.4byte	.LASF175
 7428 1040 01       		.byte	0x1
 7429 1041 7A0E     		.2byte	0xe7a
 7430 1043 00000000 		.4byte	.LFB105
 7431 1047 1E000000 		.4byte	.LFE105-.LFB105
 7432 104b 01       		.uleb128 0x1
 7433 104c 9C       		.byte	0x9c
 7434 104d 61100000 		.4byte	0x1061
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 225


 7435 1051 19       		.uleb128 0x19
 7436 1052 440E0000 		.4byte	.LASF98
 7437 1056 01       		.byte	0x1
 7438 1057 7A0E     		.2byte	0xe7a
 7439 1059 2C050000 		.4byte	0x52c
 7440 105d 02       		.uleb128 0x2
 7441 105e 91       		.byte	0x91
 7442 105f 74       		.sleb128 -12
 7443 1060 00       		.byte	0
 7444 1061 29       		.uleb128 0x29
 7445 1062 37070000 		.4byte	.LASF176
 7446 1066 01       		.byte	0x1
 7447 1067 B00E     		.2byte	0xeb0
 7448 1069 00000000 		.4byte	.LFB106
 7449 106d 40000000 		.4byte	.LFE106-.LFB106
 7450 1071 01       		.uleb128 0x1
 7451 1072 9C       		.byte	0x9c
 7452 1073 87100000 		.4byte	0x1087
 7453 1077 1A       		.uleb128 0x1a
 7454 1078 440E0000 		.4byte	.LASF98
 7455 107c 01       		.byte	0x1
 7456 107d B20E     		.2byte	0xeb2
 7457 107f 2C050000 		.4byte	0x52c
 7458 1083 02       		.uleb128 0x2
 7459 1084 91       		.byte	0x91
 7460 1085 74       		.sleb128 -12
 7461 1086 00       		.byte	0
 7462 1087 1F       		.uleb128 0x1f
 7463 1088 5C0D0000 		.4byte	.LASF177
 7464 108c 01       		.byte	0x1
 7465 108d CA0E     		.2byte	0xeca
 7466 108f 38020000 		.4byte	0x238
 7467 1093 00000000 		.4byte	.LFB107
 7468 1097 20000000 		.4byte	.LFE107-.LFB107
 7469 109b 01       		.uleb128 0x1
 7470 109c 9C       		.byte	0x9c
 7471 109d B1100000 		.4byte	0x10b1
 7472 10a1 1A       		.uleb128 0x1a
 7473 10a2 650B0000 		.4byte	.LASF92
 7474 10a6 01       		.byte	0x1
 7475 10a7 CC0E     		.2byte	0xecc
 7476 10a9 38020000 		.4byte	0x238
 7477 10ad 02       		.uleb128 0x2
 7478 10ae 91       		.byte	0x91
 7479 10af 74       		.sleb128 -12
 7480 10b0 00       		.byte	0
 7481 10b1 18       		.uleb128 0x18
 7482 10b2 B90B0000 		.4byte	.LASF178
 7483 10b6 01       		.byte	0x1
 7484 10b7 F70E     		.2byte	0xef7
 7485 10b9 2E010000 		.4byte	0x12e
 7486 10bd 00000000 		.4byte	.LFB108
 7487 10c1 04010000 		.4byte	.LFE108-.LFB108
 7488 10c5 01       		.uleb128 0x1
 7489 10c6 9C       		.byte	0x9c
 7490 10c7 F9100000 		.4byte	0x10f9
 7491 10cb 19       		.uleb128 0x19
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 226


 7492 10cc 420A0000 		.4byte	.LASF179
 7493 10d0 01       		.byte	0x1
 7494 10d1 F70E     		.2byte	0xef7
 7495 10d3 E5070000 		.4byte	0x7e5
 7496 10d7 02       		.uleb128 0x2
 7497 10d8 91       		.byte	0x91
 7498 10d9 6C       		.sleb128 -20
 7499 10da 1A       		.uleb128 0x1a
 7500 10db DC0B0000 		.4byte	.LASF180
 7501 10df 01       		.byte	0x1
 7502 10e0 F90E     		.2byte	0xef9
 7503 10e2 AC090000 		.4byte	0x9ac
 7504 10e6 02       		.uleb128 0x2
 7505 10e7 91       		.byte	0x91
 7506 10e8 70       		.sleb128 -16
 7507 10e9 1A       		.uleb128 0x1a
 7508 10ea 650B0000 		.4byte	.LASF92
 7509 10ee 01       		.byte	0x1
 7510 10ef FA0E     		.2byte	0xefa
 7511 10f1 2E010000 		.4byte	0x12e
 7512 10f5 02       		.uleb128 0x2
 7513 10f6 91       		.byte	0x91
 7514 10f7 74       		.sleb128 -12
 7515 10f8 00       		.byte	0
 7516 10f9 18       		.uleb128 0x18
 7517 10fa 67050000 		.4byte	.LASF181
 7518 10fe 01       		.byte	0x1
 7519 10ff 4E0F     		.2byte	0xf4e
 7520 1101 2E010000 		.4byte	0x12e
 7521 1105 00000000 		.4byte	.LFB109
 7522 1109 CC000000 		.4byte	.LFE109-.LFB109
 7523 110d 01       		.uleb128 0x1
 7524 110e 9C       		.byte	0x9c
 7525 110f 41110000 		.4byte	0x1141
 7526 1113 19       		.uleb128 0x19
 7527 1114 420A0000 		.4byte	.LASF179
 7528 1118 01       		.byte	0x1
 7529 1119 4E0F     		.2byte	0xf4e
 7530 111b E5070000 		.4byte	0x7e5
 7531 111f 02       		.uleb128 0x2
 7532 1120 91       		.byte	0x91
 7533 1121 6C       		.sleb128 -20
 7534 1122 1A       		.uleb128 0x1a
 7535 1123 440E0000 		.4byte	.LASF98
 7536 1127 01       		.byte	0x1
 7537 1128 500F     		.2byte	0xf50
 7538 112a AC090000 		.4byte	0x9ac
 7539 112e 02       		.uleb128 0x2
 7540 112f 91       		.byte	0x91
 7541 1130 70       		.sleb128 -16
 7542 1131 1A       		.uleb128 0x1a
 7543 1132 650B0000 		.4byte	.LASF92
 7544 1136 01       		.byte	0x1
 7545 1137 510F     		.2byte	0xf51
 7546 1139 2E010000 		.4byte	0x12e
 7547 113d 02       		.uleb128 0x2
 7548 113e 91       		.byte	0x91
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 227


 7549 113f 74       		.sleb128 -12
 7550 1140 00       		.byte	0
 7551 1141 1E       		.uleb128 0x1e
 7552 1142 AF030000 		.4byte	.LASF182
 7553 1146 01       		.byte	0x1
 7554 1147 9E0F     		.2byte	0xf9e
 7555 1149 00000000 		.4byte	.LFB110
 7556 114d F4000000 		.4byte	.LFE110-.LFB110
 7557 1151 01       		.uleb128 0x1
 7558 1152 9C       		.byte	0x9c
 7559 1153 B2110000 		.4byte	0x11b2
 7560 1157 19       		.uleb128 0x19
 7561 1158 420A0000 		.4byte	.LASF179
 7562 115c 01       		.byte	0x1
 7563 115d 9E0F     		.2byte	0xf9e
 7564 115f E5070000 		.4byte	0x7e5
 7565 1163 02       		.uleb128 0x2
 7566 1164 91       		.byte	0x91
 7567 1165 64       		.sleb128 -28
 7568 1166 19       		.uleb128 0x19
 7569 1167 8E090000 		.4byte	.LASF183
 7570 116b 01       		.byte	0x1
 7571 116c 9E0F     		.2byte	0xf9e
 7572 116e 39010000 		.4byte	0x139
 7573 1172 02       		.uleb128 0x2
 7574 1173 91       		.byte	0x91
 7575 1174 60       		.sleb128 -32
 7576 1175 1A       		.uleb128 0x1a
 7577 1176 440E0000 		.4byte	.LASF98
 7578 117a 01       		.byte	0x1
 7579 117b A00F     		.2byte	0xfa0
 7580 117d AC090000 		.4byte	0x9ac
 7581 1181 02       		.uleb128 0x2
 7582 1182 91       		.byte	0x91
 7583 1183 70       		.sleb128 -16
 7584 1184 1A       		.uleb128 0x1a
 7585 1185 F80C0000 		.4byte	.LASF123
 7586 1189 01       		.byte	0x1
 7587 118a A10F     		.2byte	0xfa1
 7588 118c 39010000 		.4byte	0x139
 7589 1190 02       		.uleb128 0x2
 7590 1191 91       		.byte	0x91
 7591 1192 68       		.sleb128 -24
 7592 1193 1A       		.uleb128 0x1a
 7593 1194 4B090000 		.4byte	.LASF184
 7594 1198 01       		.byte	0x1
 7595 1199 A10F     		.2byte	0xfa1
 7596 119b 39010000 		.4byte	0x139
 7597 119f 02       		.uleb128 0x2
 7598 11a0 91       		.byte	0x91
 7599 11a1 74       		.sleb128 -12
 7600 11a2 1A       		.uleb128 0x1a
 7601 11a3 38090000 		.4byte	.LASF185
 7602 11a7 01       		.byte	0x1
 7603 11a8 A20F     		.2byte	0xfa2
 7604 11aa B2110000 		.4byte	0x11b2
 7605 11ae 02       		.uleb128 0x2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 228


 7606 11af 91       		.byte	0x91
 7607 11b0 6C       		.sleb128 -20
 7608 11b1 00       		.byte	0
 7609 11b2 07       		.uleb128 0x7
 7610 11b3 39010000 		.4byte	0x139
 7611 11b7 1F       		.uleb128 0x1f
 7612 11b8 A2080000 		.4byte	.LASF186
 7613 11bc 01       		.byte	0x1
 7614 11bd 3D11     		.2byte	0x113d
 7615 11bf 44010000 		.4byte	0x144
 7616 11c3 00000000 		.4byte	.LFB111
 7617 11c7 30000000 		.4byte	.LFE111-.LFB111
 7618 11cb 01       		.uleb128 0x1
 7619 11cc 9C       		.byte	0x9c
 7620 11cd E1110000 		.4byte	0x11e1
 7621 11d1 1A       		.uleb128 0x1a
 7622 11d2 2B020000 		.4byte	.LASF117
 7623 11d6 01       		.byte	0x1
 7624 11d7 3F11     		.2byte	0x113f
 7625 11d9 44010000 		.4byte	0x144
 7626 11dd 02       		.uleb128 0x2
 7627 11de 91       		.byte	0x91
 7628 11df 74       		.sleb128 -12
 7629 11e0 00       		.byte	0
 7630 11e1 26       		.uleb128 0x26
 7631 11e2 F6040000 		.4byte	.LASF188
 7632 11e6 01       		.byte	0x1
 7633 11e7 4D11     		.2byte	0x114d
 7634 11e9 A9000000 		.4byte	0xa9
 7635 11ed 00000000 		.4byte	.LFB112
 7636 11f1 28000000 		.4byte	.LFE112-.LFB112
 7637 11f5 01       		.uleb128 0x1
 7638 11f6 9C       		.byte	0x9c
 7639 11f7 18       		.uleb128 0x18
 7640 11f8 18060000 		.4byte	.LASF189
 7641 11fc 01       		.byte	0x1
 7642 11fd 5E11     		.2byte	0x115e
 7643 11ff E4000000 		.4byte	0xe4
 7644 1203 00000000 		.4byte	.LFB113
 7645 1207 90000000 		.4byte	.LFE113-.LFB113
 7646 120b 01       		.uleb128 0x1
 7647 120c 9C       		.byte	0x9c
 7648 120d 3F120000 		.4byte	0x123f
 7649 1211 19       		.uleb128 0x19
 7650 1212 DD020000 		.4byte	.LASF190
 7651 1216 01       		.byte	0x1
 7652 1217 5E11     		.2byte	0x115e
 7653 1219 2E010000 		.4byte	0x12e
 7654 121d 02       		.uleb128 0x2
 7655 121e 91       		.byte	0x91
 7656 121f 6C       		.sleb128 -20
 7657 1220 19       		.uleb128 0x19
 7658 1221 140D0000 		.4byte	.LASF150
 7659 1225 01       		.byte	0x1
 7660 1226 5E11     		.2byte	0x115e
 7661 1228 44010000 		.4byte	0x144
 7662 122c 02       		.uleb128 0x2
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 229


 7663 122d 91       		.byte	0x91
 7664 122e 68       		.sleb128 -24
 7665 122f 1A       		.uleb128 0x1a
 7666 1230 D40E0000 		.4byte	.LASF191
 7667 1234 01       		.byte	0x1
 7668 1235 6011     		.2byte	0x1160
 7669 1237 E4000000 		.4byte	0xe4
 7670 123b 02       		.uleb128 0x2
 7671 123c 91       		.byte	0x91
 7672 123d 74       		.sleb128 -12
 7673 123e 00       		.byte	0
 7674 123f 18       		.uleb128 0x18
 7675 1240 38060000 		.4byte	.LASF192
 7676 1244 01       		.byte	0x1
 7677 1245 A211     		.2byte	0x11a2
 7678 1247 2E010000 		.4byte	0x12e
 7679 124b 00000000 		.4byte	.LFB114
 7680 124f B4000000 		.4byte	.LFE114-.LFB114
 7681 1253 01       		.uleb128 0x1
 7682 1254 9C       		.byte	0x9c
 7683 1255 A5120000 		.4byte	0x12a5
 7684 1259 19       		.uleb128 0x19
 7685 125a 59030000 		.4byte	.LASF193
 7686 125e 01       		.byte	0x1
 7687 125f A211     		.2byte	0x11a2
 7688 1261 E4000000 		.4byte	0xe4
 7689 1265 02       		.uleb128 0x2
 7690 1266 91       		.byte	0x91
 7691 1267 6C       		.sleb128 -20
 7692 1268 19       		.uleb128 0x19
 7693 1269 61000000 		.4byte	.LASF194
 7694 126d 01       		.byte	0x1
 7695 126e A211     		.2byte	0x11a2
 7696 1270 E4000000 		.4byte	0xe4
 7697 1274 02       		.uleb128 0x2
 7698 1275 91       		.byte	0x91
 7699 1276 68       		.sleb128 -24
 7700 1277 19       		.uleb128 0x19
 7701 1278 500B0000 		.4byte	.LASF195
 7702 127c 01       		.byte	0x1
 7703 127d A211     		.2byte	0x11a2
 7704 127f A5120000 		.4byte	0x12a5
 7705 1283 02       		.uleb128 0x2
 7706 1284 91       		.byte	0x91
 7707 1285 64       		.sleb128 -28
 7708 1286 19       		.uleb128 0x19
 7709 1287 140D0000 		.4byte	.LASF150
 7710 128b 01       		.byte	0x1
 7711 128c A211     		.2byte	0x11a2
 7712 128e 44010000 		.4byte	0x144
 7713 1292 02       		.uleb128 0x2
 7714 1293 91       		.byte	0x91
 7715 1294 60       		.sleb128 -32
 7716 1295 1A       		.uleb128 0x1a
 7717 1296 650B0000 		.4byte	.LASF92
 7718 129a 01       		.byte	0x1
 7719 129b A411     		.2byte	0x11a4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 230


 7720 129d 2E010000 		.4byte	0x12e
 7721 12a1 02       		.uleb128 0x2
 7722 12a2 91       		.byte	0x91
 7723 12a3 74       		.sleb128 -12
 7724 12a4 00       		.byte	0
 7725 12a5 06       		.uleb128 0x6
 7726 12a6 04       		.byte	0x4
 7727 12a7 E4000000 		.4byte	0xe4
 7728 12ab 18       		.uleb128 0x18
 7729 12ac A8020000 		.4byte	.LASF196
 7730 12b0 01       		.byte	0x1
 7731 12b1 F211     		.2byte	0x11f2
 7732 12b3 2E010000 		.4byte	0x12e
 7733 12b7 00000000 		.4byte	.LFB115
 7734 12bb 14010000 		.4byte	.LFE115-.LFB115
 7735 12bf 01       		.uleb128 0x1
 7736 12c0 9C       		.byte	0x9c
 7737 12c1 2F130000 		.4byte	0x132f
 7738 12c5 19       		.uleb128 0x19
 7739 12c6 F7080000 		.4byte	.LASF197
 7740 12ca 01       		.byte	0x1
 7741 12cb F211     		.2byte	0x11f2
 7742 12cd 38020000 		.4byte	0x238
 7743 12d1 02       		.uleb128 0x2
 7744 12d2 91       		.byte	0x91
 7745 12d3 64       		.sleb128 -28
 7746 12d4 19       		.uleb128 0x19
 7747 12d5 660A0000 		.4byte	.LASF198
 7748 12d9 01       		.byte	0x1
 7749 12da F211     		.2byte	0x11f2
 7750 12dc E4000000 		.4byte	0xe4
 7751 12e0 02       		.uleb128 0x2
 7752 12e1 91       		.byte	0x91
 7753 12e2 60       		.sleb128 -32
 7754 12e3 19       		.uleb128 0x19
 7755 12e4 8B080000 		.4byte	.LASF199
 7756 12e8 01       		.byte	0x1
 7757 12e9 F211     		.2byte	0x11f2
 7758 12eb 38030000 		.4byte	0x338
 7759 12ef 02       		.uleb128 0x2
 7760 12f0 91       		.byte	0x91
 7761 12f1 5F       		.sleb128 -33
 7762 12f2 19       		.uleb128 0x19
 7763 12f3 330B0000 		.4byte	.LASF200
 7764 12f7 01       		.byte	0x1
 7765 12f8 F211     		.2byte	0x11f2
 7766 12fa A5120000 		.4byte	0x12a5
 7767 12fe 02       		.uleb128 0x2
 7768 12ff 91       		.byte	0x91
 7769 1300 58       		.sleb128 -40
 7770 1301 1A       		.uleb128 0x1a
 7771 1302 440E0000 		.4byte	.LASF98
 7772 1306 01       		.byte	0x1
 7773 1307 F411     		.2byte	0x11f4
 7774 1309 2C050000 		.4byte	0x52c
 7775 130d 02       		.uleb128 0x2
 7776 130e 91       		.byte	0x91
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 231


 7777 130f 70       		.sleb128 -16
 7778 1310 1A       		.uleb128 0x1a
 7779 1311 650B0000 		.4byte	.LASF92
 7780 1315 01       		.byte	0x1
 7781 1316 F511     		.2byte	0x11f5
 7782 1318 2E010000 		.4byte	0x12e
 7783 131c 02       		.uleb128 0x2
 7784 131d 91       		.byte	0x91
 7785 131e 74       		.sleb128 -12
 7786 131f 1A       		.uleb128 0x1a
 7787 1320 5C010000 		.4byte	.LASF201
 7788 1324 01       		.byte	0x1
 7789 1325 F611     		.2byte	0x11f6
 7790 1327 C3000000 		.4byte	0xc3
 7791 132b 02       		.uleb128 0x2
 7792 132c 91       		.byte	0x91
 7793 132d 6F       		.sleb128 -17
 7794 132e 00       		.byte	0
 7795 132f 18       		.uleb128 0x18
 7796 1330 87010000 		.4byte	.LASF202
 7797 1334 01       		.byte	0x1
 7798 1335 6312     		.2byte	0x1263
 7799 1337 2E010000 		.4byte	0x12e
 7800 133b 00000000 		.4byte	.LFB116
 7801 133f 54010000 		.4byte	.LFE116-.LFB116
 7802 1343 01       		.uleb128 0x1
 7803 1344 9C       		.byte	0x9c
 7804 1345 19140000 		.4byte	0x1419
 7805 1349 19       		.uleb128 0x19
 7806 134a F7080000 		.4byte	.LASF197
 7807 134e 01       		.byte	0x1
 7808 134f 6312     		.2byte	0x1263
 7809 1351 38020000 		.4byte	0x238
 7810 1355 02       		.uleb128 0x2
 7811 1356 91       		.byte	0x91
 7812 1357 54       		.sleb128 -44
 7813 1358 19       		.uleb128 0x19
 7814 1359 660A0000 		.4byte	.LASF198
 7815 135d 01       		.byte	0x1
 7816 135e 6312     		.2byte	0x1263
 7817 1360 E4000000 		.4byte	0xe4
 7818 1364 02       		.uleb128 0x2
 7819 1365 91       		.byte	0x91
 7820 1366 50       		.sleb128 -48
 7821 1367 19       		.uleb128 0x19
 7822 1368 8B080000 		.4byte	.LASF199
 7823 136c 01       		.byte	0x1
 7824 136d 6312     		.2byte	0x1263
 7825 136f 38030000 		.4byte	0x338
 7826 1373 02       		.uleb128 0x2
 7827 1374 91       		.byte	0x91
 7828 1375 4F       		.sleb128 -49
 7829 1376 19       		.uleb128 0x19
 7830 1377 330B0000 		.4byte	.LASF200
 7831 137b 01       		.byte	0x1
 7832 137c 6312     		.2byte	0x1263
 7833 137e A5120000 		.4byte	0x12a5
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 232


 7834 1382 02       		.uleb128 0x2
 7835 1383 91       		.byte	0x91
 7836 1384 48       		.sleb128 -56
 7837 1385 19       		.uleb128 0x19
 7838 1386 8A000000 		.4byte	.LASF203
 7839 138a 01       		.byte	0x1
 7840 138b 6312     		.2byte	0x1263
 7841 138d 19140000 		.4byte	0x1419
 7842 1391 02       		.uleb128 0x2
 7843 1392 91       		.byte	0x91
 7844 1393 00       		.sleb128 0
 7845 1394 1A       		.uleb128 0x1a
 7846 1395 440E0000 		.4byte	.LASF98
 7847 1399 01       		.byte	0x1
 7848 139a 6512     		.2byte	0x1265
 7849 139c 2C050000 		.4byte	0x52c
 7850 13a0 02       		.uleb128 0x2
 7851 13a1 91       		.byte	0x91
 7852 13a2 70       		.sleb128 -16
 7853 13a3 1A       		.uleb128 0x1a
 7854 13a4 5C010000 		.4byte	.LASF201
 7855 13a8 01       		.byte	0x1
 7856 13a9 6612     		.2byte	0x1266
 7857 13ab C3000000 		.4byte	0xc3
 7858 13af 02       		.uleb128 0x2
 7859 13b0 91       		.byte	0x91
 7860 13b1 6B       		.sleb128 -21
 7861 13b2 1A       		.uleb128 0x1a
 7862 13b3 650B0000 		.4byte	.LASF92
 7863 13b7 01       		.byte	0x1
 7864 13b8 6712     		.2byte	0x1267
 7865 13ba 2E010000 		.4byte	0x12e
 7866 13be 02       		.uleb128 0x2
 7867 13bf 91       		.byte	0x91
 7868 13c0 74       		.sleb128 -12
 7869 13c1 1A       		.uleb128 0x1a
 7870 13c2 59020000 		.4byte	.LASF130
 7871 13c6 01       		.byte	0x1
 7872 13c7 6812     		.2byte	0x1268
 7873 13c9 39010000 		.4byte	0x139
 7874 13cd 02       		.uleb128 0x2
 7875 13ce 91       		.byte	0x91
 7876 13cf 6C       		.sleb128 -20
 7877 13d0 20       		.uleb128 0x20
 7878 13d1 ED030000 		.4byte	0x3ed
 7879 13d5 18000000 		.4byte	.LBB51
 7880 13d9 1A000000 		.4byte	.LBE51-.LBB51
 7881 13dd 01       		.byte	0x1
 7882 13de 8012     		.2byte	0x1280
 7883 13e0 FF130000 		.4byte	0x13ff
 7884 13e4 1B       		.uleb128 0x1b
 7885 13e5 18000000 		.4byte	.LBB52
 7886 13e9 1A000000 		.4byte	.LBE52-.LBB52
 7887 13ed 21       		.uleb128 0x21
 7888 13ee FD030000 		.4byte	0x3fd
 7889 13f2 02       		.uleb128 0x2
 7890 13f3 91       		.byte	0x91
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 233


 7891 13f4 64       		.sleb128 -28
 7892 13f5 21       		.uleb128 0x21
 7893 13f6 08040000 		.4byte	0x408
 7894 13fa 02       		.uleb128 0x2
 7895 13fb 91       		.byte	0x91
 7896 13fc 60       		.sleb128 -32
 7897 13fd 00       		.byte	0
 7898 13fe 00       		.byte	0
 7899 13ff 22       		.uleb128 0x22
 7900 1400 14040000 		.4byte	0x414
 7901 1404 2C010000 		.4byte	.LBB53
 7902 1408 06000000 		.4byte	.LBE53-.LBB53
 7903 140c 01       		.byte	0x1
 7904 140d D912     		.2byte	0x12d9
 7905 140f 23       		.uleb128 0x23
 7906 1410 20040000 		.4byte	0x420
 7907 1414 02       		.uleb128 0x2
 7908 1415 91       		.byte	0x91
 7909 1416 5C       		.sleb128 -36
 7910 1417 00       		.byte	0
 7911 1418 00       		.byte	0
 7912 1419 06       		.uleb128 0x6
 7913 141a 04       		.byte	0x4
 7914 141b 2E010000 		.4byte	0x12e
 7915 141f 1E       		.uleb128 0x1e
 7916 1420 F2090000 		.4byte	.LASF204
 7917 1424 01       		.byte	0x1
 7918 1425 E312     		.2byte	0x12e3
 7919 1427 00000000 		.4byte	.LFB117
 7920 142b E4000000 		.4byte	.LFE117-.LFB117
 7921 142f 01       		.uleb128 0x1
 7922 1430 9C       		.byte	0x9c
 7923 1431 C9140000 		.4byte	0x14c9
 7924 1435 19       		.uleb128 0x19
 7925 1436 F7080000 		.4byte	.LASF197
 7926 143a 01       		.byte	0x1
 7927 143b E312     		.2byte	0x12e3
 7928 143d 38020000 		.4byte	0x238
 7929 1441 02       		.uleb128 0x2
 7930 1442 91       		.byte	0x91
 7931 1443 5C       		.sleb128 -36
 7932 1444 19       		.uleb128 0x19
 7933 1445 8A000000 		.4byte	.LASF203
 7934 1449 01       		.byte	0x1
 7935 144a E312     		.2byte	0x12e3
 7936 144c 19140000 		.4byte	0x1419
 7937 1450 02       		.uleb128 0x2
 7938 1451 91       		.byte	0x91
 7939 1452 58       		.sleb128 -40
 7940 1453 1A       		.uleb128 0x1a
 7941 1454 440E0000 		.4byte	.LASF98
 7942 1458 01       		.byte	0x1
 7943 1459 E512     		.2byte	0x12e5
 7944 145b 2C050000 		.4byte	0x52c
 7945 145f 02       		.uleb128 0x2
 7946 1460 91       		.byte	0x91
 7947 1461 74       		.sleb128 -12
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 234


 7948 1462 1A       		.uleb128 0x1a
 7949 1463 5C010000 		.4byte	.LASF201
 7950 1467 01       		.byte	0x1
 7951 1468 E612     		.2byte	0x12e6
 7952 146a C3000000 		.4byte	0xc3
 7953 146e 02       		.uleb128 0x2
 7954 146f 91       		.byte	0x91
 7955 1470 6F       		.sleb128 -17
 7956 1471 1A       		.uleb128 0x1a
 7957 1472 59020000 		.4byte	.LASF130
 7958 1476 01       		.byte	0x1
 7959 1477 E712     		.2byte	0x12e7
 7960 1479 39010000 		.4byte	0x139
 7961 147d 02       		.uleb128 0x2
 7962 147e 91       		.byte	0x91
 7963 147f 70       		.sleb128 -16
 7964 1480 20       		.uleb128 0x20
 7965 1481 ED030000 		.4byte	0x3ed
 7966 1485 0E000000 		.4byte	.LBB55
 7967 1489 1A000000 		.4byte	.LBE55-.LBB55
 7968 148d 01       		.byte	0x1
 7969 148e FF12     		.2byte	0x12ff
 7970 1490 AF140000 		.4byte	0x14af
 7971 1494 1B       		.uleb128 0x1b
 7972 1495 0E000000 		.4byte	.LBB56
 7973 1499 1A000000 		.4byte	.LBE56-.LBB56
 7974 149d 21       		.uleb128 0x21
 7975 149e FD030000 		.4byte	0x3fd
 7976 14a2 02       		.uleb128 0x2
 7977 14a3 91       		.byte	0x91
 7978 14a4 68       		.sleb128 -24
 7979 14a5 21       		.uleb128 0x21
 7980 14a6 08040000 		.4byte	0x408
 7981 14aa 02       		.uleb128 0x2
 7982 14ab 91       		.byte	0x91
 7983 14ac 64       		.sleb128 -28
 7984 14ad 00       		.byte	0
 7985 14ae 00       		.byte	0
 7986 14af 22       		.uleb128 0x22
 7987 14b0 14040000 		.4byte	0x414
 7988 14b4 C0000000 		.4byte	.LBB57
 7989 14b8 06000000 		.4byte	.LBE57-.LBB57
 7990 14bc 01       		.byte	0x1
 7991 14bd 3113     		.2byte	0x1331
 7992 14bf 23       		.uleb128 0x23
 7993 14c0 20040000 		.4byte	0x420
 7994 14c4 02       		.uleb128 0x2
 7995 14c5 91       		.byte	0x91
 7996 14c6 60       		.sleb128 -32
 7997 14c7 00       		.byte	0
 7998 14c8 00       		.byte	0
 7999 14c9 18       		.uleb128 0x18
 8000 14ca 980C0000 		.4byte	.LASF205
 8001 14ce 01       		.byte	0x1
 8002 14cf 3A13     		.2byte	0x133a
 8003 14d1 2E010000 		.4byte	0x12e
 8004 14d5 00000000 		.4byte	.LFB118
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 235


 8005 14d9 4C000000 		.4byte	.LFE118-.LFB118
 8006 14dd 01       		.uleb128 0x1
 8007 14de 9C       		.byte	0x9c
 8008 14df 11150000 		.4byte	0x1511
 8009 14e3 19       		.uleb128 0x19
 8010 14e4 05090000 		.4byte	.LASF111
 8011 14e8 01       		.byte	0x1
 8012 14e9 3A13     		.2byte	0x133a
 8013 14eb 38020000 		.4byte	0x238
 8014 14ef 02       		.uleb128 0x2
 8015 14f0 91       		.byte	0x91
 8016 14f1 6C       		.sleb128 -20
 8017 14f2 1A       		.uleb128 0x1a
 8018 14f3 440E0000 		.4byte	.LASF98
 8019 14f7 01       		.byte	0x1
 8020 14f8 3C13     		.2byte	0x133c
 8021 14fa 2C050000 		.4byte	0x52c
 8022 14fe 02       		.uleb128 0x2
 8023 14ff 91       		.byte	0x91
 8024 1500 70       		.sleb128 -16
 8025 1501 1A       		.uleb128 0x1a
 8026 1502 650B0000 		.4byte	.LASF92
 8027 1506 01       		.byte	0x1
 8028 1507 3D13     		.2byte	0x133d
 8029 1509 2E010000 		.4byte	0x12e
 8030 150d 02       		.uleb128 0x2
 8031 150e 91       		.byte	0x91
 8032 150f 74       		.sleb128 -12
 8033 1510 00       		.byte	0
 8034 1511 1C       		.uleb128 0x1c
 8035 1512 9A0D0000 		.4byte	.LASF206
 8036 1516 01       		.byte	0x1
 8037 1517 5813     		.2byte	0x1358
 8038 1519 00000000 		.4byte	.LFB119
 8039 151d C8000000 		.4byte	.LFE119-.LFB119
 8040 1521 01       		.uleb128 0x1
 8041 1522 9C       		.byte	0x9c
 8042 1523 64150000 		.4byte	0x1564
 8043 1527 19       		.uleb128 0x19
 8044 1528 140D0000 		.4byte	.LASF150
 8045 152c 01       		.byte	0x1
 8046 152d 5813     		.2byte	0x1358
 8047 152f 44010000 		.4byte	0x144
 8048 1533 02       		.uleb128 0x2
 8049 1534 91       		.byte	0x91
 8050 1535 6C       		.sleb128 -20
 8051 1536 19       		.uleb128 0x19
 8052 1537 1E0C0000 		.4byte	.LASF207
 8053 153b 01       		.byte	0x1
 8054 153c 5813     		.2byte	0x1358
 8055 153e 64150000 		.4byte	0x1564
 8056 1542 02       		.uleb128 0x2
 8057 1543 91       		.byte	0x91
 8058 1544 68       		.sleb128 -24
 8059 1545 1A       		.uleb128 0x1a
 8060 1546 290E0000 		.4byte	.LASF103
 8061 154a 01       		.byte	0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 236


 8062 154b 5A13     		.2byte	0x135a
 8063 154d 44010000 		.4byte	0x144
 8064 1551 02       		.uleb128 0x2
 8065 1552 91       		.byte	0x91
 8066 1553 70       		.sleb128 -16
 8067 1554 1A       		.uleb128 0x1a
 8068 1555 79040000 		.4byte	.LASF106
 8069 1559 01       		.byte	0x1
 8070 155a 5B13     		.2byte	0x135b
 8071 155c D3060000 		.4byte	0x6d3
 8072 1560 02       		.uleb128 0x2
 8073 1561 91       		.byte	0x91
 8074 1562 74       		.sleb128 -12
 8075 1563 00       		.byte	0
 8076 1564 07       		.uleb128 0x7
 8077 1565 2E010000 		.4byte	0x12e
 8078 1569 11       		.uleb128 0x11
 8079 156a 2D020000 		.4byte	0x22d
 8080 156e 79150000 		.4byte	0x1579
 8081 1572 12       		.uleb128 0x12
 8082 1573 A2000000 		.4byte	0xa2
 8083 1577 04       		.byte	0x4
 8084 1578 00       		.byte	0
 8085 1579 1A       		.uleb128 0x1a
 8086 157a 4A010000 		.4byte	.LASF208
 8087 157e 01       		.byte	0x1
 8088 157f 5E01     		.2byte	0x15e
 8089 1581 69150000 		.4byte	0x1569
 8090 1585 05       		.uleb128 0x5
 8091 1586 03       		.byte	0x3
 8092 1587 04000000 		.4byte	pxReadyTasksLists
 8093 158b 1A       		.uleb128 0x1a
 8094 158c 090A0000 		.4byte	.LASF209
 8095 1590 01       		.byte	0x1
 8096 1591 5F01     		.2byte	0x15f
 8097 1593 9D150000 		.4byte	0x159d
 8098 1597 05       		.uleb128 0x5
 8099 1598 03       		.byte	0x3
 8100 1599 68000000 		.4byte	pxDelayedTaskList
 8101 159d 08       		.uleb128 0x8
 8102 159e 630C0000 		.4byte	0xc63
 8103 15a2 1A       		.uleb128 0x1a
 8104 15a3 B4040000 		.4byte	.LASF210
 8105 15a7 01       		.byte	0x1
 8106 15a8 6001     		.2byte	0x160
 8107 15aa 9D150000 		.4byte	0x159d
 8108 15ae 05       		.uleb128 0x5
 8109 15af 03       		.byte	0x3
 8110 15b0 6C000000 		.4byte	pxOverflowDelayedTaskList
 8111 15b4 1A       		.uleb128 0x1a
 8112 15b5 6E030000 		.4byte	.LASF211
 8113 15b9 01       		.byte	0x1
 8114 15ba 6101     		.2byte	0x161
 8115 15bc 2D020000 		.4byte	0x22d
 8116 15c0 05       		.uleb128 0x5
 8117 15c1 03       		.byte	0x3
 8118 15c2 70000000 		.4byte	xPendingReadyList
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 237


 8119 15c6 1A       		.uleb128 0x1a
 8120 15c7 8B030000 		.4byte	.LASF212
 8121 15cb 01       		.byte	0x1
 8122 15cc 6501     		.2byte	0x165
 8123 15ce 2D020000 		.4byte	0x22d
 8124 15d2 05       		.uleb128 0x5
 8125 15d3 03       		.byte	0x3
 8126 15d4 84000000 		.4byte	xTasksWaitingTermination
 8127 15d8 1A       		.uleb128 0x1a
 8128 15d9 18010000 		.4byte	.LASF213
 8129 15dd 01       		.byte	0x1
 8130 15de 6601     		.2byte	0x166
 8131 15e0 22020000 		.4byte	0x222
 8132 15e4 05       		.uleb128 0x5
 8133 15e5 03       		.byte	0x3
 8134 15e6 98000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8135 15ea 1A       		.uleb128 0x1a
 8136 15eb 89040000 		.4byte	.LASF214
 8137 15ef 01       		.byte	0x1
 8138 15f0 6C01     		.2byte	0x16c
 8139 15f2 2D020000 		.4byte	0x22d
 8140 15f6 05       		.uleb128 0x5
 8141 15f7 03       		.byte	0x3
 8142 15f8 9C000000 		.4byte	xSuspendedTaskList
 8143 15fc 1A       		.uleb128 0x1a
 8144 15fd E40D0000 		.4byte	.LASF215
 8145 1601 01       		.byte	0x1
 8146 1602 7101     		.2byte	0x171
 8147 1604 22020000 		.4byte	0x222
 8148 1608 05       		.uleb128 0x5
 8149 1609 03       		.byte	0x3
 8150 160a B0000000 		.4byte	uxCurrentNumberOfTasks
 8151 160e 1A       		.uleb128 0x1a
 8152 160f D5060000 		.4byte	.LASF216
 8153 1613 01       		.byte	0x1
 8154 1614 7201     		.2byte	0x172
 8155 1616 20160000 		.4byte	0x1620
 8156 161a 05       		.uleb128 0x5
 8157 161b 03       		.byte	0x3
 8158 161c B4000000 		.4byte	xTickCount
 8159 1620 08       		.uleb128 0x8
 8160 1621 44010000 		.4byte	0x144
 8161 1625 1A       		.uleb128 0x1a
 8162 1626 AE000000 		.4byte	.LASF217
 8163 162a 01       		.byte	0x1
 8164 162b 7301     		.2byte	0x173
 8165 162d 22020000 		.4byte	0x222
 8166 1631 05       		.uleb128 0x5
 8167 1632 03       		.byte	0x3
 8168 1633 B8000000 		.4byte	uxTopReadyPriority
 8169 1637 1A       		.uleb128 0x1a
 8170 1638 E8000000 		.4byte	.LASF218
 8171 163c 01       		.byte	0x1
 8172 163d 7401     		.2byte	0x174
 8173 163f 49160000 		.4byte	0x1649
 8174 1643 05       		.uleb128 0x5
 8175 1644 03       		.byte	0x3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 238


 8176 1645 BC000000 		.4byte	xSchedulerRunning
 8177 1649 08       		.uleb128 0x8
 8178 164a 2E010000 		.4byte	0x12e
 8179 164e 1A       		.uleb128 0x1a
 8180 164f 870B0000 		.4byte	.LASF219
 8181 1653 01       		.byte	0x1
 8182 1654 7501     		.2byte	0x175
 8183 1656 22020000 		.4byte	0x222
 8184 165a 05       		.uleb128 0x5
 8185 165b 03       		.byte	0x3
 8186 165c C0000000 		.4byte	uxPendedTicks
 8187 1660 1A       		.uleb128 0x1a
 8188 1661 F30E0000 		.4byte	.LASF220
 8189 1665 01       		.byte	0x1
 8190 1666 7601     		.2byte	0x176
 8191 1668 49160000 		.4byte	0x1649
 8192 166c 05       		.uleb128 0x5
 8193 166d 03       		.byte	0x3
 8194 166e C4000000 		.4byte	xYieldPending
 8195 1672 1A       		.uleb128 0x1a
 8196 1673 6E090000 		.4byte	.LASF221
 8197 1677 01       		.byte	0x1
 8198 1678 7701     		.2byte	0x177
 8199 167a 49160000 		.4byte	0x1649
 8200 167e 05       		.uleb128 0x5
 8201 167f 03       		.byte	0x3
 8202 1680 C8000000 		.4byte	xNumOfOverflows
 8203 1684 1A       		.uleb128 0x1a
 8204 1685 71080000 		.4byte	.LASF222
 8205 1689 01       		.byte	0x1
 8206 168a 7801     		.2byte	0x178
 8207 168c 39010000 		.4byte	0x139
 8208 1690 05       		.uleb128 0x5
 8209 1691 03       		.byte	0x3
 8210 1692 CC000000 		.4byte	uxTaskNumber
 8211 1696 1A       		.uleb128 0x1a
 8212 1697 AD060000 		.4byte	.LASF223
 8213 169b 01       		.byte	0x1
 8214 169c 7901     		.2byte	0x179
 8215 169e 20160000 		.4byte	0x1620
 8216 16a2 05       		.uleb128 0x5
 8217 16a3 03       		.byte	0x3
 8218 16a4 D0000000 		.4byte	xNextTaskUnblockTime
 8219 16a8 1A       		.uleb128 0x1a
 8220 16a9 7E090000 		.4byte	.LASF224
 8221 16ad 01       		.byte	0x1
 8222 16ae 7A01     		.2byte	0x17a
 8223 16b0 38020000 		.4byte	0x238
 8224 16b4 05       		.uleb128 0x5
 8225 16b5 03       		.byte	0x3
 8226 16b6 D4000000 		.4byte	xIdleTaskHandle
 8227 16ba 1A       		.uleb128 0x1a
 8228 16bb 510E0000 		.4byte	.LASF225
 8229 16bf 01       		.byte	0x1
 8230 16c0 8401     		.2byte	0x184
 8231 16c2 22020000 		.4byte	0x222
 8232 16c6 05       		.uleb128 0x5
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 239


 8233 16c7 03       		.byte	0x3
 8234 16c8 D8000000 		.4byte	uxSchedulerSuspended
 8235 16cc 2A       		.uleb128 0x2a
 8236 16cd D6090000 		.4byte	.LASF226
 8237 16d1 09       		.byte	0x9
 8238 16d2 9606     		.2byte	0x696
 8239 16d4 D8160000 		.4byte	0x16d8
 8240 16d8 08       		.uleb128 0x8
 8241 16d9 D9000000 		.4byte	0xd9
 8242 16dd 2B       		.uleb128 0x2b
 8243 16de D70D0000 		.4byte	.LASF227
 8244 16e2 01       		.byte	0x1
 8245 16e3 5B01     		.2byte	0x15b
 8246 16e5 EF160000 		.4byte	0x16ef
 8247 16e9 05       		.uleb128 0x5
 8248 16ea 03       		.byte	0x3
 8249 16eb 00000000 		.4byte	pxCurrentTCB
 8250 16ef 08       		.uleb128 0x8
 8251 16f0 2C050000 		.4byte	0x52c
 8252 16f4 00       		.byte	0
 8253              		.section	.debug_abbrev,"",%progbits
 8254              	.Ldebug_abbrev0:
 8255 0000 01       		.uleb128 0x1
 8256 0001 11       		.uleb128 0x11
 8257 0002 01       		.byte	0x1
 8258 0003 25       		.uleb128 0x25
 8259 0004 0E       		.uleb128 0xe
 8260 0005 13       		.uleb128 0x13
 8261 0006 0B       		.uleb128 0xb
 8262 0007 03       		.uleb128 0x3
 8263 0008 0E       		.uleb128 0xe
 8264 0009 1B       		.uleb128 0x1b
 8265 000a 0E       		.uleb128 0xe
 8266 000b 55       		.uleb128 0x55
 8267 000c 17       		.uleb128 0x17
 8268 000d 11       		.uleb128 0x11
 8269 000e 01       		.uleb128 0x1
 8270 000f 10       		.uleb128 0x10
 8271 0010 17       		.uleb128 0x17
 8272 0011 00       		.byte	0
 8273 0012 00       		.byte	0
 8274 0013 02       		.uleb128 0x2
 8275 0014 16       		.uleb128 0x16
 8276 0015 00       		.byte	0
 8277 0016 03       		.uleb128 0x3
 8278 0017 0E       		.uleb128 0xe
 8279 0018 3A       		.uleb128 0x3a
 8280 0019 0B       		.uleb128 0xb
 8281 001a 3B       		.uleb128 0x3b
 8282 001b 0B       		.uleb128 0xb
 8283 001c 49       		.uleb128 0x49
 8284 001d 13       		.uleb128 0x13
 8285 001e 00       		.byte	0
 8286 001f 00       		.byte	0
 8287 0020 03       		.uleb128 0x3
 8288 0021 24       		.uleb128 0x24
 8289 0022 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 240


 8290 0023 0B       		.uleb128 0xb
 8291 0024 0B       		.uleb128 0xb
 8292 0025 3E       		.uleb128 0x3e
 8293 0026 0B       		.uleb128 0xb
 8294 0027 03       		.uleb128 0x3
 8295 0028 0E       		.uleb128 0xe
 8296 0029 00       		.byte	0
 8297 002a 00       		.byte	0
 8298 002b 04       		.uleb128 0x4
 8299 002c 24       		.uleb128 0x24
 8300 002d 00       		.byte	0
 8301 002e 0B       		.uleb128 0xb
 8302 002f 0B       		.uleb128 0xb
 8303 0030 3E       		.uleb128 0x3e
 8304 0031 0B       		.uleb128 0xb
 8305 0032 03       		.uleb128 0x3
 8306 0033 08       		.uleb128 0x8
 8307 0034 00       		.byte	0
 8308 0035 00       		.byte	0
 8309 0036 05       		.uleb128 0x5
 8310 0037 0F       		.uleb128 0xf
 8311 0038 00       		.byte	0
 8312 0039 0B       		.uleb128 0xb
 8313 003a 0B       		.uleb128 0xb
 8314 003b 00       		.byte	0
 8315 003c 00       		.byte	0
 8316 003d 06       		.uleb128 0x6
 8317 003e 0F       		.uleb128 0xf
 8318 003f 00       		.byte	0
 8319 0040 0B       		.uleb128 0xb
 8320 0041 0B       		.uleb128 0xb
 8321 0042 49       		.uleb128 0x49
 8322 0043 13       		.uleb128 0x13
 8323 0044 00       		.byte	0
 8324 0045 00       		.byte	0
 8325 0046 07       		.uleb128 0x7
 8326 0047 26       		.uleb128 0x26
 8327 0048 00       		.byte	0
 8328 0049 49       		.uleb128 0x49
 8329 004a 13       		.uleb128 0x13
 8330 004b 00       		.byte	0
 8331 004c 00       		.byte	0
 8332 004d 08       		.uleb128 0x8
 8333 004e 35       		.uleb128 0x35
 8334 004f 00       		.byte	0
 8335 0050 49       		.uleb128 0x49
 8336 0051 13       		.uleb128 0x13
 8337 0052 00       		.byte	0
 8338 0053 00       		.byte	0
 8339 0054 09       		.uleb128 0x9
 8340 0055 15       		.uleb128 0x15
 8341 0056 01       		.byte	0x1
 8342 0057 27       		.uleb128 0x27
 8343 0058 19       		.uleb128 0x19
 8344 0059 01       		.uleb128 0x1
 8345 005a 13       		.uleb128 0x13
 8346 005b 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 241


 8347 005c 00       		.byte	0
 8348 005d 0A       		.uleb128 0xa
 8349 005e 05       		.uleb128 0x5
 8350 005f 00       		.byte	0
 8351 0060 49       		.uleb128 0x49
 8352 0061 13       		.uleb128 0x13
 8353 0062 00       		.byte	0
 8354 0063 00       		.byte	0
 8355 0064 0B       		.uleb128 0xb
 8356 0065 13       		.uleb128 0x13
 8357 0066 01       		.byte	0x1
 8358 0067 03       		.uleb128 0x3
 8359 0068 0E       		.uleb128 0xe
 8360 0069 0B       		.uleb128 0xb
 8361 006a 0B       		.uleb128 0xb
 8362 006b 3A       		.uleb128 0x3a
 8363 006c 0B       		.uleb128 0xb
 8364 006d 3B       		.uleb128 0x3b
 8365 006e 0B       		.uleb128 0xb
 8366 006f 01       		.uleb128 0x1
 8367 0070 13       		.uleb128 0x13
 8368 0071 00       		.byte	0
 8369 0072 00       		.byte	0
 8370 0073 0C       		.uleb128 0xc
 8371 0074 0D       		.uleb128 0xd
 8372 0075 00       		.byte	0
 8373 0076 03       		.uleb128 0x3
 8374 0077 0E       		.uleb128 0xe
 8375 0078 3A       		.uleb128 0x3a
 8376 0079 0B       		.uleb128 0xb
 8377 007a 3B       		.uleb128 0x3b
 8378 007b 0B       		.uleb128 0xb
 8379 007c 49       		.uleb128 0x49
 8380 007d 13       		.uleb128 0x13
 8381 007e 38       		.uleb128 0x38
 8382 007f 0B       		.uleb128 0xb
 8383 0080 00       		.byte	0
 8384 0081 00       		.byte	0
 8385 0082 0D       		.uleb128 0xd
 8386 0083 13       		.uleb128 0x13
 8387 0084 01       		.byte	0x1
 8388 0085 03       		.uleb128 0x3
 8389 0086 0E       		.uleb128 0xe
 8390 0087 0B       		.uleb128 0xb
 8391 0088 0B       		.uleb128 0xb
 8392 0089 3A       		.uleb128 0x3a
 8393 008a 0B       		.uleb128 0xb
 8394 008b 3B       		.uleb128 0x3b
 8395 008c 05       		.uleb128 0x5
 8396 008d 01       		.uleb128 0x1
 8397 008e 13       		.uleb128 0x13
 8398 008f 00       		.byte	0
 8399 0090 00       		.byte	0
 8400 0091 0E       		.uleb128 0xe
 8401 0092 0D       		.uleb128 0xd
 8402 0093 00       		.byte	0
 8403 0094 03       		.uleb128 0x3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 242


 8404 0095 0E       		.uleb128 0xe
 8405 0096 3A       		.uleb128 0x3a
 8406 0097 0B       		.uleb128 0xb
 8407 0098 3B       		.uleb128 0x3b
 8408 0099 05       		.uleb128 0x5
 8409 009a 49       		.uleb128 0x49
 8410 009b 13       		.uleb128 0x13
 8411 009c 38       		.uleb128 0x38
 8412 009d 0B       		.uleb128 0xb
 8413 009e 00       		.byte	0
 8414 009f 00       		.byte	0
 8415 00a0 0F       		.uleb128 0xf
 8416 00a1 04       		.uleb128 0x4
 8417 00a2 01       		.byte	0x1
 8418 00a3 0B       		.uleb128 0xb
 8419 00a4 0B       		.uleb128 0xb
 8420 00a5 3A       		.uleb128 0x3a
 8421 00a6 0B       		.uleb128 0xb
 8422 00a7 3B       		.uleb128 0x3b
 8423 00a8 0B       		.uleb128 0xb
 8424 00a9 01       		.uleb128 0x1
 8425 00aa 13       		.uleb128 0x13
 8426 00ab 00       		.byte	0
 8427 00ac 00       		.byte	0
 8428 00ad 10       		.uleb128 0x10
 8429 00ae 28       		.uleb128 0x28
 8430 00af 00       		.byte	0
 8431 00b0 03       		.uleb128 0x3
 8432 00b1 0E       		.uleb128 0xe
 8433 00b2 1C       		.uleb128 0x1c
 8434 00b3 0D       		.uleb128 0xd
 8435 00b4 00       		.byte	0
 8436 00b5 00       		.byte	0
 8437 00b6 11       		.uleb128 0x11
 8438 00b7 01       		.uleb128 0x1
 8439 00b8 01       		.byte	0x1
 8440 00b9 49       		.uleb128 0x49
 8441 00ba 13       		.uleb128 0x13
 8442 00bb 01       		.uleb128 0x1
 8443 00bc 13       		.uleb128 0x13
 8444 00bd 00       		.byte	0
 8445 00be 00       		.byte	0
 8446 00bf 12       		.uleb128 0x12
 8447 00c0 21       		.uleb128 0x21
 8448 00c1 00       		.byte	0
 8449 00c2 49       		.uleb128 0x49
 8450 00c3 13       		.uleb128 0x13
 8451 00c4 2F       		.uleb128 0x2f
 8452 00c5 0B       		.uleb128 0xb
 8453 00c6 00       		.byte	0
 8454 00c7 00       		.byte	0
 8455 00c8 13       		.uleb128 0x13
 8456 00c9 16       		.uleb128 0x16
 8457 00ca 00       		.byte	0
 8458 00cb 03       		.uleb128 0x3
 8459 00cc 0E       		.uleb128 0xe
 8460 00cd 3A       		.uleb128 0x3a
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 243


 8461 00ce 0B       		.uleb128 0xb
 8462 00cf 3B       		.uleb128 0x3b
 8463 00d0 05       		.uleb128 0x5
 8464 00d1 49       		.uleb128 0x49
 8465 00d2 13       		.uleb128 0x13
 8466 00d3 00       		.byte	0
 8467 00d4 00       		.byte	0
 8468 00d5 14       		.uleb128 0x14
 8469 00d6 2E       		.uleb128 0x2e
 8470 00d7 01       		.byte	0x1
 8471 00d8 03       		.uleb128 0x3
 8472 00d9 0E       		.uleb128 0xe
 8473 00da 3A       		.uleb128 0x3a
 8474 00db 0B       		.uleb128 0xb
 8475 00dc 3B       		.uleb128 0x3b
 8476 00dd 0B       		.uleb128 0xb
 8477 00de 27       		.uleb128 0x27
 8478 00df 19       		.uleb128 0x19
 8479 00e0 49       		.uleb128 0x49
 8480 00e1 13       		.uleb128 0x13
 8481 00e2 20       		.uleb128 0x20
 8482 00e3 0B       		.uleb128 0xb
 8483 00e4 01       		.uleb128 0x1
 8484 00e5 13       		.uleb128 0x13
 8485 00e6 00       		.byte	0
 8486 00e7 00       		.byte	0
 8487 00e8 15       		.uleb128 0x15
 8488 00e9 34       		.uleb128 0x34
 8489 00ea 00       		.byte	0
 8490 00eb 03       		.uleb128 0x3
 8491 00ec 0E       		.uleb128 0xe
 8492 00ed 3A       		.uleb128 0x3a
 8493 00ee 0B       		.uleb128 0xb
 8494 00ef 3B       		.uleb128 0x3b
 8495 00f0 0B       		.uleb128 0xb
 8496 00f1 49       		.uleb128 0x49
 8497 00f2 13       		.uleb128 0x13
 8498 00f3 00       		.byte	0
 8499 00f4 00       		.byte	0
 8500 00f5 16       		.uleb128 0x16
 8501 00f6 2E       		.uleb128 0x2e
 8502 00f7 01       		.byte	0x1
 8503 00f8 03       		.uleb128 0x3
 8504 00f9 0E       		.uleb128 0xe
 8505 00fa 3A       		.uleb128 0x3a
 8506 00fb 0B       		.uleb128 0xb
 8507 00fc 3B       		.uleb128 0x3b
 8508 00fd 0B       		.uleb128 0xb
 8509 00fe 27       		.uleb128 0x27
 8510 00ff 19       		.uleb128 0x19
 8511 0100 20       		.uleb128 0x20
 8512 0101 0B       		.uleb128 0xb
 8513 0102 01       		.uleb128 0x1
 8514 0103 13       		.uleb128 0x13
 8515 0104 00       		.byte	0
 8516 0105 00       		.byte	0
 8517 0106 17       		.uleb128 0x17
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 244


 8518 0107 05       		.uleb128 0x5
 8519 0108 00       		.byte	0
 8520 0109 03       		.uleb128 0x3
 8521 010a 0E       		.uleb128 0xe
 8522 010b 3A       		.uleb128 0x3a
 8523 010c 0B       		.uleb128 0xb
 8524 010d 3B       		.uleb128 0x3b
 8525 010e 0B       		.uleb128 0xb
 8526 010f 49       		.uleb128 0x49
 8527 0110 13       		.uleb128 0x13
 8528 0111 00       		.byte	0
 8529 0112 00       		.byte	0
 8530 0113 18       		.uleb128 0x18
 8531 0114 2E       		.uleb128 0x2e
 8532 0115 01       		.byte	0x1
 8533 0116 3F       		.uleb128 0x3f
 8534 0117 19       		.uleb128 0x19
 8535 0118 03       		.uleb128 0x3
 8536 0119 0E       		.uleb128 0xe
 8537 011a 3A       		.uleb128 0x3a
 8538 011b 0B       		.uleb128 0xb
 8539 011c 3B       		.uleb128 0x3b
 8540 011d 05       		.uleb128 0x5
 8541 011e 27       		.uleb128 0x27
 8542 011f 19       		.uleb128 0x19
 8543 0120 49       		.uleb128 0x49
 8544 0121 13       		.uleb128 0x13
 8545 0122 11       		.uleb128 0x11
 8546 0123 01       		.uleb128 0x1
 8547 0124 12       		.uleb128 0x12
 8548 0125 06       		.uleb128 0x6
 8549 0126 40       		.uleb128 0x40
 8550 0127 18       		.uleb128 0x18
 8551 0128 9642     		.uleb128 0x2116
 8552 012a 19       		.uleb128 0x19
 8553 012b 01       		.uleb128 0x1
 8554 012c 13       		.uleb128 0x13
 8555 012d 00       		.byte	0
 8556 012e 00       		.byte	0
 8557 012f 19       		.uleb128 0x19
 8558 0130 05       		.uleb128 0x5
 8559 0131 00       		.byte	0
 8560 0132 03       		.uleb128 0x3
 8561 0133 0E       		.uleb128 0xe
 8562 0134 3A       		.uleb128 0x3a
 8563 0135 0B       		.uleb128 0xb
 8564 0136 3B       		.uleb128 0x3b
 8565 0137 05       		.uleb128 0x5
 8566 0138 49       		.uleb128 0x49
 8567 0139 13       		.uleb128 0x13
 8568 013a 02       		.uleb128 0x2
 8569 013b 18       		.uleb128 0x18
 8570 013c 00       		.byte	0
 8571 013d 00       		.byte	0
 8572 013e 1A       		.uleb128 0x1a
 8573 013f 34       		.uleb128 0x34
 8574 0140 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 245


 8575 0141 03       		.uleb128 0x3
 8576 0142 0E       		.uleb128 0xe
 8577 0143 3A       		.uleb128 0x3a
 8578 0144 0B       		.uleb128 0xb
 8579 0145 3B       		.uleb128 0x3b
 8580 0146 05       		.uleb128 0x5
 8581 0147 49       		.uleb128 0x49
 8582 0148 13       		.uleb128 0x13
 8583 0149 02       		.uleb128 0x2
 8584 014a 18       		.uleb128 0x18
 8585 014b 00       		.byte	0
 8586 014c 00       		.byte	0
 8587 014d 1B       		.uleb128 0x1b
 8588 014e 0B       		.uleb128 0xb
 8589 014f 01       		.byte	0x1
 8590 0150 11       		.uleb128 0x11
 8591 0151 01       		.uleb128 0x1
 8592 0152 12       		.uleb128 0x12
 8593 0153 06       		.uleb128 0x6
 8594 0154 00       		.byte	0
 8595 0155 00       		.byte	0
 8596 0156 1C       		.uleb128 0x1c
 8597 0157 2E       		.uleb128 0x2e
 8598 0158 01       		.byte	0x1
 8599 0159 03       		.uleb128 0x3
 8600 015a 0E       		.uleb128 0xe
 8601 015b 3A       		.uleb128 0x3a
 8602 015c 0B       		.uleb128 0xb
 8603 015d 3B       		.uleb128 0x3b
 8604 015e 05       		.uleb128 0x5
 8605 015f 27       		.uleb128 0x27
 8606 0160 19       		.uleb128 0x19
 8607 0161 11       		.uleb128 0x11
 8608 0162 01       		.uleb128 0x1
 8609 0163 12       		.uleb128 0x12
 8610 0164 06       		.uleb128 0x6
 8611 0165 40       		.uleb128 0x40
 8612 0166 18       		.uleb128 0x18
 8613 0167 9642     		.uleb128 0x2116
 8614 0169 19       		.uleb128 0x19
 8615 016a 01       		.uleb128 0x1
 8616 016b 13       		.uleb128 0x13
 8617 016c 00       		.byte	0
 8618 016d 00       		.byte	0
 8619 016e 1D       		.uleb128 0x1d
 8620 016f 34       		.uleb128 0x34
 8621 0170 00       		.byte	0
 8622 0171 03       		.uleb128 0x3
 8623 0172 08       		.uleb128 0x8
 8624 0173 3A       		.uleb128 0x3a
 8625 0174 0B       		.uleb128 0xb
 8626 0175 3B       		.uleb128 0x3b
 8627 0176 05       		.uleb128 0x5
 8628 0177 49       		.uleb128 0x49
 8629 0178 13       		.uleb128 0x13
 8630 0179 02       		.uleb128 0x2
 8631 017a 18       		.uleb128 0x18
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 246


 8632 017b 00       		.byte	0
 8633 017c 00       		.byte	0
 8634 017d 1E       		.uleb128 0x1e
 8635 017e 2E       		.uleb128 0x2e
 8636 017f 01       		.byte	0x1
 8637 0180 3F       		.uleb128 0x3f
 8638 0181 19       		.uleb128 0x19
 8639 0182 03       		.uleb128 0x3
 8640 0183 0E       		.uleb128 0xe
 8641 0184 3A       		.uleb128 0x3a
 8642 0185 0B       		.uleb128 0xb
 8643 0186 3B       		.uleb128 0x3b
 8644 0187 05       		.uleb128 0x5
 8645 0188 27       		.uleb128 0x27
 8646 0189 19       		.uleb128 0x19
 8647 018a 11       		.uleb128 0x11
 8648 018b 01       		.uleb128 0x1
 8649 018c 12       		.uleb128 0x12
 8650 018d 06       		.uleb128 0x6
 8651 018e 40       		.uleb128 0x40
 8652 018f 18       		.uleb128 0x18
 8653 0190 9642     		.uleb128 0x2116
 8654 0192 19       		.uleb128 0x19
 8655 0193 01       		.uleb128 0x1
 8656 0194 13       		.uleb128 0x13
 8657 0195 00       		.byte	0
 8658 0196 00       		.byte	0
 8659 0197 1F       		.uleb128 0x1f
 8660 0198 2E       		.uleb128 0x2e
 8661 0199 01       		.byte	0x1
 8662 019a 3F       		.uleb128 0x3f
 8663 019b 19       		.uleb128 0x19
 8664 019c 03       		.uleb128 0x3
 8665 019d 0E       		.uleb128 0xe
 8666 019e 3A       		.uleb128 0x3a
 8667 019f 0B       		.uleb128 0xb
 8668 01a0 3B       		.uleb128 0x3b
 8669 01a1 05       		.uleb128 0x5
 8670 01a2 27       		.uleb128 0x27
 8671 01a3 19       		.uleb128 0x19
 8672 01a4 49       		.uleb128 0x49
 8673 01a5 13       		.uleb128 0x13
 8674 01a6 11       		.uleb128 0x11
 8675 01a7 01       		.uleb128 0x1
 8676 01a8 12       		.uleb128 0x12
 8677 01a9 06       		.uleb128 0x6
 8678 01aa 40       		.uleb128 0x40
 8679 01ab 18       		.uleb128 0x18
 8680 01ac 9742     		.uleb128 0x2117
 8681 01ae 19       		.uleb128 0x19
 8682 01af 01       		.uleb128 0x1
 8683 01b0 13       		.uleb128 0x13
 8684 01b1 00       		.byte	0
 8685 01b2 00       		.byte	0
 8686 01b3 20       		.uleb128 0x20
 8687 01b4 1D       		.uleb128 0x1d
 8688 01b5 01       		.byte	0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 247


 8689 01b6 31       		.uleb128 0x31
 8690 01b7 13       		.uleb128 0x13
 8691 01b8 11       		.uleb128 0x11
 8692 01b9 01       		.uleb128 0x1
 8693 01ba 12       		.uleb128 0x12
 8694 01bb 06       		.uleb128 0x6
 8695 01bc 58       		.uleb128 0x58
 8696 01bd 0B       		.uleb128 0xb
 8697 01be 59       		.uleb128 0x59
 8698 01bf 05       		.uleb128 0x5
 8699 01c0 01       		.uleb128 0x1
 8700 01c1 13       		.uleb128 0x13
 8701 01c2 00       		.byte	0
 8702 01c3 00       		.byte	0
 8703 01c4 21       		.uleb128 0x21
 8704 01c5 34       		.uleb128 0x34
 8705 01c6 00       		.byte	0
 8706 01c7 31       		.uleb128 0x31
 8707 01c8 13       		.uleb128 0x13
 8708 01c9 02       		.uleb128 0x2
 8709 01ca 18       		.uleb128 0x18
 8710 01cb 00       		.byte	0
 8711 01cc 00       		.byte	0
 8712 01cd 22       		.uleb128 0x22
 8713 01ce 1D       		.uleb128 0x1d
 8714 01cf 01       		.byte	0x1
 8715 01d0 31       		.uleb128 0x31
 8716 01d1 13       		.uleb128 0x13
 8717 01d2 11       		.uleb128 0x11
 8718 01d3 01       		.uleb128 0x1
 8719 01d4 12       		.uleb128 0x12
 8720 01d5 06       		.uleb128 0x6
 8721 01d6 58       		.uleb128 0x58
 8722 01d7 0B       		.uleb128 0xb
 8723 01d8 59       		.uleb128 0x59
 8724 01d9 05       		.uleb128 0x5
 8725 01da 00       		.byte	0
 8726 01db 00       		.byte	0
 8727 01dc 23       		.uleb128 0x23
 8728 01dd 05       		.uleb128 0x5
 8729 01de 00       		.byte	0
 8730 01df 31       		.uleb128 0x31
 8731 01e0 13       		.uleb128 0x13
 8732 01e1 02       		.uleb128 0x2
 8733 01e2 18       		.uleb128 0x18
 8734 01e3 00       		.byte	0
 8735 01e4 00       		.byte	0
 8736 01e5 24       		.uleb128 0x24
 8737 01e6 2E       		.uleb128 0x2e
 8738 01e7 01       		.byte	0x1
 8739 01e8 03       		.uleb128 0x3
 8740 01e9 0E       		.uleb128 0xe
 8741 01ea 3A       		.uleb128 0x3a
 8742 01eb 0B       		.uleb128 0xb
 8743 01ec 3B       		.uleb128 0x3b
 8744 01ed 05       		.uleb128 0x5
 8745 01ee 27       		.uleb128 0x27
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 248


 8746 01ef 19       		.uleb128 0x19
 8747 01f0 49       		.uleb128 0x49
 8748 01f1 13       		.uleb128 0x13
 8749 01f2 11       		.uleb128 0x11
 8750 01f3 01       		.uleb128 0x1
 8751 01f4 12       		.uleb128 0x12
 8752 01f5 06       		.uleb128 0x6
 8753 01f6 40       		.uleb128 0x40
 8754 01f7 18       		.uleb128 0x18
 8755 01f8 9742     		.uleb128 0x2117
 8756 01fa 19       		.uleb128 0x19
 8757 01fb 01       		.uleb128 0x1
 8758 01fc 13       		.uleb128 0x13
 8759 01fd 00       		.byte	0
 8760 01fe 00       		.byte	0
 8761 01ff 25       		.uleb128 0x25
 8762 0200 2E       		.uleb128 0x2e
 8763 0201 00       		.byte	0
 8764 0202 3F       		.uleb128 0x3f
 8765 0203 19       		.uleb128 0x19
 8766 0204 03       		.uleb128 0x3
 8767 0205 0E       		.uleb128 0xe
 8768 0206 3A       		.uleb128 0x3a
 8769 0207 0B       		.uleb128 0xb
 8770 0208 3B       		.uleb128 0x3b
 8771 0209 05       		.uleb128 0x5
 8772 020a 27       		.uleb128 0x27
 8773 020b 19       		.uleb128 0x19
 8774 020c 11       		.uleb128 0x11
 8775 020d 01       		.uleb128 0x1
 8776 020e 12       		.uleb128 0x12
 8777 020f 06       		.uleb128 0x6
 8778 0210 40       		.uleb128 0x40
 8779 0211 18       		.uleb128 0x18
 8780 0212 9742     		.uleb128 0x2117
 8781 0214 19       		.uleb128 0x19
 8782 0215 00       		.byte	0
 8783 0216 00       		.byte	0
 8784 0217 26       		.uleb128 0x26
 8785 0218 2E       		.uleb128 0x2e
 8786 0219 00       		.byte	0
 8787 021a 3F       		.uleb128 0x3f
 8788 021b 19       		.uleb128 0x19
 8789 021c 03       		.uleb128 0x3
 8790 021d 0E       		.uleb128 0xe
 8791 021e 3A       		.uleb128 0x3a
 8792 021f 0B       		.uleb128 0xb
 8793 0220 3B       		.uleb128 0x3b
 8794 0221 05       		.uleb128 0x5
 8795 0222 27       		.uleb128 0x27
 8796 0223 19       		.uleb128 0x19
 8797 0224 49       		.uleb128 0x49
 8798 0225 13       		.uleb128 0x13
 8799 0226 11       		.uleb128 0x11
 8800 0227 01       		.uleb128 0x1
 8801 0228 12       		.uleb128 0x12
 8802 0229 06       		.uleb128 0x6
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 249


 8803 022a 40       		.uleb128 0x40
 8804 022b 18       		.uleb128 0x18
 8805 022c 9742     		.uleb128 0x2117
 8806 022e 19       		.uleb128 0x19
 8807 022f 00       		.byte	0
 8808 0230 00       		.byte	0
 8809 0231 27       		.uleb128 0x27
 8810 0232 0B       		.uleb128 0xb
 8811 0233 01       		.byte	0x1
 8812 0234 11       		.uleb128 0x11
 8813 0235 01       		.uleb128 0x1
 8814 0236 12       		.uleb128 0x12
 8815 0237 06       		.uleb128 0x6
 8816 0238 01       		.uleb128 0x1
 8817 0239 13       		.uleb128 0x13
 8818 023a 00       		.byte	0
 8819 023b 00       		.byte	0
 8820 023c 28       		.uleb128 0x28
 8821 023d 2E       		.uleb128 0x2e
 8822 023e 01       		.byte	0x1
 8823 023f 3F       		.uleb128 0x3f
 8824 0240 19       		.uleb128 0x19
 8825 0241 03       		.uleb128 0x3
 8826 0242 0E       		.uleb128 0xe
 8827 0243 3A       		.uleb128 0x3a
 8828 0244 0B       		.uleb128 0xb
 8829 0245 3B       		.uleb128 0x3b
 8830 0246 05       		.uleb128 0x5
 8831 0247 27       		.uleb128 0x27
 8832 0248 19       		.uleb128 0x19
 8833 0249 11       		.uleb128 0x11
 8834 024a 01       		.uleb128 0x1
 8835 024b 12       		.uleb128 0x12
 8836 024c 06       		.uleb128 0x6
 8837 024d 40       		.uleb128 0x40
 8838 024e 18       		.uleb128 0x18
 8839 024f 9742     		.uleb128 0x2117
 8840 0251 19       		.uleb128 0x19
 8841 0252 01       		.uleb128 0x1
 8842 0253 13       		.uleb128 0x13
 8843 0254 00       		.byte	0
 8844 0255 00       		.byte	0
 8845 0256 29       		.uleb128 0x29
 8846 0257 2E       		.uleb128 0x2e
 8847 0258 01       		.byte	0x1
 8848 0259 03       		.uleb128 0x3
 8849 025a 0E       		.uleb128 0xe
 8850 025b 3A       		.uleb128 0x3a
 8851 025c 0B       		.uleb128 0xb
 8852 025d 3B       		.uleb128 0x3b
 8853 025e 05       		.uleb128 0x5
 8854 025f 27       		.uleb128 0x27
 8855 0260 19       		.uleb128 0x19
 8856 0261 11       		.uleb128 0x11
 8857 0262 01       		.uleb128 0x1
 8858 0263 12       		.uleb128 0x12
 8859 0264 06       		.uleb128 0x6
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 250


 8860 0265 40       		.uleb128 0x40
 8861 0266 18       		.uleb128 0x18
 8862 0267 9742     		.uleb128 0x2117
 8863 0269 19       		.uleb128 0x19
 8864 026a 01       		.uleb128 0x1
 8865 026b 13       		.uleb128 0x13
 8866 026c 00       		.byte	0
 8867 026d 00       		.byte	0
 8868 026e 2A       		.uleb128 0x2a
 8869 026f 34       		.uleb128 0x34
 8870 0270 00       		.byte	0
 8871 0271 03       		.uleb128 0x3
 8872 0272 0E       		.uleb128 0xe
 8873 0273 3A       		.uleb128 0x3a
 8874 0274 0B       		.uleb128 0xb
 8875 0275 3B       		.uleb128 0x3b
 8876 0276 05       		.uleb128 0x5
 8877 0277 49       		.uleb128 0x49
 8878 0278 13       		.uleb128 0x13
 8879 0279 3F       		.uleb128 0x3f
 8880 027a 19       		.uleb128 0x19
 8881 027b 3C       		.uleb128 0x3c
 8882 027c 19       		.uleb128 0x19
 8883 027d 00       		.byte	0
 8884 027e 00       		.byte	0
 8885 027f 2B       		.uleb128 0x2b
 8886 0280 34       		.uleb128 0x34
 8887 0281 00       		.byte	0
 8888 0282 03       		.uleb128 0x3
 8889 0283 0E       		.uleb128 0xe
 8890 0284 3A       		.uleb128 0x3a
 8891 0285 0B       		.uleb128 0xb
 8892 0286 3B       		.uleb128 0x3b
 8893 0287 05       		.uleb128 0x5
 8894 0288 49       		.uleb128 0x49
 8895 0289 13       		.uleb128 0x13
 8896 028a 3F       		.uleb128 0x3f
 8897 028b 19       		.uleb128 0x19
 8898 028c 02       		.uleb128 0x2
 8899 028d 18       		.uleb128 0x18
 8900 028e 00       		.byte	0
 8901 028f 00       		.byte	0
 8902 0290 00       		.byte	0
 8903              		.section	.debug_aranges,"",%progbits
 8904 0000 B4010000 		.4byte	0x1b4
 8905 0004 0200     		.2byte	0x2
 8906 0006 00000000 		.4byte	.Ldebug_info0
 8907 000a 04       		.byte	0x4
 8908 000b 00       		.byte	0
 8909 000c 0000     		.2byte	0
 8910 000e 0000     		.2byte	0
 8911 0010 00000000 		.4byte	.LFB68
 8912 0014 82000000 		.4byte	.LFE68-.LFB68
 8913 0018 00000000 		.4byte	.LFB69
 8914 001c EC000000 		.4byte	.LFE69-.LFB69
 8915 0020 00000000 		.4byte	.LFB70
 8916 0024 D8000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 251


 8917 0028 00000000 		.4byte	.LFB71
 8918 002c FC000000 		.4byte	.LFE71-.LFB71
 8919 0030 00000000 		.4byte	.LFB72
 8920 0034 A0000000 		.4byte	.LFE72-.LFB72
 8921 0038 00000000 		.4byte	.LFB73
 8922 003c 44000000 		.4byte	.LFE73-.LFB73
 8923 0040 00000000 		.4byte	.LFB74
 8924 0044 B0000000 		.4byte	.LFE74-.LFB74
 8925 0048 00000000 		.4byte	.LFB75
 8926 004c 34000000 		.4byte	.LFE75-.LFB75
 8927 0050 00000000 		.4byte	.LFB76
 8928 0054 58000000 		.4byte	.LFE76-.LFB76
 8929 0058 00000000 		.4byte	.LFB77
 8930 005c 38010000 		.4byte	.LFE77-.LFB77
 8931 0060 00000000 		.4byte	.LFB78
 8932 0064 00010000 		.4byte	.LFE78-.LFB78
 8933 0068 00000000 		.4byte	.LFB79
 8934 006c 48000000 		.4byte	.LFE79-.LFB79
 8935 0070 00000000 		.4byte	.LFB80
 8936 0074 A0000000 		.4byte	.LFE80-.LFB80
 8937 0078 00000000 		.4byte	.LFB81
 8938 007c C4000000 		.4byte	.LFE81-.LFB81
 8939 0080 00000000 		.4byte	.LFB82
 8940 0084 6C000000 		.4byte	.LFE82-.LFB82
 8941 0088 00000000 		.4byte	.LFB83
 8942 008c 2C000000 		.4byte	.LFE83-.LFB83
 8943 0090 00000000 		.4byte	.LFB84
 8944 0094 1C000000 		.4byte	.LFE84-.LFB84
 8945 0098 00000000 		.4byte	.LFB85
 8946 009c 20010000 		.4byte	.LFE85-.LFB85
 8947 00a0 00000000 		.4byte	.LFB86
 8948 00a4 20000000 		.4byte	.LFE86-.LFB86
 8949 00a8 00000000 		.4byte	.LFB87
 8950 00ac 24000000 		.4byte	.LFE87-.LFB87
 8951 00b0 00000000 		.4byte	.LFB88
 8952 00b4 18000000 		.4byte	.LFE88-.LFB88
 8953 00b8 00000000 		.4byte	.LFB89
 8954 00bc 2C000000 		.4byte	.LFE89-.LFB89
 8955 00c0 00000000 		.4byte	.LFB90
 8956 00c4 54010000 		.4byte	.LFE90-.LFB90
 8957 00c8 00000000 		.4byte	.LFB91
 8958 00cc D4000000 		.4byte	.LFE91-.LFB91
 8959 00d0 00000000 		.4byte	.LFB92
 8960 00d4 2C000000 		.4byte	.LFE92-.LFB92
 8961 00d8 00000000 		.4byte	.LFB93
 8962 00dc 38000000 		.4byte	.LFE93-.LFB93
 8963 00e0 00000000 		.4byte	.LFB94
 8964 00e4 AC000000 		.4byte	.LFE94-.LFB94
 8965 00e8 00000000 		.4byte	.LFB95
 8966 00ec 88000000 		.4byte	.LFE95-.LFB95
 8967 00f0 00000000 		.4byte	.LFB96
 8968 00f4 30000000 		.4byte	.LFE96-.LFB96
 8969 00f8 00000000 		.4byte	.LFB97
 8970 00fc 2C000000 		.4byte	.LFE97-.LFB97
 8971 0100 00000000 		.4byte	.LFB98
 8972 0104 8C000000 		.4byte	.LFE98-.LFB98
 8973 0108 00000000 		.4byte	.LFB99
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 252


 8974 010c 18000000 		.4byte	.LFE99-.LFB99
 8975 0110 00000000 		.4byte	.LFB100
 8976 0114 0E000000 		.4byte	.LFE100-.LFB100
 8977 0118 00000000 		.4byte	.LFB101
 8978 011c 7C000000 		.4byte	.LFE101-.LFB101
 8979 0120 00000000 		.4byte	.LFB102
 8980 0124 58000000 		.4byte	.LFE102-.LFB102
 8981 0128 00000000 		.4byte	.LFB103
 8982 012c 38000000 		.4byte	.LFE103-.LFB103
 8983 0130 00000000 		.4byte	.LFB104
 8984 0134 38000000 		.4byte	.LFE104-.LFB104
 8985 0138 00000000 		.4byte	.LFB105
 8986 013c 1E000000 		.4byte	.LFE105-.LFB105
 8987 0140 00000000 		.4byte	.LFB106
 8988 0144 40000000 		.4byte	.LFE106-.LFB106
 8989 0148 00000000 		.4byte	.LFB107
 8990 014c 20000000 		.4byte	.LFE107-.LFB107
 8991 0150 00000000 		.4byte	.LFB108
 8992 0154 04010000 		.4byte	.LFE108-.LFB108
 8993 0158 00000000 		.4byte	.LFB109
 8994 015c CC000000 		.4byte	.LFE109-.LFB109
 8995 0160 00000000 		.4byte	.LFB110
 8996 0164 F4000000 		.4byte	.LFE110-.LFB110
 8997 0168 00000000 		.4byte	.LFB111
 8998 016c 30000000 		.4byte	.LFE111-.LFB111
 8999 0170 00000000 		.4byte	.LFB112
 9000 0174 28000000 		.4byte	.LFE112-.LFB112
 9001 0178 00000000 		.4byte	.LFB113
 9002 017c 90000000 		.4byte	.LFE113-.LFB113
 9003 0180 00000000 		.4byte	.LFB114
 9004 0184 B4000000 		.4byte	.LFE114-.LFB114
 9005 0188 00000000 		.4byte	.LFB115
 9006 018c 14010000 		.4byte	.LFE115-.LFB115
 9007 0190 00000000 		.4byte	.LFB116
 9008 0194 54010000 		.4byte	.LFE116-.LFB116
 9009 0198 00000000 		.4byte	.LFB117
 9010 019c E4000000 		.4byte	.LFE117-.LFB117
 9011 01a0 00000000 		.4byte	.LFB118
 9012 01a4 4C000000 		.4byte	.LFE118-.LFB118
 9013 01a8 00000000 		.4byte	.LFB119
 9014 01ac C8000000 		.4byte	.LFE119-.LFB119
 9015 01b0 00000000 		.4byte	0
 9016 01b4 00000000 		.4byte	0
 9017              		.section	.debug_ranges,"",%progbits
 9018              	.Ldebug_ranges0:
 9019 0000 00000000 		.4byte	.LFB68
 9020 0004 82000000 		.4byte	.LFE68
 9021 0008 00000000 		.4byte	.LFB69
 9022 000c EC000000 		.4byte	.LFE69
 9023 0010 00000000 		.4byte	.LFB70
 9024 0014 D8000000 		.4byte	.LFE70
 9025 0018 00000000 		.4byte	.LFB71
 9026 001c FC000000 		.4byte	.LFE71
 9027 0020 00000000 		.4byte	.LFB72
 9028 0024 A0000000 		.4byte	.LFE72
 9029 0028 00000000 		.4byte	.LFB73
 9030 002c 44000000 		.4byte	.LFE73
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 253


 9031 0030 00000000 		.4byte	.LFB74
 9032 0034 B0000000 		.4byte	.LFE74
 9033 0038 00000000 		.4byte	.LFB75
 9034 003c 34000000 		.4byte	.LFE75
 9035 0040 00000000 		.4byte	.LFB76
 9036 0044 58000000 		.4byte	.LFE76
 9037 0048 00000000 		.4byte	.LFB77
 9038 004c 38010000 		.4byte	.LFE77
 9039 0050 00000000 		.4byte	.LFB78
 9040 0054 00010000 		.4byte	.LFE78
 9041 0058 00000000 		.4byte	.LFB79
 9042 005c 48000000 		.4byte	.LFE79
 9043 0060 00000000 		.4byte	.LFB80
 9044 0064 A0000000 		.4byte	.LFE80
 9045 0068 00000000 		.4byte	.LFB81
 9046 006c C4000000 		.4byte	.LFE81
 9047 0070 00000000 		.4byte	.LFB82
 9048 0074 6C000000 		.4byte	.LFE82
 9049 0078 00000000 		.4byte	.LFB83
 9050 007c 2C000000 		.4byte	.LFE83
 9051 0080 00000000 		.4byte	.LFB84
 9052 0084 1C000000 		.4byte	.LFE84
 9053 0088 00000000 		.4byte	.LFB85
 9054 008c 20010000 		.4byte	.LFE85
 9055 0090 00000000 		.4byte	.LFB86
 9056 0094 20000000 		.4byte	.LFE86
 9057 0098 00000000 		.4byte	.LFB87
 9058 009c 24000000 		.4byte	.LFE87
 9059 00a0 00000000 		.4byte	.LFB88
 9060 00a4 18000000 		.4byte	.LFE88
 9061 00a8 00000000 		.4byte	.LFB89
 9062 00ac 2C000000 		.4byte	.LFE89
 9063 00b0 00000000 		.4byte	.LFB90
 9064 00b4 54010000 		.4byte	.LFE90
 9065 00b8 00000000 		.4byte	.LFB91
 9066 00bc D4000000 		.4byte	.LFE91
 9067 00c0 00000000 		.4byte	.LFB92
 9068 00c4 2C000000 		.4byte	.LFE92
 9069 00c8 00000000 		.4byte	.LFB93
 9070 00cc 38000000 		.4byte	.LFE93
 9071 00d0 00000000 		.4byte	.LFB94
 9072 00d4 AC000000 		.4byte	.LFE94
 9073 00d8 00000000 		.4byte	.LFB95
 9074 00dc 88000000 		.4byte	.LFE95
 9075 00e0 00000000 		.4byte	.LFB96
 9076 00e4 30000000 		.4byte	.LFE96
 9077 00e8 00000000 		.4byte	.LFB97
 9078 00ec 2C000000 		.4byte	.LFE97
 9079 00f0 00000000 		.4byte	.LFB98
 9080 00f4 8C000000 		.4byte	.LFE98
 9081 00f8 00000000 		.4byte	.LFB99
 9082 00fc 18000000 		.4byte	.LFE99
 9083 0100 00000000 		.4byte	.LFB100
 9084 0104 0E000000 		.4byte	.LFE100
 9085 0108 00000000 		.4byte	.LFB101
 9086 010c 7C000000 		.4byte	.LFE101
 9087 0110 00000000 		.4byte	.LFB102
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 254


 9088 0114 58000000 		.4byte	.LFE102
 9089 0118 00000000 		.4byte	.LFB103
 9090 011c 38000000 		.4byte	.LFE103
 9091 0120 00000000 		.4byte	.LFB104
 9092 0124 38000000 		.4byte	.LFE104
 9093 0128 00000000 		.4byte	.LFB105
 9094 012c 1E000000 		.4byte	.LFE105
 9095 0130 00000000 		.4byte	.LFB106
 9096 0134 40000000 		.4byte	.LFE106
 9097 0138 00000000 		.4byte	.LFB107
 9098 013c 20000000 		.4byte	.LFE107
 9099 0140 00000000 		.4byte	.LFB108
 9100 0144 04010000 		.4byte	.LFE108
 9101 0148 00000000 		.4byte	.LFB109
 9102 014c CC000000 		.4byte	.LFE109
 9103 0150 00000000 		.4byte	.LFB110
 9104 0154 F4000000 		.4byte	.LFE110
 9105 0158 00000000 		.4byte	.LFB111
 9106 015c 30000000 		.4byte	.LFE111
 9107 0160 00000000 		.4byte	.LFB112
 9108 0164 28000000 		.4byte	.LFE112
 9109 0168 00000000 		.4byte	.LFB113
 9110 016c 90000000 		.4byte	.LFE113
 9111 0170 00000000 		.4byte	.LFB114
 9112 0174 B4000000 		.4byte	.LFE114
 9113 0178 00000000 		.4byte	.LFB115
 9114 017c 14010000 		.4byte	.LFE115
 9115 0180 00000000 		.4byte	.LFB116
 9116 0184 54010000 		.4byte	.LFE116
 9117 0188 00000000 		.4byte	.LFB117
 9118 018c E4000000 		.4byte	.LFE117
 9119 0190 00000000 		.4byte	.LFB118
 9120 0194 4C000000 		.4byte	.LFE118
 9121 0198 00000000 		.4byte	.LFB119
 9122 019c C8000000 		.4byte	.LFE119
 9123 01a0 00000000 		.4byte	0
 9124 01a4 00000000 		.4byte	0
 9125              		.section	.debug_line,"",%progbits
 9126              	.Ldebug_line0:
 9127 0000 7F0A0000 		.section	.debug_str,"MS",%progbits,1
 9127      02004D02 
 9127      00000201 
 9127      FB0E0D00 
 9127      01010101 
 9128              	.LASF48:
 9129 0000 70635461 		.ascii	"pcTaskName\000"
 9129      736B4E61 
 9129      6D6500
 9130              	.LASF34:
 9131 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 9131      6D626572 
 9131      4F664974 
 9131      656D7300 
 9132              	.LASF46:
 9133 001b 75785072 		.ascii	"uxPriority\000"
 9133      696F7269 
 9133      747900
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 255


 9134              	.LASF147:
 9135 0026 7078436F 		.ascii	"pxConstList\000"
 9135      6E73744C 
 9135      69737400 
 9136              	.LASF113:
 9137 0032 70785374 		.ascii	"pxStateList\000"
 9137      6174654C 
 9137      69737400 
 9138              	.LASF56:
 9139 003e 65537573 		.ascii	"eSuspended\000"
 9139      70656E64 
 9139      656400
 9140              	.LASF58:
 9141 0049 65496E76 		.ascii	"eInvalid\000"
 9141      616C6964 
 9141      00
 9142              	.LASF134:
 9143 0052 75785065 		.ascii	"uxPendedCounts\000"
 9143      6E646564 
 9143      436F756E 
 9143      747300
 9144              	.LASF194:
 9145 0061 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 9145      7473546F 
 9145      436C6561 
 9145      724F6E45 
 9145      78697400 
 9146              	.LASF95:
 9147 0075 70727649 		.ascii	"prvInitialiseNewTask\000"
 9147      6E697469 
 9147      616C6973 
 9147      654E6577 
 9147      5461736B 
 9148              	.LASF203:
 9149 008a 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 9149      67686572 
 9149      5072696F 
 9149      72697479 
 9149      5461736B 
 9150              	.LASF60:
 9151 00a4 654E6F41 		.ascii	"eNoAction\000"
 9151      6374696F 
 9151      6E00
 9152              	.LASF217:
 9153 00ae 7578546F 		.ascii	"uxTopReadyPriority\000"
 9153      70526561 
 9153      64795072 
 9153      696F7269 
 9153      747900
 9154              	.LASF114:
 9155 00c1 70784465 		.ascii	"pxDelayedList\000"
 9155      6C617965 
 9155      644C6973 
 9155      7400
 9156              	.LASF0:
 9157 00cf 756E7369 		.ascii	"unsigned int\000"
 9157      676E6564 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 256


 9157      20696E74 
 9157      00
 9158              	.LASF149:
 9159 00dc 70784576 		.ascii	"pxEventList\000"
 9159      656E744C 
 9159      69737400 
 9160              	.LASF218:
 9161 00e8 78536368 		.ascii	"xSchedulerRunning\000"
 9161      6564756C 
 9161      65725275 
 9161      6E6E696E 
 9161      6700
 9162              	.LASF35:
 9163 00fa 7078496E 		.ascii	"pxIndex\000"
 9163      64657800 
 9164              	.LASF23:
 9165 0102 53746163 		.ascii	"StackType_t\000"
 9165      6B547970 
 9165      655F7400 
 9166              	.LASF66:
 9167 010e 7854494D 		.ascii	"xTIME_OUT\000"
 9167      455F4F55 
 9167      5400
 9168              	.LASF213:
 9169 0118 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 9169      6C657465 
 9169      64546173 
 9169      6B735761 
 9169      6974696E 
 9170              	.LASF8:
 9171 0135 5F5F696E 		.ascii	"__int32_t\000"
 9171      7433325F 
 9171      7400
 9172              	.LASF32:
 9173 013f 784C4953 		.ascii	"xLIST_ITEM\000"
 9173      545F4954 
 9173      454D00
 9174              	.LASF208:
 9175 014a 70785265 		.ascii	"pxReadyTasksLists\000"
 9175      61647954 
 9175      61736B73 
 9175      4C697374 
 9175      7300
 9176              	.LASF201:
 9177 015c 75634F72 		.ascii	"ucOriginalNotifyState\000"
 9177      6967696E 
 9177      616C4E6F 
 9177      74696679 
 9177      53746174 
 9178              	.LASF156:
 9179 0172 76546173 		.ascii	"vTaskSetTimeOutState\000"
 9179      6B536574 
 9179      54696D65 
 9179      4F757453 
 9179      74617465 
 9180              	.LASF202:
 9181 0187 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 257


 9181      6B47656E 
 9181      65726963 
 9181      4E6F7469 
 9181      66794672 
 9182              	.LASF140:
 9183 01a1 78546173 		.ascii	"xTaskIncrementTick\000"
 9183      6B496E63 
 9183      72656D65 
 9183      6E745469 
 9183      636B00
 9184              	.LASF84:
 9185 01b4 756C4269 		.ascii	"ulBitmap\000"
 9185      746D6170 
 9185      00
 9186              	.LASF166:
 9187 01bd 7844656C 		.ascii	"xDelayedTaskList1\000"
 9187      61796564 
 9187      5461736B 
 9187      4C697374 
 9187      3100
 9188              	.LASF167:
 9189 01cf 7844656C 		.ascii	"xDelayedTaskList2\000"
 9189      61796564 
 9189      5461736B 
 9189      4C697374 
 9189      3200
 9190              	.LASF67:
 9191 01e1 784F7665 		.ascii	"xOverflowCount\000"
 9191      72666C6F 
 9191      77436F75 
 9191      6E7400
 9192              	.LASF115:
 9193 01f0 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 9193      6572666C 
 9193      6F776564 
 9193      44656C61 
 9193      7965644C 
 9194              	.LASF73:
 9195 0208 756C5061 		.ascii	"ulParameters\000"
 9195      72616D65 
 9195      74657273 
 9195      00
 9196              	.LASF112:
 9197 0215 65526574 		.ascii	"eReturn\000"
 9197      75726E00 
 9198              	.LASF128:
 9199 021d 78546173 		.ascii	"xTaskToResume\000"
 9199      6B546F52 
 9199      6573756D 
 9199      6500
 9200              	.LASF117:
 9201 022b 75785265 		.ascii	"uxReturn\000"
 9201      7475726E 
 9201      00
 9202              	.LASF187:
 9203 0234 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9203      736B4765 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 258


 9203      744E756D 
 9203      6265724F 
 9203      66546173 
 9204              	.LASF87:
 9205 024b 70634E61 		.ascii	"pcName\000"
 9205      6D6500
 9206              	.LASF75:
 9207 0252 74736B54 		.ascii	"tskTCB\000"
 9207      434200
 9208              	.LASF130:
 9209 0259 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9209      76656449 
 9209      6E746572 
 9209      72757074 
 9209      53746174 
 9210              	.LASF19:
 9211 0270 75696E74 		.ascii	"uint32_t\000"
 9211      33325F74 
 9211      00
 9212              	.LASF52:
 9213 0279 75634E6F 		.ascii	"ucNotifyState\000"
 9213      74696679 
 9213      53746174 
 9213      6500
 9214              	.LASF124:
 9215 0287 78596965 		.ascii	"xYieldRequired\000"
 9215      6C645265 
 9215      71756972 
 9215      656400
 9216              	.LASF77:
 9217 0296 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 9217      6967696E 
 9217      616C4241 
 9217      53455052 
 9217      4900
 9218              	.LASF196:
 9219 02a8 78546173 		.ascii	"xTaskGenericNotify\000"
 9219      6B47656E 
 9219      65726963 
 9219      4E6F7469 
 9219      667900
 9220              	.LASF20:
 9221 02bb 666C6F61 		.ascii	"float\000"
 9221      7400
 9222              	.LASF153:
 9223 02c1 7078556E 		.ascii	"pxUnblockedTCB\000"
 9223      626C6F63 
 9223      6B656454 
 9223      434200
 9224              	.LASF88:
 9225 02d0 75735374 		.ascii	"usStackDepth\000"
 9225      61636B44 
 9225      65707468 
 9225      00
 9226              	.LASF190:
 9227 02dd 78436C65 		.ascii	"xClearCountOnExit\000"
 9227      6172436F 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 259


 9227      756E744F 
 9227      6E457869 
 9227      7400
 9228              	.LASF161:
 9229 02ef 78456C61 		.ascii	"xElapsedTime\000"
 9229      70736564 
 9229      54696D65 
 9229      00
 9230              	.LASF63:
 9231 02fc 65536574 		.ascii	"eSetValueWithOverwrite\000"
 9231      56616C75 
 9231      65576974 
 9231      684F7665 
 9231      72777269 
 9232              	.LASF13:
 9233 0313 6C6F6E67 		.ascii	"long long unsigned int\000"
 9233      206C6F6E 
 9233      6720756E 
 9233      7369676E 
 9233      65642069 
 9234              	.LASF137:
 9235 032a 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 9235      6B476574 
 9235      5469636B 
 9235      436F756E 
 9235      7446726F 
 9236              	.LASF119:
 9237 0343 75785361 		.ascii	"uxSavedInterruptState\000"
 9237      76656449 
 9237      6E746572 
 9237      72757074 
 9237      53746174 
 9238              	.LASF193:
 9239 0359 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 9239      7473546F 
 9239      436C6561 
 9239      724F6E45 
 9239      6E747279 
 9240              	.LASF211:
 9241 036e 7850656E 		.ascii	"xPendingReadyList\000"
 9241      64696E67 
 9241      52656164 
 9241      794C6973 
 9241      7400
 9242              	.LASF29:
 9243 0380 70785072 		.ascii	"pxPrevious\000"
 9243      6576696F 
 9243      757300
 9244              	.LASF212:
 9245 038b 78546173 		.ascii	"xTasksWaitingTermination\000"
 9245      6B735761 
 9245      6974696E 
 9245      67546572 
 9245      6D696E61 
 9246              	.LASF6:
 9247 03a4 5F5F7569 		.ascii	"__uint16_t\000"
 9247      6E743136 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 260


 9247      5F7400
 9248              	.LASF182:
 9249 03af 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 9249      6B507269 
 9249      6F726974 
 9249      79446973 
 9249      696E6865 
 9250              	.LASF129:
 9251 03d3 78546173 		.ascii	"xTaskResumeFromISR\000"
 9251      6B526573 
 9251      756D6546 
 9251      726F6D49 
 9251      535200
 9252              	.LASF162:
 9253 03e6 76546173 		.ascii	"vTaskSuspendAll\000"
 9253      6B537573 
 9253      70656E64 
 9253      416C6C00 
 9254              	.LASF173:
 9255 03f6 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 9255      736B4765 
 9255      74537461 
 9255      636B4869 
 9255      67685761 
 9256              	.LASF65:
 9257 0412 654E6F74 		.ascii	"eNotifyAction\000"
 9257      69667941 
 9257      6374696F 
 9257      6E00
 9258              	.LASF2:
 9259 0420 73697A65 		.ascii	"size_t\000"
 9259      5F7400
 9260              	.LASF62:
 9261 0427 65496E63 		.ascii	"eIncrement\000"
 9261      72656D65 
 9261      6E7400
 9262              	.LASF38:
 9263 0432 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9263      495F4C49 
 9263      53545F49 
 9263      54454D00 
 9264              	.LASF171:
 9265 0442 70756353 		.ascii	"pucStackByte\000"
 9265      7461636B 
 9265      42797465 
 9265      00
 9266              	.LASF33:
 9267 044f 784C4953 		.ascii	"xLIST\000"
 9267      5400
 9268              	.LASF132:
 9269 0455 76546173 		.ascii	"vTaskEndScheduler\000"
 9269      6B456E64 
 9269      53636865 
 9269      64756C65 
 9269      7200
 9270              	.LASF116:
 9271 0467 75785461 		.ascii	"uxTaskPriorityGet\000"
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 261


 9271      736B5072 
 9271      696F7269 
 9271      74794765 
 9271      7400
 9272              	.LASF106:
 9273 0479 78436F6E 		.ascii	"xConstTickCount\000"
 9273      73745469 
 9273      636B436F 
 9273      756E7400 
 9274              	.LASF214:
 9275 0489 78537573 		.ascii	"xSuspendedTaskList\000"
 9275      70656E64 
 9275      65645461 
 9275      736B4C69 
 9275      737400
 9276              	.LASF79:
 9277 049c 76506F72 		.ascii	"vPortSetBASEPRI\000"
 9277      74536574 
 9277      42415345 
 9277      50524900 
 9278              	.LASF172:
 9279 04ac 756C436F 		.ascii	"ulCount\000"
 9279      756E7400 
 9280              	.LASF210:
 9281 04b4 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 9281      6572666C 
 9281      6F774465 
 9281      6C617965 
 9281      64546173 
 9282              	.LASF142:
 9283 04ce 70785465 		.ascii	"pxTemp\000"
 9283      6D7000
 9284              	.LASF148:
 9285 04d5 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 9285      6B506C61 
 9285      63654F6E 
 9285      4576656E 
 9285      744C6973 
 9286              	.LASF107:
 9287 04eb 76546173 		.ascii	"vTaskDelay\000"
 9287      6B44656C 
 9287      617900
 9288              	.LASF188:
 9289 04f6 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 9289      736B496E 
 9289      6372656D 
 9289      656E744D 
 9289      75746578 
 9290              	.LASF42:
 9291 0514 5461736B 		.ascii	"TaskControlBlock_t\000"
 9291      436F6E74 
 9291      726F6C42 
 9291      6C6F636B 
 9291      5F7400
 9292              	.LASF51:
 9293 0527 756C4E6F 		.ascii	"ulNotifiedValue\000"
 9293      74696669 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 262


 9293      65645661 
 9293      6C756500 
 9294              	.LASF154:
 9295 0537 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 9295      6B52656D 
 9295      6F766546 
 9295      726F6D55 
 9295      6E6F7264 
 9296              	.LASF50:
 9297 0559 75784D75 		.ascii	"uxMutexesHeld\000"
 9297      74657865 
 9297      7348656C 
 9297      6400
 9298              	.LASF181:
 9299 0567 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 9299      6B507269 
 9299      6F726974 
 9299      79446973 
 9299      696E6865 
 9300              	.LASF152:
 9301 057f 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9301      6B52656D 
 9301      6F766546 
 9301      726F6D45 
 9301      76656E74 
 9302              	.LASF15:
 9303 0598 63686172 		.ascii	"char\000"
 9303      00
 9304              	.LASF37:
 9305 059d 4C697374 		.ascii	"ListItem_t\000"
 9305      4974656D 
 9305      5F7400
 9306              	.LASF64:
 9307 05a8 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 9307      56616C75 
 9307      65576974 
 9307      686F7574 
 9307      4F766572 
 9308              	.LASF78:
 9309 05c2 756C4E65 		.ascii	"ulNewBASEPRI\000"
 9309      77424153 
 9309      45505249 
 9309      00
 9310              	.LASF25:
 9311 05cf 55426173 		.ascii	"UBaseType_t\000"
 9311      65547970 
 9311      655F7400 
 9312              	.LASF93:
 9313 05db 756C5374 		.ascii	"ulStackDepth\000"
 9313      61636B44 
 9313      65707468 
 9313      00
 9314              	.LASF71:
 9315 05e8 70764261 		.ascii	"pvBaseAddress\000"
 9315      73654164 
 9315      64726573 
 9315      7300
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 263


 9316              	.LASF105:
 9317 05f6 7853686F 		.ascii	"xShouldDelay\000"
 9317      756C6444 
 9317      656C6179 
 9317      00
 9318              	.LASF164:
 9319 0603 70727649 		.ascii	"prvIdleTask\000"
 9319      646C6554 
 9319      61736B00 
 9320              	.LASF36:
 9321 060f 784C6973 		.ascii	"xListEnd\000"
 9321      74456E64 
 9321      00
 9322              	.LASF189:
 9323 0618 756C5461 		.ascii	"ulTaskNotifyTake\000"
 9323      736B4E6F 
 9323      74696679 
 9323      54616B65 
 9323      00
 9324              	.LASF39:
 9325 0629 4D696E69 		.ascii	"MiniListItem_t\000"
 9325      4C697374 
 9325      4974656D 
 9325      5F7400
 9326              	.LASF192:
 9327 0638 78546173 		.ascii	"xTaskNotifyWait\000"
 9327      6B4E6F74 
 9327      69667957 
 9327      61697400 
 9328              	.LASF109:
 9329 0648 78546173 		.ascii	"xTaskCreate\000"
 9329      6B437265 
 9329      61746500 
 9330              	.LASF96:
 9331 0654 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 9331      64644E65 
 9331      77546173 
 9331      6B546F52 
 9331      65616479 
 9332              	.LASF16:
 9333 066d 75696E74 		.ascii	"uint8_t\000"
 9333      385F7400 
 9334              	.LASF54:
 9335 0675 65526561 		.ascii	"eReady\000"
 9335      647900
 9336              	.LASF110:
 9337 067c 65546173 		.ascii	"eTaskGetState\000"
 9337      6B476574 
 9337      53746174 
 9337      6500
 9338              	.LASF91:
 9339 068a 70784E65 		.ascii	"pxNewTCB\000"
 9339      77544342 
 9339      00
 9340              	.LASF86:
 9341 0693 70785461 		.ascii	"pxTaskCode\000"
 9341      736B436F 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 264


 9341      646500
 9342              	.LASF74:
 9343 069e 4D656D6F 		.ascii	"MemoryRegion_t\000"
 9343      72795265 
 9343      67696F6E 
 9343      5F7400
 9344              	.LASF223:
 9345 06ad 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 9345      74546173 
 9345      6B556E62 
 9345      6C6F636B 
 9345      54696D65 
 9346              	.LASF81:
 9347 06c2 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 9347      72745261 
 9347      69736542 
 9347      41534550 
 9347      524900
 9348              	.LASF216:
 9349 06d5 78546963 		.ascii	"xTickCount\000"
 9349      6B436F75 
 9349      6E7400
 9350              	.LASF12:
 9351 06e0 6C6F6E67 		.ascii	"long long int\000"
 9351      206C6F6E 
 9351      6720696E 
 9351      7400
 9352              	.LASF57:
 9353 06ee 6544656C 		.ascii	"eDeleted\000"
 9353      65746564 
 9353      00
 9354              	.LASF82:
 9355 06f7 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 9355      7274436F 
 9355      756E744C 
 9355      65616469 
 9355      6E675A65 
 9356              	.LASF72:
 9357 070f 756C4C65 		.ascii	"ulLengthInBytes\000"
 9357      6E677468 
 9357      496E4279 
 9357      74657300 
 9358              	.LASF24:
 9359 071f 42617365 		.ascii	"BaseType_t\000"
 9359      54797065 
 9359      5F7400
 9360              	.LASF145:
 9361 072a 756C4368 		.ascii	"ulCheckValue\000"
 9361      65636B56 
 9361      616C7565 
 9361      00
 9362              	.LASF176:
 9363 0737 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 9363      65736574 
 9363      4E657874 
 9363      5461736B 
 9363      556E626C 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 265


 9364              	.LASF68:
 9365 0753 7854696D 		.ascii	"xTimeOnEntering\000"
 9365      654F6E45 
 9365      6E746572 
 9365      696E6700 
 9366              	.LASF121:
 9367 0763 75784E65 		.ascii	"uxNewPriority\000"
 9367      77507269 
 9367      6F726974 
 9367      7900
 9368              	.LASF22:
 9369 0771 5461736B 		.ascii	"TaskFunction_t\000"
 9369      46756E63 
 9369      74696F6E 
 9369      5F7400
 9370              	.LASF28:
 9371 0780 70784E65 		.ascii	"pxNext\000"
 9371      787400
 9372              	.LASF228:
 9373 0787 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 9373      4320342E 
 9373      392E3320 
 9373      32303135 
 9373      30333033 
 9374 07ba 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 9374      20726576 
 9374      6973696F 
 9374      6E203232 
 9374      31323230 
 9375 07ed 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 9375      66756E63 
 9375      74696F6E 
 9375      2D736563 
 9375      74696F6E 
 9376              	.LASF157:
 9377 0815 70785469 		.ascii	"pxTimeOut\000"
 9377      6D654F75 
 9377      7400
 9378              	.LASF118:
 9379 081f 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 9379      736B5072 
 9379      696F7269 
 9379      74794765 
 9379      7446726F 
 9380              	.LASF135:
 9381 0838 78546173 		.ascii	"xTaskGetTickCount\000"
 9381      6B476574 
 9381      5469636B 
 9381      436F756E 
 9381      7400
 9382              	.LASF69:
 9383 084a 54696D65 		.ascii	"TimeOut_t\000"
 9383      4F75745F 
 9383      7400
 9384              	.LASF158:
 9385 0854 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 9385      6B496E74 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 266


 9385      65726E61 
 9385      6C536574 
 9385      54696D65 
 9386              	.LASF222:
 9387 0871 75785461 		.ascii	"uxTaskNumber\000"
 9387      736B4E75 
 9387      6D626572 
 9387      00
 9388              	.LASF41:
 9389 087e 5461736B 		.ascii	"TaskHandle_t\000"
 9389      48616E64 
 9389      6C655F74 
 9389      00
 9390              	.LASF199:
 9391 088b 65416374 		.ascii	"eAction\000"
 9391      696F6E00 
 9392              	.LASF83:
 9393 0893 756C4E65 		.ascii	"ulNewMaskValue\000"
 9393      774D6173 
 9393      6B56616C 
 9393      756500
 9394              	.LASF186:
 9395 08a2 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 9395      736B5265 
 9395      73657445 
 9395      76656E74 
 9395      4974656D 
 9396              	.LASF120:
 9397 08bc 76546173 		.ascii	"vTaskPrioritySet\000"
 9397      6B507269 
 9397      6F726974 
 9397      79536574 
 9397      00
 9398              	.LASF59:
 9399 08cd 65546173 		.ascii	"eTaskState\000"
 9399      6B537461 
 9399      746500
 9400              	.LASF40:
 9401 08d8 4C697374 		.ascii	"List_t\000"
 9401      5F7400
 9402              	.LASF139:
 9403 08df 78546173 		.ascii	"xTaskToQuery\000"
 9403      6B546F51 
 9403      75657279 
 9403      00
 9404              	.LASF26:
 9405 08ec 5469636B 		.ascii	"TickType_t\000"
 9405      54797065 
 9405      5F7400
 9406              	.LASF197:
 9407 08f7 78546173 		.ascii	"xTaskToNotify\000"
 9407      6B546F4E 
 9407      6F746966 
 9407      7900
 9408              	.LASF111:
 9409 0905 78546173 		.ascii	"xTask\000"
 9409      6B00
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 267


 9410              	.LASF61:
 9411 090b 65536574 		.ascii	"eSetBits\000"
 9411      42697473 
 9411      00
 9412              	.LASF70:
 9413 0914 784D454D 		.ascii	"xMEMORY_REGION\000"
 9413      4F52595F 
 9413      52454749 
 9413      4F4E00
 9414              	.LASF17:
 9415 0923 75696E74 		.ascii	"uint16_t\000"
 9415      31365F74 
 9415      00
 9416              	.LASF99:
 9417 092c 76546173 		.ascii	"vTaskDelete\000"
 9417      6B44656C 
 9417      65746500 
 9418              	.LASF185:
 9419 0938 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 9419      6C794F6E 
 9419      654D7574 
 9419      65784865 
 9419      6C6400
 9420              	.LASF184:
 9421 094b 75785072 		.ascii	"uxPriorityToUse\000"
 9421      696F7269 
 9421      7479546F 
 9421      55736500 
 9422              	.LASF143:
 9423 095b 76546173 		.ascii	"vTaskSwitchContext\000"
 9423      6B537769 
 9423      74636843 
 9423      6F6E7465 
 9423      787400
 9424              	.LASF221:
 9425 096e 784E756D 		.ascii	"xNumOfOverflows\000"
 9425      4F664F76 
 9425      6572666C 
 9425      6F777300 
 9426              	.LASF224:
 9427 097e 7849646C 		.ascii	"xIdleTaskHandle\000"
 9427      65546173 
 9427      6B48616E 
 9427      646C6500 
 9428              	.LASF183:
 9429 098e 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 9429      67686573 
 9429      74507269 
 9429      6F726974 
 9429      79576169 
 9430              	.LASF5:
 9431 09ab 73686F72 		.ascii	"short int\000"
 9431      7420696E 
 9431      7400
 9432              	.LASF89:
 9433 09b5 70765061 		.ascii	"pvParameters\000"
 9433      72616D65 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 268


 9433      74657273 
 9433      00
 9434              	.LASF27:
 9435 09c2 78497465 		.ascii	"xItemValue\000"
 9435      6D56616C 
 9435      756500
 9436              	.LASF9:
 9437 09cd 6C6F6E67 		.ascii	"long int\000"
 9437      20696E74 
 9437      00
 9438              	.LASF226:
 9439 09d6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9439      52784275 
 9439      66666572 
 9439      00
 9440              	.LASF133:
 9441 09e3 78546173 		.ascii	"xTaskResumeAll\000"
 9441      6B526573 
 9441      756D6541 
 9441      6C6C00
 9442              	.LASF204:
 9443 09f2 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 9443      6B4E6F74 
 9443      69667947 
 9443      69766546 
 9443      726F6D49 
 9444              	.LASF209:
 9445 0a09 70784465 		.ascii	"pxDelayedTaskList\000"
 9445      6C617965 
 9445      64546173 
 9445      6B4C6973 
 9445      7400
 9446              	.LASF169:
 9447 0a1b 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 9447      61736B49 
 9447      73546173 
 9447      6B537573 
 9447      70656E64 
 9448              	.LASF141:
 9449 0a32 78537769 		.ascii	"xSwitchRequired\000"
 9449      74636852 
 9449      65717569 
 9449      72656400 
 9450              	.LASF179:
 9451 0a42 70784D75 		.ascii	"pxMutexHolder\000"
 9451      74657848 
 9451      6F6C6465 
 9451      7200
 9452              	.LASF47:
 9453 0a50 70785374 		.ascii	"pxStack\000"
 9453      61636B00 
 9454              	.LASF97:
 9455 0a58 78546173 		.ascii	"xTaskToDelete\000"
 9455      6B546F44 
 9455      656C6574 
 9455      6500
 9456              	.LASF198:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 269


 9457 0a66 756C5661 		.ascii	"ulValue\000"
 9457      6C756500 
 9458              	.LASF126:
 9459 0a6e 78546173 		.ascii	"xTaskToSuspend\000"
 9459      6B546F53 
 9459      75737065 
 9459      6E6400
 9460              	.LASF159:
 9461 0a7d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9461      6B436865 
 9461      636B466F 
 9461      7254696D 
 9461      654F7574 
 9462              	.LASF101:
 9463 0a92 70785072 		.ascii	"pxPreviousWakeTime\000"
 9463      6576696F 
 9463      75735761 
 9463      6B655469 
 9463      6D6500
 9464              	.LASF3:
 9465 0aa5 5F5F7569 		.ascii	"__uint8_t\000"
 9465      6E74385F 
 9465      7400
 9466              	.LASF230:
 9467 0aaf 433A5C55 		.ascii	"C:\\Users\\tadge\\Documents\\GitHub\\FYP_PSOCCreato"
 9467      73657273 
 9467      5C746164 
 9467      67655C44 
 9467      6F63756D 
 9468 0add 725F466F 		.ascii	"r_Follower\\FYP_New_Test\\CORTEX_CY8C5588_PSoC_Crea"
 9468      6C6C6F77 
 9468      65725C46 
 9468      59505F4E 
 9468      65775F54 
 9469 0b0e 746F725F 		.ascii	"tor_GCC\\FreeRTOS_Demo.cydsn\000"
 9469      4743435C 
 9469      46726565 
 9469      52544F53 
 9469      5F44656D 
 9470              	.LASF85:
 9471 0b2a 75635265 		.ascii	"ucReturn\000"
 9471      7475726E 
 9471      00
 9472              	.LASF200:
 9473 0b33 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 9473      72657669 
 9473      6F75734E 
 9473      6F746966 
 9473      69636174 
 9474              	.LASF195:
 9475 0b50 70756C4E 		.ascii	"pulNotificationValue\000"
 9475      6F746966 
 9475      69636174 
 9475      696F6E56 
 9475      616C7565 
 9476              	.LASF92:
 9477 0b65 78526574 		.ascii	"xReturn\000"
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 270


 9477      75726E00 
 9478              	.LASF14:
 9479 0b6d 73697A65 		.ascii	"sizetype\000"
 9479      74797065 
 9479      00
 9480              	.LASF163:
 9481 0b76 76546173 		.ascii	"vTaskMissedYield\000"
 9481      6B4D6973 
 9481      73656459 
 9481      69656C64 
 9481      00
 9482              	.LASF219:
 9483 0b87 75785065 		.ascii	"uxPendedTicks\000"
 9483      6E646564 
 9483      5469636B 
 9483      7300
 9484              	.LASF11:
 9485 0b95 6C6F6E67 		.ascii	"long unsigned int\000"
 9485      20756E73 
 9485      69676E65 
 9485      6420696E 
 9485      7400
 9486              	.LASF80:
 9487 0ba7 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 9487      74526169 
 9487      73654241 
 9487      53455052 
 9487      4900
 9488              	.LASF178:
 9489 0bb9 78546173 		.ascii	"xTaskPriorityInherit\000"
 9489      6B507269 
 9489      6F726974 
 9489      79496E68 
 9489      65726974 
 9490              	.LASF174:
 9491 0bce 70756345 		.ascii	"pucEndOfStack\000"
 9491      6E644F66 
 9491      53746163 
 9491      6B00
 9492              	.LASF180:
 9493 0bdc 70784D75 		.ascii	"pxMutexHolderTCB\000"
 9493      74657848 
 9493      6F6C6465 
 9493      72544342 
 9493      00
 9494              	.LASF138:
 9495 0bed 70635461 		.ascii	"pcTaskGetName\000"
 9495      736B4765 
 9495      744E616D 
 9495      6500
 9496              	.LASF18:
 9497 0bfb 696E7433 		.ascii	"int32_t\000"
 9497      325F7400 
 9498              	.LASF136:
 9499 0c03 78546963 		.ascii	"xTicks\000"
 9499      6B7300
 9500              	.LASF131:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 271


 9501 0c0a 76546173 		.ascii	"vTaskStartScheduler\000"
 9501      6B537461 
 9501      72745363 
 9501      68656475 
 9501      6C657200 
 9502              	.LASF207:
 9503 0c1e 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 9503      426C6F63 
 9503      6B496E64 
 9503      6566696E 
 9503      6974656C 
 9504              	.LASF53:
 9505 0c34 6552756E 		.ascii	"eRunning\000"
 9505      6E696E67 
 9505      00
 9506              	.LASF144:
 9507 0c3d 70756C53 		.ascii	"pulStack\000"
 9507      7461636B 
 9507      00
 9508              	.LASF31:
 9509 0c46 7078436F 		.ascii	"pxContainer\000"
 9509      6E746169 
 9509      6E657200 
 9510              	.LASF108:
 9511 0c52 78546963 		.ascii	"xTicksToDelay\000"
 9511      6B73546F 
 9511      44656C61 
 9511      7900
 9512              	.LASF4:
 9513 0c60 756E7369 		.ascii	"unsigned char\000"
 9513      676E6564 
 9513      20636861 
 9513      7200
 9514              	.LASF151:
 9515 0c6e 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 9515      6B506C61 
 9515      63654F6E 
 9515      556E6F72 
 9515      64657265 
 9516              	.LASF10:
 9517 0c8d 5F5F7569 		.ascii	"__uint32_t\000"
 9517      6E743332 
 9517      5F7400
 9518              	.LASF205:
 9519 0c98 78546173 		.ascii	"xTaskNotifyStateClear\000"
 9519      6B4E6F74 
 9519      69667953 
 9519      74617465 
 9519      436C6561 
 9520              	.LASF160:
 9521 0cae 70785469 		.ascii	"pxTicksToWait\000"
 9521      636B7354 
 9521      6F576169 
 9521      7400
 9522              	.LASF146:
 9523 0cbc 7578546F 		.ascii	"uxTopPriority\000"
 9523      70507269 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 272


 9523      6F726974 
 9523      7900
 9524              	.LASF49:
 9525 0cca 75784261 		.ascii	"uxBasePriority\000"
 9525      73655072 
 9525      696F7269 
 9525      747900
 9526              	.LASF100:
 9527 0cd9 76546173 		.ascii	"vTaskDelayUntil\000"
 9527      6B44656C 
 9527      6179556E 
 9527      74696C00 
 9528              	.LASF45:
 9529 0ce9 78457665 		.ascii	"xEventListItem\000"
 9529      6E744C69 
 9529      73744974 
 9529      656D00
 9530              	.LASF123:
 9531 0cf8 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 9531      696F7269 
 9531      74795573 
 9531      65644F6E 
 9531      456E7472 
 9532              	.LASF76:
 9533 0d0e 5443425F 		.ascii	"TCB_t\000"
 9533      7400
 9534              	.LASF150:
 9535 0d14 78546963 		.ascii	"xTicksToWait\000"
 9535      6B73546F 
 9535      57616974 
 9535      00
 9536              	.LASF30:
 9537 0d21 70764F77 		.ascii	"pvOwner\000"
 9537      6E657200 
 9538              	.LASF175:
 9539 0d29 70727644 		.ascii	"prvDeleteTCB\000"
 9539      656C6574 
 9539      65544342 
 9539      00
 9540              	.LASF55:
 9541 0d36 65426C6F 		.ascii	"eBlocked\000"
 9541      636B6564 
 9541      00
 9542              	.LASF125:
 9543 0d3f 76546173 		.ascii	"vTaskSuspend\000"
 9543      6B537573 
 9543      70656E64 
 9543      00
 9544              	.LASF104:
 9545 0d4c 78416C72 		.ascii	"xAlreadyYielded\000"
 9545      65616479 
 9545      5969656C 
 9545      64656400 
 9546              	.LASF177:
 9547 0d5c 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9547      6B476574 
 9547      43757272 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 273


 9547      656E7454 
 9547      61736B48 
 9548              	.LASF170:
 9549 0d76 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 9549      61736B43 
 9549      6865636B 
 9549      46726565 
 9549      53746163 
 9550              	.LASF94:
 9551 0d91 78526567 		.ascii	"xRegions\000"
 9551      696F6E73 
 9551      00
 9552              	.LASF206:
 9553 0d9a 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 9553      64644375 
 9553      7272656E 
 9553      74546173 
 9553      6B546F44 
 9554              	.LASF229:
 9555 0db9 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS_Source\\tasks.c\000"
 9555      2E5C4672 
 9555      65655254 
 9555      4F535F53 
 9555      6F757263 
 9556              	.LASF227:
 9557 0dd7 70784375 		.ascii	"pxCurrentTCB\000"
 9557      7272656E 
 9557      74544342 
 9557      00
 9558              	.LASF215:
 9559 0de4 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 9559      7272656E 
 9559      744E756D 
 9559      6265724F 
 9559      66546173 
 9560              	.LASF102:
 9561 0dfb 7854696D 		.ascii	"xTimeIncrement\000"
 9561      65496E63 
 9561      72656D65 
 9561      6E7400
 9562              	.LASF1:
 9563 0e0a 7369676E 		.ascii	"signed char\000"
 9563      65642063 
 9563      68617200 
 9564              	.LASF7:
 9565 0e16 73686F72 		.ascii	"short unsigned int\000"
 9565      7420756E 
 9565      7369676E 
 9565      65642069 
 9565      6E7400
 9566              	.LASF103:
 9567 0e29 7854696D 		.ascii	"xTimeToWake\000"
 9567      65546F57 
 9567      616B6500 
 9568              	.LASF44:
 9569 0e35 78537461 		.ascii	"xStateListItem\000"
 9569      74654C69 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 274


 9569      73744974 
 9569      656D00
 9570              	.LASF98:
 9571 0e44 70785443 		.ascii	"pxTCB\000"
 9571      4200
 9572              	.LASF21:
 9573 0e4a 646F7562 		.ascii	"double\000"
 9573      6C6500
 9574              	.LASF225:
 9575 0e51 75785363 		.ascii	"uxSchedulerSuspended\000"
 9575      68656475 
 9575      6C657253 
 9575      75737065 
 9575      6E646564 
 9576              	.LASF43:
 9577 0e66 7078546F 		.ascii	"pxTopOfStack\000"
 9577      704F6653 
 9577      7461636B 
 9577      00
 9578              	.LASF127:
 9579 0e73 76546173 		.ascii	"vTaskResume\000"
 9579      6B526573 
 9579      756D6500 
 9580              	.LASF165:
 9581 0e7f 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9581      6E697469 
 9581      616C6973 
 9581      65546173 
 9581      6B4C6973 
 9582              	.LASF155:
 9583 0e96 70784576 		.ascii	"pxEventListItem\000"
 9583      656E744C 
 9583      69737449 
 9583      74656D00 
 9584              	.LASF90:
 9585 0ea6 70784372 		.ascii	"pxCreatedTask\000"
 9585      65617465 
 9585      64546173 
 9585      6B00
 9586              	.LASF168:
 9587 0eb4 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 9587      6865636B 
 9587      5461736B 
 9587      73576169 
 9587      74696E67 
 9588              	.LASF191:
 9589 0ed4 756C5265 		.ascii	"ulReturn\000"
 9589      7475726E 
 9589      00
 9590              	.LASF122:
 9591 0edd 75784375 		.ascii	"uxCurrentBasePriority\000"
 9591      7272656E 
 9591      74426173 
 9591      65507269 
 9591      6F726974 
 9592              	.LASF220:
 9593 0ef3 78596965 		.ascii	"xYieldPending\000"
ARM GAS  C:\Users\tadge\AppData\Local\Temp\cc1TFR3h.s 			page 275


 9593      6C645065 
 9593      6E64696E 
 9593      6700
 9594              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
