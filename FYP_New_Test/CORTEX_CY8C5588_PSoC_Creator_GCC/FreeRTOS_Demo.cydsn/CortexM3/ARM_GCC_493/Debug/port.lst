ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"port.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  20              		.type	uxCriticalNesting, %object
  21              		.size	uxCriticalNesting, 4
  22              	uxCriticalNesting:
  23 0000 AAAAAAAA 		.word	-1431655766
  24              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  25              		.align	2
  26              		.global	pxPortInitialiseStack
  27              		.thumb
  28              		.thumb_func
  29              		.type	pxPortInitialiseStack, %function
  30              	pxPortInitialiseStack:
  31              	.LFB68:
  32              		.file 1 "..\\..\\FreeRTOS_Source\\portable\\GCC\\ARM_CM3\\port.c"
   1:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
   2:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  *
   5:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  *
  12:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  *
  15:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  *
  22:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  *
  25:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * 1 tab == 4 spaces!
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 2


  26:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
  27:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  28:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------
  29:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  30:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  *----------------------------------------------------------*/
  31:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  32:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* Scheduler includes. */
  33:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #include "FreeRTOS.h"
  34:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #include "task.h"
  35:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  36:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  38:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  41:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif
  42:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  43:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  45:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  46:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  47:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #else
  48:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  49:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	as the core. */
  50:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  51:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif
  52:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  53:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  54:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  55:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  56:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  57:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  58:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* ...then bits in the registers. */
  59:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  60:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  61:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  62:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  63:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  64:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  65:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  66:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  67:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  68:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  69:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  70:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  71:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  72:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  73:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  74:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  75:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  76:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  77:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  78:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  79:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  80:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  81:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 3


  83:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  84:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  85:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  86:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  87:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  88:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
  89:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** calculations. */
  90:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  91:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  92:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  93:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  94:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
  95:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
  96:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  97:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
  98:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** debugger. */
  99:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 100:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 101:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #else
 102:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 103:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif
 104:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 105:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 106:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 107:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 108:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * generate the tick interrupt.
 109:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 110:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 111:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 112:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 113:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Exception handlers.
 114:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 115:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void );
 117:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 119:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 120:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 122:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 123:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 124:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 125:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 126:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 127:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void );
 128:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 129:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 131:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 132:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** variable. */
 133:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 136:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 137:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 138:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 139:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 4


 140:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 141:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 142:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 143:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 144:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 145:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 146:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 147:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 148:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 149:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 150:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 151:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 152:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * power functionality only.
 153:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 154:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 155:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 156:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 157:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 158:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 159:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 160:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 161:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 162:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 163:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #if( configASSERT_DEFINED == 1 )
 164:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 165:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 166:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 167:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 168:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 169:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 170:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 171:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 172:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 173:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 174:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 175:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
  33              		.loc 1 175 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 16
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38 0000 80B4     		push	{r7}
  39              		.cfi_def_cfa_offset 4
  40              		.cfi_offset 7, -4
  41 0002 85B0     		sub	sp, sp, #20
  42              		.cfi_def_cfa_offset 24
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_def_cfa_register 7
  45 0006 F860     		str	r0, [r7, #12]
  46 0008 B960     		str	r1, [r7, #8]
  47 000a 7A60     		str	r2, [r7, #4]
 176:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	interrupt. */
 178:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  48              		.loc 1 178 0
  49 000c FB68     		ldr	r3, [r7, #12]
  50 000e 043B     		subs	r3, r3, #4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 5


  51 0010 FB60     		str	r3, [r7, #12]
 179:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  52              		.loc 1 179 0
  53 0012 FB68     		ldr	r3, [r7, #12]
  54 0014 4FF08072 		mov	r2, #16777216
  55 0018 1A60     		str	r2, [r3]
 180:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  56              		.loc 1 180 0
  57 001a FB68     		ldr	r3, [r7, #12]
  58 001c 043B     		subs	r3, r3, #4
  59 001e FB60     		str	r3, [r7, #12]
 181:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  60              		.loc 1 181 0
  61 0020 BB68     		ldr	r3, [r7, #8]
  62 0022 23F00102 		bic	r2, r3, #1
  63 0026 FB68     		ldr	r3, [r7, #12]
  64 0028 1A60     		str	r2, [r3]
 182:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  65              		.loc 1 182 0
  66 002a FB68     		ldr	r3, [r7, #12]
  67 002c 043B     		subs	r3, r3, #4
  68 002e FB60     		str	r3, [r7, #12]
 183:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  69              		.loc 1 183 0
  70 0030 094A     		ldr	r2, .L3
  71 0032 FB68     		ldr	r3, [r7, #12]
  72 0034 1A60     		str	r2, [r3]
 184:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  73              		.loc 1 184 0
  74 0036 FB68     		ldr	r3, [r7, #12]
  75 0038 143B     		subs	r3, r3, #20
  76 003a FB60     		str	r3, [r7, #12]
 185:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  77              		.loc 1 185 0
  78 003c 7A68     		ldr	r2, [r7, #4]
  79 003e FB68     		ldr	r3, [r7, #12]
  80 0040 1A60     		str	r2, [r3]
 186:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  81              		.loc 1 186 0
  82 0042 FB68     		ldr	r3, [r7, #12]
  83 0044 203B     		subs	r3, r3, #32
  84 0046 FB60     		str	r3, [r7, #12]
 187:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 188:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	return pxTopOfStack;
  85              		.loc 1 188 0
  86 0048 FB68     		ldr	r3, [r7, #12]
 189:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
  87              		.loc 1 189 0
  88 004a 1846     		mov	r0, r3
  89 004c 1437     		adds	r7, r7, #20
  90              		.cfi_def_cfa_offset 4
  91 004e BD46     		mov	sp, r7
  92              		.cfi_def_cfa_register 13
  93              		@ sp needed
  94 0050 5DF8047B 		ldr	r7, [sp], #4
  95              		.cfi_restore 7
  96              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 6


  97 0054 7047     		bx	lr
  98              	.L4:
  99 0056 00BF     		.align	2
 100              	.L3:
 101 0058 00000000 		.word	prvTaskExitError
 102              		.cfi_endproc
 103              	.LFE68:
 104              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 105              		.section	.text.prvTaskExitError,"ax",%progbits
 106              		.align	2
 107              		.thumb
 108              		.thumb_func
 109              		.type	prvTaskExitError, %function
 110              	prvTaskExitError:
 111              	.LFB69:
 190:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 191:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 192:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void )
 193:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 112              		.loc 1 193 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 8
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0000 80B4     		push	{r7}
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 7, -4
 120 0002 83B0     		sub	sp, sp, #12
 121              		.cfi_def_cfa_offset 16
 122 0004 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 194:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** volatile uint32_t ulDummy = 0UL;
 124              		.loc 1 194 0
 125 0006 0023     		movs	r3, #0
 126 0008 3B60     		str	r3, [r7]
 127              	.LBB12:
 128              	.LBB13:
 129              		.file 2 "..\\..\\FreeRTOS_Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 7


  20:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 8


  77:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 9


 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 10


 191:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 130              		.loc 2 195 0
 131              	@ 195 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 132 000a 4FF0A003 			mov r3, #160												
 133 000e 83F31188 		msr basepri, r3											
 134 0012 BFF36F8F 		isb														
 135 0016 BFF34F8F 		dsb														
 136              	
 137              	@ 0 "" 2
 138              		.thumb
 139 001a 7B60     		str	r3, [r7, #4]
 140              	.LBE13:
 141              	.LBE12:
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 196:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 197:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 198:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 199:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 200:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 201:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 202:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 203:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 204:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	while( ulDummy == 0 )
 142              		.loc 1 204 0
 143 001c 00BF     		nop
 144              	.L6:
 145              		.loc 1 204 0 is_stmt 0 discriminator 1
 146 001e 3B68     		ldr	r3, [r7]
 147 0020 002B     		cmp	r3, #0
 148 0022 FCD0     		beq	.L6
 205:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	{
 206:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 207:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		started to remove a compiler warning about the function being defined
 208:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 209:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		about code appearing after this function is called - making ulDummy
 210:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		volatile makes the compiler think the function could return and
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 212:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		after it. */
 213:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	}
 214:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 149              		.loc 1 214 0 is_stmt 1
 150 0024 0C37     		adds	r7, r7, #12
 151              		.cfi_def_cfa_offset 4
 152 0026 BD46     		mov	sp, r7
 153              		.cfi_def_cfa_register 13
 154              		@ sp needed
 155 0028 5DF8047B 		ldr	r7, [sp], #4
 156              		.cfi_restore 7
 157              		.cfi_def_cfa_offset 0
 158 002c 7047     		bx	lr
 159              		.cfi_endproc
 160              	.LFE69:
 161              		.size	prvTaskExitError, .-prvTaskExitError
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 11


 162 002e 00BF     		.section	.text.vPortSVCHandler,"ax",%progbits
 163              		.align	2
 164              		.global	vPortSVCHandler
 165              		.thumb
 166              		.thumb_func
 167              		.type	vPortSVCHandler, %function
 168              	vPortSVCHandler:
 169              	.LFB70:
 215:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 216:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 217:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void )
 218:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 170              		.loc 1 218 0
 171              		.cfi_startproc
 172              		@ Naked Function: prologue and epilogue provided by programmer.
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 219:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 175              		.loc 1 219 0
 176              	@ 219 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3\port.c" 1
 177 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 178 0002 1968     		ldr r1, [r3]					
 179 0004 0868     		ldr r0, [r1]					
 180 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 181 000a 80F30988 		msr psp, r0						
 182 000e BFF36F8F 		isb								
 183 0012 4FF00000 		mov r0, #0 						
 184 0016 80F31188 		msr	basepri, r0					
 185 001a 4EF00D0E 		orr r14, #0xd					
 186 001e 7047     		bx r14							
 187              										
 188              		.align 4						
 189 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 190              	
 191              	@ 0 "" 2
 220:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 221:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 222:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 224:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 225:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	isb								\n"
 226:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 227:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 228:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 229:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	bx r14							\n"
 230:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"									\n"
 231:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"	.align 4						\n"
 232:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 233:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				);
 234:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 192              		.loc 1 234 0
 193              		.thumb
 194              		.cfi_endproc
 195              	.LFE70:
 196              		.size	vPortSVCHandler, .-vPortSVCHandler
 197 0024 AFF30080 		.section	.text.prvPortStartFirstTask,"ax",%progbits
 197      AFF30080 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 12


 197      AFF30080 
 198              		.align	2
 199              		.thumb
 200              		.thumb_func
 201              		.type	prvPortStartFirstTask, %function
 202              	prvPortStartFirstTask:
 203              	.LFB71:
 235:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 236:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 237:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 238:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 204              		.loc 1 238 0
 205              		.cfi_startproc
 206              		@ Naked Function: prologue and epilogue provided by programmer.
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 239:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile(
 209              		.loc 1 239 0
 210              	@ 239 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3\port.c" 1
 211 0000 0648     		 ldr r0, =0xE000ED08 	
 212 0002 0068     	 ldr r0, [r0] 			
 213 0004 0068     	 ldr r0, [r0] 			
 214 0006 80F30888 	 msr msp, r0			
 215 000a 62B6     	 cpsie i				
 216 000c 61B6     	 cpsie f				
 217 000e BFF34F8F 	 dsb					
 218 0012 BFF36F8F 	 isb					
 219 0016 00DF     	 svc 0					
 220 0018 00BF     	 nop					
 221              	
 222              	@ 0 "" 2
 240:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 241:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 242:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 243:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 244:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 245:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie f				\n"
 246:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" dsb					\n"
 247:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" isb					\n"
 248:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 249:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					" nop					\n"
 250:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				);
 251:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 223              		.loc 1 251 0
 224              		.thumb
 225              		.cfi_endproc
 226              	.LFE71:
 227              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 228 001a 0000     		.section	.text.xPortStartScheduler,"ax",%progbits
 229              		.align	2
 230              		.global	xPortStartScheduler
 231              		.thumb
 232              		.thumb_func
 233              		.type	xPortStartScheduler, %function
 234              	xPortStartScheduler:
 235              	.LFB72:
 252:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 13


 253:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 254:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 255:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 256:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 257:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 258:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 236              		.loc 1 258 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240 0000 80B5     		push	{r7, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 7, -8
 243              		.cfi_offset 14, -4
 244 0002 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 259:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 260:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 261:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 262:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 263:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 264:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	{
 265:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 266:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 267:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 268:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 269:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 270:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 271:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 273:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 274:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 275:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 276:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 277:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 278:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		possible bits. */
 279:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 281:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 282:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 284:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 285:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 286:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 287:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 288:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		of bits read back. */
 289:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 290:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 291:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 292:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 293:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 294:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 295:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 296:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		#ifdef __NVIC_PRIO_BITS
 297:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 298:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Check the CMSIS configuration that defines the number of
 299:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 14


 300:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 301:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 302:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 303:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		#endif
 304:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 305:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		#ifdef configPRIO_BITS
 306:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 307:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 308:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 309:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 310:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 311:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 312:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		#endif
 313:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 314:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 315:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		register. */
 316:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 317:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 318:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 319:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 320:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		value. */
 321:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 322:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	}
 323:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 324:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 325:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 326:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 246              		.loc 1 326 0
 247 0004 0C4A     		ldr	r2, .L11
 248 0006 0C4B     		ldr	r3, .L11
 249 0008 1B68     		ldr	r3, [r3]
 250 000a 43F46003 		orr	r3, r3, #14680064
 251 000e 1360     		str	r3, [r2]
 327:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 252              		.loc 1 327 0
 253 0010 094A     		ldr	r2, .L11
 254 0012 094B     		ldr	r3, .L11
 255 0014 1B68     		ldr	r3, [r3]
 256 0016 43F06043 		orr	r3, r3, #-536870912
 257 001a 1360     		str	r3, [r2]
 328:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 329:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 330:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	here already. */
 331:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 258              		.loc 1 331 0
 259 001c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 332:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 333:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 334:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 260              		.loc 1 334 0
 261 0020 064B     		ldr	r3, .L11+4
 262 0022 0022     		movs	r2, #0
 263 0024 1A60     		str	r2, [r3]
 335:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 336:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the first task. */
 337:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	prvPortStartFirstTask();
 264              		.loc 1 337 0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 15


 265 0026 FFF7FEFF 		bl	prvPortStartFirstTask
 338:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 339:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 340:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 341:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 342:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 343:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 344:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	symbol. */
 345:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext();
 266              		.loc 1 345 0
 267 002a FFF7FEFF 		bl	vTaskSwitchContext
 346:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 268              		.loc 1 346 0
 269 002e FFF7FEFF 		bl	prvTaskExitError
 347:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 348:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Should not get here! */
 349:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	return 0;
 270              		.loc 1 349 0
 271 0032 0023     		movs	r3, #0
 350:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 272              		.loc 1 350 0
 273 0034 1846     		mov	r0, r3
 274 0036 80BD     		pop	{r7, pc}
 275              	.L12:
 276              		.align	2
 277              	.L11:
 278 0038 20ED00E0 		.word	-536810208
 279 003c 00000000 		.word	uxCriticalNesting
 280              		.cfi_endproc
 281              	.LFE72:
 282              		.size	xPortStartScheduler, .-xPortStartScheduler
 283              		.section	.text.vPortEndScheduler,"ax",%progbits
 284              		.align	2
 285              		.global	vPortEndScheduler
 286              		.thumb
 287              		.thumb_func
 288              		.type	vPortEndScheduler, %function
 289              	vPortEndScheduler:
 290              	.LFB73:
 351:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 352:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 353:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void vPortEndScheduler( void )
 354:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 291              		.loc 1 354 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296 0000 80B4     		push	{r7}
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 7, -4
 299 0002 00AF     		add	r7, sp, #0
 300              		.cfi_def_cfa_register 7
 355:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 356:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert. */
 357:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 358:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 16


 301              		.loc 1 358 0
 302 0004 BD46     		mov	sp, r7
 303              		.cfi_def_cfa_register 13
 304              		@ sp needed
 305 0006 5DF8047B 		ldr	r7, [sp], #4
 306              		.cfi_restore 7
 307              		.cfi_def_cfa_offset 0
 308 000a 7047     		bx	lr
 309              		.cfi_endproc
 310              	.LFE73:
 311              		.size	vPortEndScheduler, .-vPortEndScheduler
 312              		.section	.text.vPortEnterCritical,"ax",%progbits
 313              		.align	2
 314              		.global	vPortEnterCritical
 315              		.thumb
 316              		.thumb_func
 317              		.type	vPortEnterCritical, %function
 318              	vPortEnterCritical:
 319              	.LFB74:
 359:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 360:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 361:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void vPortEnterCritical( void )
 362:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 320              		.loc 1 362 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 8
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 325 0000 80B4     		push	{r7}
 326              		.cfi_def_cfa_offset 4
 327              		.cfi_offset 7, -4
 328 0002 83B0     		sub	sp, sp, #12
 329              		.cfi_def_cfa_offset 16
 330 0004 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
 332              	.LBB14:
 333              	.LBB15:
 334              		.loc 2 195 0
 335              	@ 195 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 336 0006 4FF0A003 			mov r3, #160												
 337 000a 83F31188 		msr basepri, r3											
 338 000e BFF36F8F 		isb														
 339 0012 BFF34F8F 		dsb														
 340              	
 341              	@ 0 "" 2
 342              		.thumb
 343 0016 7B60     		str	r3, [r7, #4]
 344              	.LBE15:
 345              	.LBE14:
 363:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 364:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting++;
 346              		.loc 1 364 0
 347 0018 044B     		ldr	r3, .L15
 348 001a 1B68     		ldr	r3, [r3]
 349 001c 0133     		adds	r3, r3, #1
 350 001e 034A     		ldr	r2, .L15
 351 0020 1360     		str	r3, [r2]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 17


 365:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 366:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 367:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 368:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 369:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 370:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	assert function also uses a critical section. */
 371:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 372:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	{
 373:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 374:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	}
 375:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 352              		.loc 1 375 0
 353 0022 0C37     		adds	r7, r7, #12
 354              		.cfi_def_cfa_offset 4
 355 0024 BD46     		mov	sp, r7
 356              		.cfi_def_cfa_register 13
 357              		@ sp needed
 358 0026 5DF8047B 		ldr	r7, [sp], #4
 359              		.cfi_restore 7
 360              		.cfi_def_cfa_offset 0
 361 002a 7047     		bx	lr
 362              	.L16:
 363              		.align	2
 364              	.L15:
 365 002c 00000000 		.word	uxCriticalNesting
 366              		.cfi_endproc
 367              	.LFE74:
 368              		.size	vPortEnterCritical, .-vPortEnterCritical
 369              		.section	.text.vPortExitCritical,"ax",%progbits
 370              		.align	2
 371              		.global	vPortExitCritical
 372              		.thumb
 373              		.thumb_func
 374              		.type	vPortExitCritical, %function
 375              	vPortExitCritical:
 376              	.LFB75:
 376:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 377:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 378:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void vPortExitCritical( void )
 379:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 377              		.loc 1 379 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 8
 380              		@ frame_needed = 1, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382 0000 80B4     		push	{r7}
 383              		.cfi_def_cfa_offset 4
 384              		.cfi_offset 7, -4
 385 0002 83B0     		sub	sp, sp, #12
 386              		.cfi_def_cfa_offset 16
 387 0004 00AF     		add	r7, sp, #0
 388              		.cfi_def_cfa_register 7
 380:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 381:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting--;
 389              		.loc 1 381 0
 390 0006 094B     		ldr	r3, .L19
 391 0008 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 18


 392 000a 013B     		subs	r3, r3, #1
 393 000c 074A     		ldr	r2, .L19
 394 000e 1360     		str	r3, [r2]
 382:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 395              		.loc 1 382 0
 396 0010 064B     		ldr	r3, .L19
 397 0012 1B68     		ldr	r3, [r3]
 398 0014 002B     		cmp	r3, #0
 399 0016 04D1     		bne	.L17
 400 0018 0023     		movs	r3, #0
 401 001a 7B60     		str	r3, [r7, #4]
 402              	.LBB16:
 403              	.LBB17:
 196:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 212:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 404              		.loc 2 229 0
 405 001c 7B68     		ldr	r3, [r7, #4]
 406              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 407 001e 83F31188 			msr basepri, r3	
 408              	@ 0 "" 2
 409              		.thumb
 410              	.L17:
 411              	.LBE17:
 412              	.LBE16:
 383:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	{
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 19


 384:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 385:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	}
 386:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 413              		.loc 1 386 0
 414 0022 0C37     		adds	r7, r7, #12
 415              		.cfi_def_cfa_offset 4
 416 0024 BD46     		mov	sp, r7
 417              		.cfi_def_cfa_register 13
 418              		@ sp needed
 419 0026 5DF8047B 		ldr	r7, [sp], #4
 420              		.cfi_restore 7
 421              		.cfi_def_cfa_offset 0
 422 002a 7047     		bx	lr
 423              	.L20:
 424              		.align	2
 425              	.L19:
 426 002c 00000000 		.word	uxCriticalNesting
 427              		.cfi_endproc
 428              	.LFE75:
 429              		.size	vPortExitCritical, .-vPortExitCritical
 430              		.section	.text.xPortPendSVHandler,"ax",%progbits
 431              		.align	2
 432              		.global	xPortPendSVHandler
 433              		.thumb
 434              		.thumb_func
 435              		.type	xPortPendSVHandler, %function
 436              	xPortPendSVHandler:
 437              	.LFB76:
 387:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 388:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 389:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void )
 390:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 438              		.loc 1 390 0
 439              		.cfi_startproc
 440              		@ Naked Function: prologue and epilogue provided by programmer.
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 391:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* This is a naked function. */
 392:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 393:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile
 443              		.loc 1 393 0
 444              	@ 393 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3\port.c" 1
 445 0000 EFF30980 			mrs r0, psp							
 446 0004 BFF36F8F 		isb									
 447              											
 448 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 449 000a 1A68     		ldr	r2, [r3]						
 450              											
 451 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 452 0010 1060     		str r0, [r2]						
 453              											
 454 0012 2DE90840 		stmdb sp!, {r3, r14}				
 455 0016 4FF0A000 		mov r0, #160							
 456 001a 80F31188 		msr basepri, r0						
 457 001e FFF7FEFF 		bl vTaskSwitchContext				
 458 0022 4FF00000 		mov r0, #0							
 459 0026 80F31188 		msr basepri, r0						
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 20


 460 002a BDE80840 		ldmia sp!, {r3, r14}				
 461              											
 462 002e 1968     		ldr r1, [r3]						
 463 0030 0868     		ldr r0, [r1]						
 464 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 465 0036 80F30988 		msr psp, r0							
 466 003a BFF36F8F 		isb									
 467 003e 7047     		bx r14								
 468              											
 469              		.align 4							
 470 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 471              	
 472              	@ 0 "" 2
 394:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	(
 395:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 396:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 397:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 398:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 399:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 400:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 401:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 402:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 403:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 404:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 405:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 406:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 407:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 408:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 409:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 410:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 411:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"										\n" /* Restore the context, including the critical nesting count. */
 412:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 413:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 414:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 415:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 416:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 417:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	bx r14								\n"
 418:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 419:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"	.align 4							\n"
 420:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 421:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 422:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	);
 423:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 473              		.loc 1 423 0
 474              		.thumb
 475              		.cfi_endproc
 476              	.LFE76:
 477              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 478 0044 AFF30080 		.section	.text.xPortSysTickHandler,"ax",%progbits
 478      AFF30080 
 478      AFF30080 
 479              		.align	2
 480              		.global	xPortSysTickHandler
 481              		.thumb
 482              		.thumb_func
 483              		.type	xPortSysTickHandler, %function
 484              	xPortSysTickHandler:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 21


 485              	.LFB77:
 424:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 425:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 426:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void )
 427:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 486              		.loc 1 427 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490 0000 80B5     		push	{r7, lr}
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 7, -8
 493              		.cfi_offset 14, -4
 494 0002 82B0     		sub	sp, sp, #8
 495              		.cfi_def_cfa_offset 16
 496 0004 00AF     		add	r7, sp, #0
 497              		.cfi_def_cfa_register 7
 498              	.LBB18:
 499              	.LBB19:
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 500              		.loc 2 195 0
 501              	@ 195 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 502 0006 4FF0A003 			mov r3, #160												
 503 000a 83F31188 		msr basepri, r3											
 504 000e BFF36F8F 		isb														
 505 0012 BFF34F8F 		dsb														
 506              	
 507              	@ 0 "" 2
 508              		.thumb
 509 0016 7B60     		str	r3, [r7, #4]
 510              	.LBE19:
 511              	.LBE18:
 428:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 429:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 430:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 431:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	known. */
 432:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 433:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	{
 434:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 435:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 512              		.loc 1 435 0
 513 0018 FFF7FEFF 		bl	xTaskIncrementTick
 514 001c 0346     		mov	r3, r0
 515 001e 002B     		cmp	r3, #0
 516 0020 03D0     		beq	.L23
 436:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 437:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 438:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 439:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 517              		.loc 1 439 0
 518 0022 064B     		ldr	r3, .L24
 519 0024 4FF08052 		mov	r2, #268435456
 520 0028 1A60     		str	r2, [r3]
 521              	.L23:
 522 002a 0023     		movs	r3, #0
 523 002c 3B60     		str	r3, [r7]
 524              	.LBB20:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 22


 525              	.LBB21:
 526              		.loc 2 229 0
 527 002e 3B68     		ldr	r3, [r7]
 528              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 529 0030 83F31188 			msr basepri, r3	
 530              	@ 0 "" 2
 531              		.thumb
 532              	.LBE21:
 533              	.LBE20:
 440:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 441:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	}
 442:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 443:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 534              		.loc 1 443 0
 535 0034 0837     		adds	r7, r7, #8
 536              		.cfi_def_cfa_offset 8
 537 0036 BD46     		mov	sp, r7
 538              		.cfi_def_cfa_register 13
 539              		@ sp needed
 540 0038 80BD     		pop	{r7, pc}
 541              	.L25:
 542 003a 00BF     		.align	2
 543              	.L24:
 544 003c 04ED00E0 		.word	-536810236
 545              		.cfi_endproc
 546              	.LFE77:
 547              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 548              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 549              		.align	2
 550              		.weak	vPortSetupTimerInterrupt
 551              		.thumb
 552              		.thumb_func
 553              		.type	vPortSetupTimerInterrupt, %function
 554              	vPortSetupTimerInterrupt:
 555              	.LFB78:
 444:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 445:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 446:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 447:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 448:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 449:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	{
 450:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 451:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 452:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 453:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 454:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 455:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 456:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 457:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 458:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 459:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 460:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 461:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 462:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 463:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 464:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 465:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 23


 466:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 467:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		through one of the tick periods. */
 468:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 469:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 470:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 471:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 472:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 473:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 474:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 475:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 476:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 477:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 478:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "isb" );
 479:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 480:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 481:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 482:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 483:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 484:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 485:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			this tick period. */
 486:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 487:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 488:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 489:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 490:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 491:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 492:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			periods. */
 493:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 494:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 495:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 496:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			above. */
 497:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 498:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 499:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		else
 500:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		{
 501:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Set the new reload value. */
 502:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 503:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 504:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 505:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			zero. */
 506:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 507:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 508:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 509:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 510:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 511:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 512:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 513:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 514:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 515:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 516:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 517:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 518:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 519:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			{
 520:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 521:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 522:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "isb" );
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 24


 523:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			}
 524:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 525:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 526:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 527:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			out of sleep mode to execute immediately.  see comments above
 528:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__disable_interrupt() call above. */
 529:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 530:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 531:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 532:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 533:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 534:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			and interrupts that execute while the clock is stopped will increase
 535:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 536:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			time. */
 537:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 538:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 539:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 540:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 541:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Disable the SysTick clock without reading the
 542:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 543:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 544:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 545:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 546:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 547:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			time*/
 548:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 549:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 550:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 551:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			been set back to the current reload value (the reload back being
 552:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 553:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 554:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			must have brought the system out of sleep mode). */
 555:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 556:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			{
 557:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 558:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 559:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 560:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				reloaded with ulReloadValue.  Reset the
 561:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 562:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				period. */
 563:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 564:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 565:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 566:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 567:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				that took too long. */
 568:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 569:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				{
 570:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 571:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				}
 572:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 573:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 574:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 575:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				/* As the pending tick will be processed as soon as this
 576:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				function exits, the tick value maintained by the tick is stepped
 577:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				forward by one less than the time spent waiting. */
 578:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 579:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			}
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 25


 580:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			else
 581:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			{
 582:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 583:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 584:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 585:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				ticks). */
 586:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 587:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 588:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 589:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				was waiting? */
 590:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 591:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 592:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 593:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				period remains. */
 594:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 595:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			}
 596:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 597:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 598:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 599:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			value. */
 600:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 601:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 602:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 603:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 604:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 605:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			/* Exit with interrpts enabled. */
 606:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 607:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		}
 608:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	}
 609:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 610:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 611:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 612:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 613:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** /*
 614:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 615:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  * frequency.
 616:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c ****  */
 617:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 618:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** {
 556              		.loc 1 618 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 0
 559              		@ frame_needed = 1, uses_anonymous_args = 0
 560              		@ link register save eliminated.
 561 0000 80B4     		push	{r7}
 562              		.cfi_def_cfa_offset 4
 563              		.cfi_offset 7, -4
 564 0002 00AF     		add	r7, sp, #0
 565              		.cfi_def_cfa_register 7
 619:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 620:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 621:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	{
 622:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 623:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 624:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 625:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	}
 626:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 26


 627:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 628:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Stop and clear the SysTick. */
 629:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 566              		.loc 1 629 0
 567 0004 084B     		ldr	r3, .L27
 568 0006 0022     		movs	r2, #0
 569 0008 1A60     		str	r2, [r3]
 630:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 570              		.loc 1 630 0
 571 000a 084B     		ldr	r3, .L27+4
 572 000c 0022     		movs	r2, #0
 573 000e 1A60     		str	r2, [r3]
 631:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 
 632:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 633:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 574              		.loc 1 633 0
 575 0010 074B     		ldr	r3, .L27+8
 576 0012 4BF67F32 		movw	r2, #47999
 577 0016 1A60     		str	r2, [r3]
 634:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 578              		.loc 1 634 0
 579 0018 034B     		ldr	r3, .L27
 580 001a 0722     		movs	r2, #7
 581 001c 1A60     		str	r2, [r3]
 635:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/port.c **** }
 582              		.loc 1 635 0
 583 001e BD46     		mov	sp, r7
 584              		.cfi_def_cfa_register 13
 585              		@ sp needed
 586 0020 5DF8047B 		ldr	r7, [sp], #4
 587              		.cfi_restore 7
 588              		.cfi_def_cfa_offset 0
 589 0024 7047     		bx	lr
 590              	.L28:
 591 0026 00BF     		.align	2
 592              	.L27:
 593 0028 10E000E0 		.word	-536813552
 594 002c 18E000E0 		.word	-536813544
 595 0030 14E000E0 		.word	-536813548
 596              		.cfi_endproc
 597              	.LFE78:
 598              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 599              		.text
 600              	.Letext0:
 601              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 602              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 603              		.file 5 "..\\..\\FreeRTOS_Source\\include/projdefs.h"
 604              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 605              		.section	.debug_info,"",%progbits
 606              	.Ldebug_info0:
 607 0000 10030000 		.4byte	0x310
 608 0004 0400     		.2byte	0x4
 609 0006 00000000 		.4byte	.Ldebug_abbrev0
 610 000a 04       		.byte	0x4
 611 000b 01       		.uleb128 0x1
 612 000c 5C000000 		.4byte	.LASF36
 613 0010 01       		.byte	0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 27


 614 0011 E8010000 		.4byte	.LASF37
 615 0015 60010000 		.4byte	.LASF38
 616 0019 00000000 		.4byte	.Ldebug_ranges0+0
 617 001d 00000000 		.4byte	0
 618 0021 00000000 		.4byte	.Ldebug_line0
 619 0025 02       		.uleb128 0x2
 620 0026 04       		.byte	0x4
 621 0027 05       		.byte	0x5
 622 0028 696E7400 		.ascii	"int\000"
 623 002c 03       		.uleb128 0x3
 624 002d 04       		.byte	0x4
 625 002e 07       		.byte	0x7
 626 002f 58020000 		.4byte	.LASF0
 627 0033 03       		.uleb128 0x3
 628 0034 01       		.byte	0x1
 629 0035 06       		.byte	0x6
 630 0036 52030000 		.4byte	.LASF1
 631 003a 03       		.uleb128 0x3
 632 003b 01       		.byte	0x1
 633 003c 08       		.byte	0x8
 634 003d 22010000 		.4byte	.LASF2
 635 0041 03       		.uleb128 0x3
 636 0042 02       		.byte	0x2
 637 0043 05       		.byte	0x5
 638 0044 FD020000 		.4byte	.LASF3
 639 0048 03       		.uleb128 0x3
 640 0049 02       		.byte	0x2
 641 004a 07       		.byte	0x7
 642 004b 4D010000 		.4byte	.LASF4
 643 004f 04       		.uleb128 0x4
 644 0050 49000000 		.4byte	.LASF6
 645 0054 03       		.byte	0x3
 646 0055 3F       		.byte	0x3f
 647 0056 5A000000 		.4byte	0x5a
 648 005a 03       		.uleb128 0x3
 649 005b 04       		.byte	0x4
 650 005c 05       		.byte	0x5
 651 005d 53000000 		.4byte	.LASF5
 652 0061 04       		.uleb128 0x4
 653 0062 30010000 		.4byte	.LASF7
 654 0066 03       		.byte	0x3
 655 0067 41       		.byte	0x41
 656 0068 6C000000 		.4byte	0x6c
 657 006c 03       		.uleb128 0x3
 658 006d 04       		.byte	0x4
 659 006e 07       		.byte	0x7
 660 006f 3B010000 		.4byte	.LASF8
 661 0073 03       		.uleb128 0x3
 662 0074 08       		.byte	0x8
 663 0075 05       		.byte	0x5
 664 0076 CE020000 		.4byte	.LASF9
 665 007a 03       		.uleb128 0x3
 666 007b 08       		.byte	0x8
 667 007c 07       		.byte	0x7
 668 007d 72020000 		.4byte	.LASF10
 669 0081 04       		.uleb128 0x4
 670 0082 0C010000 		.4byte	.LASF11
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 28


 671 0086 04       		.byte	0x4
 672 0087 2C       		.byte	0x2c
 673 0088 4F000000 		.4byte	0x4f
 674 008c 04       		.uleb128 0x4
 675 008d 19030000 		.4byte	.LASF12
 676 0091 04       		.byte	0x4
 677 0092 2D       		.byte	0x2d
 678 0093 61000000 		.4byte	0x61
 679 0097 03       		.uleb128 0x3
 680 0098 04       		.byte	0x4
 681 0099 04       		.byte	0x4
 682 009a 14010000 		.4byte	.LASF13
 683 009e 03       		.uleb128 0x3
 684 009f 08       		.byte	0x8
 685 00a0 04       		.byte	0x4
 686 00a1 5E030000 		.4byte	.LASF14
 687 00a5 03       		.uleb128 0x3
 688 00a6 01       		.byte	0x1
 689 00a7 08       		.byte	0x8
 690 00a8 DC020000 		.4byte	.LASF15
 691 00ac 03       		.uleb128 0x3
 692 00ad 04       		.byte	0x4
 693 00ae 07       		.byte	0x7
 694 00af C5020000 		.4byte	.LASF16
 695 00b3 05       		.uleb128 0x5
 696 00b4 04       		.byte	0x4
 697 00b5 06       		.uleb128 0x6
 698 00b6 8C000000 		.4byte	0x8c
 699 00ba 04       		.uleb128 0x4
 700 00bb FD000000 		.4byte	.LASF17
 701 00bf 05       		.byte	0x5
 702 00c0 23       		.byte	0x23
 703 00c1 C5000000 		.4byte	0xc5
 704 00c5 07       		.uleb128 0x7
 705 00c6 04       		.byte	0x4
 706 00c7 CB000000 		.4byte	0xcb
 707 00cb 08       		.uleb128 0x8
 708 00cc D6000000 		.4byte	0xd6
 709 00d0 09       		.uleb128 0x9
 710 00d1 B3000000 		.4byte	0xb3
 711 00d5 00       		.byte	0
 712 00d6 04       		.uleb128 0x4
 713 00d7 E1020000 		.4byte	.LASF18
 714 00db 02       		.byte	0x2
 715 00dc 37       		.byte	0x37
 716 00dd 8C000000 		.4byte	0x8c
 717 00e1 04       		.uleb128 0x4
 718 00e2 31030000 		.4byte	.LASF19
 719 00e6 02       		.byte	0x2
 720 00e7 38       		.byte	0x38
 721 00e8 5A000000 		.4byte	0x5a
 722 00ec 04       		.uleb128 0x4
 723 00ed 79030000 		.4byte	.LASF20
 724 00f1 02       		.byte	0x2
 725 00f2 39       		.byte	0x39
 726 00f3 6C000000 		.4byte	0x6c
 727 00f7 04       		.uleb128 0x4
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 29


 728 00f8 3E000000 		.4byte	.LASF21
 729 00fc 02       		.byte	0x2
 730 00fd 3F       		.byte	0x3f
 731 00fe 8C000000 		.4byte	0x8c
 732 0102 07       		.uleb128 0x7
 733 0103 04       		.byte	0x4
 734 0104 D6000000 		.4byte	0xd6
 735 0108 0A       		.uleb128 0xa
 736 0109 89020000 		.4byte	.LASF22
 737 010d 02       		.byte	0x2
 738 010e BF       		.byte	0xbf
 739 010f 03       		.byte	0x3
 740 0110 20010000 		.4byte	0x120
 741 0114 0B       		.uleb128 0xb
 742 0115 1A020000 		.4byte	.LASF39
 743 0119 02       		.byte	0x2
 744 011a C1       		.byte	0xc1
 745 011b 8C000000 		.4byte	0x8c
 746 011f 00       		.byte	0
 747 0120 0A       		.uleb128 0xa
 748 0121 34020000 		.4byte	.LASF23
 749 0125 02       		.byte	0x2
 750 0126 E3       		.byte	0xe3
 751 0127 03       		.byte	0x3
 752 0128 38010000 		.4byte	0x138
 753 012c 0C       		.uleb128 0xc
 754 012d 22030000 		.4byte	.LASF40
 755 0131 02       		.byte	0x2
 756 0132 E3       		.byte	0xe3
 757 0133 8C000000 		.4byte	0x8c
 758 0137 00       		.byte	0
 759 0138 0D       		.uleb128 0xd
 760 0139 85030000 		.4byte	.LASF41
 761 013d 01       		.byte	0x1
 762 013e AE       		.byte	0xae
 763 013f 02010000 		.4byte	0x102
 764 0143 00000000 		.4byte	.LFB68
 765 0147 5C000000 		.4byte	.LFE68-.LFB68
 766 014b 01       		.uleb128 0x1
 767 014c 9C       		.byte	0x9c
 768 014d 7C010000 		.4byte	0x17c
 769 0151 0E       		.uleb128 0xe
 770 0152 65020000 		.4byte	.LASF24
 771 0156 01       		.byte	0x1
 772 0157 AE       		.byte	0xae
 773 0158 02010000 		.4byte	0x102
 774 015c 02       		.uleb128 0x2
 775 015d 91       		.byte	0x91
 776 015e 74       		.sleb128 -12
 777 015f 0E       		.uleb128 0xe
 778 0160 25000000 		.4byte	.LASF25
 779 0164 01       		.byte	0x1
 780 0165 AE       		.byte	0xae
 781 0166 BA000000 		.4byte	0xba
 782 016a 02       		.uleb128 0x2
 783 016b 91       		.byte	0x91
 784 016c 70       		.sleb128 -16
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 30


 785 016d 0E       		.uleb128 0xe
 786 016e 27020000 		.4byte	.LASF26
 787 0172 01       		.byte	0x1
 788 0173 AE       		.byte	0xae
 789 0174 B3000000 		.4byte	0xb3
 790 0178 02       		.uleb128 0x2
 791 0179 91       		.byte	0x91
 792 017a 6C       		.sleb128 -20
 793 017b 00       		.byte	0
 794 017c 0F       		.uleb128 0xf
 795 017d 9B020000 		.4byte	.LASF42
 796 0181 01       		.byte	0x1
 797 0182 C0       		.byte	0xc0
 798 0183 00000000 		.4byte	.LFB69
 799 0187 2E000000 		.4byte	.LFE69-.LFB69
 800 018b 01       		.uleb128 0x1
 801 018c 9C       		.byte	0x9c
 802 018d C2010000 		.4byte	0x1c2
 803 0191 10       		.uleb128 0x10
 804 0192 1A010000 		.4byte	.LASF34
 805 0196 01       		.byte	0x1
 806 0197 C2       		.byte	0xc2
 807 0198 B5000000 		.4byte	0xb5
 808 019c 02       		.uleb128 0x2
 809 019d 91       		.byte	0x91
 810 019e 70       		.sleb128 -16
 811 019f 11       		.uleb128 0x11
 812 01a0 08010000 		.4byte	0x108
 813 01a4 0A000000 		.4byte	.LBB12
 814 01a8 12000000 		.4byte	.LBE12-.LBB12
 815 01ac 01       		.byte	0x1
 816 01ad CB       		.byte	0xcb
 817 01ae 12       		.uleb128 0x12
 818 01af 0A000000 		.4byte	.LBB13
 819 01b3 12000000 		.4byte	.LBE13-.LBB13
 820 01b7 13       		.uleb128 0x13
 821 01b8 14010000 		.4byte	0x114
 822 01bc 02       		.uleb128 0x2
 823 01bd 91       		.byte	0x91
 824 01be 74       		.sleb128 -12
 825 01bf 00       		.byte	0
 826 01c0 00       		.byte	0
 827 01c1 00       		.byte	0
 828 01c2 14       		.uleb128 0x14
 829 01c3 ED020000 		.4byte	.LASF27
 830 01c7 01       		.byte	0x1
 831 01c8 D9       		.byte	0xd9
 832 01c9 00000000 		.4byte	.LFB70
 833 01cd 24000000 		.4byte	.LFE70-.LFB70
 834 01d1 01       		.uleb128 0x1
 835 01d2 9C       		.byte	0x9c
 836 01d3 15       		.uleb128 0x15
 837 01d4 3C030000 		.4byte	.LASF43
 838 01d8 01       		.byte	0x1
 839 01d9 ED       		.byte	0xed
 840 01da 00000000 		.4byte	.LFB71
 841 01de 1A000000 		.4byte	.LFE71-.LFB71
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 31


 842 01e2 01       		.uleb128 0x1
 843 01e3 9C       		.byte	0x9c
 844 01e4 16       		.uleb128 0x16
 845 01e5 65030000 		.4byte	.LASF44
 846 01e9 01       		.byte	0x1
 847 01ea 0101     		.2byte	0x101
 848 01ec E1000000 		.4byte	0xe1
 849 01f0 00000000 		.4byte	.LFB72
 850 01f4 40000000 		.4byte	.LFE72-.LFB72
 851 01f8 01       		.uleb128 0x1
 852 01f9 9C       		.byte	0x9c
 853 01fa 17       		.uleb128 0x17
 854 01fb 2C000000 		.4byte	.LASF28
 855 01ff 01       		.byte	0x1
 856 0200 6101     		.2byte	0x161
 857 0202 00000000 		.4byte	.LFB73
 858 0206 0C000000 		.4byte	.LFE73-.LFB73
 859 020a 01       		.uleb128 0x1
 860 020b 9C       		.byte	0x9c
 861 020c 18       		.uleb128 0x18
 862 020d 12000000 		.4byte	.LASF29
 863 0211 01       		.byte	0x1
 864 0212 6901     		.2byte	0x169
 865 0214 00000000 		.4byte	.LFB74
 866 0218 30000000 		.4byte	.LFE74-.LFB74
 867 021c 01       		.uleb128 0x1
 868 021d 9C       		.byte	0x9c
 869 021e 46020000 		.4byte	0x246
 870 0222 19       		.uleb128 0x19
 871 0223 08010000 		.4byte	0x108
 872 0227 06000000 		.4byte	.LBB14
 873 022b 12000000 		.4byte	.LBE14-.LBB14
 874 022f 01       		.byte	0x1
 875 0230 6B01     		.2byte	0x16b
 876 0232 12       		.uleb128 0x12
 877 0233 06000000 		.4byte	.LBB15
 878 0237 12000000 		.4byte	.LBE15-.LBB15
 879 023b 13       		.uleb128 0x13
 880 023c 14010000 		.4byte	0x114
 881 0240 02       		.uleb128 0x2
 882 0241 91       		.byte	0x91
 883 0242 74       		.sleb128 -12
 884 0243 00       		.byte	0
 885 0244 00       		.byte	0
 886 0245 00       		.byte	0
 887 0246 18       		.uleb128 0x18
 888 0247 07030000 		.4byte	.LASF30
 889 024b 01       		.byte	0x1
 890 024c 7A01     		.2byte	0x17a
 891 024e 00000000 		.4byte	.LFB75
 892 0252 30000000 		.4byte	.LFE75-.LFB75
 893 0256 01       		.uleb128 0x1
 894 0257 9C       		.byte	0x9c
 895 0258 76020000 		.4byte	0x276
 896 025c 19       		.uleb128 0x19
 897 025d 20010000 		.4byte	0x120
 898 0261 1C000000 		.4byte	.LBB16
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 32


 899 0265 06000000 		.4byte	.LBE16-.LBB16
 900 0269 01       		.byte	0x1
 901 026a 8001     		.2byte	0x180
 902 026c 1A       		.uleb128 0x1a
 903 026d 2C010000 		.4byte	0x12c
 904 0271 02       		.uleb128 0x2
 905 0272 91       		.byte	0x91
 906 0273 74       		.sleb128 -12
 907 0274 00       		.byte	0
 908 0275 00       		.byte	0
 909 0276 17       		.uleb128 0x17
 910 0277 EA000000 		.4byte	.LASF31
 911 027b 01       		.byte	0x1
 912 027c 8501     		.2byte	0x185
 913 027e 00000000 		.4byte	.LFB76
 914 0282 44000000 		.4byte	.LFE76-.LFB76
 915 0286 01       		.uleb128 0x1
 916 0287 9C       		.byte	0x9c
 917 0288 1B       		.uleb128 0x1b
 918 0289 44020000 		.4byte	.LASF32
 919 028d 01       		.byte	0x1
 920 028e AA01     		.2byte	0x1aa
 921 0290 00000000 		.4byte	.LFB77
 922 0294 40000000 		.4byte	.LFE77-.LFB77
 923 0298 01       		.uleb128 0x1
 924 0299 9C       		.byte	0x9c
 925 029a DF020000 		.4byte	0x2df
 926 029e 1C       		.uleb128 0x1c
 927 029f 08010000 		.4byte	0x108
 928 02a3 06000000 		.4byte	.LBB18
 929 02a7 12000000 		.4byte	.LBE18-.LBB18
 930 02ab 01       		.byte	0x1
 931 02ac B001     		.2byte	0x1b0
 932 02ae C5020000 		.4byte	0x2c5
 933 02b2 12       		.uleb128 0x12
 934 02b3 06000000 		.4byte	.LBB19
 935 02b7 12000000 		.4byte	.LBE19-.LBB19
 936 02bb 13       		.uleb128 0x13
 937 02bc 14010000 		.4byte	0x114
 938 02c0 02       		.uleb128 0x2
 939 02c1 91       		.byte	0x91
 940 02c2 74       		.sleb128 -12
 941 02c3 00       		.byte	0
 942 02c4 00       		.byte	0
 943 02c5 19       		.uleb128 0x19
 944 02c6 20010000 		.4byte	0x120
 945 02ca 2E000000 		.4byte	.LBB20
 946 02ce 06000000 		.4byte	.LBE20-.LBB20
 947 02d2 01       		.byte	0x1
 948 02d3 BA01     		.2byte	0x1ba
 949 02d5 1A       		.uleb128 0x1a
 950 02d6 2C010000 		.4byte	0x12c
 951 02da 02       		.uleb128 0x2
 952 02db 91       		.byte	0x91
 953 02dc 70       		.sleb128 -16
 954 02dd 00       		.byte	0
 955 02de 00       		.byte	0
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 33


 956 02df 17       		.uleb128 0x17
 957 02e0 AC020000 		.4byte	.LASF33
 958 02e4 01       		.byte	0x1
 959 02e5 6902     		.2byte	0x269
 960 02e7 00000000 		.4byte	.LFB78
 961 02eb 34000000 		.4byte	.LFE78-.LFB78
 962 02ef 01       		.uleb128 0x1
 963 02f0 9C       		.byte	0x9c
 964 02f1 10       		.uleb128 0x10
 965 02f2 00000000 		.4byte	.LASF35
 966 02f6 01       		.byte	0x1
 967 02f7 85       		.byte	0x85
 968 02f8 EC000000 		.4byte	0xec
 969 02fc 05       		.uleb128 0x5
 970 02fd 03       		.byte	0x3
 971 02fe 00000000 		.4byte	uxCriticalNesting
 972 0302 1D       		.uleb128 0x1d
 973 0303 DB010000 		.4byte	.LASF45
 974 0307 06       		.byte	0x6
 975 0308 9606     		.2byte	0x696
 976 030a 0E030000 		.4byte	0x30e
 977 030e 06       		.uleb128 0x6
 978 030f 81000000 		.4byte	0x81
 979 0313 00       		.byte	0
 980              		.section	.debug_abbrev,"",%progbits
 981              	.Ldebug_abbrev0:
 982 0000 01       		.uleb128 0x1
 983 0001 11       		.uleb128 0x11
 984 0002 01       		.byte	0x1
 985 0003 25       		.uleb128 0x25
 986 0004 0E       		.uleb128 0xe
 987 0005 13       		.uleb128 0x13
 988 0006 0B       		.uleb128 0xb
 989 0007 03       		.uleb128 0x3
 990 0008 0E       		.uleb128 0xe
 991 0009 1B       		.uleb128 0x1b
 992 000a 0E       		.uleb128 0xe
 993 000b 55       		.uleb128 0x55
 994 000c 17       		.uleb128 0x17
 995 000d 11       		.uleb128 0x11
 996 000e 01       		.uleb128 0x1
 997 000f 10       		.uleb128 0x10
 998 0010 17       		.uleb128 0x17
 999 0011 00       		.byte	0
 1000 0012 00       		.byte	0
 1001 0013 02       		.uleb128 0x2
 1002 0014 24       		.uleb128 0x24
 1003 0015 00       		.byte	0
 1004 0016 0B       		.uleb128 0xb
 1005 0017 0B       		.uleb128 0xb
 1006 0018 3E       		.uleb128 0x3e
 1007 0019 0B       		.uleb128 0xb
 1008 001a 03       		.uleb128 0x3
 1009 001b 08       		.uleb128 0x8
 1010 001c 00       		.byte	0
 1011 001d 00       		.byte	0
 1012 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 34


 1013 001f 24       		.uleb128 0x24
 1014 0020 00       		.byte	0
 1015 0021 0B       		.uleb128 0xb
 1016 0022 0B       		.uleb128 0xb
 1017 0023 3E       		.uleb128 0x3e
 1018 0024 0B       		.uleb128 0xb
 1019 0025 03       		.uleb128 0x3
 1020 0026 0E       		.uleb128 0xe
 1021 0027 00       		.byte	0
 1022 0028 00       		.byte	0
 1023 0029 04       		.uleb128 0x4
 1024 002a 16       		.uleb128 0x16
 1025 002b 00       		.byte	0
 1026 002c 03       		.uleb128 0x3
 1027 002d 0E       		.uleb128 0xe
 1028 002e 3A       		.uleb128 0x3a
 1029 002f 0B       		.uleb128 0xb
 1030 0030 3B       		.uleb128 0x3b
 1031 0031 0B       		.uleb128 0xb
 1032 0032 49       		.uleb128 0x49
 1033 0033 13       		.uleb128 0x13
 1034 0034 00       		.byte	0
 1035 0035 00       		.byte	0
 1036 0036 05       		.uleb128 0x5
 1037 0037 0F       		.uleb128 0xf
 1038 0038 00       		.byte	0
 1039 0039 0B       		.uleb128 0xb
 1040 003a 0B       		.uleb128 0xb
 1041 003b 00       		.byte	0
 1042 003c 00       		.byte	0
 1043 003d 06       		.uleb128 0x6
 1044 003e 35       		.uleb128 0x35
 1045 003f 00       		.byte	0
 1046 0040 49       		.uleb128 0x49
 1047 0041 13       		.uleb128 0x13
 1048 0042 00       		.byte	0
 1049 0043 00       		.byte	0
 1050 0044 07       		.uleb128 0x7
 1051 0045 0F       		.uleb128 0xf
 1052 0046 00       		.byte	0
 1053 0047 0B       		.uleb128 0xb
 1054 0048 0B       		.uleb128 0xb
 1055 0049 49       		.uleb128 0x49
 1056 004a 13       		.uleb128 0x13
 1057 004b 00       		.byte	0
 1058 004c 00       		.byte	0
 1059 004d 08       		.uleb128 0x8
 1060 004e 15       		.uleb128 0x15
 1061 004f 01       		.byte	0x1
 1062 0050 27       		.uleb128 0x27
 1063 0051 19       		.uleb128 0x19
 1064 0052 01       		.uleb128 0x1
 1065 0053 13       		.uleb128 0x13
 1066 0054 00       		.byte	0
 1067 0055 00       		.byte	0
 1068 0056 09       		.uleb128 0x9
 1069 0057 05       		.uleb128 0x5
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 35


 1070 0058 00       		.byte	0
 1071 0059 49       		.uleb128 0x49
 1072 005a 13       		.uleb128 0x13
 1073 005b 00       		.byte	0
 1074 005c 00       		.byte	0
 1075 005d 0A       		.uleb128 0xa
 1076 005e 2E       		.uleb128 0x2e
 1077 005f 01       		.byte	0x1
 1078 0060 03       		.uleb128 0x3
 1079 0061 0E       		.uleb128 0xe
 1080 0062 3A       		.uleb128 0x3a
 1081 0063 0B       		.uleb128 0xb
 1082 0064 3B       		.uleb128 0x3b
 1083 0065 0B       		.uleb128 0xb
 1084 0066 27       		.uleb128 0x27
 1085 0067 19       		.uleb128 0x19
 1086 0068 20       		.uleb128 0x20
 1087 0069 0B       		.uleb128 0xb
 1088 006a 01       		.uleb128 0x1
 1089 006b 13       		.uleb128 0x13
 1090 006c 00       		.byte	0
 1091 006d 00       		.byte	0
 1092 006e 0B       		.uleb128 0xb
 1093 006f 34       		.uleb128 0x34
 1094 0070 00       		.byte	0
 1095 0071 03       		.uleb128 0x3
 1096 0072 0E       		.uleb128 0xe
 1097 0073 3A       		.uleb128 0x3a
 1098 0074 0B       		.uleb128 0xb
 1099 0075 3B       		.uleb128 0x3b
 1100 0076 0B       		.uleb128 0xb
 1101 0077 49       		.uleb128 0x49
 1102 0078 13       		.uleb128 0x13
 1103 0079 00       		.byte	0
 1104 007a 00       		.byte	0
 1105 007b 0C       		.uleb128 0xc
 1106 007c 05       		.uleb128 0x5
 1107 007d 00       		.byte	0
 1108 007e 03       		.uleb128 0x3
 1109 007f 0E       		.uleb128 0xe
 1110 0080 3A       		.uleb128 0x3a
 1111 0081 0B       		.uleb128 0xb
 1112 0082 3B       		.uleb128 0x3b
 1113 0083 0B       		.uleb128 0xb
 1114 0084 49       		.uleb128 0x49
 1115 0085 13       		.uleb128 0x13
 1116 0086 00       		.byte	0
 1117 0087 00       		.byte	0
 1118 0088 0D       		.uleb128 0xd
 1119 0089 2E       		.uleb128 0x2e
 1120 008a 01       		.byte	0x1
 1121 008b 3F       		.uleb128 0x3f
 1122 008c 19       		.uleb128 0x19
 1123 008d 03       		.uleb128 0x3
 1124 008e 0E       		.uleb128 0xe
 1125 008f 3A       		.uleb128 0x3a
 1126 0090 0B       		.uleb128 0xb
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 36


 1127 0091 3B       		.uleb128 0x3b
 1128 0092 0B       		.uleb128 0xb
 1129 0093 27       		.uleb128 0x27
 1130 0094 19       		.uleb128 0x19
 1131 0095 49       		.uleb128 0x49
 1132 0096 13       		.uleb128 0x13
 1133 0097 11       		.uleb128 0x11
 1134 0098 01       		.uleb128 0x1
 1135 0099 12       		.uleb128 0x12
 1136 009a 06       		.uleb128 0x6
 1137 009b 40       		.uleb128 0x40
 1138 009c 18       		.uleb128 0x18
 1139 009d 9742     		.uleb128 0x2117
 1140 009f 19       		.uleb128 0x19
 1141 00a0 01       		.uleb128 0x1
 1142 00a1 13       		.uleb128 0x13
 1143 00a2 00       		.byte	0
 1144 00a3 00       		.byte	0
 1145 00a4 0E       		.uleb128 0xe
 1146 00a5 05       		.uleb128 0x5
 1147 00a6 00       		.byte	0
 1148 00a7 03       		.uleb128 0x3
 1149 00a8 0E       		.uleb128 0xe
 1150 00a9 3A       		.uleb128 0x3a
 1151 00aa 0B       		.uleb128 0xb
 1152 00ab 3B       		.uleb128 0x3b
 1153 00ac 0B       		.uleb128 0xb
 1154 00ad 49       		.uleb128 0x49
 1155 00ae 13       		.uleb128 0x13
 1156 00af 02       		.uleb128 0x2
 1157 00b0 18       		.uleb128 0x18
 1158 00b1 00       		.byte	0
 1159 00b2 00       		.byte	0
 1160 00b3 0F       		.uleb128 0xf
 1161 00b4 2E       		.uleb128 0x2e
 1162 00b5 01       		.byte	0x1
 1163 00b6 03       		.uleb128 0x3
 1164 00b7 0E       		.uleb128 0xe
 1165 00b8 3A       		.uleb128 0x3a
 1166 00b9 0B       		.uleb128 0xb
 1167 00ba 3B       		.uleb128 0x3b
 1168 00bb 0B       		.uleb128 0xb
 1169 00bc 27       		.uleb128 0x27
 1170 00bd 19       		.uleb128 0x19
 1171 00be 11       		.uleb128 0x11
 1172 00bf 01       		.uleb128 0x1
 1173 00c0 12       		.uleb128 0x12
 1174 00c1 06       		.uleb128 0x6
 1175 00c2 40       		.uleb128 0x40
 1176 00c3 18       		.uleb128 0x18
 1177 00c4 9742     		.uleb128 0x2117
 1178 00c6 19       		.uleb128 0x19
 1179 00c7 01       		.uleb128 0x1
 1180 00c8 13       		.uleb128 0x13
 1181 00c9 00       		.byte	0
 1182 00ca 00       		.byte	0
 1183 00cb 10       		.uleb128 0x10
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 37


 1184 00cc 34       		.uleb128 0x34
 1185 00cd 00       		.byte	0
 1186 00ce 03       		.uleb128 0x3
 1187 00cf 0E       		.uleb128 0xe
 1188 00d0 3A       		.uleb128 0x3a
 1189 00d1 0B       		.uleb128 0xb
 1190 00d2 3B       		.uleb128 0x3b
 1191 00d3 0B       		.uleb128 0xb
 1192 00d4 49       		.uleb128 0x49
 1193 00d5 13       		.uleb128 0x13
 1194 00d6 02       		.uleb128 0x2
 1195 00d7 18       		.uleb128 0x18
 1196 00d8 00       		.byte	0
 1197 00d9 00       		.byte	0
 1198 00da 11       		.uleb128 0x11
 1199 00db 1D       		.uleb128 0x1d
 1200 00dc 01       		.byte	0x1
 1201 00dd 31       		.uleb128 0x31
 1202 00de 13       		.uleb128 0x13
 1203 00df 11       		.uleb128 0x11
 1204 00e0 01       		.uleb128 0x1
 1205 00e1 12       		.uleb128 0x12
 1206 00e2 06       		.uleb128 0x6
 1207 00e3 58       		.uleb128 0x58
 1208 00e4 0B       		.uleb128 0xb
 1209 00e5 59       		.uleb128 0x59
 1210 00e6 0B       		.uleb128 0xb
 1211 00e7 00       		.byte	0
 1212 00e8 00       		.byte	0
 1213 00e9 12       		.uleb128 0x12
 1214 00ea 0B       		.uleb128 0xb
 1215 00eb 01       		.byte	0x1
 1216 00ec 11       		.uleb128 0x11
 1217 00ed 01       		.uleb128 0x1
 1218 00ee 12       		.uleb128 0x12
 1219 00ef 06       		.uleb128 0x6
 1220 00f0 00       		.byte	0
 1221 00f1 00       		.byte	0
 1222 00f2 13       		.uleb128 0x13
 1223 00f3 34       		.uleb128 0x34
 1224 00f4 00       		.byte	0
 1225 00f5 31       		.uleb128 0x31
 1226 00f6 13       		.uleb128 0x13
 1227 00f7 02       		.uleb128 0x2
 1228 00f8 18       		.uleb128 0x18
 1229 00f9 00       		.byte	0
 1230 00fa 00       		.byte	0
 1231 00fb 14       		.uleb128 0x14
 1232 00fc 2E       		.uleb128 0x2e
 1233 00fd 00       		.byte	0
 1234 00fe 3F       		.uleb128 0x3f
 1235 00ff 19       		.uleb128 0x19
 1236 0100 03       		.uleb128 0x3
 1237 0101 0E       		.uleb128 0xe
 1238 0102 3A       		.uleb128 0x3a
 1239 0103 0B       		.uleb128 0xb
 1240 0104 3B       		.uleb128 0x3b
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 38


 1241 0105 0B       		.uleb128 0xb
 1242 0106 27       		.uleb128 0x27
 1243 0107 19       		.uleb128 0x19
 1244 0108 11       		.uleb128 0x11
 1245 0109 01       		.uleb128 0x1
 1246 010a 12       		.uleb128 0x12
 1247 010b 06       		.uleb128 0x6
 1248 010c 40       		.uleb128 0x40
 1249 010d 18       		.uleb128 0x18
 1250 010e 9742     		.uleb128 0x2117
 1251 0110 19       		.uleb128 0x19
 1252 0111 00       		.byte	0
 1253 0112 00       		.byte	0
 1254 0113 15       		.uleb128 0x15
 1255 0114 2E       		.uleb128 0x2e
 1256 0115 00       		.byte	0
 1257 0116 03       		.uleb128 0x3
 1258 0117 0E       		.uleb128 0xe
 1259 0118 3A       		.uleb128 0x3a
 1260 0119 0B       		.uleb128 0xb
 1261 011a 3B       		.uleb128 0x3b
 1262 011b 0B       		.uleb128 0xb
 1263 011c 27       		.uleb128 0x27
 1264 011d 19       		.uleb128 0x19
 1265 011e 11       		.uleb128 0x11
 1266 011f 01       		.uleb128 0x1
 1267 0120 12       		.uleb128 0x12
 1268 0121 06       		.uleb128 0x6
 1269 0122 40       		.uleb128 0x40
 1270 0123 18       		.uleb128 0x18
 1271 0124 9742     		.uleb128 0x2117
 1272 0126 19       		.uleb128 0x19
 1273 0127 00       		.byte	0
 1274 0128 00       		.byte	0
 1275 0129 16       		.uleb128 0x16
 1276 012a 2E       		.uleb128 0x2e
 1277 012b 00       		.byte	0
 1278 012c 3F       		.uleb128 0x3f
 1279 012d 19       		.uleb128 0x19
 1280 012e 03       		.uleb128 0x3
 1281 012f 0E       		.uleb128 0xe
 1282 0130 3A       		.uleb128 0x3a
 1283 0131 0B       		.uleb128 0xb
 1284 0132 3B       		.uleb128 0x3b
 1285 0133 05       		.uleb128 0x5
 1286 0134 27       		.uleb128 0x27
 1287 0135 19       		.uleb128 0x19
 1288 0136 49       		.uleb128 0x49
 1289 0137 13       		.uleb128 0x13
 1290 0138 11       		.uleb128 0x11
 1291 0139 01       		.uleb128 0x1
 1292 013a 12       		.uleb128 0x12
 1293 013b 06       		.uleb128 0x6
 1294 013c 40       		.uleb128 0x40
 1295 013d 18       		.uleb128 0x18
 1296 013e 9642     		.uleb128 0x2116
 1297 0140 19       		.uleb128 0x19
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 39


 1298 0141 00       		.byte	0
 1299 0142 00       		.byte	0
 1300 0143 17       		.uleb128 0x17
 1301 0144 2E       		.uleb128 0x2e
 1302 0145 00       		.byte	0
 1303 0146 3F       		.uleb128 0x3f
 1304 0147 19       		.uleb128 0x19
 1305 0148 03       		.uleb128 0x3
 1306 0149 0E       		.uleb128 0xe
 1307 014a 3A       		.uleb128 0x3a
 1308 014b 0B       		.uleb128 0xb
 1309 014c 3B       		.uleb128 0x3b
 1310 014d 05       		.uleb128 0x5
 1311 014e 27       		.uleb128 0x27
 1312 014f 19       		.uleb128 0x19
 1313 0150 11       		.uleb128 0x11
 1314 0151 01       		.uleb128 0x1
 1315 0152 12       		.uleb128 0x12
 1316 0153 06       		.uleb128 0x6
 1317 0154 40       		.uleb128 0x40
 1318 0155 18       		.uleb128 0x18
 1319 0156 9742     		.uleb128 0x2117
 1320 0158 19       		.uleb128 0x19
 1321 0159 00       		.byte	0
 1322 015a 00       		.byte	0
 1323 015b 18       		.uleb128 0x18
 1324 015c 2E       		.uleb128 0x2e
 1325 015d 01       		.byte	0x1
 1326 015e 3F       		.uleb128 0x3f
 1327 015f 19       		.uleb128 0x19
 1328 0160 03       		.uleb128 0x3
 1329 0161 0E       		.uleb128 0xe
 1330 0162 3A       		.uleb128 0x3a
 1331 0163 0B       		.uleb128 0xb
 1332 0164 3B       		.uleb128 0x3b
 1333 0165 05       		.uleb128 0x5
 1334 0166 27       		.uleb128 0x27
 1335 0167 19       		.uleb128 0x19
 1336 0168 11       		.uleb128 0x11
 1337 0169 01       		.uleb128 0x1
 1338 016a 12       		.uleb128 0x12
 1339 016b 06       		.uleb128 0x6
 1340 016c 40       		.uleb128 0x40
 1341 016d 18       		.uleb128 0x18
 1342 016e 9742     		.uleb128 0x2117
 1343 0170 19       		.uleb128 0x19
 1344 0171 01       		.uleb128 0x1
 1345 0172 13       		.uleb128 0x13
 1346 0173 00       		.byte	0
 1347 0174 00       		.byte	0
 1348 0175 19       		.uleb128 0x19
 1349 0176 1D       		.uleb128 0x1d
 1350 0177 01       		.byte	0x1
 1351 0178 31       		.uleb128 0x31
 1352 0179 13       		.uleb128 0x13
 1353 017a 11       		.uleb128 0x11
 1354 017b 01       		.uleb128 0x1
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 40


 1355 017c 12       		.uleb128 0x12
 1356 017d 06       		.uleb128 0x6
 1357 017e 58       		.uleb128 0x58
 1358 017f 0B       		.uleb128 0xb
 1359 0180 59       		.uleb128 0x59
 1360 0181 05       		.uleb128 0x5
 1361 0182 00       		.byte	0
 1362 0183 00       		.byte	0
 1363 0184 1A       		.uleb128 0x1a
 1364 0185 05       		.uleb128 0x5
 1365 0186 00       		.byte	0
 1366 0187 31       		.uleb128 0x31
 1367 0188 13       		.uleb128 0x13
 1368 0189 02       		.uleb128 0x2
 1369 018a 18       		.uleb128 0x18
 1370 018b 00       		.byte	0
 1371 018c 00       		.byte	0
 1372 018d 1B       		.uleb128 0x1b
 1373 018e 2E       		.uleb128 0x2e
 1374 018f 01       		.byte	0x1
 1375 0190 3F       		.uleb128 0x3f
 1376 0191 19       		.uleb128 0x19
 1377 0192 03       		.uleb128 0x3
 1378 0193 0E       		.uleb128 0xe
 1379 0194 3A       		.uleb128 0x3a
 1380 0195 0B       		.uleb128 0xb
 1381 0196 3B       		.uleb128 0x3b
 1382 0197 05       		.uleb128 0x5
 1383 0198 27       		.uleb128 0x27
 1384 0199 19       		.uleb128 0x19
 1385 019a 11       		.uleb128 0x11
 1386 019b 01       		.uleb128 0x1
 1387 019c 12       		.uleb128 0x12
 1388 019d 06       		.uleb128 0x6
 1389 019e 40       		.uleb128 0x40
 1390 019f 18       		.uleb128 0x18
 1391 01a0 9642     		.uleb128 0x2116
 1392 01a2 19       		.uleb128 0x19
 1393 01a3 01       		.uleb128 0x1
 1394 01a4 13       		.uleb128 0x13
 1395 01a5 00       		.byte	0
 1396 01a6 00       		.byte	0
 1397 01a7 1C       		.uleb128 0x1c
 1398 01a8 1D       		.uleb128 0x1d
 1399 01a9 01       		.byte	0x1
 1400 01aa 31       		.uleb128 0x31
 1401 01ab 13       		.uleb128 0x13
 1402 01ac 11       		.uleb128 0x11
 1403 01ad 01       		.uleb128 0x1
 1404 01ae 12       		.uleb128 0x12
 1405 01af 06       		.uleb128 0x6
 1406 01b0 58       		.uleb128 0x58
 1407 01b1 0B       		.uleb128 0xb
 1408 01b2 59       		.uleb128 0x59
 1409 01b3 05       		.uleb128 0x5
 1410 01b4 01       		.uleb128 0x1
 1411 01b5 13       		.uleb128 0x13
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 41


 1412 01b6 00       		.byte	0
 1413 01b7 00       		.byte	0
 1414 01b8 1D       		.uleb128 0x1d
 1415 01b9 34       		.uleb128 0x34
 1416 01ba 00       		.byte	0
 1417 01bb 03       		.uleb128 0x3
 1418 01bc 0E       		.uleb128 0xe
 1419 01bd 3A       		.uleb128 0x3a
 1420 01be 0B       		.uleb128 0xb
 1421 01bf 3B       		.uleb128 0x3b
 1422 01c0 05       		.uleb128 0x5
 1423 01c1 49       		.uleb128 0x49
 1424 01c2 13       		.uleb128 0x13
 1425 01c3 3F       		.uleb128 0x3f
 1426 01c4 19       		.uleb128 0x19
 1427 01c5 3C       		.uleb128 0x3c
 1428 01c6 19       		.uleb128 0x19
 1429 01c7 00       		.byte	0
 1430 01c8 00       		.byte	0
 1431 01c9 00       		.byte	0
 1432              		.section	.debug_aranges,"",%progbits
 1433 0000 6C000000 		.4byte	0x6c
 1434 0004 0200     		.2byte	0x2
 1435 0006 00000000 		.4byte	.Ldebug_info0
 1436 000a 04       		.byte	0x4
 1437 000b 00       		.byte	0
 1438 000c 0000     		.2byte	0
 1439 000e 0000     		.2byte	0
 1440 0010 00000000 		.4byte	.LFB68
 1441 0014 5C000000 		.4byte	.LFE68-.LFB68
 1442 0018 00000000 		.4byte	.LFB69
 1443 001c 2E000000 		.4byte	.LFE69-.LFB69
 1444 0020 00000000 		.4byte	.LFB70
 1445 0024 24000000 		.4byte	.LFE70-.LFB70
 1446 0028 00000000 		.4byte	.LFB71
 1447 002c 1A000000 		.4byte	.LFE71-.LFB71
 1448 0030 00000000 		.4byte	.LFB72
 1449 0034 40000000 		.4byte	.LFE72-.LFB72
 1450 0038 00000000 		.4byte	.LFB73
 1451 003c 0C000000 		.4byte	.LFE73-.LFB73
 1452 0040 00000000 		.4byte	.LFB74
 1453 0044 30000000 		.4byte	.LFE74-.LFB74
 1454 0048 00000000 		.4byte	.LFB75
 1455 004c 30000000 		.4byte	.LFE75-.LFB75
 1456 0050 00000000 		.4byte	.LFB76
 1457 0054 44000000 		.4byte	.LFE76-.LFB76
 1458 0058 00000000 		.4byte	.LFB77
 1459 005c 40000000 		.4byte	.LFE77-.LFB77
 1460 0060 00000000 		.4byte	.LFB78
 1461 0064 34000000 		.4byte	.LFE78-.LFB78
 1462 0068 00000000 		.4byte	0
 1463 006c 00000000 		.4byte	0
 1464              		.section	.debug_ranges,"",%progbits
 1465              	.Ldebug_ranges0:
 1466 0000 00000000 		.4byte	.LFB68
 1467 0004 5C000000 		.4byte	.LFE68
 1468 0008 00000000 		.4byte	.LFB69
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 42


 1469 000c 2E000000 		.4byte	.LFE69
 1470 0010 00000000 		.4byte	.LFB70
 1471 0014 24000000 		.4byte	.LFE70
 1472 0018 00000000 		.4byte	.LFB71
 1473 001c 1A000000 		.4byte	.LFE71
 1474 0020 00000000 		.4byte	.LFB72
 1475 0024 40000000 		.4byte	.LFE72
 1476 0028 00000000 		.4byte	.LFB73
 1477 002c 0C000000 		.4byte	.LFE73
 1478 0030 00000000 		.4byte	.LFB74
 1479 0034 30000000 		.4byte	.LFE74
 1480 0038 00000000 		.4byte	.LFB75
 1481 003c 30000000 		.4byte	.LFE75
 1482 0040 00000000 		.4byte	.LFB76
 1483 0044 44000000 		.4byte	.LFE76
 1484 0048 00000000 		.4byte	.LFB77
 1485 004c 40000000 		.4byte	.LFE77
 1486 0050 00000000 		.4byte	.LFB78
 1487 0054 34000000 		.4byte	.LFE78
 1488 0058 00000000 		.4byte	0
 1489 005c 00000000 		.4byte	0
 1490              		.section	.debug_line,"",%progbits
 1491              	.Ldebug_line0:
 1492 0000 C4020000 		.section	.debug_str,"MS",%progbits,1
 1492      0200A001 
 1492      00000201 
 1492      FB0E0D00 
 1492      01010101 
 1493              	.LASF35:
 1494 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1494      69746963 
 1494      616C4E65 
 1494      7374696E 
 1494      6700
 1495              	.LASF29:
 1496 0012 76506F72 		.ascii	"vPortEnterCritical\000"
 1496      74456E74 
 1496      65724372 
 1496      69746963 
 1496      616C00
 1497              	.LASF25:
 1498 0025 7078436F 		.ascii	"pxCode\000"
 1498      646500
 1499              	.LASF28:
 1500 002c 76506F72 		.ascii	"vPortEndScheduler\000"
 1500      74456E64 
 1500      53636865 
 1500      64756C65 
 1500      7200
 1501              	.LASF21:
 1502 003e 5469636B 		.ascii	"TickType_t\000"
 1502      54797065 
 1502      5F7400
 1503              	.LASF6:
 1504 0049 5F5F696E 		.ascii	"__int32_t\000"
 1504      7433325F 
 1504      7400
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 43


 1505              	.LASF5:
 1506 0053 6C6F6E67 		.ascii	"long int\000"
 1506      20696E74 
 1506      00
 1507              	.LASF36:
 1508 005c 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1508      4320342E 
 1508      392E3320 
 1508      32303135 
 1508      30333033 
 1509 008f 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1509      20726576 
 1509      6973696F 
 1509      6E203232 
 1509      31323230 
 1510 00c2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1510      66756E63 
 1510      74696F6E 
 1510      2D736563 
 1510      74696F6E 
 1511              	.LASF31:
 1512 00ea 78506F72 		.ascii	"xPortPendSVHandler\000"
 1512      7450656E 
 1512      64535648 
 1512      616E646C 
 1512      657200
 1513              	.LASF17:
 1514 00fd 5461736B 		.ascii	"TaskFunction_t\000"
 1514      46756E63 
 1514      74696F6E 
 1514      5F7400
 1515              	.LASF11:
 1516 010c 696E7433 		.ascii	"int32_t\000"
 1516      325F7400 
 1517              	.LASF13:
 1518 0114 666C6F61 		.ascii	"float\000"
 1518      7400
 1519              	.LASF34:
 1520 011a 756C4475 		.ascii	"ulDummy\000"
 1520      6D6D7900 
 1521              	.LASF2:
 1522 0122 756E7369 		.ascii	"unsigned char\000"
 1522      676E6564 
 1522      20636861 
 1522      7200
 1523              	.LASF7:
 1524 0130 5F5F7569 		.ascii	"__uint32_t\000"
 1524      6E743332 
 1524      5F7400
 1525              	.LASF8:
 1526 013b 6C6F6E67 		.ascii	"long unsigned int\000"
 1526      20756E73 
 1526      69676E65 
 1526      6420696E 
 1526      7400
 1527              	.LASF4:
 1528 014d 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 44


 1528      7420756E 
 1528      7369676E 
 1528      65642069 
 1528      6E7400
 1529              	.LASF38:
 1530 0160 433A5C55 		.ascii	"C:\\Users\\tadge\\Documents\\GitHub\\FYP_PSOCCreato"
 1530      73657273 
 1530      5C746164 
 1530      67655C44 
 1530      6F63756D 
 1531 018e 725F466F 		.ascii	"r_Follower\\FYP_New_Test\\CORTEX_CY8C5588_PSoC_Crea"
 1531      6C6C6F77 
 1531      65725C46 
 1531      59505F4E 
 1531      65775F54 
 1532 01bf 746F725F 		.ascii	"tor_GCC\\FreeRTOS_Demo.cydsn\000"
 1532      4743435C 
 1532      46726565 
 1532      52544F53 
 1532      5F44656D 
 1533              	.LASF45:
 1534 01db 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1534      52784275 
 1534      66666572 
 1534      00
 1535              	.LASF37:
 1536 01e8 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS_Source\\portable\\GCC\\ARM_CM3\\po"
 1536      2E5C4672 
 1536      65655254 
 1536      4F535F53 
 1536      6F757263 
 1537 0215 72742E63 		.ascii	"rt.c\000"
 1537      00
 1538              	.LASF39:
 1539 021a 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1539      77424153 
 1539      45505249 
 1539      00
 1540              	.LASF26:
 1541 0227 70765061 		.ascii	"pvParameters\000"
 1541      72616D65 
 1541      74657273 
 1541      00
 1542              	.LASF23:
 1543 0234 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1543      74536574 
 1543      42415345 
 1543      50524900 
 1544              	.LASF32:
 1545 0244 78506F72 		.ascii	"xPortSysTickHandler\000"
 1545      74537973 
 1545      5469636B 
 1545      48616E64 
 1545      6C657200 
 1546              	.LASF0:
 1547 0258 756E7369 		.ascii	"unsigned int\000"
 1547      676E6564 
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 45


 1547      20696E74 
 1547      00
 1548              	.LASF24:
 1549 0265 7078546F 		.ascii	"pxTopOfStack\000"
 1549      704F6653 
 1549      7461636B 
 1549      00
 1550              	.LASF10:
 1551 0272 6C6F6E67 		.ascii	"long long unsigned int\000"
 1551      206C6F6E 
 1551      6720756E 
 1551      7369676E 
 1551      65642069 
 1552              	.LASF22:
 1553 0289 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1553      74526169 
 1553      73654241 
 1553      53455052 
 1553      4900
 1554              	.LASF42:
 1555 029b 70727654 		.ascii	"prvTaskExitError\000"
 1555      61736B45 
 1555      78697445 
 1555      72726F72 
 1555      00
 1556              	.LASF33:
 1557 02ac 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1557      74536574 
 1557      75705469 
 1557      6D657249 
 1557      6E746572 
 1558              	.LASF16:
 1559 02c5 73697A65 		.ascii	"sizetype\000"
 1559      74797065 
 1559      00
 1560              	.LASF9:
 1561 02ce 6C6F6E67 		.ascii	"long long int\000"
 1561      206C6F6E 
 1561      6720696E 
 1561      7400
 1562              	.LASF15:
 1563 02dc 63686172 		.ascii	"char\000"
 1563      00
 1564              	.LASF18:
 1565 02e1 53746163 		.ascii	"StackType_t\000"
 1565      6B547970 
 1565      655F7400 
 1566              	.LASF27:
 1567 02ed 76506F72 		.ascii	"vPortSVCHandler\000"
 1567      74535643 
 1567      48616E64 
 1567      6C657200 
 1568              	.LASF3:
 1569 02fd 73686F72 		.ascii	"short int\000"
 1569      7420696E 
 1569      7400
 1570              	.LASF30:
ARM GAS  C:\Users\tadge\AppData\Local\Temp\ccMn7Ott.s 			page 46


 1571 0307 76506F72 		.ascii	"vPortExitCritical\000"
 1571      74457869 
 1571      74437269 
 1571      74696361 
 1571      6C00
 1572              	.LASF12:
 1573 0319 75696E74 		.ascii	"uint32_t\000"
 1573      33325F74 
 1573      00
 1574              	.LASF40:
 1575 0322 756C4E65 		.ascii	"ulNewMaskValue\000"
 1575      774D6173 
 1575      6B56616C 
 1575      756500
 1576              	.LASF19:
 1577 0331 42617365 		.ascii	"BaseType_t\000"
 1577      54797065 
 1577      5F7400
 1578              	.LASF43:
 1579 033c 70727650 		.ascii	"prvPortStartFirstTask\000"
 1579      6F727453 
 1579      74617274 
 1579      46697273 
 1579      74546173 
 1580              	.LASF1:
 1581 0352 7369676E 		.ascii	"signed char\000"
 1581      65642063 
 1581      68617200 
 1582              	.LASF14:
 1583 035e 646F7562 		.ascii	"double\000"
 1583      6C6500
 1584              	.LASF44:
 1585 0365 78506F72 		.ascii	"xPortStartScheduler\000"
 1585      74537461 
 1585      72745363 
 1585      68656475 
 1585      6C657200 
 1586              	.LASF20:
 1587 0379 55426173 		.ascii	"UBaseType_t\000"
 1587      65547970 
 1587      655F7400 
 1588              	.LASF41:
 1589 0385 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1589      7274496E 
 1589      69746961 
 1589      6C697365 
 1589      53746163 
 1590              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
