ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"dynamic.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	xContinuousIncrementHandle:
  21 0000 00000000 		.space	4
  22              		.align	2
  23              	xLimitedIncrementHandle:
  24 0004 00000000 		.space	4
  25              		.align	2
  26              	ulCounter:
  27 0008 00000000 		.space	4
  28              		.align	1
  29              	usCheckVariable:
  30 000c 0000     		.space	2
  31 000e 0000     		.align	2
  32              	xSuspendedQueueSendError:
  33 0010 00000000 		.space	4
  34              		.align	2
  35              	xSuspendedQueueReceiveError:
  36 0014 00000000 		.space	4
  37              		.comm	xSuspendedTestQueue,4,4
  38              		.align	2
  39              	ulExpectedValue:
  40 0018 00000000 		.space	4
  41              		.section	.rodata
  42              		.align	2
  43              	.LC0:
  44 0000 53757370 		.ascii	"Suspended_Test_Queue\000"
  44      656E6465 
  44      645F5465 
  44      73745F51 
  44      75657565 
  45 0015 000000   		.align	2
  46              	.LC1:
  47 0018 434E545F 		.ascii	"CNT_INC\000"
  47      494E4300 
  48              		.align	2
  49              	.LC2:
  50 0020 4C494D5F 		.ascii	"LIM_INC\000"
  50      494E4300 
  51              		.align	2
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 2


  52              	.LC3:
  53 0028 435F4354 		.ascii	"C_CTRL\000"
  53      524C00
  54 002f 00       		.align	2
  55              	.LC4:
  56 0030 53555350 		.ascii	"SUSP_TX\000"
  56      5F545800 
  57              		.align	2
  58              	.LC5:
  59 0038 53555350 		.ascii	"SUSP_RX\000"
  59      5F525800 
  60              		.section	.text.vStartDynamicPriorityTasks,"ax",%progbits
  61              		.align	2
  62              		.global	vStartDynamicPriorityTasks
  63              		.thumb
  64              		.thumb_func
  65              		.type	vStartDynamicPriorityTasks, %function
  66              	vStartDynamicPriorityTasks:
  67              	.LFB68:
  68              		.file 1 "..\\..\\Common\\Minimal\\dynamic.c"
   1:..\..\Common\Minimal/dynamic.c **** /*
   2:..\..\Common\Minimal/dynamic.c ****  * FreeRTOS Kernel V10.0.1
   3:..\..\Common\Minimal/dynamic.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\Common\Minimal/dynamic.c ****  *
   5:..\..\Common\Minimal/dynamic.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\Common\Minimal/dynamic.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\Common\Minimal/dynamic.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\Common\Minimal/dynamic.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\Common\Minimal/dynamic.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\Common\Minimal/dynamic.c ****  * subject to the following conditions:
  11:..\..\Common\Minimal/dynamic.c ****  *
  12:..\..\Common\Minimal/dynamic.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\Common\Minimal/dynamic.c ****  * copies or substantial portions of the Software.
  14:..\..\Common\Minimal/dynamic.c ****  *
  15:..\..\Common\Minimal/dynamic.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\Common\Minimal/dynamic.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\Common\Minimal/dynamic.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\Common\Minimal/dynamic.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\Common\Minimal/dynamic.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\Common\Minimal/dynamic.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\Common\Minimal/dynamic.c ****  *
  22:..\..\Common\Minimal/dynamic.c ****  * http://www.FreeRTOS.org
  23:..\..\Common\Minimal/dynamic.c ****  * http://aws.amazon.com/freertos
  24:..\..\Common\Minimal/dynamic.c ****  *
  25:..\..\Common\Minimal/dynamic.c ****  * 1 tab == 4 spaces!
  26:..\..\Common\Minimal/dynamic.c ****  */
  27:..\..\Common\Minimal/dynamic.c **** 
  28:..\..\Common\Minimal/dynamic.c **** /*
  29:..\..\Common\Minimal/dynamic.c ****  * The first test creates three tasks - two counter tasks (one continuous count
  30:..\..\Common\Minimal/dynamic.c ****  * and one limited count) and one controller.  A "count" variable is shared
  31:..\..\Common\Minimal/dynamic.c ****  * between all three tasks.  The two counter tasks should never be in a "ready"
  32:..\..\Common\Minimal/dynamic.c ****  * state at the same time.  The controller task runs at the same priority as
  33:..\..\Common\Minimal/dynamic.c ****  * the continuous count task, and at a lower priority than the limited count
  34:..\..\Common\Minimal/dynamic.c ****  * task.
  35:..\..\Common\Minimal/dynamic.c ****  *
  36:..\..\Common\Minimal/dynamic.c ****  * One counter task loops indefinitely, incrementing the shared count variable
  37:..\..\Common\Minimal/dynamic.c ****  * on each iteration.  To ensure it has exclusive access to the variable it
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 3


  38:..\..\Common\Minimal/dynamic.c ****  * raises its priority above that of the controller task before each
  39:..\..\Common\Minimal/dynamic.c ****  * increment, lowering it again to its original priority before starting the
  40:..\..\Common\Minimal/dynamic.c ****  * next iteration.
  41:..\..\Common\Minimal/dynamic.c ****  *
  42:..\..\Common\Minimal/dynamic.c ****  * The other counter task increments the shared count variable on each
  43:..\..\Common\Minimal/dynamic.c ****  * iteration of its loop until the count has reached a limit of 0xff - at
  44:..\..\Common\Minimal/dynamic.c ****  * which point it suspends itself.  It will not start a new loop until the
  45:..\..\Common\Minimal/dynamic.c ****  * controller task has made it "ready" again by calling vTaskResume().
  46:..\..\Common\Minimal/dynamic.c ****  * This second counter task operates at a higher priority than controller
  47:..\..\Common\Minimal/dynamic.c ****  * task so does not need to worry about mutual exclusion of the counter
  48:..\..\Common\Minimal/dynamic.c ****  * variable.
  49:..\..\Common\Minimal/dynamic.c ****  *
  50:..\..\Common\Minimal/dynamic.c ****  * The controller task is in two sections.  The first section controls and
  51:..\..\Common\Minimal/dynamic.c ****  * monitors the continuous count task.  When this section is operational the
  52:..\..\Common\Minimal/dynamic.c ****  * limited count task is suspended.  Likewise, the second section controls
  53:..\..\Common\Minimal/dynamic.c ****  * and monitors the limited count task.  When this section is operational the
  54:..\..\Common\Minimal/dynamic.c ****  * continuous count task is suspended.
  55:..\..\Common\Minimal/dynamic.c ****  *
  56:..\..\Common\Minimal/dynamic.c ****  * In the first section the controller task first takes a copy of the shared
  57:..\..\Common\Minimal/dynamic.c ****  * count variable.  To ensure mutual exclusion on the count variable it
  58:..\..\Common\Minimal/dynamic.c ****  * suspends the continuous count task, resuming it again when the copy has been
  59:..\..\Common\Minimal/dynamic.c ****  * taken.  The controller task then sleeps for a fixed period - during which
  60:..\..\Common\Minimal/dynamic.c ****  * the continuous count task will execute and increment the shared variable.
  61:..\..\Common\Minimal/dynamic.c ****  * When the controller task wakes it checks that the continuous count task
  62:..\..\Common\Minimal/dynamic.c ****  * has executed by comparing the copy of the shared variable with its current
  63:..\..\Common\Minimal/dynamic.c ****  * value.  This time, to ensure mutual exclusion, the scheduler itself is
  64:..\..\Common\Minimal/dynamic.c ****  * suspended with a call to vTaskSuspendAll ().  This is for demonstration
  65:..\..\Common\Minimal/dynamic.c ****  * purposes only and is not a recommended technique due to its inefficiency.
  66:..\..\Common\Minimal/dynamic.c ****  *
  67:..\..\Common\Minimal/dynamic.c ****  * After a fixed number of iterations the controller task suspends the
  68:..\..\Common\Minimal/dynamic.c ****  * continuous count task, and moves on to its second section.
  69:..\..\Common\Minimal/dynamic.c ****  *
  70:..\..\Common\Minimal/dynamic.c ****  * At the start of the second section the shared variable is cleared to zero.
  71:..\..\Common\Minimal/dynamic.c ****  * The limited count task is then woken from its suspension by a call to
  72:..\..\Common\Minimal/dynamic.c ****  * vTaskResume ().  As this counter task operates at a higher priority than
  73:..\..\Common\Minimal/dynamic.c ****  * the controller task the controller task should not run again until the
  74:..\..\Common\Minimal/dynamic.c ****  * shared variable has been counted up to the limited value causing the counter
  75:..\..\Common\Minimal/dynamic.c ****  * task to suspend itself.  The next line after vTaskResume () is therefore
  76:..\..\Common\Minimal/dynamic.c ****  * a check on the shared variable to ensure everything is as expected.
  77:..\..\Common\Minimal/dynamic.c ****  *
  78:..\..\Common\Minimal/dynamic.c ****  *
  79:..\..\Common\Minimal/dynamic.c ****  * The second test consists of a couple of very simple tasks that post onto a
  80:..\..\Common\Minimal/dynamic.c ****  * queue while the scheduler is suspended.  This test was added to test parts
  81:..\..\Common\Minimal/dynamic.c ****  * of the scheduler not exercised by the first test.
  82:..\..\Common\Minimal/dynamic.c ****  *
  83:..\..\Common\Minimal/dynamic.c ****  */
  84:..\..\Common\Minimal/dynamic.c **** 
  85:..\..\Common\Minimal/dynamic.c **** #include <stdlib.h>
  86:..\..\Common\Minimal/dynamic.c **** 
  87:..\..\Common\Minimal/dynamic.c **** /* Scheduler include files. */
  88:..\..\Common\Minimal/dynamic.c **** #include "FreeRTOS.h"
  89:..\..\Common\Minimal/dynamic.c **** #include "task.h"
  90:..\..\Common\Minimal/dynamic.c **** #include "semphr.h"
  91:..\..\Common\Minimal/dynamic.c **** 
  92:..\..\Common\Minimal/dynamic.c **** /* Demo app include files. */
  93:..\..\Common\Minimal/dynamic.c **** #include "dynamic.h"
  94:..\..\Common\Minimal/dynamic.c **** 
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 4


  95:..\..\Common\Minimal/dynamic.c **** /* Function that implements the "limited count" task as described above. */
  96:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vLimitedIncrementTask, pvParameters );
  97:..\..\Common\Minimal/dynamic.c **** 
  98:..\..\Common\Minimal/dynamic.c **** /* Function that implements the "continuous count" task as described above. */
  99:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vContinuousIncrementTask, pvParameters );
 100:..\..\Common\Minimal/dynamic.c **** 
 101:..\..\Common\Minimal/dynamic.c **** /* Function that implements the controller task as described above. */
 102:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vCounterControlTask, pvParameters );
 103:..\..\Common\Minimal/dynamic.c **** 
 104:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueReceiveWhenSuspendedTask, pvParameters );
 105:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueSendWhenSuspendedTask, pvParameters );
 106:..\..\Common\Minimal/dynamic.c **** 
 107:..\..\Common\Minimal/dynamic.c **** /* Demo task specific constants. */
 108:..\..\Common\Minimal/dynamic.c **** #define priSTACK_SIZE				( configMINIMAL_STACK_SIZE )
 109:..\..\Common\Minimal/dynamic.c **** #define priSLEEP_TIME				pdMS_TO_TICKS( 128 )
 110:..\..\Common\Minimal/dynamic.c **** #define priLOOPS					( 5 )
 111:..\..\Common\Minimal/dynamic.c **** #define priMAX_COUNT				( ( uint32_t ) 0xff )
 112:..\..\Common\Minimal/dynamic.c **** #define priNO_BLOCK					( ( TickType_t ) 0 )
 113:..\..\Common\Minimal/dynamic.c **** #define priSUSPENDED_QUEUE_LENGTH	( 1 )
 114:..\..\Common\Minimal/dynamic.c **** 
 115:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 116:..\..\Common\Minimal/dynamic.c **** 
 117:..\..\Common\Minimal/dynamic.c **** /* Handles to the two counter tasks.  These could be passed in as parameters
 118:..\..\Common\Minimal/dynamic.c **** to the controller task to prevent them having to be file scope. */
 119:..\..\Common\Minimal/dynamic.c **** static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;
 120:..\..\Common\Minimal/dynamic.c **** 
 121:..\..\Common\Minimal/dynamic.c **** /* The shared counter variable.  This is passed in as a parameter to the two
 122:..\..\Common\Minimal/dynamic.c **** counter variables for demonstration purposes. */
 123:..\..\Common\Minimal/dynamic.c **** static uint32_t ulCounter;
 124:..\..\Common\Minimal/dynamic.c **** 
 125:..\..\Common\Minimal/dynamic.c **** /* Variables used to check that the tasks are still operating without error.
 126:..\..\Common\Minimal/dynamic.c **** Each complete iteration of the controller task increments this variable
 127:..\..\Common\Minimal/dynamic.c **** provided no errors have been found.  The variable maintaining the same value
 128:..\..\Common\Minimal/dynamic.c **** is therefore indication of an error. */
 129:..\..\Common\Minimal/dynamic.c **** static volatile uint16_t usCheckVariable = ( uint16_t ) 0;
 130:..\..\Common\Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueSendError = pdFALSE;
 131:..\..\Common\Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueReceiveError = pdFALSE;
 132:..\..\Common\Minimal/dynamic.c **** 
 133:..\..\Common\Minimal/dynamic.c **** /* Queue used by the second test. */
 134:..\..\Common\Minimal/dynamic.c **** QueueHandle_t xSuspendedTestQueue;
 135:..\..\Common\Minimal/dynamic.c **** 
 136:..\..\Common\Minimal/dynamic.c **** /* The value the queue receive task expects to receive next.  This is file
 137:..\..\Common\Minimal/dynamic.c **** scope so xAreDynamicPriorityTasksStillRunning() can ensure it is still
 138:..\..\Common\Minimal/dynamic.c **** incrementing. */
 139:..\..\Common\Minimal/dynamic.c **** static uint32_t ulExpectedValue = ( uint32_t ) 0;
 140:..\..\Common\Minimal/dynamic.c **** 
 141:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 142:..\..\Common\Minimal/dynamic.c **** /*
 143:..\..\Common\Minimal/dynamic.c ****  * Start the three tasks as described at the top of the file.
 144:..\..\Common\Minimal/dynamic.c ****  * Note that the limited count task is given a higher priority.
 145:..\..\Common\Minimal/dynamic.c ****  */
 146:..\..\Common\Minimal/dynamic.c **** void vStartDynamicPriorityTasks( void )
 147:..\..\Common\Minimal/dynamic.c **** {
  69              		.loc 1 147 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 5


  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 82B0     		sub	sp, sp, #8
  78              		.cfi_def_cfa_offset 16
  79 0004 02AF     		add	r7, sp, #8
  80              		.cfi_def_cfa 7, 8
 148:..\..\Common\Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
  81              		.loc 1 148 0
  82 0006 0120     		movs	r0, #1
  83 0008 0421     		movs	r1, #4
  84 000a 0022     		movs	r2, #0
  85 000c FFF7FEFF 		bl	xQueueGenericCreate
  86 0010 0246     		mov	r2, r0
  87 0012 204B     		ldr	r3, .L3
  88 0014 1A60     		str	r2, [r3]
 149:..\..\Common\Minimal/dynamic.c **** 
 150:..\..\Common\Minimal/dynamic.c **** 	if( xSuspendedTestQueue != NULL )
  89              		.loc 1 150 0
  90 0016 1F4B     		ldr	r3, .L3
  91 0018 1B68     		ldr	r3, [r3]
  92 001a 002B     		cmp	r3, #0
  93 001c 37D0     		beq	.L1
 151:..\..\Common\Minimal/dynamic.c **** 	{
 152:..\..\Common\Minimal/dynamic.c **** 		/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 153:..\..\Common\Minimal/dynamic.c **** 		in use.  The queue registry is provided as a means for kernel aware
 154:..\..\Common\Minimal/dynamic.c **** 		debuggers to locate queues and has no purpose if a kernel aware debugger
 155:..\..\Common\Minimal/dynamic.c **** 		is not being used.  The call to vQueueAddToRegistry() will be removed
 156:..\..\Common\Minimal/dynamic.c **** 		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 157:..\..\Common\Minimal/dynamic.c **** 		defined to be less than 1. */
 158:..\..\Common\Minimal/dynamic.c **** 		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );
  94              		.loc 1 158 0
  95 001e 1D4B     		ldr	r3, .L3
  96 0020 1B68     		ldr	r3, [r3]
  97 0022 1846     		mov	r0, r3
  98 0024 1C49     		ldr	r1, .L3+4
  99 0026 FFF7FEFF 		bl	vQueueAddToRegistry
 159:..\..\Common\Minimal/dynamic.c **** 
 160:..\..\Common\Minimal/dynamic.c **** 		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_P
 100              		.loc 1 160 0
 101 002a 0023     		movs	r3, #0
 102 002c 0093     		str	r3, [sp]
 103 002e 1B4B     		ldr	r3, .L3+8
 104 0030 0193     		str	r3, [sp, #4]
 105 0032 1B48     		ldr	r0, .L3+12
 106 0034 1B49     		ldr	r1, .L3+16
 107 0036 6422     		movs	r2, #100
 108 0038 1B4B     		ldr	r3, .L3+20
 109 003a FFF7FEFF 		bl	xTaskCreate
 161:..\..\Common\Minimal/dynamic.c **** 		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIO
 110              		.loc 1 161 0
 111 003e 0123     		movs	r3, #1
 112 0040 0093     		str	r3, [sp]
 113 0042 1A4B     		ldr	r3, .L3+24
 114 0044 0193     		str	r3, [sp, #4]
 115 0046 1A48     		ldr	r0, .L3+28
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 6


 116 0048 1A49     		ldr	r1, .L3+32
 117 004a 6422     		movs	r2, #100
 118 004c 164B     		ldr	r3, .L3+20
 119 004e FFF7FEFF 		bl	xTaskCreate
 162:..\..\Common\Minimal/dynamic.c **** 		xTaskCreate( vCounterControlTask, "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 120              		.loc 1 162 0
 121 0052 0023     		movs	r3, #0
 122 0054 0093     		str	r3, [sp]
 123 0056 0023     		movs	r3, #0
 124 0058 0193     		str	r3, [sp, #4]
 125 005a 1748     		ldr	r0, .L3+36
 126 005c 1749     		ldr	r1, .L3+40
 127 005e 6422     		movs	r2, #100
 128 0060 0023     		movs	r3, #0
 129 0062 FFF7FEFF 		bl	xTaskCreate
 163:..\..\Common\Minimal/dynamic.c **** 		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL 
 130              		.loc 1 163 0
 131 0066 0023     		movs	r3, #0
 132 0068 0093     		str	r3, [sp]
 133 006a 0023     		movs	r3, #0
 134 006c 0193     		str	r3, [sp, #4]
 135 006e 1448     		ldr	r0, .L3+44
 136 0070 1449     		ldr	r1, .L3+48
 137 0072 6422     		movs	r2, #100
 138 0074 0023     		movs	r3, #0
 139 0076 FFF7FEFF 		bl	xTaskCreate
 164:..\..\Common\Minimal/dynamic.c **** 		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NU
 140              		.loc 1 164 0
 141 007a 0023     		movs	r3, #0
 142 007c 0093     		str	r3, [sp]
 143 007e 0023     		movs	r3, #0
 144 0080 0193     		str	r3, [sp, #4]
 145 0082 1148     		ldr	r0, .L3+52
 146 0084 1149     		ldr	r1, .L3+56
 147 0086 6422     		movs	r2, #100
 148 0088 0023     		movs	r3, #0
 149 008a FFF7FEFF 		bl	xTaskCreate
 150              	.L1:
 165:..\..\Common\Minimal/dynamic.c **** 	}
 166:..\..\Common\Minimal/dynamic.c **** }
 151              		.loc 1 166 0
 152 008e BD46     		mov	sp, r7
 153              		.cfi_def_cfa_register 13
 154              		@ sp needed
 155 0090 80BD     		pop	{r7, pc}
 156              	.L4:
 157 0092 00BF     		.align	2
 158              	.L3:
 159 0094 00000000 		.word	xSuspendedTestQueue
 160 0098 00000000 		.word	.LC0
 161 009c 00000000 		.word	xContinuousIncrementHandle
 162 00a0 00000000 		.word	vContinuousIncrementTask
 163 00a4 18000000 		.word	.LC1
 164 00a8 08000000 		.word	ulCounter
 165 00ac 04000000 		.word	xLimitedIncrementHandle
 166 00b0 00000000 		.word	vLimitedIncrementTask
 167 00b4 20000000 		.word	.LC2
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 7


 168 00b8 00000000 		.word	vCounterControlTask
 169 00bc 28000000 		.word	.LC3
 170 00c0 00000000 		.word	vQueueSendWhenSuspendedTask
 171 00c4 30000000 		.word	.LC4
 172 00c8 00000000 		.word	vQueueReceiveWhenSuspendedTask
 173 00cc 38000000 		.word	.LC5
 174              		.cfi_endproc
 175              	.LFE68:
 176              		.size	vStartDynamicPriorityTasks, .-vStartDynamicPriorityTasks
 177              		.section	.text.vLimitedIncrementTask,"ax",%progbits
 178              		.align	2
 179              		.thumb
 180              		.thumb_func
 181              		.type	vLimitedIncrementTask, %function
 182              	vLimitedIncrementTask:
 183              	.LFB69:
 167:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 168:..\..\Common\Minimal/dynamic.c **** 
 169:..\..\Common\Minimal/dynamic.c **** /*
 170:..\..\Common\Minimal/dynamic.c ****  * Just loops around incrementing the shared variable until the limit has been
 171:..\..\Common\Minimal/dynamic.c ****  * reached.  Once the limit has been reached it suspends itself.
 172:..\..\Common\Minimal/dynamic.c ****  */
 173:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
 174:..\..\Common\Minimal/dynamic.c **** {
 184              		.loc 1 174 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 16
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188 0000 80B5     		push	{r7, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 7, -8
 191              		.cfi_offset 14, -4
 192 0002 84B0     		sub	sp, sp, #16
 193              		.cfi_def_cfa_offset 24
 194 0004 00AF     		add	r7, sp, #0
 195              		.cfi_def_cfa_register 7
 196 0006 7860     		str	r0, [r7, #4]
 175:..\..\Common\Minimal/dynamic.c **** volatile uint32_t *pulCounter;
 176:..\..\Common\Minimal/dynamic.c **** 
 177:..\..\Common\Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 178:..\..\Common\Minimal/dynamic.c **** 	the task. */
 179:..\..\Common\Minimal/dynamic.c **** 	pulCounter = ( volatile uint32_t * ) pvParameters;
 197              		.loc 1 179 0
 198 0008 7B68     		ldr	r3, [r7, #4]
 199 000a FB60     		str	r3, [r7, #12]
 180:..\..\Common\Minimal/dynamic.c **** 
 181:..\..\Common\Minimal/dynamic.c **** 	/* This will run before the control task, so the first thing it does is
 182:..\..\Common\Minimal/dynamic.c **** 	suspend - the control task will resume it when ready. */
 183:..\..\Common\Minimal/dynamic.c **** 	vTaskSuspend( NULL );
 200              		.loc 1 183 0
 201 000c 0020     		movs	r0, #0
 202 000e FFF7FEFF 		bl	vTaskSuspend
 203              	.L7:
 184:..\..\Common\Minimal/dynamic.c **** 
 185:..\..\Common\Minimal/dynamic.c **** 	for( ;; )
 186:..\..\Common\Minimal/dynamic.c **** 	{
 187:..\..\Common\Minimal/dynamic.c **** 		/* Just count up to a value then suspend. */
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 8


 188:..\..\Common\Minimal/dynamic.c **** 		( *pulCounter )++;
 204              		.loc 1 188 0
 205 0012 FB68     		ldr	r3, [r7, #12]
 206 0014 1B68     		ldr	r3, [r3]
 207 0016 5A1C     		adds	r2, r3, #1
 208 0018 FB68     		ldr	r3, [r7, #12]
 209 001a 1A60     		str	r2, [r3]
 189:..\..\Common\Minimal/dynamic.c **** 
 190:..\..\Common\Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 210              		.loc 1 190 0
 211 001c FB68     		ldr	r3, [r7, #12]
 212 001e 1B68     		ldr	r3, [r3]
 213 0020 FE2B     		cmp	r3, #254
 214 0022 02D9     		bls	.L6
 191:..\..\Common\Minimal/dynamic.c **** 		{
 192:..\..\Common\Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 215              		.loc 1 192 0
 216 0024 0020     		movs	r0, #0
 217 0026 FFF7FEFF 		bl	vTaskSuspend
 218              	.L6:
 193:..\..\Common\Minimal/dynamic.c **** 		}
 194:..\..\Common\Minimal/dynamic.c **** 	}
 219              		.loc 1 194 0
 220 002a F2E7     		b	.L7
 221              		.cfi_endproc
 222              	.LFE69:
 223              		.size	vLimitedIncrementTask, .-vLimitedIncrementTask
 224              		.section	.text.vContinuousIncrementTask,"ax",%progbits
 225              		.align	2
 226              		.thumb
 227              		.thumb_func
 228              		.type	vContinuousIncrementTask, %function
 229              	vContinuousIncrementTask:
 230              	.LFB70:
 195:..\..\Common\Minimal/dynamic.c **** }
 196:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 197:..\..\Common\Minimal/dynamic.c **** 
 198:..\..\Common\Minimal/dynamic.c **** /*
 199:..\..\Common\Minimal/dynamic.c ****  * Just keep counting the shared variable up.  The control task will suspend
 200:..\..\Common\Minimal/dynamic.c ****  * this task when it wants.
 201:..\..\Common\Minimal/dynamic.c ****  */
 202:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
 203:..\..\Common\Minimal/dynamic.c **** {
 231              		.loc 1 203 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 16
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0000 80B5     		push	{r7, lr}
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 84B0     		sub	sp, sp, #16
 240              		.cfi_def_cfa_offset 24
 241 0004 00AF     		add	r7, sp, #0
 242              		.cfi_def_cfa_register 7
 243 0006 7860     		str	r0, [r7, #4]
 204:..\..\Common\Minimal/dynamic.c **** volatile uint32_t *pulCounter;
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 9


 205:..\..\Common\Minimal/dynamic.c **** UBaseType_t uxOurPriority;
 206:..\..\Common\Minimal/dynamic.c **** 
 207:..\..\Common\Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 208:..\..\Common\Minimal/dynamic.c **** 	the task. */
 209:..\..\Common\Minimal/dynamic.c **** 	pulCounter = ( volatile uint32_t * ) pvParameters;
 244              		.loc 1 209 0
 245 0008 7B68     		ldr	r3, [r7, #4]
 246 000a FB60     		str	r3, [r7, #12]
 210:..\..\Common\Minimal/dynamic.c **** 
 211:..\..\Common\Minimal/dynamic.c **** 	/* Query our priority so we can raise it when exclusive access to the
 212:..\..\Common\Minimal/dynamic.c **** 	shared variable is required. */
 213:..\..\Common\Minimal/dynamic.c **** 	uxOurPriority = uxTaskPriorityGet( NULL );
 247              		.loc 1 213 0
 248 000c 0020     		movs	r0, #0
 249 000e FFF7FEFF 		bl	uxTaskPriorityGet
 250 0012 B860     		str	r0, [r7, #8]
 251              	.L9:
 214:..\..\Common\Minimal/dynamic.c **** 
 215:..\..\Common\Minimal/dynamic.c **** 	for( ;; )
 216:..\..\Common\Minimal/dynamic.c **** 	{
 217:..\..\Common\Minimal/dynamic.c **** 		/* Raise the priority above the controller task to ensure a context
 218:..\..\Common\Minimal/dynamic.c **** 		switch does not occur while the variable is being accessed. */
 219:..\..\Common\Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 252              		.loc 1 219 0 discriminator 1
 253 0014 BB68     		ldr	r3, [r7, #8]
 254 0016 0133     		adds	r3, r3, #1
 255 0018 0020     		movs	r0, #0
 256 001a 1946     		mov	r1, r3
 257 001c FFF7FEFF 		bl	vTaskPrioritySet
 220:..\..\Common\Minimal/dynamic.c **** 		{
 221:..\..\Common\Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 222:..\..\Common\Minimal/dynamic.c **** 			( *pulCounter )++;
 258              		.loc 1 222 0 discriminator 1
 259 0020 FB68     		ldr	r3, [r7, #12]
 260 0022 1B68     		ldr	r3, [r3]
 261 0024 5A1C     		adds	r2, r3, #1
 262 0026 FB68     		ldr	r3, [r7, #12]
 263 0028 1A60     		str	r2, [r3]
 223:..\..\Common\Minimal/dynamic.c **** 		}
 224:..\..\Common\Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 264              		.loc 1 224 0 discriminator 1
 265 002a 0020     		movs	r0, #0
 266 002c B968     		ldr	r1, [r7, #8]
 267 002e FFF7FEFF 		bl	vTaskPrioritySet
 225:..\..\Common\Minimal/dynamic.c **** 
 226:..\..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 227:..\..\Common\Minimal/dynamic.c **** 			taskYIELD();
 228:..\..\Common\Minimal/dynamic.c **** 		#endif
 229:..\..\Common\Minimal/dynamic.c **** 
 230:..\..\Common\Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 231:..\..\Common\Minimal/dynamic.c **** 	}
 268              		.loc 1 231 0 discriminator 1
 269 0032 EFE7     		b	.L9
 270              		.cfi_endproc
 271              	.LFE70:
 272              		.size	vContinuousIncrementTask, .-vContinuousIncrementTask
 273              		.section	.text.vCounterControlTask,"ax",%progbits
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 10


 274              		.align	2
 275              		.thumb
 276              		.thumb_func
 277              		.type	vCounterControlTask, %function
 278              	vCounterControlTask:
 279              	.LFB71:
 232:..\..\Common\Minimal/dynamic.c **** }
 233:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 234:..\..\Common\Minimal/dynamic.c **** 
 235:..\..\Common\Minimal/dynamic.c **** /*
 236:..\..\Common\Minimal/dynamic.c ****  * Controller task as described above.
 237:..\..\Common\Minimal/dynamic.c ****  */
 238:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vCounterControlTask, pvParameters )
 239:..\..\Common\Minimal/dynamic.c **** {
 280              		.loc 1 239 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 16
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 80B5     		push	{r7, lr}
 285              		.cfi_def_cfa_offset 8
 286              		.cfi_offset 7, -8
 287              		.cfi_offset 14, -4
 288 0002 84B0     		sub	sp, sp, #16
 289              		.cfi_def_cfa_offset 24
 290 0004 00AF     		add	r7, sp, #0
 291              		.cfi_def_cfa_register 7
 292 0006 7860     		str	r0, [r7, #4]
 240:..\..\Common\Minimal/dynamic.c **** uint32_t ulLastCounter;
 241:..\..\Common\Minimal/dynamic.c **** short sLoops;
 242:..\..\Common\Minimal/dynamic.c **** short sError = pdFALSE;
 293              		.loc 1 242 0
 294 0008 0023     		movs	r3, #0
 295 000a BB81     		strh	r3, [r7, #12]	@ movhi
 296              	.L16:
 243:..\..\Common\Minimal/dynamic.c **** 
 244:..\..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 245:..\..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 246:..\..\Common\Minimal/dynamic.c **** 
 247:..\..\Common\Minimal/dynamic.c **** 	for( ;; )
 248:..\..\Common\Minimal/dynamic.c **** 	{
 249:..\..\Common\Minimal/dynamic.c **** 		/* Start with the counter at zero. */
 250:..\..\Common\Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 297              		.loc 1 250 0
 298 000c 284B     		ldr	r3, .L17
 299 000e 0022     		movs	r2, #0
 300 0010 1A60     		str	r2, [r3]
 251:..\..\Common\Minimal/dynamic.c **** 
 252:..\..\Common\Minimal/dynamic.c **** 		/* First section : */
 253:..\..\Common\Minimal/dynamic.c **** 
 254:..\..\Common\Minimal/dynamic.c **** 		/* Check the continuous count task is running. */
 255:..\..\Common\Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 301              		.loc 1 255 0
 302 0012 0023     		movs	r3, #0
 303 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 304 0016 1FE0     		b	.L11
 305              	.L13:
 256:..\..\Common\Minimal/dynamic.c **** 		{
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 11


 257:..\..\Common\Minimal/dynamic.c **** 			/* Suspend the continuous count task so we can take a mirror of the
 258:..\..\Common\Minimal/dynamic.c **** 			shared variable without risk of corruption.  This is not really
 259:..\..\Common\Minimal/dynamic.c **** 			needed as the other task raises its priority above this task's
 260:..\..\Common\Minimal/dynamic.c **** 			priority. */
 261:..\..\Common\Minimal/dynamic.c **** 			vTaskSuspend( xContinuousIncrementHandle );
 306              		.loc 1 261 0
 307 0018 264B     		ldr	r3, .L17+4
 308 001a 1B68     		ldr	r3, [r3]
 309 001c 1846     		mov	r0, r3
 310 001e FFF7FEFF 		bl	vTaskSuspend
 262:..\..\Common\Minimal/dynamic.c **** 			{
 263:..\..\Common\Minimal/dynamic.c **** 				#if( INCLUDE_eTaskGetState == 1 )
 264:..\..\Common\Minimal/dynamic.c **** 				{
 265:..\..\Common\Minimal/dynamic.c **** 					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
 266:..\..\Common\Minimal/dynamic.c **** 				}
 267:..\..\Common\Minimal/dynamic.c **** 				#endif /* INCLUDE_eTaskGetState */
 268:..\..\Common\Minimal/dynamic.c **** 
 269:..\..\Common\Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 311              		.loc 1 269 0
 312 0022 234B     		ldr	r3, .L17
 313 0024 1B68     		ldr	r3, [r3]
 314 0026 BB60     		str	r3, [r7, #8]
 270:..\..\Common\Minimal/dynamic.c **** 			}
 271:..\..\Common\Minimal/dynamic.c **** 			vTaskResume( xContinuousIncrementHandle );
 315              		.loc 1 271 0
 316 0028 224B     		ldr	r3, .L17+4
 317 002a 1B68     		ldr	r3, [r3]
 318 002c 1846     		mov	r0, r3
 319 002e FFF7FEFF 		bl	vTaskResume
 272:..\..\Common\Minimal/dynamic.c **** 
 273:..\..\Common\Minimal/dynamic.c **** 			#if( configUSE_PREEMPTION == 0 )
 274:..\..\Common\Minimal/dynamic.c **** 				taskYIELD();
 275:..\..\Common\Minimal/dynamic.c **** 			#endif
 276:..\..\Common\Minimal/dynamic.c **** 
 277:..\..\Common\Minimal/dynamic.c **** 			#if( INCLUDE_eTaskGetState == 1 )
 278:..\..\Common\Minimal/dynamic.c **** 			{
 279:..\..\Common\Minimal/dynamic.c **** 				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
 280:..\..\Common\Minimal/dynamic.c **** 			}
 281:..\..\Common\Minimal/dynamic.c **** 			#endif /* INCLUDE_eTaskGetState */
 282:..\..\Common\Minimal/dynamic.c **** 
 283:..\..\Common\Minimal/dynamic.c **** 			/* Now delay to ensure the other task has processor time. */
 284:..\..\Common\Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 320              		.loc 1 284 0
 321 0032 8020     		movs	r0, #128
 322 0034 FFF7FEFF 		bl	vTaskDelay
 285:..\..\Common\Minimal/dynamic.c **** 
 286:..\..\Common\Minimal/dynamic.c **** 			/* Check the shared variable again.  This time to ensure mutual
 287:..\..\Common\Minimal/dynamic.c **** 			exclusion the whole scheduler will be locked.  This is just for
 288:..\..\Common\Minimal/dynamic.c **** 			demo purposes! */
 289:..\..\Common\Minimal/dynamic.c **** 			vTaskSuspendAll();
 323              		.loc 1 289 0
 324 0038 FFF7FEFF 		bl	vTaskSuspendAll
 290:..\..\Common\Minimal/dynamic.c **** 			{
 291:..\..\Common\Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 325              		.loc 1 291 0
 326 003c 1C4B     		ldr	r3, .L17
 327 003e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 12


 328 0040 BA68     		ldr	r2, [r7, #8]
 329 0042 9A42     		cmp	r2, r3
 330 0044 01D1     		bne	.L12
 292:..\..\Common\Minimal/dynamic.c **** 				{
 293:..\..\Common\Minimal/dynamic.c **** 					/* The shared variable has not changed.  There is a problem
 294:..\..\Common\Minimal/dynamic.c **** 					with the continuous count task so flag an error. */
 295:..\..\Common\Minimal/dynamic.c **** 					sError = pdTRUE;
 331              		.loc 1 295 0
 332 0046 0123     		movs	r3, #1
 333 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 334              	.L12:
 296:..\..\Common\Minimal/dynamic.c **** 				}
 297:..\..\Common\Minimal/dynamic.c **** 			}
 298:..\..\Common\Minimal/dynamic.c **** 			xTaskResumeAll();
 335              		.loc 1 298 0 discriminator 2
 336 004a FFF7FEFF 		bl	xTaskResumeAll
 255:..\..\Common\Minimal/dynamic.c **** 		{
 337              		.loc 1 255 0 discriminator 2
 338 004e FB89     		ldrh	r3, [r7, #14]
 339 0050 9BB2     		uxth	r3, r3
 340 0052 0133     		adds	r3, r3, #1
 341 0054 9BB2     		uxth	r3, r3
 342 0056 FB81     		strh	r3, [r7, #14]	@ movhi
 343              	.L11:
 255:..\..\Common\Minimal/dynamic.c **** 		{
 344              		.loc 1 255 0 is_stmt 0 discriminator 1
 345 0058 B7F90E30 		ldrsh	r3, [r7, #14]
 346 005c 042B     		cmp	r3, #4
 347 005e DBDD     		ble	.L13
 299:..\..\Common\Minimal/dynamic.c **** 		}
 300:..\..\Common\Minimal/dynamic.c **** 
 301:..\..\Common\Minimal/dynamic.c **** 		/* Second section: */
 302:..\..\Common\Minimal/dynamic.c **** 
 303:..\..\Common\Minimal/dynamic.c **** 		/* Suspend the continuous counter task so it stops accessing the shared
 304:..\..\Common\Minimal/dynamic.c **** 		variable. */
 305:..\..\Common\Minimal/dynamic.c **** 		vTaskSuspend( xContinuousIncrementHandle );
 348              		.loc 1 305 0 is_stmt 1
 349 0060 144B     		ldr	r3, .L17+4
 350 0062 1B68     		ldr	r3, [r3]
 351 0064 1846     		mov	r0, r3
 352 0066 FFF7FEFF 		bl	vTaskSuspend
 306:..\..\Common\Minimal/dynamic.c **** 
 307:..\..\Common\Minimal/dynamic.c **** 		/* Reset the variable. */
 308:..\..\Common\Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 353              		.loc 1 308 0
 354 006a 114B     		ldr	r3, .L17
 355 006c 0022     		movs	r2, #0
 356 006e 1A60     		str	r2, [r3]
 309:..\..\Common\Minimal/dynamic.c **** 
 310:..\..\Common\Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 311:..\..\Common\Minimal/dynamic.c **** 		{
 312:..\..\Common\Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 313:..\..\Common\Minimal/dynamic.c **** 		}
 314:..\..\Common\Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 315:..\..\Common\Minimal/dynamic.c **** 
 316:..\..\Common\Minimal/dynamic.c **** 		/* Resume the limited count task which has a higher priority than us.
 317:..\..\Common\Minimal/dynamic.c **** 		We should therefore not return from this call until the limited count
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 13


 318:..\..\Common\Minimal/dynamic.c **** 		task has suspended itself with a known value in the counter variable. */
 319:..\..\Common\Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 357              		.loc 1 319 0
 358 0070 114B     		ldr	r3, .L17+8
 359 0072 1B68     		ldr	r3, [r3]
 360 0074 1846     		mov	r0, r3
 361 0076 FFF7FEFF 		bl	vTaskResume
 320:..\..\Common\Minimal/dynamic.c **** 
 321:..\..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 322:..\..\Common\Minimal/dynamic.c **** 			taskYIELD();
 323:..\..\Common\Minimal/dynamic.c **** 		#endif
 324:..\..\Common\Minimal/dynamic.c **** 
 325:..\..\Common\Minimal/dynamic.c **** 		/* This task should not run again until xLimitedIncrementHandle has
 326:..\..\Common\Minimal/dynamic.c **** 		suspended itself. */
 327:..\..\Common\Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 328:..\..\Common\Minimal/dynamic.c **** 		{
 329:..\..\Common\Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 330:..\..\Common\Minimal/dynamic.c **** 		}
 331:..\..\Common\Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 332:..\..\Common\Minimal/dynamic.c **** 
 333:..\..\Common\Minimal/dynamic.c **** 		/* Does the counter variable have the expected value? */
 334:..\..\Common\Minimal/dynamic.c **** 		if( ulCounter != priMAX_COUNT )
 362              		.loc 1 334 0
 363 007a 0D4B     		ldr	r3, .L17
 364 007c 1B68     		ldr	r3, [r3]
 365 007e FF2B     		cmp	r3, #255
 366 0080 01D0     		beq	.L14
 335:..\..\Common\Minimal/dynamic.c **** 		{
 336:..\..\Common\Minimal/dynamic.c **** 			sError = pdTRUE;
 367              		.loc 1 336 0
 368 0082 0123     		movs	r3, #1
 369 0084 BB81     		strh	r3, [r7, #12]	@ movhi
 370              	.L14:
 337:..\..\Common\Minimal/dynamic.c **** 		}
 338:..\..\Common\Minimal/dynamic.c **** 
 339:..\..\Common\Minimal/dynamic.c **** 		if( sError == pdFALSE )
 371              		.loc 1 339 0
 372 0086 B7F90C30 		ldrsh	r3, [r7, #12]
 373 008a 002B     		cmp	r3, #0
 374 008c 0AD1     		bne	.L15
 340:..\..\Common\Minimal/dynamic.c **** 		{
 341:..\..\Common\Minimal/dynamic.c **** 			/* If no errors have occurred then increment the check variable. */
 342:..\..\Common\Minimal/dynamic.c **** 			portENTER_CRITICAL();
 375              		.loc 1 342 0
 376 008e FFF7FEFF 		bl	vPortEnterCritical
 343:..\..\Common\Minimal/dynamic.c **** 				usCheckVariable++;
 377              		.loc 1 343 0
 378 0092 0A4B     		ldr	r3, .L17+12
 379 0094 1B88     		ldrh	r3, [r3]	@ movhi
 380 0096 9BB2     		uxth	r3, r3
 381 0098 0133     		adds	r3, r3, #1
 382 009a 9AB2     		uxth	r2, r3
 383 009c 074B     		ldr	r3, .L17+12
 384 009e 1A80     		strh	r2, [r3]	@ movhi
 344:..\..\Common\Minimal/dynamic.c **** 			portEXIT_CRITICAL();
 385              		.loc 1 344 0
 386 00a0 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 14


 387              	.L15:
 345:..\..\Common\Minimal/dynamic.c **** 		}
 346:..\..\Common\Minimal/dynamic.c **** 
 347:..\..\Common\Minimal/dynamic.c **** 		/* Resume the continuous count task and do it all again. */
 348:..\..\Common\Minimal/dynamic.c **** 		vTaskResume( xContinuousIncrementHandle );
 388              		.loc 1 348 0
 389 00a4 034B     		ldr	r3, .L17+4
 390 00a6 1B68     		ldr	r3, [r3]
 391 00a8 1846     		mov	r0, r3
 392 00aa FFF7FEFF 		bl	vTaskResume
 349:..\..\Common\Minimal/dynamic.c **** 
 350:..\..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 351:..\..\Common\Minimal/dynamic.c **** 			taskYIELD();
 352:..\..\Common\Minimal/dynamic.c **** 		#endif
 353:..\..\Common\Minimal/dynamic.c **** 	}
 393              		.loc 1 353 0
 394 00ae ADE7     		b	.L16
 395              	.L18:
 396              		.align	2
 397              	.L17:
 398 00b0 08000000 		.word	ulCounter
 399 00b4 00000000 		.word	xContinuousIncrementHandle
 400 00b8 04000000 		.word	xLimitedIncrementHandle
 401 00bc 0C000000 		.word	usCheckVariable
 402              		.cfi_endproc
 403              	.LFE71:
 404              		.size	vCounterControlTask, .-vCounterControlTask
 405              		.section	.text.vQueueSendWhenSuspendedTask,"ax",%progbits
 406              		.align	2
 407              		.thumb
 408              		.thumb_func
 409              		.type	vQueueSendWhenSuspendedTask, %function
 410              	vQueueSendWhenSuspendedTask:
 411              	.LFB72:
 354:..\..\Common\Minimal/dynamic.c **** }
 355:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 356:..\..\Common\Minimal/dynamic.c **** 
 357:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
 358:..\..\Common\Minimal/dynamic.c **** {
 412              		.loc 1 358 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 7, -8
 419              		.cfi_offset 14, -4
 420 0002 82B0     		sub	sp, sp, #8
 421              		.cfi_def_cfa_offset 16
 422 0004 00AF     		add	r7, sp, #0
 423              		.cfi_def_cfa_register 7
 424 0006 7860     		str	r0, [r7, #4]
 425              	.L21:
 359:..\..\Common\Minimal/dynamic.c **** static uint32_t ulValueToSend = ( uint32_t ) 0;
 360:..\..\Common\Minimal/dynamic.c **** 
 361:..\..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 362:..\..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 15


 363:..\..\Common\Minimal/dynamic.c **** 
 364:..\..\Common\Minimal/dynamic.c **** 	for( ;; )
 365:..\..\Common\Minimal/dynamic.c **** 	{
 366:..\..\Common\Minimal/dynamic.c **** 		vTaskSuspendAll();
 426              		.loc 1 366 0
 427 0008 FFF7FEFF 		bl	vTaskSuspendAll
 367:..\..\Common\Minimal/dynamic.c **** 		{
 368:..\..\Common\Minimal/dynamic.c **** 			/* We must not block while the scheduler is suspended! */
 369:..\..\Common\Minimal/dynamic.c **** 			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 428              		.loc 1 369 0
 429 000c 0C4B     		ldr	r3, .L22
 430 000e 1B68     		ldr	r3, [r3]
 431 0010 1846     		mov	r0, r3
 432 0012 0C49     		ldr	r1, .L22+4
 433 0014 0022     		movs	r2, #0
 434 0016 0023     		movs	r3, #0
 435 0018 FFF7FEFF 		bl	xQueueGenericSend
 436 001c 0346     		mov	r3, r0
 437 001e 012B     		cmp	r3, #1
 438 0020 02D0     		beq	.L20
 370:..\..\Common\Minimal/dynamic.c **** 			{
 371:..\..\Common\Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 439              		.loc 1 371 0
 440 0022 094B     		ldr	r3, .L22+8
 441 0024 0122     		movs	r2, #1
 442 0026 1A60     		str	r2, [r3]
 443              	.L20:
 372:..\..\Common\Minimal/dynamic.c **** 			}
 373:..\..\Common\Minimal/dynamic.c **** 		}
 374:..\..\Common\Minimal/dynamic.c **** 		xTaskResumeAll();
 444              		.loc 1 374 0
 445 0028 FFF7FEFF 		bl	xTaskResumeAll
 375:..\..\Common\Minimal/dynamic.c **** 
 376:..\..\Common\Minimal/dynamic.c **** 		vTaskDelay( priSLEEP_TIME );
 446              		.loc 1 376 0
 447 002c 8020     		movs	r0, #128
 448 002e FFF7FEFF 		bl	vTaskDelay
 377:..\..\Common\Minimal/dynamic.c **** 
 378:..\..\Common\Minimal/dynamic.c **** 		++ulValueToSend;
 449              		.loc 1 378 0
 450 0032 044B     		ldr	r3, .L22+4
 451 0034 1B68     		ldr	r3, [r3]
 452 0036 0133     		adds	r3, r3, #1
 453 0038 024A     		ldr	r2, .L22+4
 454 003a 1360     		str	r3, [r2]
 379:..\..\Common\Minimal/dynamic.c **** 	}
 455              		.loc 1 379 0
 456 003c E4E7     		b	.L21
 457              	.L23:
 458 003e 00BF     		.align	2
 459              	.L22:
 460 0040 00000000 		.word	xSuspendedTestQueue
 461 0044 1C000000 		.word	ulValueToSend.6811
 462 0048 10000000 		.word	xSuspendedQueueSendError
 463              		.cfi_endproc
 464              	.LFE72:
 465              		.size	vQueueSendWhenSuspendedTask, .-vQueueSendWhenSuspendedTask
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 16


 466              		.section	.text.vQueueReceiveWhenSuspendedTask,"ax",%progbits
 467              		.align	2
 468              		.thumb
 469              		.thumb_func
 470              		.type	vQueueReceiveWhenSuspendedTask, %function
 471              	vQueueReceiveWhenSuspendedTask:
 472              	.LFB73:
 380:..\..\Common\Minimal/dynamic.c **** }
 381:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 382:..\..\Common\Minimal/dynamic.c **** 
 383:..\..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
 384:..\..\Common\Minimal/dynamic.c **** {
 473              		.loc 1 384 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 16
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477 0000 80B5     		push	{r7, lr}
 478              		.cfi_def_cfa_offset 8
 479              		.cfi_offset 7, -8
 480              		.cfi_offset 14, -4
 481 0002 84B0     		sub	sp, sp, #16
 482              		.cfi_def_cfa_offset 24
 483 0004 00AF     		add	r7, sp, #0
 484              		.cfi_def_cfa_register 7
 485 0006 7860     		str	r0, [r7, #4]
 486              	.L26:
 385:..\..\Common\Minimal/dynamic.c **** uint32_t ulReceivedValue;
 386:..\..\Common\Minimal/dynamic.c **** BaseType_t xGotValue;
 387:..\..\Common\Minimal/dynamic.c **** 
 388:..\..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 389:..\..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 390:..\..\Common\Minimal/dynamic.c **** 
 391:..\..\Common\Minimal/dynamic.c **** 	for( ;; )
 392:..\..\Common\Minimal/dynamic.c **** 	{
 393:..\..\Common\Minimal/dynamic.c **** 		do
 394:..\..\Common\Minimal/dynamic.c **** 		{
 395:..\..\Common\Minimal/dynamic.c **** 			/* Suspending the scheduler here is fairly pointless and
 396:..\..\Common\Minimal/dynamic.c **** 			undesirable for a normal application.  It is done here purely
 397:..\..\Common\Minimal/dynamic.c **** 			to test the scheduler.  The inner xTaskResumeAll() should
 398:..\..\Common\Minimal/dynamic.c **** 			never return pdTRUE as the scheduler is still locked by the
 399:..\..\Common\Minimal/dynamic.c **** 			outer call. */
 400:..\..\Common\Minimal/dynamic.c **** 			vTaskSuspendAll();
 487              		.loc 1 400 0
 488 0008 FFF7FEFF 		bl	vTaskSuspendAll
 401:..\..\Common\Minimal/dynamic.c **** 			{
 402:..\..\Common\Minimal/dynamic.c **** 				vTaskSuspendAll();
 489              		.loc 1 402 0
 490 000c FFF7FEFF 		bl	vTaskSuspendAll
 403:..\..\Common\Minimal/dynamic.c **** 				{
 404:..\..\Common\Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 491              		.loc 1 404 0
 492 0010 144B     		ldr	r3, .L29
 493 0012 1A68     		ldr	r2, [r3]
 494 0014 07F10803 		add	r3, r7, #8
 495 0018 1046     		mov	r0, r2
 496 001a 1946     		mov	r1, r3
 497 001c 0022     		movs	r2, #0
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 17


 498 001e FFF7FEFF 		bl	xQueueReceive
 499 0022 F860     		str	r0, [r7, #12]
 405:..\..\Common\Minimal/dynamic.c **** 				}
 406:..\..\Common\Minimal/dynamic.c **** 				if( xTaskResumeAll() != pdFALSE )
 500              		.loc 1 406 0
 501 0024 FFF7FEFF 		bl	xTaskResumeAll
 502 0028 0346     		mov	r3, r0
 503 002a 002B     		cmp	r3, #0
 504 002c 02D0     		beq	.L25
 407:..\..\Common\Minimal/dynamic.c **** 				{
 408:..\..\Common\Minimal/dynamic.c **** 					xSuspendedQueueReceiveError = pdTRUE;
 505              		.loc 1 408 0
 506 002e 0E4B     		ldr	r3, .L29+4
 507 0030 0122     		movs	r2, #1
 508 0032 1A60     		str	r2, [r3]
 509              	.L25:
 409:..\..\Common\Minimal/dynamic.c **** 				}
 410:..\..\Common\Minimal/dynamic.c **** 			}
 411:..\..\Common\Minimal/dynamic.c **** 			xTaskResumeAll();
 510              		.loc 1 411 0
 511 0034 FFF7FEFF 		bl	xTaskResumeAll
 412:..\..\Common\Minimal/dynamic.c **** 
 413:..\..\Common\Minimal/dynamic.c **** 			#if configUSE_PREEMPTION == 0
 414:..\..\Common\Minimal/dynamic.c **** 			{
 415:..\..\Common\Minimal/dynamic.c **** 				taskYIELD();
 416:..\..\Common\Minimal/dynamic.c **** 			}
 417:..\..\Common\Minimal/dynamic.c **** 			#endif
 418:..\..\Common\Minimal/dynamic.c **** 
 419:..\..\Common\Minimal/dynamic.c **** 		} while( xGotValue == pdFALSE );
 512              		.loc 1 419 0
 513 0038 FB68     		ldr	r3, [r7, #12]
 514 003a 002B     		cmp	r3, #0
 515 003c E4D0     		beq	.L26
 420:..\..\Common\Minimal/dynamic.c **** 
 421:..\..\Common\Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
 516              		.loc 1 421 0
 517 003e BA68     		ldr	r2, [r7, #8]
 518 0040 0A4B     		ldr	r3, .L29+8
 519 0042 1B68     		ldr	r3, [r3]
 520 0044 9A42     		cmp	r2, r3
 521 0046 02D0     		beq	.L27
 422:..\..\Common\Minimal/dynamic.c **** 		{
 423:..\..\Common\Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
 522              		.loc 1 423 0
 523 0048 074B     		ldr	r3, .L29+4
 524 004a 0122     		movs	r2, #1
 525 004c 1A60     		str	r2, [r3]
 526              	.L27:
 424:..\..\Common\Minimal/dynamic.c **** 		}
 425:..\..\Common\Minimal/dynamic.c **** 
 426:..\..\Common\Minimal/dynamic.c **** 		if( xSuspendedQueueReceiveError != pdTRUE )
 527              		.loc 1 426 0
 528 004e 064B     		ldr	r3, .L29+4
 529 0050 1B68     		ldr	r3, [r3]
 530 0052 012B     		cmp	r3, #1
 531 0054 04D0     		beq	.L28
 427:..\..\Common\Minimal/dynamic.c **** 		{
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 18


 428:..\..\Common\Minimal/dynamic.c **** 			/* Only increment the variable if an error has not occurred.  This
 429:..\..\Common\Minimal/dynamic.c **** 			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
 430:..\..\Common\Minimal/dynamic.c **** 			tasks as well as explicit errors. */
 431:..\..\Common\Minimal/dynamic.c **** 			++ulExpectedValue;
 532              		.loc 1 431 0
 533 0056 054B     		ldr	r3, .L29+8
 534 0058 1B68     		ldr	r3, [r3]
 535 005a 0133     		adds	r3, r3, #1
 536 005c 034A     		ldr	r2, .L29+8
 537 005e 1360     		str	r3, [r2]
 538              	.L28:
 432:..\..\Common\Minimal/dynamic.c **** 		}
 433:..\..\Common\Minimal/dynamic.c **** 	}
 539              		.loc 1 433 0
 540 0060 D2E7     		b	.L26
 541              	.L30:
 542 0062 00BF     		.align	2
 543              	.L29:
 544 0064 00000000 		.word	xSuspendedTestQueue
 545 0068 14000000 		.word	xSuspendedQueueReceiveError
 546 006c 18000000 		.word	ulExpectedValue
 547              		.cfi_endproc
 548              	.LFE73:
 549              		.size	vQueueReceiveWhenSuspendedTask, .-vQueueReceiveWhenSuspendedTask
 550              		.section	.text.xAreDynamicPriorityTasksStillRunning,"ax",%progbits
 551              		.align	2
 552              		.global	xAreDynamicPriorityTasksStillRunning
 553              		.thumb
 554              		.thumb_func
 555              		.type	xAreDynamicPriorityTasksStillRunning, %function
 556              	xAreDynamicPriorityTasksStillRunning:
 557              	.LFB74:
 434:..\..\Common\Minimal/dynamic.c **** }
 435:..\..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 436:..\..\Common\Minimal/dynamic.c **** 
 437:..\..\Common\Minimal/dynamic.c **** /* Called to check that all the created tasks are still running without error. */
 438:..\..\Common\Minimal/dynamic.c **** BaseType_t xAreDynamicPriorityTasksStillRunning( void )
 439:..\..\Common\Minimal/dynamic.c **** {
 558              		.loc 1 439 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 0000 80B4     		push	{r7}
 564              		.cfi_def_cfa_offset 4
 565              		.cfi_offset 7, -4
 566 0002 83B0     		sub	sp, sp, #12
 567              		.cfi_def_cfa_offset 16
 568 0004 00AF     		add	r7, sp, #0
 569              		.cfi_def_cfa_register 7
 440:..\..\Common\Minimal/dynamic.c **** /* Keep a history of the check variables so we know if it has been incremented
 441:..\..\Common\Minimal/dynamic.c **** since the last call. */
 442:..\..\Common\Minimal/dynamic.c **** static uint16_t usLastTaskCheck = ( uint16_t ) 0;
 443:..\..\Common\Minimal/dynamic.c **** static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
 444:..\..\Common\Minimal/dynamic.c **** BaseType_t xReturn = pdTRUE;
 570              		.loc 1 444 0
 571 0006 0123     		movs	r3, #1
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 19


 572 0008 7B60     		str	r3, [r7, #4]
 445:..\..\Common\Minimal/dynamic.c **** 
 446:..\..\Common\Minimal/dynamic.c **** 	/* Check the tasks are still running by ensuring the check variable
 447:..\..\Common\Minimal/dynamic.c **** 	is still incrementing. */
 448:..\..\Common\Minimal/dynamic.c **** 
 449:..\..\Common\Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 573              		.loc 1 449 0
 574 000a 164B     		ldr	r3, .L37
 575 000c 1B88     		ldrh	r3, [r3]	@ movhi
 576 000e 9AB2     		uxth	r2, r3
 577 0010 154B     		ldr	r3, .L37+4
 578 0012 1B88     		ldrh	r3, [r3]
 579 0014 9A42     		cmp	r2, r3
 580 0016 01D1     		bne	.L32
 450:..\..\Common\Minimal/dynamic.c **** 	{
 451:..\..\Common\Minimal/dynamic.c **** 		/* The check has not incremented so an error exists. */
 452:..\..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 581              		.loc 1 452 0
 582 0018 0023     		movs	r3, #0
 583 001a 7B60     		str	r3, [r7, #4]
 584              	.L32:
 453:..\..\Common\Minimal/dynamic.c **** 	}
 454:..\..\Common\Minimal/dynamic.c **** 
 455:..\..\Common\Minimal/dynamic.c **** 	if( ulExpectedValue == ulLastExpectedValue )
 585              		.loc 1 455 0
 586 001c 134B     		ldr	r3, .L37+8
 587 001e 1A68     		ldr	r2, [r3]
 588 0020 134B     		ldr	r3, .L37+12
 589 0022 1B68     		ldr	r3, [r3]
 590 0024 9A42     		cmp	r2, r3
 591 0026 01D1     		bne	.L33
 456:..\..\Common\Minimal/dynamic.c **** 	{
 457:..\..\Common\Minimal/dynamic.c **** 		/* The value being received by the queue receive task has not
 458:..\..\Common\Minimal/dynamic.c **** 		incremented so an error exists. */
 459:..\..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 592              		.loc 1 459 0
 593 0028 0023     		movs	r3, #0
 594 002a 7B60     		str	r3, [r7, #4]
 595              	.L33:
 460:..\..\Common\Minimal/dynamic.c **** 	}
 461:..\..\Common\Minimal/dynamic.c **** 
 462:..\..\Common\Minimal/dynamic.c **** 	if( xSuspendedQueueSendError == pdTRUE )
 596              		.loc 1 462 0
 597 002c 114B     		ldr	r3, .L37+16
 598 002e 1B68     		ldr	r3, [r3]
 599 0030 012B     		cmp	r3, #1
 600 0032 01D1     		bne	.L34
 463:..\..\Common\Minimal/dynamic.c **** 	{
 464:..\..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 601              		.loc 1 464 0
 602 0034 0023     		movs	r3, #0
 603 0036 7B60     		str	r3, [r7, #4]
 604              	.L34:
 465:..\..\Common\Minimal/dynamic.c **** 	}
 466:..\..\Common\Minimal/dynamic.c **** 
 467:..\..\Common\Minimal/dynamic.c **** 	if( xSuspendedQueueReceiveError == pdTRUE )
 605              		.loc 1 467 0
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 20


 606 0038 0F4B     		ldr	r3, .L37+20
 607 003a 1B68     		ldr	r3, [r3]
 608 003c 012B     		cmp	r3, #1
 609 003e 01D1     		bne	.L35
 468:..\..\Common\Minimal/dynamic.c **** 	{
 469:..\..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 610              		.loc 1 469 0
 611 0040 0023     		movs	r3, #0
 612 0042 7B60     		str	r3, [r7, #4]
 613              	.L35:
 470:..\..\Common\Minimal/dynamic.c **** 	}
 471:..\..\Common\Minimal/dynamic.c **** 
 472:..\..\Common\Minimal/dynamic.c **** 	usLastTaskCheck = usCheckVariable;
 614              		.loc 1 472 0
 615 0044 074B     		ldr	r3, .L37
 616 0046 1B88     		ldrh	r3, [r3]	@ movhi
 617 0048 9AB2     		uxth	r2, r3
 618 004a 074B     		ldr	r3, .L37+4
 619 004c 1A80     		strh	r2, [r3]	@ movhi
 473:..\..\Common\Minimal/dynamic.c **** 	ulLastExpectedValue = ulExpectedValue;
 620              		.loc 1 473 0
 621 004e 074B     		ldr	r3, .L37+8
 622 0050 1B68     		ldr	r3, [r3]
 623 0052 074A     		ldr	r2, .L37+12
 624 0054 1360     		str	r3, [r2]
 474:..\..\Common\Minimal/dynamic.c **** 
 475:..\..\Common\Minimal/dynamic.c **** 	return xReturn;
 625              		.loc 1 475 0
 626 0056 7B68     		ldr	r3, [r7, #4]
 476:..\..\Common\Minimal/dynamic.c **** }
 627              		.loc 1 476 0
 628 0058 1846     		mov	r0, r3
 629 005a 0C37     		adds	r7, r7, #12
 630              		.cfi_def_cfa_offset 4
 631 005c BD46     		mov	sp, r7
 632              		.cfi_def_cfa_register 13
 633              		@ sp needed
 634 005e 5DF8047B 		ldr	r7, [sp], #4
 635              		.cfi_restore 7
 636              		.cfi_def_cfa_offset 0
 637 0062 7047     		bx	lr
 638              	.L38:
 639              		.align	2
 640              	.L37:
 641 0064 0C000000 		.word	usCheckVariable
 642 0068 20000000 		.word	usLastTaskCheck.6824
 643 006c 18000000 		.word	ulExpectedValue
 644 0070 24000000 		.word	ulLastExpectedValue.6825
 645 0074 10000000 		.word	xSuspendedQueueSendError
 646 0078 14000000 		.word	xSuspendedQueueReceiveError
 647              		.cfi_endproc
 648              	.LFE74:
 649              		.size	xAreDynamicPriorityTasksStillRunning, .-xAreDynamicPriorityTasksStillRunning
 650              		.bss
 651              		.align	2
 652              	ulValueToSend.6811:
 653 001c 00000000 		.space	4
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 21


 654              		.align	1
 655              	usLastTaskCheck.6824:
 656 0020 0000     		.space	2
 657 0022 0000     		.align	2
 658              	ulLastExpectedValue.6825:
 659 0024 00000000 		.space	4
 660              		.text
 661              	.Letext0:
 662              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 663              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 664              		.file 4 "../../../Source/portable/GCC/ARM_CM3/portmacro.h"
 665              		.file 5 "../../../Source/include/task.h"
 666              		.file 6 "../../../Source/include/queue.h"
 667              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 668              		.section	.debug_info,"",%progbits
 669              	.Ldebug_info0:
 670 0000 69030000 		.4byte	0x369
 671 0004 0400     		.2byte	0x4
 672 0006 00000000 		.4byte	.Ldebug_abbrev0
 673 000a 04       		.byte	0x4
 674 000b 01       		.uleb128 0x1
 675 000c 66000000 		.4byte	.LASF52
 676 0010 01       		.byte	0x1
 677 0011 CA010000 		.4byte	.LASF53
 678 0015 DD020000 		.4byte	.LASF54
 679 0019 00000000 		.4byte	.Ldebug_ranges0+0
 680 001d 00000000 		.4byte	0
 681 0021 00000000 		.4byte	.Ldebug_line0
 682 0025 02       		.uleb128 0x2
 683 0026 04       		.byte	0x4
 684 0027 07       		.byte	0x7
 685 0028 B1020000 		.4byte	.LASF0
 686 002c 03       		.uleb128 0x3
 687 002d 04       		.byte	0x4
 688 002e 05       		.byte	0x5
 689 002f 696E7400 		.ascii	"int\000"
 690 0033 02       		.uleb128 0x2
 691 0034 01       		.byte	0x1
 692 0035 06       		.byte	0x6
 693 0036 65030000 		.4byte	.LASF1
 694 003a 04       		.uleb128 0x4
 695 003b 2C000000 		.4byte	.LASF4
 696 003f 02       		.byte	0x2
 697 0040 1D       		.byte	0x1d
 698 0041 45000000 		.4byte	0x45
 699 0045 02       		.uleb128 0x2
 700 0046 01       		.byte	0x1
 701 0047 08       		.byte	0x8
 702 0048 A3020000 		.4byte	.LASF2
 703 004c 02       		.uleb128 0x2
 704 004d 02       		.byte	0x2
 705 004e 05       		.byte	0x5
 706 004f 70020000 		.4byte	.LASF3
 707 0053 04       		.uleb128 0x4
 708 0054 E0030000 		.4byte	.LASF5
 709 0058 02       		.byte	0x2
 710 0059 2B       		.byte	0x2b
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 22


 711 005a 5E000000 		.4byte	0x5e
 712 005e 02       		.uleb128 0x2
 713 005f 02       		.byte	0x2
 714 0060 07       		.byte	0x7
 715 0061 4D040000 		.4byte	.LASF6
 716 0065 04       		.uleb128 0x4
 717 0066 5C000000 		.4byte	.LASF7
 718 006a 02       		.byte	0x2
 719 006b 3F       		.byte	0x3f
 720 006c 70000000 		.4byte	0x70
 721 0070 02       		.uleb128 0x2
 722 0071 04       		.byte	0x4
 723 0072 05       		.byte	0x5
 724 0073 0A040000 		.4byte	.LASF8
 725 0077 04       		.uleb128 0x4
 726 0078 02010000 		.4byte	.LASF9
 727 007c 02       		.byte	0x2
 728 007d 41       		.byte	0x41
 729 007e 82000000 		.4byte	0x82
 730 0082 02       		.uleb128 0x2
 731 0083 04       		.byte	0x4
 732 0084 07       		.byte	0x7
 733 0085 B8010000 		.4byte	.LASF10
 734 0089 02       		.uleb128 0x2
 735 008a 08       		.byte	0x8
 736 008b 05       		.byte	0x5
 737 008c 8E030000 		.4byte	.LASF11
 738 0090 02       		.uleb128 0x2
 739 0091 08       		.byte	0x8
 740 0092 07       		.byte	0x7
 741 0093 BE020000 		.4byte	.LASF12
 742 0097 02       		.uleb128 0x2
 743 0098 04       		.byte	0x4
 744 0099 07       		.byte	0x7
 745 009a 85030000 		.4byte	.LASF13
 746 009e 05       		.uleb128 0x5
 747 009f 04       		.byte	0x4
 748 00a0 02       		.uleb128 0x2
 749 00a1 01       		.byte	0x1
 750 00a2 08       		.byte	0x8
 751 00a3 9C030000 		.4byte	.LASF14
 752 00a7 04       		.uleb128 0x4
 753 00a8 D5020000 		.4byte	.LASF15
 754 00ac 03       		.byte	0x3
 755 00ad 15       		.byte	0x15
 756 00ae 3A000000 		.4byte	0x3a
 757 00b2 04       		.uleb128 0x4
 758 00b3 EB030000 		.4byte	.LASF16
 759 00b7 03       		.byte	0x3
 760 00b8 21       		.byte	0x21
 761 00b9 53000000 		.4byte	0x53
 762 00bd 04       		.uleb128 0x4
 763 00be 55010000 		.4byte	.LASF17
 764 00c2 03       		.byte	0x3
 765 00c3 2C       		.byte	0x2c
 766 00c4 65000000 		.4byte	0x65
 767 00c8 04       		.uleb128 0x4
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 23


 768 00c9 01040000 		.4byte	.LASF18
 769 00cd 03       		.byte	0x3
 770 00ce 2D       		.byte	0x2d
 771 00cf 77000000 		.4byte	0x77
 772 00d3 02       		.uleb128 0x2
 773 00d4 04       		.byte	0x4
 774 00d5 04       		.byte	0x4
 775 00d6 88010000 		.4byte	.LASF19
 776 00da 02       		.uleb128 0x2
 777 00db 08       		.byte	0x8
 778 00dc 04       		.byte	0x4
 779 00dd 0D010000 		.4byte	.LASF20
 780 00e1 06       		.uleb128 0x6
 781 00e2 C8000000 		.4byte	0xc8
 782 00e6 06       		.uleb128 0x6
 783 00e7 B2000000 		.4byte	0xb2
 784 00eb 04       		.uleb128 0x4
 785 00ec 6C040000 		.4byte	.LASF21
 786 00f0 04       		.byte	0x4
 787 00f1 38       		.byte	0x38
 788 00f2 70000000 		.4byte	0x70
 789 00f6 04       		.uleb128 0x4
 790 00f7 60040000 		.4byte	.LASF22
 791 00fb 04       		.byte	0x4
 792 00fc 39       		.byte	0x39
 793 00fd 82000000 		.4byte	0x82
 794 0101 04       		.uleb128 0x4
 795 0102 41000000 		.4byte	.LASF23
 796 0106 04       		.byte	0x4
 797 0107 3F       		.byte	0x3f
 798 0108 C8000000 		.4byte	0xc8
 799 010c 04       		.uleb128 0x4
 800 010d F4030000 		.4byte	.LASF24
 801 0111 05       		.byte	0x5
 802 0112 3E       		.byte	0x3e
 803 0113 17010000 		.4byte	0x117
 804 0117 07       		.uleb128 0x7
 805 0118 04       		.byte	0x4
 806 0119 1D010000 		.4byte	0x11d
 807 011d 08       		.uleb128 0x8
 808 011e 7A020000 		.4byte	.LASF55
 809 0122 04       		.uleb128 0x4
 810 0123 F4000000 		.4byte	.LASF25
 811 0127 06       		.byte	0x6
 812 0128 2E       		.byte	0x2e
 813 0129 9E000000 		.4byte	0x9e
 814 012d 09       		.uleb128 0x9
 815 012e 00000000 		.4byte	.LASF56
 816 0132 01       		.byte	0x1
 817 0133 92       		.byte	0x92
 818 0134 00000000 		.4byte	.LFB68
 819 0138 D0000000 		.4byte	.LFE68-.LFB68
 820 013c 01       		.uleb128 0x1
 821 013d 9C       		.byte	0x9c
 822 013e 0A       		.uleb128 0xa
 823 013f 8E010000 		.4byte	.LASF26
 824 0143 01       		.byte	0x1
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 24


 825 0144 AD       		.byte	0xad
 826 0145 00000000 		.4byte	.LFB69
 827 0149 2C000000 		.4byte	.LFE69-.LFB69
 828 014d 01       		.uleb128 0x1
 829 014e 9C       		.byte	0x9c
 830 014f 70010000 		.4byte	0x170
 831 0153 0B       		.uleb128 0xb
 832 0154 A1030000 		.4byte	.LASF28
 833 0158 01       		.byte	0x1
 834 0159 AD       		.byte	0xad
 835 015a 9E000000 		.4byte	0x9e
 836 015e 02       		.uleb128 0x2
 837 015f 91       		.byte	0x91
 838 0160 6C       		.sleb128 -20
 839 0161 0C       		.uleb128 0xc
 840 0162 36000000 		.4byte	.LASF29
 841 0166 01       		.byte	0x1
 842 0167 AF       		.byte	0xaf
 843 0168 70010000 		.4byte	0x170
 844 016c 02       		.uleb128 0x2
 845 016d 91       		.byte	0x91
 846 016e 74       		.sleb128 -12
 847 016f 00       		.byte	0
 848 0170 07       		.uleb128 0x7
 849 0171 04       		.byte	0x4
 850 0172 E1000000 		.4byte	0xe1
 851 0176 0A       		.uleb128 0xa
 852 0177 29020000 		.4byte	.LASF27
 853 017b 01       		.byte	0x1
 854 017c CA       		.byte	0xca
 855 017d 00000000 		.4byte	.LFB70
 856 0181 34000000 		.4byte	.LFE70-.LFB70
 857 0185 01       		.uleb128 0x1
 858 0186 9C       		.byte	0x9c
 859 0187 B6010000 		.4byte	0x1b6
 860 018b 0B       		.uleb128 0xb
 861 018c A1030000 		.4byte	.LASF28
 862 0190 01       		.byte	0x1
 863 0191 CA       		.byte	0xca
 864 0192 9E000000 		.4byte	0x9e
 865 0196 02       		.uleb128 0x2
 866 0197 91       		.byte	0x91
 867 0198 6C       		.sleb128 -20
 868 0199 0C       		.uleb128 0xc
 869 019a 36000000 		.4byte	.LASF29
 870 019e 01       		.byte	0x1
 871 019f CC       		.byte	0xcc
 872 01a0 70010000 		.4byte	0x170
 873 01a4 02       		.uleb128 0x2
 874 01a5 91       		.byte	0x91
 875 01a6 74       		.sleb128 -12
 876 01a7 0C       		.uleb128 0xc
 877 01a8 95020000 		.4byte	.LASF30
 878 01ac 01       		.byte	0x1
 879 01ad CD       		.byte	0xcd
 880 01ae F6000000 		.4byte	0xf6
 881 01b2 02       		.uleb128 0x2
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 25


 882 01b3 91       		.byte	0x91
 883 01b4 70       		.sleb128 -16
 884 01b5 00       		.byte	0
 885 01b6 0A       		.uleb128 0xa
 886 01b7 71030000 		.4byte	.LASF31
 887 01bb 01       		.byte	0x1
 888 01bc EE       		.byte	0xee
 889 01bd 00000000 		.4byte	.LFB71
 890 01c1 C0000000 		.4byte	.LFE71-.LFB71
 891 01c5 01       		.uleb128 0x1
 892 01c6 9C       		.byte	0x9c
 893 01c7 04020000 		.4byte	0x204
 894 01cb 0B       		.uleb128 0xb
 895 01cc A1030000 		.4byte	.LASF28
 896 01d0 01       		.byte	0x1
 897 01d1 EE       		.byte	0xee
 898 01d2 9E000000 		.4byte	0x9e
 899 01d6 02       		.uleb128 0x2
 900 01d7 91       		.byte	0x91
 901 01d8 6C       		.sleb128 -20
 902 01d9 0C       		.uleb128 0xc
 903 01da 13040000 		.4byte	.LASF32
 904 01de 01       		.byte	0x1
 905 01df F0       		.byte	0xf0
 906 01e0 C8000000 		.4byte	0xc8
 907 01e4 02       		.uleb128 0x2
 908 01e5 91       		.byte	0x91
 909 01e6 70       		.sleb128 -16
 910 01e7 0C       		.uleb128 0xc
 911 01e8 25000000 		.4byte	.LASF33
 912 01ec 01       		.byte	0x1
 913 01ed F1       		.byte	0xf1
 914 01ee 4C000000 		.4byte	0x4c
 915 01f2 02       		.uleb128 0x2
 916 01f3 91       		.byte	0x91
 917 01f4 76       		.sleb128 -10
 918 01f5 0C       		.uleb128 0xc
 919 01f6 69020000 		.4byte	.LASF34
 920 01fa 01       		.byte	0x1
 921 01fb F2       		.byte	0xf2
 922 01fc 4C000000 		.4byte	0x4c
 923 0200 02       		.uleb128 0x2
 924 0201 91       		.byte	0x91
 925 0202 74       		.sleb128 -12
 926 0203 00       		.byte	0
 927 0204 0D       		.uleb128 0xd
 928 0205 39010000 		.4byte	.LASF35
 929 0209 01       		.byte	0x1
 930 020a 6501     		.2byte	0x165
 931 020c 00000000 		.4byte	.LFB72
 932 0210 4C000000 		.4byte	.LFE72-.LFB72
 933 0214 01       		.uleb128 0x1
 934 0215 9C       		.byte	0x9c
 935 0216 3C020000 		.4byte	0x23c
 936 021a 0E       		.uleb128 0xe
 937 021b A1030000 		.4byte	.LASF28
 938 021f 01       		.byte	0x1
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 26


 939 0220 6501     		.2byte	0x165
 940 0222 9E000000 		.4byte	0x9e
 941 0226 02       		.uleb128 0x2
 942 0227 91       		.byte	0x91
 943 0228 74       		.sleb128 -12
 944 0229 0F       		.uleb128 0xf
 945 022a 42020000 		.4byte	.LASF36
 946 022e 01       		.byte	0x1
 947 022f 6701     		.2byte	0x167
 948 0231 C8000000 		.4byte	0xc8
 949 0235 05       		.uleb128 0x5
 950 0236 03       		.byte	0x3
 951 0237 1C000000 		.4byte	ulValueToSend.6811
 952 023b 00       		.byte	0
 953 023c 0D       		.uleb128 0xd
 954 023d 0A020000 		.4byte	.LASF37
 955 0241 01       		.byte	0x1
 956 0242 7F01     		.2byte	0x17f
 957 0244 00000000 		.4byte	.LFB73
 958 0248 70000000 		.4byte	.LFE73-.LFB73
 959 024c 01       		.uleb128 0x1
 960 024d 9C       		.byte	0x9c
 961 024e 80020000 		.4byte	0x280
 962 0252 0E       		.uleb128 0xe
 963 0253 A1030000 		.4byte	.LASF28
 964 0257 01       		.byte	0x1
 965 0258 7F01     		.2byte	0x17f
 966 025a 9E000000 		.4byte	0x9e
 967 025e 02       		.uleb128 0x2
 968 025f 91       		.byte	0x91
 969 0260 6C       		.sleb128 -20
 970 0261 0F       		.uleb128 0xf
 971 0262 4C000000 		.4byte	.LASF38
 972 0266 01       		.byte	0x1
 973 0267 8101     		.2byte	0x181
 974 0269 C8000000 		.4byte	0xc8
 975 026d 02       		.uleb128 0x2
 976 026e 91       		.byte	0x91
 977 026f 70       		.sleb128 -16
 978 0270 0F       		.uleb128 0xf
 979 0271 AE030000 		.4byte	.LASF39
 980 0275 01       		.byte	0x1
 981 0276 8201     		.2byte	0x182
 982 0278 EB000000 		.4byte	0xeb
 983 027c 02       		.uleb128 0x2
 984 027d 91       		.byte	0x91
 985 027e 74       		.sleb128 -12
 986 027f 00       		.byte	0
 987 0280 10       		.uleb128 0x10
 988 0281 14010000 		.4byte	.LASF57
 989 0285 01       		.byte	0x1
 990 0286 B601     		.2byte	0x1b6
 991 0288 EB000000 		.4byte	0xeb
 992 028c 00000000 		.4byte	.LFB74
 993 0290 7C000000 		.4byte	.LFE74-.LFB74
 994 0294 01       		.uleb128 0x1
 995 0295 9C       		.byte	0x9c
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 27


 996 0296 CE020000 		.4byte	0x2ce
 997 029a 0F       		.uleb128 0xf
 998 029b 5D010000 		.4byte	.LASF40
 999 029f 01       		.byte	0x1
 1000 02a0 BA01     		.2byte	0x1ba
 1001 02a2 B2000000 		.4byte	0xb2
 1002 02a6 05       		.uleb128 0x5
 1003 02a7 03       		.byte	0x3
 1004 02a8 20000000 		.4byte	usLastTaskCheck.6824
 1005 02ac 0F       		.uleb128 0xf
 1006 02ad A4010000 		.4byte	.LASF41
 1007 02b1 01       		.byte	0x1
 1008 02b2 BB01     		.2byte	0x1bb
 1009 02b4 C8000000 		.4byte	0xc8
 1010 02b8 05       		.uleb128 0x5
 1011 02b9 03       		.byte	0x3
 1012 02ba 24000000 		.4byte	ulLastExpectedValue.6825
 1013 02be 0F       		.uleb128 0xf
 1014 02bf 8D020000 		.4byte	.LASF42
 1015 02c3 01       		.byte	0x1
 1016 02c4 BC01     		.2byte	0x1bc
 1017 02c6 EB000000 		.4byte	0xeb
 1018 02ca 02       		.uleb128 0x2
 1019 02cb 91       		.byte	0x91
 1020 02cc 74       		.sleb128 -12
 1021 02cd 00       		.byte	0
 1022 02ce 0C       		.uleb128 0xc
 1023 02cf 6D010000 		.4byte	.LASF43
 1024 02d3 01       		.byte	0x1
 1025 02d4 77       		.byte	0x77
 1026 02d5 0C010000 		.4byte	0x10c
 1027 02d9 05       		.uleb128 0x5
 1028 02da 03       		.byte	0x3
 1029 02db 00000000 		.4byte	xContinuousIncrementHandle
 1030 02df 0C       		.uleb128 0xc
 1031 02e0 C8030000 		.4byte	.LASF44
 1032 02e4 01       		.byte	0x1
 1033 02e5 77       		.byte	0x77
 1034 02e6 0C010000 		.4byte	0x10c
 1035 02ea 05       		.uleb128 0x5
 1036 02eb 03       		.byte	0x3
 1037 02ec 04000000 		.4byte	xLimitedIncrementHandle
 1038 02f0 0C       		.uleb128 0xc
 1039 02f1 1B000000 		.4byte	.LASF45
 1040 02f5 01       		.byte	0x1
 1041 02f6 7B       		.byte	0x7b
 1042 02f7 C8000000 		.4byte	0xc8
 1043 02fb 05       		.uleb128 0x5
 1044 02fc 03       		.byte	0x3
 1045 02fd 08000000 		.4byte	ulCounter
 1046 0301 0C       		.uleb128 0xc
 1047 0302 3D040000 		.4byte	.LASF46
 1048 0306 01       		.byte	0x1
 1049 0307 81       		.byte	0x81
 1050 0308 E6000000 		.4byte	0xe6
 1051 030c 05       		.uleb128 0x5
 1052 030d 03       		.byte	0x3
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 28


 1053 030e 0C000000 		.4byte	usCheckVariable
 1054 0312 0C       		.uleb128 0xc
 1055 0313 50020000 		.4byte	.LASF47
 1056 0317 01       		.byte	0x1
 1057 0318 82       		.byte	0x82
 1058 0319 23030000 		.4byte	0x323
 1059 031d 05       		.uleb128 0x5
 1060 031e 03       		.byte	0x3
 1061 031f 10000000 		.4byte	xSuspendedQueueSendError
 1062 0323 06       		.uleb128 0x6
 1063 0324 EB000000 		.4byte	0xeb
 1064 0328 0C       		.uleb128 0xc
 1065 0329 21040000 		.4byte	.LASF48
 1066 032d 01       		.byte	0x1
 1067 032e 83       		.byte	0x83
 1068 032f 23030000 		.4byte	0x323
 1069 0333 05       		.uleb128 0x5
 1070 0334 03       		.byte	0x3
 1071 0335 14000000 		.4byte	xSuspendedQueueReceiveError
 1072 0339 0C       		.uleb128 0xc
 1073 033a B8030000 		.4byte	.LASF49
 1074 033e 01       		.byte	0x1
 1075 033f 8B       		.byte	0x8b
 1076 0340 C8000000 		.4byte	0xc8
 1077 0344 05       		.uleb128 0x5
 1078 0345 03       		.byte	0x3
 1079 0346 18000000 		.4byte	ulExpectedValue
 1080 034a 11       		.uleb128 0x11
 1081 034b FD010000 		.4byte	.LASF50
 1082 034f 07       		.byte	0x7
 1083 0350 9606     		.2byte	0x696
 1084 0352 56030000 		.4byte	0x356
 1085 0356 06       		.uleb128 0x6
 1086 0357 BD000000 		.4byte	0xbd
 1087 035b 12       		.uleb128 0x12
 1088 035c E9010000 		.4byte	.LASF51
 1089 0360 01       		.byte	0x1
 1090 0361 86       		.byte	0x86
 1091 0362 22010000 		.4byte	0x122
 1092 0366 05       		.uleb128 0x5
 1093 0367 03       		.byte	0x3
 1094 0368 00000000 		.4byte	xSuspendedTestQueue
 1095 036c 00       		.byte	0
 1096              		.section	.debug_abbrev,"",%progbits
 1097              	.Ldebug_abbrev0:
 1098 0000 01       		.uleb128 0x1
 1099 0001 11       		.uleb128 0x11
 1100 0002 01       		.byte	0x1
 1101 0003 25       		.uleb128 0x25
 1102 0004 0E       		.uleb128 0xe
 1103 0005 13       		.uleb128 0x13
 1104 0006 0B       		.uleb128 0xb
 1105 0007 03       		.uleb128 0x3
 1106 0008 0E       		.uleb128 0xe
 1107 0009 1B       		.uleb128 0x1b
 1108 000a 0E       		.uleb128 0xe
 1109 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 29


 1110 000c 17       		.uleb128 0x17
 1111 000d 11       		.uleb128 0x11
 1112 000e 01       		.uleb128 0x1
 1113 000f 10       		.uleb128 0x10
 1114 0010 17       		.uleb128 0x17
 1115 0011 00       		.byte	0
 1116 0012 00       		.byte	0
 1117 0013 02       		.uleb128 0x2
 1118 0014 24       		.uleb128 0x24
 1119 0015 00       		.byte	0
 1120 0016 0B       		.uleb128 0xb
 1121 0017 0B       		.uleb128 0xb
 1122 0018 3E       		.uleb128 0x3e
 1123 0019 0B       		.uleb128 0xb
 1124 001a 03       		.uleb128 0x3
 1125 001b 0E       		.uleb128 0xe
 1126 001c 00       		.byte	0
 1127 001d 00       		.byte	0
 1128 001e 03       		.uleb128 0x3
 1129 001f 24       		.uleb128 0x24
 1130 0020 00       		.byte	0
 1131 0021 0B       		.uleb128 0xb
 1132 0022 0B       		.uleb128 0xb
 1133 0023 3E       		.uleb128 0x3e
 1134 0024 0B       		.uleb128 0xb
 1135 0025 03       		.uleb128 0x3
 1136 0026 08       		.uleb128 0x8
 1137 0027 00       		.byte	0
 1138 0028 00       		.byte	0
 1139 0029 04       		.uleb128 0x4
 1140 002a 16       		.uleb128 0x16
 1141 002b 00       		.byte	0
 1142 002c 03       		.uleb128 0x3
 1143 002d 0E       		.uleb128 0xe
 1144 002e 3A       		.uleb128 0x3a
 1145 002f 0B       		.uleb128 0xb
 1146 0030 3B       		.uleb128 0x3b
 1147 0031 0B       		.uleb128 0xb
 1148 0032 49       		.uleb128 0x49
 1149 0033 13       		.uleb128 0x13
 1150 0034 00       		.byte	0
 1151 0035 00       		.byte	0
 1152 0036 05       		.uleb128 0x5
 1153 0037 0F       		.uleb128 0xf
 1154 0038 00       		.byte	0
 1155 0039 0B       		.uleb128 0xb
 1156 003a 0B       		.uleb128 0xb
 1157 003b 00       		.byte	0
 1158 003c 00       		.byte	0
 1159 003d 06       		.uleb128 0x6
 1160 003e 35       		.uleb128 0x35
 1161 003f 00       		.byte	0
 1162 0040 49       		.uleb128 0x49
 1163 0041 13       		.uleb128 0x13
 1164 0042 00       		.byte	0
 1165 0043 00       		.byte	0
 1166 0044 07       		.uleb128 0x7
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 30


 1167 0045 0F       		.uleb128 0xf
 1168 0046 00       		.byte	0
 1169 0047 0B       		.uleb128 0xb
 1170 0048 0B       		.uleb128 0xb
 1171 0049 49       		.uleb128 0x49
 1172 004a 13       		.uleb128 0x13
 1173 004b 00       		.byte	0
 1174 004c 00       		.byte	0
 1175 004d 08       		.uleb128 0x8
 1176 004e 13       		.uleb128 0x13
 1177 004f 00       		.byte	0
 1178 0050 03       		.uleb128 0x3
 1179 0051 0E       		.uleb128 0xe
 1180 0052 3C       		.uleb128 0x3c
 1181 0053 19       		.uleb128 0x19
 1182 0054 00       		.byte	0
 1183 0055 00       		.byte	0
 1184 0056 09       		.uleb128 0x9
 1185 0057 2E       		.uleb128 0x2e
 1186 0058 00       		.byte	0
 1187 0059 3F       		.uleb128 0x3f
 1188 005a 19       		.uleb128 0x19
 1189 005b 03       		.uleb128 0x3
 1190 005c 0E       		.uleb128 0xe
 1191 005d 3A       		.uleb128 0x3a
 1192 005e 0B       		.uleb128 0xb
 1193 005f 3B       		.uleb128 0x3b
 1194 0060 0B       		.uleb128 0xb
 1195 0061 27       		.uleb128 0x27
 1196 0062 19       		.uleb128 0x19
 1197 0063 11       		.uleb128 0x11
 1198 0064 01       		.uleb128 0x1
 1199 0065 12       		.uleb128 0x12
 1200 0066 06       		.uleb128 0x6
 1201 0067 40       		.uleb128 0x40
 1202 0068 18       		.uleb128 0x18
 1203 0069 9642     		.uleb128 0x2116
 1204 006b 19       		.uleb128 0x19
 1205 006c 00       		.byte	0
 1206 006d 00       		.byte	0
 1207 006e 0A       		.uleb128 0xa
 1208 006f 2E       		.uleb128 0x2e
 1209 0070 01       		.byte	0x1
 1210 0071 03       		.uleb128 0x3
 1211 0072 0E       		.uleb128 0xe
 1212 0073 3A       		.uleb128 0x3a
 1213 0074 0B       		.uleb128 0xb
 1214 0075 3B       		.uleb128 0x3b
 1215 0076 0B       		.uleb128 0xb
 1216 0077 27       		.uleb128 0x27
 1217 0078 19       		.uleb128 0x19
 1218 0079 11       		.uleb128 0x11
 1219 007a 01       		.uleb128 0x1
 1220 007b 12       		.uleb128 0x12
 1221 007c 06       		.uleb128 0x6
 1222 007d 40       		.uleb128 0x40
 1223 007e 18       		.uleb128 0x18
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 31


 1224 007f 9642     		.uleb128 0x2116
 1225 0081 19       		.uleb128 0x19
 1226 0082 01       		.uleb128 0x1
 1227 0083 13       		.uleb128 0x13
 1228 0084 00       		.byte	0
 1229 0085 00       		.byte	0
 1230 0086 0B       		.uleb128 0xb
 1231 0087 05       		.uleb128 0x5
 1232 0088 00       		.byte	0
 1233 0089 03       		.uleb128 0x3
 1234 008a 0E       		.uleb128 0xe
 1235 008b 3A       		.uleb128 0x3a
 1236 008c 0B       		.uleb128 0xb
 1237 008d 3B       		.uleb128 0x3b
 1238 008e 0B       		.uleb128 0xb
 1239 008f 49       		.uleb128 0x49
 1240 0090 13       		.uleb128 0x13
 1241 0091 02       		.uleb128 0x2
 1242 0092 18       		.uleb128 0x18
 1243 0093 00       		.byte	0
 1244 0094 00       		.byte	0
 1245 0095 0C       		.uleb128 0xc
 1246 0096 34       		.uleb128 0x34
 1247 0097 00       		.byte	0
 1248 0098 03       		.uleb128 0x3
 1249 0099 0E       		.uleb128 0xe
 1250 009a 3A       		.uleb128 0x3a
 1251 009b 0B       		.uleb128 0xb
 1252 009c 3B       		.uleb128 0x3b
 1253 009d 0B       		.uleb128 0xb
 1254 009e 49       		.uleb128 0x49
 1255 009f 13       		.uleb128 0x13
 1256 00a0 02       		.uleb128 0x2
 1257 00a1 18       		.uleb128 0x18
 1258 00a2 00       		.byte	0
 1259 00a3 00       		.byte	0
 1260 00a4 0D       		.uleb128 0xd
 1261 00a5 2E       		.uleb128 0x2e
 1262 00a6 01       		.byte	0x1
 1263 00a7 03       		.uleb128 0x3
 1264 00a8 0E       		.uleb128 0xe
 1265 00a9 3A       		.uleb128 0x3a
 1266 00aa 0B       		.uleb128 0xb
 1267 00ab 3B       		.uleb128 0x3b
 1268 00ac 05       		.uleb128 0x5
 1269 00ad 27       		.uleb128 0x27
 1270 00ae 19       		.uleb128 0x19
 1271 00af 11       		.uleb128 0x11
 1272 00b0 01       		.uleb128 0x1
 1273 00b1 12       		.uleb128 0x12
 1274 00b2 06       		.uleb128 0x6
 1275 00b3 40       		.uleb128 0x40
 1276 00b4 18       		.uleb128 0x18
 1277 00b5 9642     		.uleb128 0x2116
 1278 00b7 19       		.uleb128 0x19
 1279 00b8 01       		.uleb128 0x1
 1280 00b9 13       		.uleb128 0x13
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 32


 1281 00ba 00       		.byte	0
 1282 00bb 00       		.byte	0
 1283 00bc 0E       		.uleb128 0xe
 1284 00bd 05       		.uleb128 0x5
 1285 00be 00       		.byte	0
 1286 00bf 03       		.uleb128 0x3
 1287 00c0 0E       		.uleb128 0xe
 1288 00c1 3A       		.uleb128 0x3a
 1289 00c2 0B       		.uleb128 0xb
 1290 00c3 3B       		.uleb128 0x3b
 1291 00c4 05       		.uleb128 0x5
 1292 00c5 49       		.uleb128 0x49
 1293 00c6 13       		.uleb128 0x13
 1294 00c7 02       		.uleb128 0x2
 1295 00c8 18       		.uleb128 0x18
 1296 00c9 00       		.byte	0
 1297 00ca 00       		.byte	0
 1298 00cb 0F       		.uleb128 0xf
 1299 00cc 34       		.uleb128 0x34
 1300 00cd 00       		.byte	0
 1301 00ce 03       		.uleb128 0x3
 1302 00cf 0E       		.uleb128 0xe
 1303 00d0 3A       		.uleb128 0x3a
 1304 00d1 0B       		.uleb128 0xb
 1305 00d2 3B       		.uleb128 0x3b
 1306 00d3 05       		.uleb128 0x5
 1307 00d4 49       		.uleb128 0x49
 1308 00d5 13       		.uleb128 0x13
 1309 00d6 02       		.uleb128 0x2
 1310 00d7 18       		.uleb128 0x18
 1311 00d8 00       		.byte	0
 1312 00d9 00       		.byte	0
 1313 00da 10       		.uleb128 0x10
 1314 00db 2E       		.uleb128 0x2e
 1315 00dc 01       		.byte	0x1
 1316 00dd 3F       		.uleb128 0x3f
 1317 00de 19       		.uleb128 0x19
 1318 00df 03       		.uleb128 0x3
 1319 00e0 0E       		.uleb128 0xe
 1320 00e1 3A       		.uleb128 0x3a
 1321 00e2 0B       		.uleb128 0xb
 1322 00e3 3B       		.uleb128 0x3b
 1323 00e4 05       		.uleb128 0x5
 1324 00e5 27       		.uleb128 0x27
 1325 00e6 19       		.uleb128 0x19
 1326 00e7 49       		.uleb128 0x49
 1327 00e8 13       		.uleb128 0x13
 1328 00e9 11       		.uleb128 0x11
 1329 00ea 01       		.uleb128 0x1
 1330 00eb 12       		.uleb128 0x12
 1331 00ec 06       		.uleb128 0x6
 1332 00ed 40       		.uleb128 0x40
 1333 00ee 18       		.uleb128 0x18
 1334 00ef 9742     		.uleb128 0x2117
 1335 00f1 19       		.uleb128 0x19
 1336 00f2 01       		.uleb128 0x1
 1337 00f3 13       		.uleb128 0x13
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 33


 1338 00f4 00       		.byte	0
 1339 00f5 00       		.byte	0
 1340 00f6 11       		.uleb128 0x11
 1341 00f7 34       		.uleb128 0x34
 1342 00f8 00       		.byte	0
 1343 00f9 03       		.uleb128 0x3
 1344 00fa 0E       		.uleb128 0xe
 1345 00fb 3A       		.uleb128 0x3a
 1346 00fc 0B       		.uleb128 0xb
 1347 00fd 3B       		.uleb128 0x3b
 1348 00fe 05       		.uleb128 0x5
 1349 00ff 49       		.uleb128 0x49
 1350 0100 13       		.uleb128 0x13
 1351 0101 3F       		.uleb128 0x3f
 1352 0102 19       		.uleb128 0x19
 1353 0103 3C       		.uleb128 0x3c
 1354 0104 19       		.uleb128 0x19
 1355 0105 00       		.byte	0
 1356 0106 00       		.byte	0
 1357 0107 12       		.uleb128 0x12
 1358 0108 34       		.uleb128 0x34
 1359 0109 00       		.byte	0
 1360 010a 03       		.uleb128 0x3
 1361 010b 0E       		.uleb128 0xe
 1362 010c 3A       		.uleb128 0x3a
 1363 010d 0B       		.uleb128 0xb
 1364 010e 3B       		.uleb128 0x3b
 1365 010f 0B       		.uleb128 0xb
 1366 0110 49       		.uleb128 0x49
 1367 0111 13       		.uleb128 0x13
 1368 0112 3F       		.uleb128 0x3f
 1369 0113 19       		.uleb128 0x19
 1370 0114 02       		.uleb128 0x2
 1371 0115 18       		.uleb128 0x18
 1372 0116 00       		.byte	0
 1373 0117 00       		.byte	0
 1374 0118 00       		.byte	0
 1375              		.section	.debug_aranges,"",%progbits
 1376 0000 4C000000 		.4byte	0x4c
 1377 0004 0200     		.2byte	0x2
 1378 0006 00000000 		.4byte	.Ldebug_info0
 1379 000a 04       		.byte	0x4
 1380 000b 00       		.byte	0
 1381 000c 0000     		.2byte	0
 1382 000e 0000     		.2byte	0
 1383 0010 00000000 		.4byte	.LFB68
 1384 0014 D0000000 		.4byte	.LFE68-.LFB68
 1385 0018 00000000 		.4byte	.LFB69
 1386 001c 2C000000 		.4byte	.LFE69-.LFB69
 1387 0020 00000000 		.4byte	.LFB70
 1388 0024 34000000 		.4byte	.LFE70-.LFB70
 1389 0028 00000000 		.4byte	.LFB71
 1390 002c C0000000 		.4byte	.LFE71-.LFB71
 1391 0030 00000000 		.4byte	.LFB72
 1392 0034 4C000000 		.4byte	.LFE72-.LFB72
 1393 0038 00000000 		.4byte	.LFB73
 1394 003c 70000000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 34


 1395 0040 00000000 		.4byte	.LFB74
 1396 0044 7C000000 		.4byte	.LFE74-.LFB74
 1397 0048 00000000 		.4byte	0
 1398 004c 00000000 		.4byte	0
 1399              		.section	.debug_ranges,"",%progbits
 1400              	.Ldebug_ranges0:
 1401 0000 00000000 		.4byte	.LFB68
 1402 0004 D0000000 		.4byte	.LFE68
 1403 0008 00000000 		.4byte	.LFB69
 1404 000c 2C000000 		.4byte	.LFE69
 1405 0010 00000000 		.4byte	.LFB70
 1406 0014 34000000 		.4byte	.LFE70
 1407 0018 00000000 		.4byte	.LFB71
 1408 001c C0000000 		.4byte	.LFE71
 1409 0020 00000000 		.4byte	.LFB72
 1410 0024 4C000000 		.4byte	.LFE72
 1411 0028 00000000 		.4byte	.LFB73
 1412 002c 70000000 		.4byte	.LFE73
 1413 0030 00000000 		.4byte	.LFB74
 1414 0034 7C000000 		.4byte	.LFE74
 1415 0038 00000000 		.4byte	0
 1416 003c 00000000 		.4byte	0
 1417              		.section	.debug_line,"",%progbits
 1418              	.Ldebug_line0:
 1419 0000 A0020000 		.section	.debug_str,"MS",%progbits,1
 1419      0200B301 
 1419      00000201 
 1419      FB0E0D00 
 1419      01010101 
 1420              	.LASF56:
 1421 0000 76537461 		.ascii	"vStartDynamicPriorityTasks\000"
 1421      72744479 
 1421      6E616D69 
 1421      63507269 
 1421      6F726974 
 1422              	.LASF45:
 1423 001b 756C436F 		.ascii	"ulCounter\000"
 1423      756E7465 
 1423      7200
 1424              	.LASF33:
 1425 0025 734C6F6F 		.ascii	"sLoops\000"
 1425      707300
 1426              	.LASF4:
 1427 002c 5F5F7569 		.ascii	"__uint8_t\000"
 1427      6E74385F 
 1427      7400
 1428              	.LASF29:
 1429 0036 70756C43 		.ascii	"pulCounter\000"
 1429      6F756E74 
 1429      657200
 1430              	.LASF23:
 1431 0041 5469636B 		.ascii	"TickType_t\000"
 1431      54797065 
 1431      5F7400
 1432              	.LASF38:
 1433 004c 756C5265 		.ascii	"ulReceivedValue\000"
 1433      63656976 
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 35


 1433      65645661 
 1433      6C756500 
 1434              	.LASF7:
 1435 005c 5F5F696E 		.ascii	"__int32_t\000"
 1435      7433325F 
 1435      7400
 1436              	.LASF52:
 1437 0066 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1437      4320342E 
 1437      392E3320 
 1437      32303135 
 1437      30333033 
 1438 0099 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1438      20726576 
 1438      6973696F 
 1438      6E203232 
 1438      31323230 
 1439 00cc 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1439      66756E63 
 1439      74696F6E 
 1439      2D736563 
 1439      74696F6E 
 1440              	.LASF25:
 1441 00f4 51756575 		.ascii	"QueueHandle_t\000"
 1441      6548616E 
 1441      646C655F 
 1441      7400
 1442              	.LASF9:
 1443 0102 5F5F7569 		.ascii	"__uint32_t\000"
 1443      6E743332 
 1443      5F7400
 1444              	.LASF20:
 1445 010d 646F7562 		.ascii	"double\000"
 1445      6C6500
 1446              	.LASF57:
 1447 0114 78417265 		.ascii	"xAreDynamicPriorityTasksStillRunning\000"
 1447      44796E61 
 1447      6D696350 
 1447      72696F72 
 1447      69747954 
 1448              	.LASF35:
 1449 0139 76517565 		.ascii	"vQueueSendWhenSuspendedTask\000"
 1449      75655365 
 1449      6E645768 
 1449      656E5375 
 1449      7370656E 
 1450              	.LASF17:
 1451 0155 696E7433 		.ascii	"int32_t\000"
 1451      325F7400 
 1452              	.LASF40:
 1453 015d 75734C61 		.ascii	"usLastTaskCheck\000"
 1453      73745461 
 1453      736B4368 
 1453      65636B00 
 1454              	.LASF43:
 1455 016d 78436F6E 		.ascii	"xContinuousIncrementHandle\000"
 1455      74696E75 
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 36


 1455      6F757349 
 1455      6E637265 
 1455      6D656E74 
 1456              	.LASF19:
 1457 0188 666C6F61 		.ascii	"float\000"
 1457      7400
 1458              	.LASF26:
 1459 018e 764C696D 		.ascii	"vLimitedIncrementTask\000"
 1459      69746564 
 1459      496E6372 
 1459      656D656E 
 1459      74546173 
 1460              	.LASF41:
 1461 01a4 756C4C61 		.ascii	"ulLastExpectedValue\000"
 1461      73744578 
 1461      70656374 
 1461      65645661 
 1461      6C756500 
 1462              	.LASF10:
 1463 01b8 6C6F6E67 		.ascii	"long unsigned int\000"
 1463      20756E73 
 1463      69676E65 
 1463      6420696E 
 1463      7400
 1464              	.LASF53:
 1465 01ca 2E2E5C2E 		.ascii	"..\\..\\Common\\Minimal\\dynamic.c\000"
 1465      2E5C436F 
 1465      6D6D6F6E 
 1465      5C4D696E 
 1465      696D616C 
 1466              	.LASF51:
 1467 01e9 78537573 		.ascii	"xSuspendedTestQueue\000"
 1467      70656E64 
 1467      65645465 
 1467      73745175 
 1467      65756500 
 1468              	.LASF50:
 1469 01fd 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1469      52784275 
 1469      66666572 
 1469      00
 1470              	.LASF37:
 1471 020a 76517565 		.ascii	"vQueueReceiveWhenSuspendedTask\000"
 1471      75655265 
 1471      63656976 
 1471      65576865 
 1471      6E537573 
 1472              	.LASF27:
 1473 0229 76436F6E 		.ascii	"vContinuousIncrementTask\000"
 1473      74696E75 
 1473      6F757349 
 1473      6E637265 
 1473      6D656E74 
 1474              	.LASF36:
 1475 0242 756C5661 		.ascii	"ulValueToSend\000"
 1475      6C756554 
 1475      6F53656E 
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 37


 1475      6400
 1476              	.LASF47:
 1477 0250 78537573 		.ascii	"xSuspendedQueueSendError\000"
 1477      70656E64 
 1477      65645175 
 1477      65756553 
 1477      656E6445 
 1478              	.LASF34:
 1479 0269 73457272 		.ascii	"sError\000"
 1479      6F7200
 1480              	.LASF3:
 1481 0270 73686F72 		.ascii	"short int\000"
 1481      7420696E 
 1481      7400
 1482              	.LASF55:
 1483 027a 5461736B 		.ascii	"TaskControlBlock_t\000"
 1483      436F6E74 
 1483      726F6C42 
 1483      6C6F636B 
 1483      5F7400
 1484              	.LASF42:
 1485 028d 78526574 		.ascii	"xReturn\000"
 1485      75726E00 
 1486              	.LASF30:
 1487 0295 75784F75 		.ascii	"uxOurPriority\000"
 1487      72507269 
 1487      6F726974 
 1487      7900
 1488              	.LASF2:
 1489 02a3 756E7369 		.ascii	"unsigned char\000"
 1489      676E6564 
 1489      20636861 
 1489      7200
 1490              	.LASF0:
 1491 02b1 756E7369 		.ascii	"unsigned int\000"
 1491      676E6564 
 1491      20696E74 
 1491      00
 1492              	.LASF12:
 1493 02be 6C6F6E67 		.ascii	"long long unsigned int\000"
 1493      206C6F6E 
 1493      6720756E 
 1493      7369676E 
 1493      65642069 
 1494              	.LASF15:
 1495 02d5 75696E74 		.ascii	"uint8_t\000"
 1495      385F7400 
 1496              	.LASF54:
 1497 02dd 453A5C47 		.ascii	"E:\\GitHub\\FreeRTOS\\freertos-code-2543-trunk\\fre"
 1497      69744875 
 1497      625C4672 
 1497      65655254 
 1497      4F535C66 
 1498 030c 6572746F 		.ascii	"ertos-code-2543-trunk\\FreeRTOS\\Demo\\CORTEX_CY8C5"
 1498      732D636F 
 1498      64652D32 
 1498      3534332D 
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 38


 1498      7472756E 
 1499 033c 3538385F 		.ascii	"588_PSoC_Creator_GCC\\FreeRTOS_Demo.cydsn\000"
 1499      50536F43 
 1499      5F437265 
 1499      61746F72 
 1499      5F474343 
 1500              	.LASF1:
 1501 0365 7369676E 		.ascii	"signed char\000"
 1501      65642063 
 1501      68617200 
 1502              	.LASF31:
 1503 0371 76436F75 		.ascii	"vCounterControlTask\000"
 1503      6E746572 
 1503      436F6E74 
 1503      726F6C54 
 1503      61736B00 
 1504              	.LASF13:
 1505 0385 73697A65 		.ascii	"sizetype\000"
 1505      74797065 
 1505      00
 1506              	.LASF11:
 1507 038e 6C6F6E67 		.ascii	"long long int\000"
 1507      206C6F6E 
 1507      6720696E 
 1507      7400
 1508              	.LASF14:
 1509 039c 63686172 		.ascii	"char\000"
 1509      00
 1510              	.LASF28:
 1511 03a1 70765061 		.ascii	"pvParameters\000"
 1511      72616D65 
 1511      74657273 
 1511      00
 1512              	.LASF39:
 1513 03ae 78476F74 		.ascii	"xGotValue\000"
 1513      56616C75 
 1513      6500
 1514              	.LASF49:
 1515 03b8 756C4578 		.ascii	"ulExpectedValue\000"
 1515      70656374 
 1515      65645661 
 1515      6C756500 
 1516              	.LASF44:
 1517 03c8 784C696D 		.ascii	"xLimitedIncrementHandle\000"
 1517      69746564 
 1517      496E6372 
 1517      656D656E 
 1517      7448616E 
 1518              	.LASF5:
 1519 03e0 5F5F7569 		.ascii	"__uint16_t\000"
 1519      6E743136 
 1519      5F7400
 1520              	.LASF16:
 1521 03eb 75696E74 		.ascii	"uint16_t\000"
 1521      31365F74 
 1521      00
 1522              	.LASF24:
ARM GAS  C:\Users\Jamie\AppData\Local\Temp\ccemblTo.s 			page 39


 1523 03f4 5461736B 		.ascii	"TaskHandle_t\000"
 1523      48616E64 
 1523      6C655F74 
 1523      00
 1524              	.LASF18:
 1525 0401 75696E74 		.ascii	"uint32_t\000"
 1525      33325F74 
 1525      00
 1526              	.LASF8:
 1527 040a 6C6F6E67 		.ascii	"long int\000"
 1527      20696E74 
 1527      00
 1528              	.LASF32:
 1529 0413 756C4C61 		.ascii	"ulLastCounter\000"
 1529      7374436F 
 1529      756E7465 
 1529      7200
 1530              	.LASF48:
 1531 0421 78537573 		.ascii	"xSuspendedQueueReceiveError\000"
 1531      70656E64 
 1531      65645175 
 1531      65756552 
 1531      65636569 
 1532              	.LASF46:
 1533 043d 75734368 		.ascii	"usCheckVariable\000"
 1533      65636B56 
 1533      61726961 
 1533      626C6500 
 1534              	.LASF6:
 1535 044d 73686F72 		.ascii	"short unsigned int\000"
 1535      7420756E 
 1535      7369676E 
 1535      65642069 
 1535      6E7400
 1536              	.LASF22:
 1537 0460 55426173 		.ascii	"UBaseType_t\000"
 1537      65547970 
 1537      655F7400 
 1538              	.LASF21:
 1539 046c 42617365 		.ascii	"BaseType_t\000"
 1539      54797065 
 1539      5F7400
 1540              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
