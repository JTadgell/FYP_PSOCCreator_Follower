ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"queue.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	xQueueRegistry,80,4
  19              		.section	.text.xQueueGenericReset,"ax",%progbits
  20              		.align	2
  21              		.global	xQueueGenericReset
  22              		.thumb
  23              		.thumb_func
  24              		.type	xQueueGenericReset, %function
  25              	xQueueGenericReset:
  26              	.LFB68:
  27              		.file 1 "..\\..\\FreeRTOS_Source\\queue.c"
   1:..\..\FreeRTOS_Source/queue.c **** /*
   2:..\..\FreeRTOS_Source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source/queue.c ****  *
   5:..\..\FreeRTOS_Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source/queue.c ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source/queue.c ****  *
  12:..\..\FreeRTOS_Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source/queue.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source/queue.c ****  *
  15:..\..\FreeRTOS_Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source/queue.c ****  *
  22:..\..\FreeRTOS_Source/queue.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source/queue.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source/queue.c ****  *
  25:..\..\FreeRTOS_Source/queue.c ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source/queue.c ****  */
  27:..\..\FreeRTOS_Source/queue.c **** 
  28:..\..\FreeRTOS_Source/queue.c **** #include <stdlib.h>
  29:..\..\FreeRTOS_Source/queue.c **** #include <string.h>
  30:..\..\FreeRTOS_Source/queue.c **** 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 2


  31:..\..\FreeRTOS_Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:..\..\FreeRTOS_Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:..\..\FreeRTOS_Source/queue.c **** task.h is included from an application file. */
  34:..\..\FreeRTOS_Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:..\..\FreeRTOS_Source/queue.c **** 
  36:..\..\FreeRTOS_Source/queue.c **** #include "FreeRTOS.h"
  37:..\..\FreeRTOS_Source/queue.c **** #include "task.h"
  38:..\..\FreeRTOS_Source/queue.c **** #include "queue.h"
  39:..\..\FreeRTOS_Source/queue.c **** 
  40:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:..\..\FreeRTOS_Source/queue.c **** 	#include "croutine.h"
  42:..\..\FreeRTOS_Source/queue.c **** #endif
  43:..\..\FreeRTOS_Source/queue.c **** 
  44:..\..\FreeRTOS_Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:..\..\FreeRTOS_Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:..\..\FreeRTOS_Source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:..\..\FreeRTOS_Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:..\..\FreeRTOS_Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:..\..\FreeRTOS_Source/queue.c **** 
  50:..\..\FreeRTOS_Source/queue.c **** 
  51:..\..\FreeRTOS_Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:..\..\FreeRTOS_Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:..\..\FreeRTOS_Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:..\..\FreeRTOS_Source/queue.c **** 
  55:..\..\FreeRTOS_Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:..\..\FreeRTOS_Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:..\..\FreeRTOS_Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:..\..\FreeRTOS_Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:..\..\FreeRTOS_Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:..\..\FreeRTOS_Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:..\..\FreeRTOS_Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:..\..\FreeRTOS_Source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:..\..\FreeRTOS_Source/queue.c **** against the coding standard (although an exception to the standard has been
  64:..\..\FreeRTOS_Source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:..\..\FreeRTOS_Source/queue.c **** structure member). */
  66:..\..\FreeRTOS_Source/queue.c **** #define pxMutexHolder					pcTail
  67:..\..\FreeRTOS_Source/queue.c **** #define uxQueueType						pcHead
  68:..\..\FreeRTOS_Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:..\..\FreeRTOS_Source/queue.c **** 
  70:..\..\FreeRTOS_Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:..\..\FreeRTOS_Source/queue.c **** zero. */
  72:..\..\FreeRTOS_Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:..\..\FreeRTOS_Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:..\..\FreeRTOS_Source/queue.c **** 
  75:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:..\..\FreeRTOS_Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:..\..\FreeRTOS_Source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:..\..\FreeRTOS_Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:..\..\FreeRTOS_Source/queue.c **** #else
  80:..\..\FreeRTOS_Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:..\..\FreeRTOS_Source/queue.c **** #endif
  82:..\..\FreeRTOS_Source/queue.c **** 
  83:..\..\FreeRTOS_Source/queue.c **** /*
  84:..\..\FreeRTOS_Source/queue.c ****  * Definition of the queue used by the scheduler.
  85:..\..\FreeRTOS_Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:..\..\FreeRTOS_Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:..\..\FreeRTOS_Source/queue.c ****  */
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 3


  88:..\..\FreeRTOS_Source/queue.c **** typedef struct QueueDefinition
  89:..\..\FreeRTOS_Source/queue.c **** {
  90:..\..\FreeRTOS_Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:..\..\FreeRTOS_Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:..\..\FreeRTOS_Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:..\..\FreeRTOS_Source/queue.c **** 
  94:..\..\FreeRTOS_Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:..\..\FreeRTOS_Source/queue.c **** 	{
  96:..\..\FreeRTOS_Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:..\..\FreeRTOS_Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:..\..\FreeRTOS_Source/queue.c **** 	} u;
  99:..\..\FreeRTOS_Source/queue.c **** 
 100:..\..\FreeRTOS_Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:..\..\FreeRTOS_Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:..\..\FreeRTOS_Source/queue.c **** 
 103:..\..\FreeRTOS_Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:..\..\FreeRTOS_Source/queue.c **** 
 107:..\..\FreeRTOS_Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:..\..\FreeRTOS_Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:..\..\FreeRTOS_Source/queue.c **** 
 110:..\..\FreeRTOS_Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:..\..\FreeRTOS_Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:..\..\FreeRTOS_Source/queue.c **** 	#endif
 113:..\..\FreeRTOS_Source/queue.c **** 
 114:..\..\FreeRTOS_Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:..\..\FreeRTOS_Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:..\..\FreeRTOS_Source/queue.c **** 	#endif
 117:..\..\FreeRTOS_Source/queue.c **** 
 118:..\..\FreeRTOS_Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:..\..\FreeRTOS_Source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:..\..\FreeRTOS_Source/queue.c **** 		uint8_t ucQueueType;
 121:..\..\FreeRTOS_Source/queue.c **** 	#endif
 122:..\..\FreeRTOS_Source/queue.c **** 
 123:..\..\FreeRTOS_Source/queue.c **** } xQUEUE;
 124:..\..\FreeRTOS_Source/queue.c **** 
 125:..\..\FreeRTOS_Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:..\..\FreeRTOS_Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:..\..\FreeRTOS_Source/queue.c **** typedef xQUEUE Queue_t;
 128:..\..\FreeRTOS_Source/queue.c **** 
 129:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 130:..\..\FreeRTOS_Source/queue.c **** 
 131:..\..\FreeRTOS_Source/queue.c **** /*
 132:..\..\FreeRTOS_Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:..\..\FreeRTOS_Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:..\..\FreeRTOS_Source/queue.c ****  */
 135:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:..\..\FreeRTOS_Source/queue.c **** 
 137:..\..\FreeRTOS_Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:..\..\FreeRTOS_Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:..\..\FreeRTOS_Source/queue.c **** 	more user friendly. */
 140:..\..\FreeRTOS_Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:..\..\FreeRTOS_Source/queue.c **** 	{
 142:..\..\FreeRTOS_Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:..\..\FreeRTOS_Source/queue.c **** 		QueueHandle_t xHandle;
 144:..\..\FreeRTOS_Source/queue.c **** 	} xQueueRegistryItem;
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 4


 145:..\..\FreeRTOS_Source/queue.c **** 
 146:..\..\FreeRTOS_Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 147:..\..\FreeRTOS_Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:..\..\FreeRTOS_Source/queue.c **** 	debuggers. */
 149:..\..\FreeRTOS_Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:..\..\FreeRTOS_Source/queue.c **** 
 151:..\..\FreeRTOS_Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:..\..\FreeRTOS_Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:..\..\FreeRTOS_Source/queue.c **** 	array position being vacant. */
 154:..\..\FreeRTOS_Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:..\..\FreeRTOS_Source/queue.c **** 
 156:..\..\FreeRTOS_Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:..\..\FreeRTOS_Source/queue.c **** 
 158:..\..\FreeRTOS_Source/queue.c **** /*
 159:..\..\FreeRTOS_Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:..\..\FreeRTOS_Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:..\..\FreeRTOS_Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:..\..\FreeRTOS_Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:..\..\FreeRTOS_Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:..\..\FreeRTOS_Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:..\..\FreeRTOS_Source/queue.c ****  */
 166:..\..\FreeRTOS_Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:..\..\FreeRTOS_Source/queue.c **** 
 168:..\..\FreeRTOS_Source/queue.c **** /*
 169:..\..\FreeRTOS_Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:..\..\FreeRTOS_Source/queue.c ****  *
 171:..\..\FreeRTOS_Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:..\..\FreeRTOS_Source/queue.c ****  */
 173:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:..\..\FreeRTOS_Source/queue.c **** 
 175:..\..\FreeRTOS_Source/queue.c **** /*
 176:..\..\FreeRTOS_Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:..\..\FreeRTOS_Source/queue.c ****  *
 178:..\..\FreeRTOS_Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:..\..\FreeRTOS_Source/queue.c ****  */
 180:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:..\..\FreeRTOS_Source/queue.c **** 
 182:..\..\FreeRTOS_Source/queue.c **** /*
 183:..\..\FreeRTOS_Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:..\..\FreeRTOS_Source/queue.c ****  * back of the queue.
 185:..\..\FreeRTOS_Source/queue.c ****  */
 186:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:..\..\FreeRTOS_Source/queue.c **** 
 188:..\..\FreeRTOS_Source/queue.c **** /*
 189:..\..\FreeRTOS_Source/queue.c ****  * Copies an item out of a queue.
 190:..\..\FreeRTOS_Source/queue.c ****  */
 191:..\..\FreeRTOS_Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:..\..\FreeRTOS_Source/queue.c **** 
 193:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:..\..\FreeRTOS_Source/queue.c **** 	/*
 195:..\..\FreeRTOS_Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:..\..\FreeRTOS_Source/queue.c **** 	 * the queue set that the queue contains data.
 197:..\..\FreeRTOS_Source/queue.c **** 	 */
 198:..\..\FreeRTOS_Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:..\..\FreeRTOS_Source/queue.c **** #endif
 200:..\..\FreeRTOS_Source/queue.c **** 
 201:..\..\FreeRTOS_Source/queue.c **** /*
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 5


 202:..\..\FreeRTOS_Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 203:..\..\FreeRTOS_Source/queue.c ****  * dynamically to fill in the structure's members.
 204:..\..\FreeRTOS_Source/queue.c ****  */
 205:..\..\FreeRTOS_Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:..\..\FreeRTOS_Source/queue.c **** 
 207:..\..\FreeRTOS_Source/queue.c **** /*
 208:..\..\FreeRTOS_Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:..\..\FreeRTOS_Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:..\..\FreeRTOS_Source/queue.c ****  * as a mutex.
 211:..\..\FreeRTOS_Source/queue.c ****  */
 212:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:..\..\FreeRTOS_Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:..\..\FreeRTOS_Source/queue.c **** #endif
 215:..\..\FreeRTOS_Source/queue.c **** 
 216:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:..\..\FreeRTOS_Source/queue.c **** 	/*
 218:..\..\FreeRTOS_Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:..\..\FreeRTOS_Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:..\..\FreeRTOS_Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:..\..\FreeRTOS_Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:..\..\FreeRTOS_Source/queue.c **** 	 * that priority.
 223:..\..\FreeRTOS_Source/queue.c **** 	 */
 224:..\..\FreeRTOS_Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:..\..\FreeRTOS_Source/queue.c **** #endif
 226:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 227:..\..\FreeRTOS_Source/queue.c **** 
 228:..\..\FreeRTOS_Source/queue.c **** /*
 229:..\..\FreeRTOS_Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:..\..\FreeRTOS_Source/queue.c ****  * accessing the queue event lists.
 231:..\..\FreeRTOS_Source/queue.c ****  */
 232:..\..\FreeRTOS_Source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();									\
 234:..\..\FreeRTOS_Source/queue.c **** 	{														\
 235:..\..\FreeRTOS_Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:..\..\FreeRTOS_Source/queue.c **** 		{													\
 237:..\..\FreeRTOS_Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:..\..\FreeRTOS_Source/queue.c **** 		}													\
 239:..\..\FreeRTOS_Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:..\..\FreeRTOS_Source/queue.c **** 		{													\
 241:..\..\FreeRTOS_Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:..\..\FreeRTOS_Source/queue.c **** 		}													\
 243:..\..\FreeRTOS_Source/queue.c **** 	}														\
 244:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL()
 245:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 246:..\..\FreeRTOS_Source/queue.c **** 
 247:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:..\..\FreeRTOS_Source/queue.c **** {
  28              		.loc 1 248 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 6


  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  41 0008 3960     		str	r1, [r7]
 249:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  42              		.loc 1 249 0
  43 000a 7B68     		ldr	r3, [r7, #4]
  44 000c FB60     		str	r3, [r7, #12]
 250:..\..\FreeRTOS_Source/queue.c **** 
 251:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
 252:..\..\FreeRTOS_Source/queue.c **** 
 253:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
  45              		.loc 1 253 0
  46 000e FFF7FEFF 		bl	vPortEnterCritical
 254:..\..\FreeRTOS_Source/queue.c **** 	{
 255:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  47              		.loc 1 255 0
  48 0012 FB68     		ldr	r3, [r7, #12]
  49 0014 1A68     		ldr	r2, [r3]
  50 0016 FB68     		ldr	r3, [r7, #12]
  51 0018 DB6B     		ldr	r3, [r3, #60]
  52 001a F968     		ldr	r1, [r7, #12]
  53 001c 096C     		ldr	r1, [r1, #64]
  54 001e 01FB03F3 		mul	r3, r1, r3
  55 0022 1A44     		add	r2, r2, r3
  56 0024 FB68     		ldr	r3, [r7, #12]
  57 0026 5A60     		str	r2, [r3, #4]
 256:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  58              		.loc 1 256 0
  59 0028 FB68     		ldr	r3, [r7, #12]
  60 002a 0022     		movs	r2, #0
  61 002c 9A63     		str	r2, [r3, #56]
 257:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  62              		.loc 1 257 0
  63 002e FB68     		ldr	r3, [r7, #12]
  64 0030 1A68     		ldr	r2, [r3]
  65 0032 FB68     		ldr	r3, [r7, #12]
  66 0034 9A60     		str	r2, [r3, #8]
 258:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
  67              		.loc 1 258 0
  68 0036 FB68     		ldr	r3, [r7, #12]
  69 0038 1A68     		ldr	r2, [r3]
  70 003a FB68     		ldr	r3, [r7, #12]
  71 003c DB6B     		ldr	r3, [r3, #60]
  72 003e 013B     		subs	r3, r3, #1
  73 0040 F968     		ldr	r1, [r7, #12]
  74 0042 096C     		ldr	r1, [r1, #64]
  75 0044 01FB03F3 		mul	r3, r1, r3
  76 0048 1A44     		add	r2, r2, r3
  77 004a FB68     		ldr	r3, [r7, #12]
  78 004c DA60     		str	r2, [r3, #12]
 259:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
  79              		.loc 1 259 0
  80 004e FB68     		ldr	r3, [r7, #12]
  81 0050 FF22     		movs	r2, #255
  82 0052 83F84420 		strb	r2, [r3, #68]
 260:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 7


  83              		.loc 1 260 0
  84 0056 FB68     		ldr	r3, [r7, #12]
  85 0058 FF22     		movs	r2, #255
  86 005a 83F84520 		strb	r2, [r3, #69]
 261:..\..\FreeRTOS_Source/queue.c **** 
 262:..\..\FreeRTOS_Source/queue.c **** 		if( xNewQueue == pdFALSE )
  87              		.loc 1 262 0
  88 005e 3B68     		ldr	r3, [r7]
  89 0060 002B     		cmp	r3, #0
  90 0062 14D1     		bne	.L2
 263:..\..\FreeRTOS_Source/queue.c **** 		{
 264:..\..\FreeRTOS_Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:..\..\FreeRTOS_Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:..\..\FreeRTOS_Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:..\..\FreeRTOS_Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:..\..\FreeRTOS_Source/queue.c **** 			it will be possible to write to it. */
 269:..\..\FreeRTOS_Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  91              		.loc 1 269 0
  92 0064 FB68     		ldr	r3, [r7, #12]
  93 0066 1B69     		ldr	r3, [r3, #16]
  94 0068 002B     		cmp	r3, #0
  95 006a 1AD0     		beq	.L3
 270:..\..\FreeRTOS_Source/queue.c **** 			{
 271:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  96              		.loc 1 271 0
  97 006c FB68     		ldr	r3, [r7, #12]
  98 006e 1033     		adds	r3, r3, #16
  99 0070 1846     		mov	r0, r3
 100 0072 FFF7FEFF 		bl	xTaskRemoveFromEventList
 101 0076 0346     		mov	r3, r0
 102 0078 002B     		cmp	r3, #0
 103 007a 12D0     		beq	.L3
 272:..\..\FreeRTOS_Source/queue.c **** 				{
 273:..\..\FreeRTOS_Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 104              		.loc 1 273 0
 105 007c 0C4B     		ldr	r3, .L5
 106 007e 4FF08052 		mov	r2, #268435456
 107 0082 1A60     		str	r2, [r3]
 108              	@ 273 "..\..\FreeRTOS_Source\queue.c" 1
 109 0084 BFF34F8F 		dsb
 110              	@ 0 "" 2
 111              	@ 273 "..\..\FreeRTOS_Source\queue.c" 1
 112 0088 BFF36F8F 		isb
 113              	@ 0 "" 2
 114              		.thumb
 115 008c 09E0     		b	.L3
 116              	.L2:
 274:..\..\FreeRTOS_Source/queue.c **** 				}
 275:..\..\FreeRTOS_Source/queue.c **** 				else
 276:..\..\FreeRTOS_Source/queue.c **** 				{
 277:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:..\..\FreeRTOS_Source/queue.c **** 				}
 279:..\..\FreeRTOS_Source/queue.c **** 			}
 280:..\..\FreeRTOS_Source/queue.c **** 			else
 281:..\..\FreeRTOS_Source/queue.c **** 			{
 282:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:..\..\FreeRTOS_Source/queue.c **** 			}
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 8


 284:..\..\FreeRTOS_Source/queue.c **** 		}
 285:..\..\FreeRTOS_Source/queue.c **** 		else
 286:..\..\FreeRTOS_Source/queue.c **** 		{
 287:..\..\FreeRTOS_Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:..\..\FreeRTOS_Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 117              		.loc 1 288 0
 118 008e FB68     		ldr	r3, [r7, #12]
 119 0090 1033     		adds	r3, r3, #16
 120 0092 1846     		mov	r0, r3
 121 0094 FFF7FEFF 		bl	vListInitialise
 289:..\..\FreeRTOS_Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 122              		.loc 1 289 0
 123 0098 FB68     		ldr	r3, [r7, #12]
 124 009a 2433     		adds	r3, r3, #36
 125 009c 1846     		mov	r0, r3
 126 009e FFF7FEFF 		bl	vListInitialise
 127              	.L3:
 290:..\..\FreeRTOS_Source/queue.c **** 		}
 291:..\..\FreeRTOS_Source/queue.c **** 	}
 292:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 128              		.loc 1 292 0
 129 00a2 FFF7FEFF 		bl	vPortExitCritical
 293:..\..\FreeRTOS_Source/queue.c **** 
 294:..\..\FreeRTOS_Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:..\..\FreeRTOS_Source/queue.c **** 	versions. */
 296:..\..\FreeRTOS_Source/queue.c **** 	return pdPASS;
 130              		.loc 1 296 0
 131 00a6 0123     		movs	r3, #1
 297:..\..\FreeRTOS_Source/queue.c **** }
 132              		.loc 1 297 0
 133 00a8 1846     		mov	r0, r3
 134 00aa 1037     		adds	r7, r7, #16
 135              		.cfi_def_cfa_offset 8
 136 00ac BD46     		mov	sp, r7
 137              		.cfi_def_cfa_register 13
 138              		@ sp needed
 139 00ae 80BD     		pop	{r7, pc}
 140              	.L6:
 141              		.align	2
 142              	.L5:
 143 00b0 04ED00E0 		.word	-536810236
 144              		.cfi_endproc
 145              	.LFE68:
 146              		.size	xQueueGenericReset, .-xQueueGenericReset
 147              		.section	.text.xQueueGenericCreate,"ax",%progbits
 148              		.align	2
 149              		.global	xQueueGenericCreate
 150              		.thumb
 151              		.thumb_func
 152              		.type	xQueueGenericCreate, %function
 153              	xQueueGenericCreate:
 154              	.LFB69:
 298:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 299:..\..\FreeRTOS_Source/queue.c **** 
 300:..\..\FreeRTOS_Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:..\..\FreeRTOS_Source/queue.c **** 
 302:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 9


 303:..\..\FreeRTOS_Source/queue.c **** 	{
 304:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue = NULL;
 305:..\..\FreeRTOS_Source/queue.c **** 
 306:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:..\..\FreeRTOS_Source/queue.c **** 
 308:..\..\FreeRTOS_Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:..\..\FreeRTOS_Source/queue.c **** 		supplied. */
 310:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:..\..\FreeRTOS_Source/queue.c **** 
 312:..\..\FreeRTOS_Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:..\..\FreeRTOS_Source/queue.c **** 		should not be provided if the item size is 0. */
 314:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:..\..\FreeRTOS_Source/queue.c **** 
 317:..\..\FreeRTOS_Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 318:..\..\FreeRTOS_Source/queue.c **** 		{
 319:..\..\FreeRTOS_Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:..\..\FreeRTOS_Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:..\..\FreeRTOS_Source/queue.c **** 			the real queue and semaphore structures. */
 322:..\..\FreeRTOS_Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:..\..\FreeRTOS_Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:..\..\FreeRTOS_Source/queue.c **** 		}
 325:..\..\FreeRTOS_Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:..\..\FreeRTOS_Source/queue.c **** 
 327:..\..\FreeRTOS_Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:..\..\FreeRTOS_Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:..\..\FreeRTOS_Source/queue.c **** 		but is already set. */
 330:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:..\..\FreeRTOS_Source/queue.c **** 
 332:..\..\FreeRTOS_Source/queue.c **** 		if( pxNewQueue != NULL )
 333:..\..\FreeRTOS_Source/queue.c **** 		{
 334:..\..\FreeRTOS_Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:..\..\FreeRTOS_Source/queue.c **** 			{
 336:..\..\FreeRTOS_Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:..\..\FreeRTOS_Source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:..\..\FreeRTOS_Source/queue.c **** 				later deleted. */
 339:..\..\FreeRTOS_Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:..\..\FreeRTOS_Source/queue.c **** 			}
 341:..\..\FreeRTOS_Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:..\..\FreeRTOS_Source/queue.c **** 
 343:..\..\FreeRTOS_Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:..\..\FreeRTOS_Source/queue.c **** 		}
 345:..\..\FreeRTOS_Source/queue.c **** 		else
 346:..\..\FreeRTOS_Source/queue.c **** 		{
 347:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 349:..\..\FreeRTOS_Source/queue.c **** 		}
 350:..\..\FreeRTOS_Source/queue.c **** 
 351:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 352:..\..\FreeRTOS_Source/queue.c **** 	}
 353:..\..\FreeRTOS_Source/queue.c **** 
 354:..\..\FreeRTOS_Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 355:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 356:..\..\FreeRTOS_Source/queue.c **** 
 357:..\..\FreeRTOS_Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 358:..\..\FreeRTOS_Source/queue.c **** 
 359:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 10


 360:..\..\FreeRTOS_Source/queue.c **** 	{
 155              		.loc 1 360 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 32
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 90B5     		push	{r4, r7, lr}
 160              		.cfi_def_cfa_offset 12
 161              		.cfi_offset 4, -12
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8BB0     		sub	sp, sp, #44
 165              		.cfi_def_cfa_offset 56
 166 0004 02AF     		add	r7, sp, #8
 167              		.cfi_def_cfa 7, 48
 168 0006 F860     		str	r0, [r7, #12]
 169 0008 B960     		str	r1, [r7, #8]
 170 000a 1346     		mov	r3, r2
 171 000c FB71     		strb	r3, [r7, #7]
 361:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue;
 362:..\..\FreeRTOS_Source/queue.c **** 	size_t xQueueSizeInBytes;
 363:..\..\FreeRTOS_Source/queue.c **** 	uint8_t *pucQueueStorage;
 364:..\..\FreeRTOS_Source/queue.c **** 
 365:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 366:..\..\FreeRTOS_Source/queue.c **** 
 367:..\..\FreeRTOS_Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 172              		.loc 1 367 0
 173 000e BB68     		ldr	r3, [r7, #8]
 174 0010 002B     		cmp	r3, #0
 175 0012 02D1     		bne	.L8
 368:..\..\FreeRTOS_Source/queue.c **** 		{
 369:..\..\FreeRTOS_Source/queue.c **** 			/* There is not going to be a queue storage area. */
 370:..\..\FreeRTOS_Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 176              		.loc 1 370 0
 177 0014 0023     		movs	r3, #0
 178 0016 FB61     		str	r3, [r7, #28]
 179 0018 04E0     		b	.L9
 180              	.L8:
 371:..\..\FreeRTOS_Source/queue.c **** 		}
 372:..\..\FreeRTOS_Source/queue.c **** 		else
 373:..\..\FreeRTOS_Source/queue.c **** 		{
 374:..\..\FreeRTOS_Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 375:..\..\FreeRTOS_Source/queue.c **** 			can be in the queue at any time. */
 376:..\..\FreeRTOS_Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 181              		.loc 1 376 0
 182 001a FB68     		ldr	r3, [r7, #12]
 183 001c BA68     		ldr	r2, [r7, #8]
 184 001e 02FB03F3 		mul	r3, r2, r3
 185 0022 FB61     		str	r3, [r7, #28]
 186              	.L9:
 377:..\..\FreeRTOS_Source/queue.c **** 		}
 378:..\..\FreeRTOS_Source/queue.c **** 
 379:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 187              		.loc 1 379 0
 188 0024 FB69     		ldr	r3, [r7, #28]
 189 0026 4833     		adds	r3, r3, #72
 190 0028 1846     		mov	r0, r3
 191 002a FFF7FEFF 		bl	pvPortMalloc
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 11


 192 002e B861     		str	r0, [r7, #24]
 380:..\..\FreeRTOS_Source/queue.c **** 
 381:..\..\FreeRTOS_Source/queue.c **** 		if( pxNewQueue != NULL )
 193              		.loc 1 381 0
 194 0030 BB69     		ldr	r3, [r7, #24]
 195 0032 002B     		cmp	r3, #0
 196 0034 0BD0     		beq	.L10
 382:..\..\FreeRTOS_Source/queue.c **** 		{
 383:..\..\FreeRTOS_Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 384:..\..\FreeRTOS_Source/queue.c **** 			storage area. */
 385:..\..\FreeRTOS_Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 197              		.loc 1 385 0
 198 0036 BB69     		ldr	r3, [r7, #24]
 199 0038 4833     		adds	r3, r3, #72
 200 003a 7B61     		str	r3, [r7, #20]
 386:..\..\FreeRTOS_Source/queue.c **** 
 387:..\..\FreeRTOS_Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 388:..\..\FreeRTOS_Source/queue.c **** 			{
 389:..\..\FreeRTOS_Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 390:..\..\FreeRTOS_Source/queue.c **** 				note this task was created dynamically in case it is later
 391:..\..\FreeRTOS_Source/queue.c **** 				deleted. */
 392:..\..\FreeRTOS_Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 393:..\..\FreeRTOS_Source/queue.c **** 			}
 394:..\..\FreeRTOS_Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 395:..\..\FreeRTOS_Source/queue.c **** 
 396:..\..\FreeRTOS_Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 201              		.loc 1 396 0
 202 003c FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 203 003e BB69     		ldr	r3, [r7, #24]
 204 0040 0093     		str	r3, [sp]
 205 0042 F868     		ldr	r0, [r7, #12]
 206 0044 B968     		ldr	r1, [r7, #8]
 207 0046 7A69     		ldr	r2, [r7, #20]
 208 0048 2346     		mov	r3, r4
 209 004a FFF7FEFF 		bl	prvInitialiseNewQueue
 210              	.L10:
 397:..\..\FreeRTOS_Source/queue.c **** 		}
 398:..\..\FreeRTOS_Source/queue.c **** 		else
 399:..\..\FreeRTOS_Source/queue.c **** 		{
 400:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 401:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 402:..\..\FreeRTOS_Source/queue.c **** 		}
 403:..\..\FreeRTOS_Source/queue.c **** 
 404:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 211              		.loc 1 404 0
 212 004e BB69     		ldr	r3, [r7, #24]
 405:..\..\FreeRTOS_Source/queue.c **** 	}
 213              		.loc 1 405 0
 214 0050 1846     		mov	r0, r3
 215 0052 2437     		adds	r7, r7, #36
 216              		.cfi_def_cfa_offset 12
 217 0054 BD46     		mov	sp, r7
 218              		.cfi_def_cfa_register 13
 219              		@ sp needed
 220 0056 90BD     		pop	{r4, r7, pc}
 221              		.cfi_endproc
 222              	.LFE69:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 12


 223              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 224              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 225              		.align	2
 226              		.thumb
 227              		.thumb_func
 228              		.type	prvInitialiseNewQueue, %function
 229              	prvInitialiseNewQueue:
 230              	.LFB70:
 406:..\..\FreeRTOS_Source/queue.c **** 
 407:..\..\FreeRTOS_Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 408:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 409:..\..\FreeRTOS_Source/queue.c **** 
 410:..\..\FreeRTOS_Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 411:..\..\FreeRTOS_Source/queue.c **** {
 231              		.loc 1 411 0
 232              		.cfi_startproc
 233              		@ args = 4, pretend = 0, frame = 16
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0000 80B5     		push	{r7, lr}
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 84B0     		sub	sp, sp, #16
 240              		.cfi_def_cfa_offset 24
 241 0004 00AF     		add	r7, sp, #0
 242              		.cfi_def_cfa_register 7
 243 0006 F860     		str	r0, [r7, #12]
 244 0008 B960     		str	r1, [r7, #8]
 245 000a 7A60     		str	r2, [r7, #4]
 246 000c FB70     		strb	r3, [r7, #3]
 412:..\..\FreeRTOS_Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 413:..\..\FreeRTOS_Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 414:..\..\FreeRTOS_Source/queue.c **** 	( void ) ucQueueType;
 415:..\..\FreeRTOS_Source/queue.c **** 
 416:..\..\FreeRTOS_Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 247              		.loc 1 416 0
 248 000e BB68     		ldr	r3, [r7, #8]
 249 0010 002B     		cmp	r3, #0
 250 0012 03D1     		bne	.L13
 417:..\..\FreeRTOS_Source/queue.c **** 	{
 418:..\..\FreeRTOS_Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 419:..\..\FreeRTOS_Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 420:..\..\FreeRTOS_Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 421:..\..\FreeRTOS_Source/queue.c **** 		value that is known to be within the memory map. */
 422:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 251              		.loc 1 422 0
 252 0014 BB69     		ldr	r3, [r7, #24]
 253 0016 BA69     		ldr	r2, [r7, #24]
 254 0018 1A60     		str	r2, [r3]
 255 001a 02E0     		b	.L14
 256              	.L13:
 423:..\..\FreeRTOS_Source/queue.c **** 	}
 424:..\..\FreeRTOS_Source/queue.c **** 	else
 425:..\..\FreeRTOS_Source/queue.c **** 	{
 426:..\..\FreeRTOS_Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 427:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 257              		.loc 1 427 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 13


 258 001c BB69     		ldr	r3, [r7, #24]
 259 001e 7A68     		ldr	r2, [r7, #4]
 260 0020 1A60     		str	r2, [r3]
 261              	.L14:
 428:..\..\FreeRTOS_Source/queue.c **** 	}
 429:..\..\FreeRTOS_Source/queue.c **** 
 430:..\..\FreeRTOS_Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 431:..\..\FreeRTOS_Source/queue.c **** 	defined. */
 432:..\..\FreeRTOS_Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 262              		.loc 1 432 0
 263 0022 BB69     		ldr	r3, [r7, #24]
 264 0024 FA68     		ldr	r2, [r7, #12]
 265 0026 DA63     		str	r2, [r3, #60]
 433:..\..\FreeRTOS_Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 266              		.loc 1 433 0
 267 0028 BB69     		ldr	r3, [r7, #24]
 268 002a BA68     		ldr	r2, [r7, #8]
 269 002c 1A64     		str	r2, [r3, #64]
 434:..\..\FreeRTOS_Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 270              		.loc 1 434 0
 271 002e B869     		ldr	r0, [r7, #24]
 272 0030 0121     		movs	r1, #1
 273 0032 FFF7FEFF 		bl	xQueueGenericReset
 435:..\..\FreeRTOS_Source/queue.c **** 
 436:..\..\FreeRTOS_Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 437:..\..\FreeRTOS_Source/queue.c **** 	{
 438:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 439:..\..\FreeRTOS_Source/queue.c **** 	}
 440:..\..\FreeRTOS_Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 441:..\..\FreeRTOS_Source/queue.c **** 
 442:..\..\FreeRTOS_Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 443:..\..\FreeRTOS_Source/queue.c **** 	{
 444:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 445:..\..\FreeRTOS_Source/queue.c **** 	}
 446:..\..\FreeRTOS_Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 447:..\..\FreeRTOS_Source/queue.c **** 
 448:..\..\FreeRTOS_Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 449:..\..\FreeRTOS_Source/queue.c **** }
 274              		.loc 1 449 0
 275 0036 1037     		adds	r7, r7, #16
 276              		.cfi_def_cfa_offset 8
 277 0038 BD46     		mov	sp, r7
 278              		.cfi_def_cfa_register 13
 279              		@ sp needed
 280 003a 80BD     		pop	{r7, pc}
 281              		.cfi_endproc
 282              	.LFE70:
 283              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 284              		.section	.text.prvInitialiseMutex,"ax",%progbits
 285              		.align	2
 286              		.thumb
 287              		.thumb_func
 288              		.type	prvInitialiseMutex, %function
 289              	prvInitialiseMutex:
 290              	.LFB71:
 450:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 451:..\..\FreeRTOS_Source/queue.c **** 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 14


 452:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 453:..\..\FreeRTOS_Source/queue.c **** 
 454:..\..\FreeRTOS_Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 455:..\..\FreeRTOS_Source/queue.c **** 	{
 291              		.loc 1 455 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 8
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295 0000 80B5     		push	{r7, lr}
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 7, -8
 298              		.cfi_offset 14, -4
 299 0002 82B0     		sub	sp, sp, #8
 300              		.cfi_def_cfa_offset 16
 301 0004 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 303 0006 7860     		str	r0, [r7, #4]
 456:..\..\FreeRTOS_Source/queue.c **** 		if( pxNewQueue != NULL )
 304              		.loc 1 456 0
 305 0008 7B68     		ldr	r3, [r7, #4]
 306 000a 002B     		cmp	r3, #0
 307 000c 0ED0     		beq	.L15
 457:..\..\FreeRTOS_Source/queue.c **** 		{
 458:..\..\FreeRTOS_Source/queue.c **** 			/* The queue create function will set all the queue structure members
 459:..\..\FreeRTOS_Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 460:..\..\FreeRTOS_Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 461:..\..\FreeRTOS_Source/queue.c **** 			in particular the information required for priority inheritance. */
 462:..\..\FreeRTOS_Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 308              		.loc 1 462 0
 309 000e 7B68     		ldr	r3, [r7, #4]
 310 0010 0022     		movs	r2, #0
 311 0012 5A60     		str	r2, [r3, #4]
 463:..\..\FreeRTOS_Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 312              		.loc 1 463 0
 313 0014 7B68     		ldr	r3, [r7, #4]
 314 0016 0022     		movs	r2, #0
 315 0018 1A60     		str	r2, [r3]
 464:..\..\FreeRTOS_Source/queue.c **** 
 465:..\..\FreeRTOS_Source/queue.c **** 			/* In case this is a recursive mutex. */
 466:..\..\FreeRTOS_Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 316              		.loc 1 466 0
 317 001a 7B68     		ldr	r3, [r7, #4]
 318 001c 0022     		movs	r2, #0
 319 001e DA60     		str	r2, [r3, #12]
 467:..\..\FreeRTOS_Source/queue.c **** 
 468:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 469:..\..\FreeRTOS_Source/queue.c **** 
 470:..\..\FreeRTOS_Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 471:..\..\FreeRTOS_Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 320              		.loc 1 471 0
 321 0020 7868     		ldr	r0, [r7, #4]
 322 0022 0021     		movs	r1, #0
 323 0024 0022     		movs	r2, #0
 324 0026 0023     		movs	r3, #0
 325 0028 FFF7FEFF 		bl	xQueueGenericSend
 326              	.L15:
 472:..\..\FreeRTOS_Source/queue.c **** 		}
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 15


 473:..\..\FreeRTOS_Source/queue.c **** 		else
 474:..\..\FreeRTOS_Source/queue.c **** 		{
 475:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 476:..\..\FreeRTOS_Source/queue.c **** 		}
 477:..\..\FreeRTOS_Source/queue.c **** 	}
 327              		.loc 1 477 0
 328 002c 0837     		adds	r7, r7, #8
 329              		.cfi_def_cfa_offset 8
 330 002e BD46     		mov	sp, r7
 331              		.cfi_def_cfa_register 13
 332              		@ sp needed
 333 0030 80BD     		pop	{r7, pc}
 334              		.cfi_endproc
 335              	.LFE71:
 336              		.size	prvInitialiseMutex, .-prvInitialiseMutex
 337 0032 00BF     		.section	.text.xQueueCreateMutex,"ax",%progbits
 338              		.align	2
 339              		.global	xQueueCreateMutex
 340              		.thumb
 341              		.thumb_func
 342              		.type	xQueueCreateMutex, %function
 343              	xQueueCreateMutex:
 344              	.LFB72:
 478:..\..\FreeRTOS_Source/queue.c **** 
 479:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
 480:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 481:..\..\FreeRTOS_Source/queue.c **** 
 482:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 483:..\..\FreeRTOS_Source/queue.c **** 
 484:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 485:..\..\FreeRTOS_Source/queue.c **** 	{
 345              		.loc 1 485 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 24
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349 0000 80B5     		push	{r7, lr}
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 7, -8
 352              		.cfi_offset 14, -4
 353 0002 86B0     		sub	sp, sp, #24
 354              		.cfi_def_cfa_offset 32
 355 0004 00AF     		add	r7, sp, #0
 356              		.cfi_def_cfa_register 7
 357 0006 0346     		mov	r3, r0
 358 0008 FB71     		strb	r3, [r7, #7]
 486:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue;
 487:..\..\FreeRTOS_Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 359              		.loc 1 487 0
 360 000a 0123     		movs	r3, #1
 361 000c 7B61     		str	r3, [r7, #20]
 362 000e 0023     		movs	r3, #0
 363 0010 3B61     		str	r3, [r7, #16]
 488:..\..\FreeRTOS_Source/queue.c **** 
 489:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 364              		.loc 1 489 0
 365 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 366 0014 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 16


 367 0016 3969     		ldr	r1, [r7, #16]
 368 0018 1A46     		mov	r2, r3
 369 001a FFF7FEFF 		bl	xQueueGenericCreate
 370 001e F860     		str	r0, [r7, #12]
 490:..\..\FreeRTOS_Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 371              		.loc 1 490 0
 372 0020 F868     		ldr	r0, [r7, #12]
 373 0022 FFF7FEFF 		bl	prvInitialiseMutex
 491:..\..\FreeRTOS_Source/queue.c **** 
 492:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 374              		.loc 1 492 0
 375 0026 FB68     		ldr	r3, [r7, #12]
 493:..\..\FreeRTOS_Source/queue.c **** 	}
 376              		.loc 1 493 0
 377 0028 1846     		mov	r0, r3
 378 002a 1837     		adds	r7, r7, #24
 379              		.cfi_def_cfa_offset 8
 380 002c BD46     		mov	sp, r7
 381              		.cfi_def_cfa_register 13
 382              		@ sp needed
 383 002e 80BD     		pop	{r7, pc}
 384              		.cfi_endproc
 385              	.LFE72:
 386              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 387              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 388              		.align	2
 389              		.global	xQueueGiveMutexRecursive
 390              		.thumb
 391              		.thumb_func
 392              		.type	xQueueGiveMutexRecursive, %function
 393              	xQueueGiveMutexRecursive:
 394              	.LFB73:
 494:..\..\FreeRTOS_Source/queue.c **** 
 495:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
 496:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 497:..\..\FreeRTOS_Source/queue.c **** 
 498:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 499:..\..\FreeRTOS_Source/queue.c **** 
 500:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 501:..\..\FreeRTOS_Source/queue.c **** 	{
 502:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue;
 503:..\..\FreeRTOS_Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 504:..\..\FreeRTOS_Source/queue.c **** 
 505:..\..\FreeRTOS_Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 506:..\..\FreeRTOS_Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 507:..\..\FreeRTOS_Source/queue.c **** 		( void ) ucQueueType;
 508:..\..\FreeRTOS_Source/queue.c **** 
 509:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 510:..\..\FreeRTOS_Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 511:..\..\FreeRTOS_Source/queue.c **** 
 512:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 513:..\..\FreeRTOS_Source/queue.c **** 	}
 514:..\..\FreeRTOS_Source/queue.c **** 
 515:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
 516:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 517:..\..\FreeRTOS_Source/queue.c **** 
 518:..\..\FreeRTOS_Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 17


 519:..\..\FreeRTOS_Source/queue.c **** 
 520:..\..\FreeRTOS_Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 521:..\..\FreeRTOS_Source/queue.c **** 	{
 522:..\..\FreeRTOS_Source/queue.c **** 	void *pxReturn;
 523:..\..\FreeRTOS_Source/queue.c **** 
 524:..\..\FreeRTOS_Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 525:..\..\FreeRTOS_Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 526:..\..\FreeRTOS_Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 527:..\..\FreeRTOS_Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 528:..\..\FreeRTOS_Source/queue.c **** 		following critical section exiting and the function returning. */
 529:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 530:..\..\FreeRTOS_Source/queue.c **** 		{
 531:..\..\FreeRTOS_Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 532:..\..\FreeRTOS_Source/queue.c **** 			{
 533:..\..\FreeRTOS_Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 534:..\..\FreeRTOS_Source/queue.c **** 			}
 535:..\..\FreeRTOS_Source/queue.c **** 			else
 536:..\..\FreeRTOS_Source/queue.c **** 			{
 537:..\..\FreeRTOS_Source/queue.c **** 				pxReturn = NULL;
 538:..\..\FreeRTOS_Source/queue.c **** 			}
 539:..\..\FreeRTOS_Source/queue.c **** 		}
 540:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 541:..\..\FreeRTOS_Source/queue.c **** 
 542:..\..\FreeRTOS_Source/queue.c **** 		return pxReturn;
 543:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 544:..\..\FreeRTOS_Source/queue.c **** 
 545:..\..\FreeRTOS_Source/queue.c **** #endif
 546:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 547:..\..\FreeRTOS_Source/queue.c **** 
 548:..\..\FreeRTOS_Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 549:..\..\FreeRTOS_Source/queue.c **** 
 550:..\..\FreeRTOS_Source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 551:..\..\FreeRTOS_Source/queue.c **** 	{
 552:..\..\FreeRTOS_Source/queue.c **** 	void *pxReturn;
 553:..\..\FreeRTOS_Source/queue.c **** 
 554:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( xSemaphore );
 555:..\..\FreeRTOS_Source/queue.c **** 
 556:..\..\FreeRTOS_Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 557:..\..\FreeRTOS_Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 558:..\..\FreeRTOS_Source/queue.c **** 		not required here. */
 559:..\..\FreeRTOS_Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 560:..\..\FreeRTOS_Source/queue.c **** 		{
 561:..\..\FreeRTOS_Source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 562:..\..\FreeRTOS_Source/queue.c **** 		}
 563:..\..\FreeRTOS_Source/queue.c **** 		else
 564:..\..\FreeRTOS_Source/queue.c **** 		{
 565:..\..\FreeRTOS_Source/queue.c **** 			pxReturn = NULL;
 566:..\..\FreeRTOS_Source/queue.c **** 		}
 567:..\..\FreeRTOS_Source/queue.c **** 
 568:..\..\FreeRTOS_Source/queue.c **** 		return pxReturn;
 569:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 570:..\..\FreeRTOS_Source/queue.c **** 
 571:..\..\FreeRTOS_Source/queue.c **** #endif
 572:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 573:..\..\FreeRTOS_Source/queue.c **** 
 574:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 575:..\..\FreeRTOS_Source/queue.c **** 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 18


 576:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 577:..\..\FreeRTOS_Source/queue.c **** 	{
 395              		.loc 1 577 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 16
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399 0000 90B5     		push	{r4, r7, lr}
 400              		.cfi_def_cfa_offset 12
 401              		.cfi_offset 4, -12
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404 0002 85B0     		sub	sp, sp, #20
 405              		.cfi_def_cfa_offset 32
 406 0004 00AF     		add	r7, sp, #0
 407              		.cfi_def_cfa_register 7
 408 0006 7860     		str	r0, [r7, #4]
 578:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
 579:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 409              		.loc 1 579 0
 410 0008 7B68     		ldr	r3, [r7, #4]
 411 000a BB60     		str	r3, [r7, #8]
 580:..\..\FreeRTOS_Source/queue.c **** 
 581:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( pxMutex );
 582:..\..\FreeRTOS_Source/queue.c **** 
 583:..\..\FreeRTOS_Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 584:..\..\FreeRTOS_Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 585:..\..\FreeRTOS_Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 586:..\..\FreeRTOS_Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 587:..\..\FreeRTOS_Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 588:..\..\FreeRTOS_Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 589:..\..\FreeRTOS_Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 412              		.loc 1 589 0
 413 000c BB68     		ldr	r3, [r7, #8]
 414 000e 5C68     		ldr	r4, [r3, #4]
 415 0010 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 416 0014 0346     		mov	r3, r0
 417 0016 9C42     		cmp	r4, r3
 418 0018 11D1     		bne	.L20
 590:..\..\FreeRTOS_Source/queue.c **** 		{
 591:..\..\FreeRTOS_Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 592:..\..\FreeRTOS_Source/queue.c **** 
 593:..\..\FreeRTOS_Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 594:..\..\FreeRTOS_Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 595:..\..\FreeRTOS_Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 596:..\..\FreeRTOS_Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 597:..\..\FreeRTOS_Source/queue.c **** 			uxRecursiveCallCount member. */
 598:..\..\FreeRTOS_Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 419              		.loc 1 598 0
 420 001a BB68     		ldr	r3, [r7, #8]
 421 001c DB68     		ldr	r3, [r3, #12]
 422 001e 5A1E     		subs	r2, r3, #1
 423 0020 BB68     		ldr	r3, [r7, #8]
 424 0022 DA60     		str	r2, [r3, #12]
 599:..\..\FreeRTOS_Source/queue.c **** 
 600:..\..\FreeRTOS_Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 601:..\..\FreeRTOS_Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 425              		.loc 1 601 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 19


 426 0024 BB68     		ldr	r3, [r7, #8]
 427 0026 DB68     		ldr	r3, [r3, #12]
 428 0028 002B     		cmp	r3, #0
 429 002a 05D1     		bne	.L21
 602:..\..\FreeRTOS_Source/queue.c **** 			{
 603:..\..\FreeRTOS_Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 604:..\..\FreeRTOS_Source/queue.c **** 				task that might be waiting to access the mutex. */
 605:..\..\FreeRTOS_Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 430              		.loc 1 605 0
 431 002c B868     		ldr	r0, [r7, #8]
 432 002e 0021     		movs	r1, #0
 433 0030 0022     		movs	r2, #0
 434 0032 0023     		movs	r3, #0
 435 0034 FFF7FEFF 		bl	xQueueGenericSend
 436              	.L21:
 606:..\..\FreeRTOS_Source/queue.c **** 			}
 607:..\..\FreeRTOS_Source/queue.c **** 			else
 608:..\..\FreeRTOS_Source/queue.c **** 			{
 609:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 610:..\..\FreeRTOS_Source/queue.c **** 			}
 611:..\..\FreeRTOS_Source/queue.c **** 
 612:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 437              		.loc 1 612 0
 438 0038 0123     		movs	r3, #1
 439 003a FB60     		str	r3, [r7, #12]
 440 003c 01E0     		b	.L22
 441              	.L20:
 613:..\..\FreeRTOS_Source/queue.c **** 		}
 614:..\..\FreeRTOS_Source/queue.c **** 		else
 615:..\..\FreeRTOS_Source/queue.c **** 		{
 616:..\..\FreeRTOS_Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 617:..\..\FreeRTOS_Source/queue.c **** 			holder. */
 618:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
 442              		.loc 1 618 0
 443 003e 0023     		movs	r3, #0
 444 0040 FB60     		str	r3, [r7, #12]
 445              	.L22:
 619:..\..\FreeRTOS_Source/queue.c **** 
 620:..\..\FreeRTOS_Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 621:..\..\FreeRTOS_Source/queue.c **** 		}
 622:..\..\FreeRTOS_Source/queue.c **** 
 623:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
 446              		.loc 1 623 0
 447 0042 FB68     		ldr	r3, [r7, #12]
 624:..\..\FreeRTOS_Source/queue.c **** 	}
 448              		.loc 1 624 0
 449 0044 1846     		mov	r0, r3
 450 0046 1437     		adds	r7, r7, #20
 451              		.cfi_def_cfa_offset 12
 452 0048 BD46     		mov	sp, r7
 453              		.cfi_def_cfa_register 13
 454              		@ sp needed
 455 004a 90BD     		pop	{r4, r7, pc}
 456              		.cfi_endproc
 457              	.LFE73:
 458              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 459              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 20


 460              		.align	2
 461              		.global	xQueueTakeMutexRecursive
 462              		.thumb
 463              		.thumb_func
 464              		.type	xQueueTakeMutexRecursive, %function
 465              	xQueueTakeMutexRecursive:
 466              	.LFB74:
 625:..\..\FreeRTOS_Source/queue.c **** 
 626:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 627:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 628:..\..\FreeRTOS_Source/queue.c **** 
 629:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 630:..\..\FreeRTOS_Source/queue.c **** 
 631:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 632:..\..\FreeRTOS_Source/queue.c **** 	{
 467              		.loc 1 632 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 16
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471 0000 90B5     		push	{r4, r7, lr}
 472              		.cfi_def_cfa_offset 12
 473              		.cfi_offset 4, -12
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
 476 0002 85B0     		sub	sp, sp, #20
 477              		.cfi_def_cfa_offset 32
 478 0004 00AF     		add	r7, sp, #0
 479              		.cfi_def_cfa_register 7
 480 0006 7860     		str	r0, [r7, #4]
 481 0008 3960     		str	r1, [r7]
 633:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
 634:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 482              		.loc 1 634 0
 483 000a 7B68     		ldr	r3, [r7, #4]
 484 000c BB60     		str	r3, [r7, #8]
 635:..\..\FreeRTOS_Source/queue.c **** 
 636:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( pxMutex );
 637:..\..\FreeRTOS_Source/queue.c **** 
 638:..\..\FreeRTOS_Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 639:..\..\FreeRTOS_Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 640:..\..\FreeRTOS_Source/queue.c **** 
 641:..\..\FreeRTOS_Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 642:..\..\FreeRTOS_Source/queue.c **** 
 643:..\..\FreeRTOS_Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 485              		.loc 1 643 0
 486 000e BB68     		ldr	r3, [r7, #8]
 487 0010 5C68     		ldr	r4, [r3, #4]
 488 0012 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 489 0016 0346     		mov	r3, r0
 490 0018 9C42     		cmp	r4, r3
 491 001a 07D1     		bne	.L25
 644:..\..\FreeRTOS_Source/queue.c **** 		{
 645:..\..\FreeRTOS_Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 492              		.loc 1 645 0
 493 001c BB68     		ldr	r3, [r7, #8]
 494 001e DB68     		ldr	r3, [r3, #12]
 495 0020 5A1C     		adds	r2, r3, #1
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 21


 496 0022 BB68     		ldr	r3, [r7, #8]
 497 0024 DA60     		str	r2, [r3, #12]
 646:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 498              		.loc 1 646 0
 499 0026 0123     		movs	r3, #1
 500 0028 FB60     		str	r3, [r7, #12]
 501 002a 0CE0     		b	.L26
 502              	.L25:
 647:..\..\FreeRTOS_Source/queue.c **** 		}
 648:..\..\FreeRTOS_Source/queue.c **** 		else
 649:..\..\FreeRTOS_Source/queue.c **** 		{
 650:..\..\FreeRTOS_Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 503              		.loc 1 650 0
 504 002c B868     		ldr	r0, [r7, #8]
 505 002e 3968     		ldr	r1, [r7]
 506 0030 FFF7FEFF 		bl	xQueueSemaphoreTake
 507 0034 F860     		str	r0, [r7, #12]
 651:..\..\FreeRTOS_Source/queue.c **** 
 652:..\..\FreeRTOS_Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 653:..\..\FreeRTOS_Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 654:..\..\FreeRTOS_Source/queue.c **** 			before reaching here. */
 655:..\..\FreeRTOS_Source/queue.c **** 			if( xReturn != pdFAIL )
 508              		.loc 1 655 0
 509 0036 FB68     		ldr	r3, [r7, #12]
 510 0038 002B     		cmp	r3, #0
 511 003a 04D0     		beq	.L26
 656:..\..\FreeRTOS_Source/queue.c **** 			{
 657:..\..\FreeRTOS_Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 512              		.loc 1 657 0
 513 003c BB68     		ldr	r3, [r7, #8]
 514 003e DB68     		ldr	r3, [r3, #12]
 515 0040 5A1C     		adds	r2, r3, #1
 516 0042 BB68     		ldr	r3, [r7, #8]
 517 0044 DA60     		str	r2, [r3, #12]
 518              	.L26:
 658:..\..\FreeRTOS_Source/queue.c **** 			}
 659:..\..\FreeRTOS_Source/queue.c **** 			else
 660:..\..\FreeRTOS_Source/queue.c **** 			{
 661:..\..\FreeRTOS_Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 662:..\..\FreeRTOS_Source/queue.c **** 			}
 663:..\..\FreeRTOS_Source/queue.c **** 		}
 664:..\..\FreeRTOS_Source/queue.c **** 
 665:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
 519              		.loc 1 665 0
 520 0046 FB68     		ldr	r3, [r7, #12]
 666:..\..\FreeRTOS_Source/queue.c **** 	}
 521              		.loc 1 666 0
 522 0048 1846     		mov	r0, r3
 523 004a 1437     		adds	r7, r7, #20
 524              		.cfi_def_cfa_offset 12
 525 004c BD46     		mov	sp, r7
 526              		.cfi_def_cfa_register 13
 527              		@ sp needed
 528 004e 90BD     		pop	{r4, r7, pc}
 529              		.cfi_endproc
 530              	.LFE74:
 531              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 22


 532              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 533              		.align	2
 534              		.global	xQueueCreateCountingSemaphore
 535              		.thumb
 536              		.thumb_func
 537              		.type	xQueueCreateCountingSemaphore, %function
 538              	xQueueCreateCountingSemaphore:
 539              	.LFB75:
 667:..\..\FreeRTOS_Source/queue.c **** 
 668:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 669:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 670:..\..\FreeRTOS_Source/queue.c **** 
 671:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 672:..\..\FreeRTOS_Source/queue.c **** 
 673:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 674:..\..\FreeRTOS_Source/queue.c **** 	{
 675:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xHandle;
 676:..\..\FreeRTOS_Source/queue.c **** 
 677:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 678:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 679:..\..\FreeRTOS_Source/queue.c **** 
 680:..\..\FreeRTOS_Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 681:..\..\FreeRTOS_Source/queue.c **** 
 682:..\..\FreeRTOS_Source/queue.c **** 		if( xHandle != NULL )
 683:..\..\FreeRTOS_Source/queue.c **** 		{
 684:..\..\FreeRTOS_Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 685:..\..\FreeRTOS_Source/queue.c **** 
 686:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 687:..\..\FreeRTOS_Source/queue.c **** 		}
 688:..\..\FreeRTOS_Source/queue.c **** 		else
 689:..\..\FreeRTOS_Source/queue.c **** 		{
 690:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 691:..\..\FreeRTOS_Source/queue.c **** 		}
 692:..\..\FreeRTOS_Source/queue.c **** 
 693:..\..\FreeRTOS_Source/queue.c **** 		return xHandle;
 694:..\..\FreeRTOS_Source/queue.c **** 	}
 695:..\..\FreeRTOS_Source/queue.c **** 
 696:..\..\FreeRTOS_Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 697:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 698:..\..\FreeRTOS_Source/queue.c **** 
 699:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 700:..\..\FreeRTOS_Source/queue.c **** 
 701:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 702:..\..\FreeRTOS_Source/queue.c **** 	{
 540              		.loc 1 702 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 16
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544 0000 80B5     		push	{r7, lr}
 545              		.cfi_def_cfa_offset 8
 546              		.cfi_offset 7, -8
 547              		.cfi_offset 14, -4
 548 0002 84B0     		sub	sp, sp, #16
 549              		.cfi_def_cfa_offset 24
 550 0004 00AF     		add	r7, sp, #0
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 23


 553 0008 3960     		str	r1, [r7]
 703:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xHandle;
 704:..\..\FreeRTOS_Source/queue.c **** 
 705:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 706:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 707:..\..\FreeRTOS_Source/queue.c **** 
 708:..\..\FreeRTOS_Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 554              		.loc 1 708 0
 555 000a 7868     		ldr	r0, [r7, #4]
 556 000c 0021     		movs	r1, #0
 557 000e 0222     		movs	r2, #2
 558 0010 FFF7FEFF 		bl	xQueueGenericCreate
 559 0014 F860     		str	r0, [r7, #12]
 709:..\..\FreeRTOS_Source/queue.c **** 
 710:..\..\FreeRTOS_Source/queue.c **** 		if( xHandle != NULL )
 560              		.loc 1 710 0
 561 0016 FB68     		ldr	r3, [r7, #12]
 562 0018 002B     		cmp	r3, #0
 563 001a 02D0     		beq	.L29
 711:..\..\FreeRTOS_Source/queue.c **** 		{
 712:..\..\FreeRTOS_Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 564              		.loc 1 712 0
 565 001c FB68     		ldr	r3, [r7, #12]
 566 001e 3A68     		ldr	r2, [r7]
 567 0020 9A63     		str	r2, [r3, #56]
 568              	.L29:
 713:..\..\FreeRTOS_Source/queue.c **** 
 714:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 715:..\..\FreeRTOS_Source/queue.c **** 		}
 716:..\..\FreeRTOS_Source/queue.c **** 		else
 717:..\..\FreeRTOS_Source/queue.c **** 		{
 718:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 719:..\..\FreeRTOS_Source/queue.c **** 		}
 720:..\..\FreeRTOS_Source/queue.c **** 
 721:..\..\FreeRTOS_Source/queue.c **** 		return xHandle;
 569              		.loc 1 721 0
 570 0022 FB68     		ldr	r3, [r7, #12]
 722:..\..\FreeRTOS_Source/queue.c **** 	}
 571              		.loc 1 722 0
 572 0024 1846     		mov	r0, r3
 573 0026 1037     		adds	r7, r7, #16
 574              		.cfi_def_cfa_offset 8
 575 0028 BD46     		mov	sp, r7
 576              		.cfi_def_cfa_register 13
 577              		@ sp needed
 578 002a 80BD     		pop	{r7, pc}
 579              		.cfi_endproc
 580              	.LFE75:
 581              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 582              		.section	.text.xQueueGenericSend,"ax",%progbits
 583              		.align	2
 584              		.global	xQueueGenericSend
 585              		.thumb
 586              		.thumb_func
 587              		.type	xQueueGenericSend, %function
 588              	xQueueGenericSend:
 589              	.LFB76:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 24


 723:..\..\FreeRTOS_Source/queue.c **** 
 724:..\..\FreeRTOS_Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 725:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 726:..\..\FreeRTOS_Source/queue.c **** 
 727:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 728:..\..\FreeRTOS_Source/queue.c **** {
 590              		.loc 1 728 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 40
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594 0000 80B5     		push	{r7, lr}
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 7, -8
 597              		.cfi_offset 14, -4
 598 0002 8AB0     		sub	sp, sp, #40
 599              		.cfi_def_cfa_offset 48
 600 0004 00AF     		add	r7, sp, #0
 601              		.cfi_def_cfa_register 7
 602 0006 F860     		str	r0, [r7, #12]
 603 0008 B960     		str	r1, [r7, #8]
 604 000a 7A60     		str	r2, [r7, #4]
 605 000c 3B60     		str	r3, [r7]
 729:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 606              		.loc 1 729 0
 607 000e 0023     		movs	r3, #0
 608 0010 7B62     		str	r3, [r7, #36]
 730:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
 731:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 609              		.loc 1 731 0
 610 0012 FB68     		ldr	r3, [r7, #12]
 611 0014 3B62     		str	r3, [r7, #32]
 612              	.L46:
 732:..\..\FreeRTOS_Source/queue.c **** 
 733:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
 734:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 735:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 736:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 737:..\..\FreeRTOS_Source/queue.c **** 	{
 738:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 739:..\..\FreeRTOS_Source/queue.c **** 	}
 740:..\..\FreeRTOS_Source/queue.c **** 	#endif
 741:..\..\FreeRTOS_Source/queue.c **** 
 742:..\..\FreeRTOS_Source/queue.c **** 
 743:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 744:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
 745:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
 746:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
 747:..\..\FreeRTOS_Source/queue.c **** 	{
 748:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 613              		.loc 1 748 0
 614 0016 FFF7FEFF 		bl	vPortEnterCritical
 749:..\..\FreeRTOS_Source/queue.c **** 		{
 750:..\..\FreeRTOS_Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 751:..\..\FreeRTOS_Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 752:..\..\FreeRTOS_Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 753:..\..\FreeRTOS_Source/queue.c **** 			queue is full. */
 754:..\..\FreeRTOS_Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 25


 615              		.loc 1 754 0
 616 001a 3B6A     		ldr	r3, [r7, #32]
 617 001c 9A6B     		ldr	r2, [r3, #56]
 618 001e 3B6A     		ldr	r3, [r7, #32]
 619 0020 DB6B     		ldr	r3, [r3, #60]
 620 0022 9A42     		cmp	r2, r3
 621 0024 02D3     		bcc	.L32
 622              		.loc 1 754 0 is_stmt 0 discriminator 1
 623 0026 3B68     		ldr	r3, [r7]
 624 0028 022B     		cmp	r3, #2
 625 002a 29D1     		bne	.L33
 626              	.L32:
 755:..\..\FreeRTOS_Source/queue.c **** 			{
 756:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 757:..\..\FreeRTOS_Source/queue.c **** 
 758:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 759:..\..\FreeRTOS_Source/queue.c **** 				{
 760:..\..\FreeRTOS_Source/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 761:..\..\FreeRTOS_Source/queue.c **** 
 762:..\..\FreeRTOS_Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 763:..\..\FreeRTOS_Source/queue.c **** 
 764:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 765:..\..\FreeRTOS_Source/queue.c **** 					{
 766:..\..\FreeRTOS_Source/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 767:..\..\FreeRTOS_Source/queue.c **** 						{
 768:..\..\FreeRTOS_Source/queue.c **** 							/* Do not notify the queue set as an existing item
 769:..\..\FreeRTOS_Source/queue.c **** 							was overwritten in the queue so the number of items
 770:..\..\FreeRTOS_Source/queue.c **** 							in the queue has not changed. */
 771:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 772:..\..\FreeRTOS_Source/queue.c **** 						}
 773:..\..\FreeRTOS_Source/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 774:..\..\FreeRTOS_Source/queue.c **** 						{
 775:..\..\FreeRTOS_Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 776:..\..\FreeRTOS_Source/queue.c **** 							to the queue set caused a higher priority task to
 777:..\..\FreeRTOS_Source/queue.c **** 							unblock. A context switch is required. */
 778:..\..\FreeRTOS_Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 779:..\..\FreeRTOS_Source/queue.c **** 						}
 780:..\..\FreeRTOS_Source/queue.c **** 						else
 781:..\..\FreeRTOS_Source/queue.c **** 						{
 782:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 783:..\..\FreeRTOS_Source/queue.c **** 						}
 784:..\..\FreeRTOS_Source/queue.c **** 					}
 785:..\..\FreeRTOS_Source/queue.c **** 					else
 786:..\..\FreeRTOS_Source/queue.c **** 					{
 787:..\..\FreeRTOS_Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 788:..\..\FreeRTOS_Source/queue.c **** 						queue then unblock it now. */
 789:..\..\FreeRTOS_Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 790:..\..\FreeRTOS_Source/queue.c **** 						{
 791:..\..\FreeRTOS_Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 792:..\..\FreeRTOS_Source/queue.c **** 							{
 793:..\..\FreeRTOS_Source/queue.c **** 								/* The unblocked task has a priority higher than
 794:..\..\FreeRTOS_Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 795:..\..\FreeRTOS_Source/queue.c **** 								do this from within the critical section - the
 796:..\..\FreeRTOS_Source/queue.c **** 								kernel takes care of that. */
 797:..\..\FreeRTOS_Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 798:..\..\FreeRTOS_Source/queue.c **** 							}
 799:..\..\FreeRTOS_Source/queue.c **** 							else
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 26


 800:..\..\FreeRTOS_Source/queue.c **** 							{
 801:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 802:..\..\FreeRTOS_Source/queue.c **** 							}
 803:..\..\FreeRTOS_Source/queue.c **** 						}
 804:..\..\FreeRTOS_Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 805:..\..\FreeRTOS_Source/queue.c **** 						{
 806:..\..\FreeRTOS_Source/queue.c **** 							/* This path is a special case that will only get
 807:..\..\FreeRTOS_Source/queue.c **** 							executed if the task was holding multiple mutexes
 808:..\..\FreeRTOS_Source/queue.c **** 							and the mutexes were given back in an order that is
 809:..\..\FreeRTOS_Source/queue.c **** 							different to that in which they were taken. */
 810:..\..\FreeRTOS_Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 811:..\..\FreeRTOS_Source/queue.c **** 						}
 812:..\..\FreeRTOS_Source/queue.c **** 						else
 813:..\..\FreeRTOS_Source/queue.c **** 						{
 814:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 815:..\..\FreeRTOS_Source/queue.c **** 						}
 816:..\..\FreeRTOS_Source/queue.c **** 					}
 817:..\..\FreeRTOS_Source/queue.c **** 				}
 818:..\..\FreeRTOS_Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 819:..\..\FreeRTOS_Source/queue.c **** 				{
 820:..\..\FreeRTOS_Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 627              		.loc 1 820 0 is_stmt 1
 628 002c 386A     		ldr	r0, [r7, #32]
 629 002e B968     		ldr	r1, [r7, #8]
 630 0030 3A68     		ldr	r2, [r7]
 631 0032 FFF7FEFF 		bl	prvCopyDataToQueue
 632 0036 F861     		str	r0, [r7, #28]
 821:..\..\FreeRTOS_Source/queue.c **** 
 822:..\..\FreeRTOS_Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 823:..\..\FreeRTOS_Source/queue.c **** 					queue then unblock it now. */
 824:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 633              		.loc 1 824 0
 634 0038 3B6A     		ldr	r3, [r7, #32]
 635 003a 5B6A     		ldr	r3, [r3, #36]
 636 003c 002B     		cmp	r3, #0
 637 003e 10D0     		beq	.L34
 825:..\..\FreeRTOS_Source/queue.c **** 					{
 826:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 638              		.loc 1 826 0
 639 0040 3B6A     		ldr	r3, [r7, #32]
 640 0042 2433     		adds	r3, r3, #36
 641 0044 1846     		mov	r0, r3
 642 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 643 004a 0346     		mov	r3, r0
 644 004c 002B     		cmp	r3, #0
 645 004e 13D0     		beq	.L35
 827:..\..\FreeRTOS_Source/queue.c **** 						{
 828:..\..\FreeRTOS_Source/queue.c **** 							/* The unblocked task has a priority higher than
 829:..\..\FreeRTOS_Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 830:..\..\FreeRTOS_Source/queue.c **** 							this from within the critical section - the kernel
 831:..\..\FreeRTOS_Source/queue.c **** 							takes care of that. */
 832:..\..\FreeRTOS_Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 646              		.loc 1 832 0
 647 0050 414B     		ldr	r3, .L48
 648 0052 4FF08052 		mov	r2, #268435456
 649 0056 1A60     		str	r2, [r3]
 650              	@ 832 "..\..\FreeRTOS_Source\queue.c" 1
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 27


 651 0058 BFF34F8F 		dsb
 652              	@ 0 "" 2
 653              	@ 832 "..\..\FreeRTOS_Source\queue.c" 1
 654 005c BFF36F8F 		isb
 655              	@ 0 "" 2
 656              		.thumb
 657 0060 0AE0     		b	.L35
 658              	.L34:
 833:..\..\FreeRTOS_Source/queue.c **** 						}
 834:..\..\FreeRTOS_Source/queue.c **** 						else
 835:..\..\FreeRTOS_Source/queue.c **** 						{
 836:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 837:..\..\FreeRTOS_Source/queue.c **** 						}
 838:..\..\FreeRTOS_Source/queue.c **** 					}
 839:..\..\FreeRTOS_Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 659              		.loc 1 839 0
 660 0062 FB69     		ldr	r3, [r7, #28]
 661 0064 002B     		cmp	r3, #0
 662 0066 07D0     		beq	.L35
 840:..\..\FreeRTOS_Source/queue.c **** 					{
 841:..\..\FreeRTOS_Source/queue.c **** 						/* This path is a special case that will only get
 842:..\..\FreeRTOS_Source/queue.c **** 						executed if the task was holding multiple mutexes and
 843:..\..\FreeRTOS_Source/queue.c **** 						the mutexes were given back in an order that is
 844:..\..\FreeRTOS_Source/queue.c **** 						different to that in which they were taken. */
 845:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 663              		.loc 1 845 0
 664 0068 3B4B     		ldr	r3, .L48
 665 006a 4FF08052 		mov	r2, #268435456
 666 006e 1A60     		str	r2, [r3]
 667              	@ 845 "..\..\FreeRTOS_Source\queue.c" 1
 668 0070 BFF34F8F 		dsb
 669              	@ 0 "" 2
 670              	@ 845 "..\..\FreeRTOS_Source\queue.c" 1
 671 0074 BFF36F8F 		isb
 672              	@ 0 "" 2
 673              		.thumb
 674              	.L35:
 846:..\..\FreeRTOS_Source/queue.c **** 					}
 847:..\..\FreeRTOS_Source/queue.c **** 					else
 848:..\..\FreeRTOS_Source/queue.c **** 					{
 849:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 850:..\..\FreeRTOS_Source/queue.c **** 					}
 851:..\..\FreeRTOS_Source/queue.c **** 				}
 852:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 853:..\..\FreeRTOS_Source/queue.c **** 
 854:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 675              		.loc 1 854 0
 676 0078 FFF7FEFF 		bl	vPortExitCritical
 855:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
 677              		.loc 1 855 0
 678 007c 0123     		movs	r3, #1
 679 007e 67E0     		b	.L47
 680              	.L33:
 856:..\..\FreeRTOS_Source/queue.c **** 			}
 857:..\..\FreeRTOS_Source/queue.c **** 			else
 858:..\..\FreeRTOS_Source/queue.c **** 			{
 859:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 28


 681              		.loc 1 859 0
 682 0080 7B68     		ldr	r3, [r7, #4]
 683 0082 002B     		cmp	r3, #0
 684 0084 03D1     		bne	.L37
 860:..\..\FreeRTOS_Source/queue.c **** 				{
 861:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was full and no block time is specified (or
 862:..\..\FreeRTOS_Source/queue.c **** 					the block time has expired) so leave now. */
 863:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 685              		.loc 1 863 0
 686 0086 FFF7FEFF 		bl	vPortExitCritical
 864:..\..\FreeRTOS_Source/queue.c **** 
 865:..\..\FreeRTOS_Source/queue.c **** 					/* Return to the original privilege level before exiting
 866:..\..\FreeRTOS_Source/queue.c **** 					the function. */
 867:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 868:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_FULL;
 687              		.loc 1 868 0
 688 008a 0023     		movs	r3, #0
 689 008c 60E0     		b	.L47
 690              	.L37:
 869:..\..\FreeRTOS_Source/queue.c **** 				}
 870:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 691              		.loc 1 870 0
 692 008e 7B6A     		ldr	r3, [r7, #36]
 693 0090 002B     		cmp	r3, #0
 694 0092 06D1     		bne	.L38
 871:..\..\FreeRTOS_Source/queue.c **** 				{
 872:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was full and a block time was specified so
 873:..\..\FreeRTOS_Source/queue.c **** 					configure the timeout structure. */
 874:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 695              		.loc 1 874 0
 696 0094 07F11403 		add	r3, r7, #20
 697 0098 1846     		mov	r0, r3
 698 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 875:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 699              		.loc 1 875 0
 700 009e 0123     		movs	r3, #1
 701 00a0 7B62     		str	r3, [r7, #36]
 702              	.L38:
 876:..\..\FreeRTOS_Source/queue.c **** 				}
 877:..\..\FreeRTOS_Source/queue.c **** 				else
 878:..\..\FreeRTOS_Source/queue.c **** 				{
 879:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
 880:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 881:..\..\FreeRTOS_Source/queue.c **** 				}
 882:..\..\FreeRTOS_Source/queue.c **** 			}
 883:..\..\FreeRTOS_Source/queue.c **** 		}
 884:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 703              		.loc 1 884 0
 704 00a2 FFF7FEFF 		bl	vPortExitCritical
 885:..\..\FreeRTOS_Source/queue.c **** 
 886:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 887:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
 888:..\..\FreeRTOS_Source/queue.c **** 
 889:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 705              		.loc 1 889 0
 706 00a6 FFF7FEFF 		bl	vTaskSuspendAll
 890:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 29


 707              		.loc 1 890 0
 708 00aa FFF7FEFF 		bl	vPortEnterCritical
 709 00ae 3B6A     		ldr	r3, [r7, #32]
 710 00b0 93F84430 		ldrb	r3, [r3, #68]
 711 00b4 DBB2     		uxtb	r3, r3
 712 00b6 5BB2     		sxtb	r3, r3
 713 00b8 B3F1FF3F 		cmp	r3, #-1
 714 00bc 03D1     		bne	.L39
 715              		.loc 1 890 0 is_stmt 0 discriminator 1
 716 00be 3B6A     		ldr	r3, [r7, #32]
 717 00c0 0022     		movs	r2, #0
 718 00c2 83F84420 		strb	r2, [r3, #68]
 719              	.L39:
 720              		.loc 1 890 0 discriminator 3
 721 00c6 3B6A     		ldr	r3, [r7, #32]
 722 00c8 93F84530 		ldrb	r3, [r3, #69]
 723 00cc DBB2     		uxtb	r3, r3
 724 00ce 5BB2     		sxtb	r3, r3
 725 00d0 B3F1FF3F 		cmp	r3, #-1
 726 00d4 03D1     		bne	.L40
 727              		.loc 1 890 0 discriminator 4
 728 00d6 3B6A     		ldr	r3, [r7, #32]
 729 00d8 0022     		movs	r2, #0
 730 00da 83F84520 		strb	r2, [r3, #69]
 731              	.L40:
 732              		.loc 1 890 0 discriminator 6
 733 00de FFF7FEFF 		bl	vPortExitCritical
 891:..\..\FreeRTOS_Source/queue.c **** 
 892:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 893:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 734              		.loc 1 893 0 is_stmt 1 discriminator 6
 735 00e2 07F11402 		add	r2, r7, #20
 736 00e6 3B1D     		adds	r3, r7, #4
 737 00e8 1046     		mov	r0, r2
 738 00ea 1946     		mov	r1, r3
 739 00ec FFF7FEFF 		bl	xTaskCheckForTimeOut
 740 00f0 0346     		mov	r3, r0
 741 00f2 002B     		cmp	r3, #0
 742 00f4 24D1     		bne	.L41
 894:..\..\FreeRTOS_Source/queue.c **** 		{
 895:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 743              		.loc 1 895 0
 744 00f6 386A     		ldr	r0, [r7, #32]
 745 00f8 FFF7FEFF 		bl	prvIsQueueFull
 746 00fc 0346     		mov	r3, r0
 747 00fe 002B     		cmp	r3, #0
 748 0100 18D0     		beq	.L42
 896:..\..\FreeRTOS_Source/queue.c **** 			{
 897:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 898:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 749              		.loc 1 898 0
 750 0102 3B6A     		ldr	r3, [r7, #32]
 751 0104 03F11002 		add	r2, r3, #16
 752 0108 7B68     		ldr	r3, [r7, #4]
 753 010a 1046     		mov	r0, r2
 754 010c 1946     		mov	r1, r3
 755 010e FFF7FEFF 		bl	vTaskPlaceOnEventList
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 30


 899:..\..\FreeRTOS_Source/queue.c **** 
 900:..\..\FreeRTOS_Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 901:..\..\FreeRTOS_Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 902:..\..\FreeRTOS_Source/queue.c **** 				remove this task from the event list again - but as the
 903:..\..\FreeRTOS_Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 904:..\..\FreeRTOS_Source/queue.c **** 				ready last instead of the actual ready list. */
 905:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 756              		.loc 1 905 0
 757 0112 386A     		ldr	r0, [r7, #32]
 758 0114 FFF7FEFF 		bl	prvUnlockQueue
 906:..\..\FreeRTOS_Source/queue.c **** 
 907:..\..\FreeRTOS_Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 908:..\..\FreeRTOS_Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 909:..\..\FreeRTOS_Source/queue.c **** 				task is already in a ready list before it yields - in which
 910:..\..\FreeRTOS_Source/queue.c **** 				case the yield will not cause a context switch unless there
 911:..\..\FreeRTOS_Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 912:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 759              		.loc 1 912 0
 760 0118 FFF7FEFF 		bl	xTaskResumeAll
 761 011c 0346     		mov	r3, r0
 762 011e 002B     		cmp	r3, #0
 763 0120 15D1     		bne	.L45
 913:..\..\FreeRTOS_Source/queue.c **** 				{
 914:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 764              		.loc 1 914 0
 765 0122 0D4B     		ldr	r3, .L48
 766 0124 4FF08052 		mov	r2, #268435456
 767 0128 1A60     		str	r2, [r3]
 768              	@ 914 "..\..\FreeRTOS_Source\queue.c" 1
 769 012a BFF34F8F 		dsb
 770              	@ 0 "" 2
 771              	@ 914 "..\..\FreeRTOS_Source\queue.c" 1
 772 012e BFF36F8F 		isb
 773              	@ 0 "" 2
 774              		.thumb
 775 0132 0CE0     		b	.L45
 776              	.L42:
 915:..\..\FreeRTOS_Source/queue.c **** 				}
 916:..\..\FreeRTOS_Source/queue.c **** 			}
 917:..\..\FreeRTOS_Source/queue.c **** 			else
 918:..\..\FreeRTOS_Source/queue.c **** 			{
 919:..\..\FreeRTOS_Source/queue.c **** 				/* Try again. */
 920:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 777              		.loc 1 920 0
 778 0134 386A     		ldr	r0, [r7, #32]
 779 0136 FFF7FEFF 		bl	prvUnlockQueue
 921:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 780              		.loc 1 921 0
 781 013a FFF7FEFF 		bl	xTaskResumeAll
 782 013e 6AE7     		b	.L46
 783              	.L41:
 922:..\..\FreeRTOS_Source/queue.c **** 			}
 923:..\..\FreeRTOS_Source/queue.c **** 		}
 924:..\..\FreeRTOS_Source/queue.c **** 		else
 925:..\..\FreeRTOS_Source/queue.c **** 		{
 926:..\..\FreeRTOS_Source/queue.c **** 			/* The timeout has expired. */
 927:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 31


 784              		.loc 1 927 0
 785 0140 386A     		ldr	r0, [r7, #32]
 786 0142 FFF7FEFF 		bl	prvUnlockQueue
 928:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 787              		.loc 1 928 0
 788 0146 FFF7FEFF 		bl	xTaskResumeAll
 929:..\..\FreeRTOS_Source/queue.c **** 
 930:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 931:..\..\FreeRTOS_Source/queue.c **** 			return errQUEUE_FULL;
 789              		.loc 1 931 0
 790 014a 0023     		movs	r3, #0
 791 014c 00E0     		b	.L47
 792              	.L45:
 932:..\..\FreeRTOS_Source/queue.c **** 		}
 933:..\..\FreeRTOS_Source/queue.c **** 	}
 793              		.loc 1 933 0 discriminator 2
 794 014e 62E7     		b	.L46
 795              	.L47:
 934:..\..\FreeRTOS_Source/queue.c **** }
 796              		.loc 1 934 0 discriminator 3
 797 0150 1846     		mov	r0, r3
 798 0152 2837     		adds	r7, r7, #40
 799              		.cfi_def_cfa_offset 8
 800 0154 BD46     		mov	sp, r7
 801              		.cfi_def_cfa_register 13
 802              		@ sp needed
 803 0156 80BD     		pop	{r7, pc}
 804              	.L49:
 805              		.align	2
 806              	.L48:
 807 0158 04ED00E0 		.word	-536810236
 808              		.cfi_endproc
 809              	.LFE76:
 810              		.size	xQueueGenericSend, .-xQueueGenericSend
 811              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 812              		.align	2
 813              		.global	xQueueGenericSendFromISR
 814              		.thumb
 815              		.thumb_func
 816              		.type	xQueueGenericSendFromISR, %function
 817              	xQueueGenericSendFromISR:
 818              	.LFB77:
 935:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 936:..\..\FreeRTOS_Source/queue.c **** 
 937:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 938:..\..\FreeRTOS_Source/queue.c **** {
 819              		.loc 1 938 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 48
 822              		@ frame_needed = 1, uses_anonymous_args = 0
 823 0000 80B5     		push	{r7, lr}
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 7, -8
 826              		.cfi_offset 14, -4
 827 0002 8CB0     		sub	sp, sp, #48
 828              		.cfi_def_cfa_offset 56
 829 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 32


 830              		.cfi_def_cfa_register 7
 831 0006 F860     		str	r0, [r7, #12]
 832 0008 B960     		str	r1, [r7, #8]
 833 000a 7A60     		str	r2, [r7, #4]
 834 000c 3B60     		str	r3, [r7]
 939:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
 940:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 941:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 835              		.loc 1 941 0
 836 000e FB68     		ldr	r3, [r7, #12]
 837 0010 BB62     		str	r3, [r7, #40]
 838              	.LBB23:
 839              	.LBB24:
 840              		.file 2 "..\\..\\FreeRTOS_Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 33


  44:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 34


 101:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 35


 158:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 196:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 841              		.loc 2 211 0
 842              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 843 0012 EFF31182 			mrs r2, basepri											
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 36


 844 0016 4FF0A003 		mov r3, #160												
 845 001a 83F31188 		msr basepri, r3											
 846 001e BFF36F8F 		isb														
 847 0022 BFF34F8F 		dsb														
 848              	
 849              	@ 0 "" 2
 850              		.thumb
 851 0026 FA61     		str	r2, [r7, #28]
 852 0028 BB61     		str	r3, [r7, #24]
 212:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 853              		.loc 2 223 0
 854 002a FB69     		ldr	r3, [r7, #28]
 855              	.LBE24:
 856              	.LBE23:
 942:..\..\FreeRTOS_Source/queue.c **** 
 943:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
 944:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 945:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 946:..\..\FreeRTOS_Source/queue.c **** 
 947:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 948:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 949:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 950:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 951:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 952:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 953:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 954:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 955:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 956:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 957:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 958:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 959:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 960:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 961:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 962:..\..\FreeRTOS_Source/queue.c **** 
 963:..\..\FreeRTOS_Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 964:..\..\FreeRTOS_Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 965:..\..\FreeRTOS_Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 966:..\..\FreeRTOS_Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 967:..\..\FreeRTOS_Source/queue.c **** 	post). */
 968:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 857              		.loc 1 968 0
 858 002c 7B62     		str	r3, [r7, #36]
 969:..\..\FreeRTOS_Source/queue.c **** 	{
 970:..\..\FreeRTOS_Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 859              		.loc 1 970 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 37


 860 002e BB6A     		ldr	r3, [r7, #40]
 861 0030 9A6B     		ldr	r2, [r3, #56]
 862 0032 BB6A     		ldr	r3, [r7, #40]
 863 0034 DB6B     		ldr	r3, [r3, #60]
 864 0036 9A42     		cmp	r2, r3
 865 0038 02D3     		bcc	.L52
 866              		.loc 1 970 0 is_stmt 0 discriminator 1
 867 003a 3B68     		ldr	r3, [r7]
 868 003c 022B     		cmp	r3, #2
 869 003e 2CD1     		bne	.L53
 870              	.L52:
 871              	.LBB25:
 971:..\..\FreeRTOS_Source/queue.c **** 		{
 972:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 872              		.loc 1 972 0 is_stmt 1
 873 0040 BB6A     		ldr	r3, [r7, #40]
 874 0042 93F84530 		ldrb	r3, [r3, #69]
 875 0046 87F82330 		strb	r3, [r7, #35]
 973:..\..\FreeRTOS_Source/queue.c **** 
 974:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 975:..\..\FreeRTOS_Source/queue.c **** 
 976:..\..\FreeRTOS_Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 977:..\..\FreeRTOS_Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 978:..\..\FreeRTOS_Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 979:..\..\FreeRTOS_Source/queue.c **** 			called here even though the disinherit function does not check if
 980:..\..\FreeRTOS_Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 981:..\..\FreeRTOS_Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 876              		.loc 1 981 0
 877 004a B86A     		ldr	r0, [r7, #40]
 878 004c B968     		ldr	r1, [r7, #8]
 879 004e 3A68     		ldr	r2, [r7]
 880 0050 FFF7FEFF 		bl	prvCopyDataToQueue
 982:..\..\FreeRTOS_Source/queue.c **** 
 983:..\..\FreeRTOS_Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 984:..\..\FreeRTOS_Source/queue.c **** 			be done when the queue is unlocked later. */
 985:..\..\FreeRTOS_Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 881              		.loc 1 985 0
 882 0054 97F92330 		ldrsb	r3, [r7, #35]
 883 0058 B3F1FF3F 		cmp	r3, #-1
 884 005c 12D1     		bne	.L54
 986:..\..\FreeRTOS_Source/queue.c **** 			{
 987:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 988:..\..\FreeRTOS_Source/queue.c **** 				{
 989:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 990:..\..\FreeRTOS_Source/queue.c **** 					{
 991:..\..\FreeRTOS_Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 992:..\..\FreeRTOS_Source/queue.c **** 						{
 993:..\..\FreeRTOS_Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 994:..\..\FreeRTOS_Source/queue.c **** 							to the queue set caused a higher priority task to
 995:..\..\FreeRTOS_Source/queue.c **** 							unblock.  A context switch is required. */
 996:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 997:..\..\FreeRTOS_Source/queue.c **** 							{
 998:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 999:..\..\FreeRTOS_Source/queue.c **** 							}
1000:..\..\FreeRTOS_Source/queue.c **** 							else
1001:..\..\FreeRTOS_Source/queue.c **** 							{
1002:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 38


1003:..\..\FreeRTOS_Source/queue.c **** 							}
1004:..\..\FreeRTOS_Source/queue.c **** 						}
1005:..\..\FreeRTOS_Source/queue.c **** 						else
1006:..\..\FreeRTOS_Source/queue.c **** 						{
1007:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1008:..\..\FreeRTOS_Source/queue.c **** 						}
1009:..\..\FreeRTOS_Source/queue.c **** 					}
1010:..\..\FreeRTOS_Source/queue.c **** 					else
1011:..\..\FreeRTOS_Source/queue.c **** 					{
1012:..\..\FreeRTOS_Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1013:..\..\FreeRTOS_Source/queue.c **** 						{
1014:..\..\FreeRTOS_Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1015:..\..\FreeRTOS_Source/queue.c **** 							{
1016:..\..\FreeRTOS_Source/queue.c **** 								/* The task waiting has a higher priority so
1017:..\..\FreeRTOS_Source/queue.c **** 								record that a context switch is required. */
1018:..\..\FreeRTOS_Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1019:..\..\FreeRTOS_Source/queue.c **** 								{
1020:..\..\FreeRTOS_Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1021:..\..\FreeRTOS_Source/queue.c **** 								}
1022:..\..\FreeRTOS_Source/queue.c **** 								else
1023:..\..\FreeRTOS_Source/queue.c **** 								{
1024:..\..\FreeRTOS_Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1025:..\..\FreeRTOS_Source/queue.c **** 								}
1026:..\..\FreeRTOS_Source/queue.c **** 							}
1027:..\..\FreeRTOS_Source/queue.c **** 							else
1028:..\..\FreeRTOS_Source/queue.c **** 							{
1029:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1030:..\..\FreeRTOS_Source/queue.c **** 							}
1031:..\..\FreeRTOS_Source/queue.c **** 						}
1032:..\..\FreeRTOS_Source/queue.c **** 						else
1033:..\..\FreeRTOS_Source/queue.c **** 						{
1034:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1035:..\..\FreeRTOS_Source/queue.c **** 						}
1036:..\..\FreeRTOS_Source/queue.c **** 					}
1037:..\..\FreeRTOS_Source/queue.c **** 				}
1038:..\..\FreeRTOS_Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1039:..\..\FreeRTOS_Source/queue.c **** 				{
1040:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 885              		.loc 1 1040 0
 886 005e BB6A     		ldr	r3, [r7, #40]
 887 0060 5B6A     		ldr	r3, [r3, #36]
 888 0062 002B     		cmp	r3, #0
 889 0064 16D0     		beq	.L55
1041:..\..\FreeRTOS_Source/queue.c **** 					{
1042:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 890              		.loc 1 1042 0
 891 0066 BB6A     		ldr	r3, [r7, #40]
 892 0068 2433     		adds	r3, r3, #36
 893 006a 1846     		mov	r0, r3
 894 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 895 0070 0346     		mov	r3, r0
 896 0072 002B     		cmp	r3, #0
 897 0074 0ED0     		beq	.L55
1043:..\..\FreeRTOS_Source/queue.c **** 						{
1044:..\..\FreeRTOS_Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1045:..\..\FreeRTOS_Source/queue.c **** 							context	switch is required. */
1046:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 39


 898              		.loc 1 1046 0
 899 0076 7B68     		ldr	r3, [r7, #4]
 900 0078 002B     		cmp	r3, #0
 901 007a 0BD0     		beq	.L55
1047:..\..\FreeRTOS_Source/queue.c **** 							{
1048:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 902              		.loc 1 1048 0
 903 007c 7B68     		ldr	r3, [r7, #4]
 904 007e 0122     		movs	r2, #1
 905 0080 1A60     		str	r2, [r3]
 906 0082 07E0     		b	.L55
 907              	.L54:
1049:..\..\FreeRTOS_Source/queue.c **** 							}
1050:..\..\FreeRTOS_Source/queue.c **** 							else
1051:..\..\FreeRTOS_Source/queue.c **** 							{
1052:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1053:..\..\FreeRTOS_Source/queue.c **** 							}
1054:..\..\FreeRTOS_Source/queue.c **** 						}
1055:..\..\FreeRTOS_Source/queue.c **** 						else
1056:..\..\FreeRTOS_Source/queue.c **** 						{
1057:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1058:..\..\FreeRTOS_Source/queue.c **** 						}
1059:..\..\FreeRTOS_Source/queue.c **** 					}
1060:..\..\FreeRTOS_Source/queue.c **** 					else
1061:..\..\FreeRTOS_Source/queue.c **** 					{
1062:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1063:..\..\FreeRTOS_Source/queue.c **** 					}
1064:..\..\FreeRTOS_Source/queue.c **** 				}
1065:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1066:..\..\FreeRTOS_Source/queue.c **** 			}
1067:..\..\FreeRTOS_Source/queue.c **** 			else
1068:..\..\FreeRTOS_Source/queue.c **** 			{
1069:..\..\FreeRTOS_Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1070:..\..\FreeRTOS_Source/queue.c **** 				knows that data was posted while it was locked. */
1071:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 908              		.loc 1 1071 0
 909 0084 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 910 0088 0133     		adds	r3, r3, #1
 911 008a DBB2     		uxtb	r3, r3
 912 008c DAB2     		uxtb	r2, r3
 913 008e BB6A     		ldr	r3, [r7, #40]
 914 0090 83F84520 		strb	r2, [r3, #69]
 915              	.L55:
1072:..\..\FreeRTOS_Source/queue.c **** 			}
1073:..\..\FreeRTOS_Source/queue.c **** 
1074:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 916              		.loc 1 1074 0
 917 0094 0123     		movs	r3, #1
 918 0096 FB62     		str	r3, [r7, #44]
 919              	.LBE25:
 971:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 920              		.loc 1 971 0
 921 0098 01E0     		b	.L56
 922              	.L53:
1075:..\..\FreeRTOS_Source/queue.c **** 		}
1076:..\..\FreeRTOS_Source/queue.c **** 		else
1077:..\..\FreeRTOS_Source/queue.c **** 		{
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 40


1078:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1079:..\..\FreeRTOS_Source/queue.c **** 			xReturn = errQUEUE_FULL;
 923              		.loc 1 1079 0
 924 009a 0023     		movs	r3, #0
 925 009c FB62     		str	r3, [r7, #44]
 926              	.L56:
 927 009e 7B6A     		ldr	r3, [r7, #36]
 928 00a0 7B61     		str	r3, [r7, #20]
 929              	.LBB26:
 930              	.LBB27:
 224:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 931              		.loc 2 229 0
 932 00a2 7B69     		ldr	r3, [r7, #20]
 933              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 934 00a4 83F31188 			msr basepri, r3	
 935              	@ 0 "" 2
 936              		.thumb
 937              	.LBE27:
 938              	.LBE26:
1080:..\..\FreeRTOS_Source/queue.c **** 		}
1081:..\..\FreeRTOS_Source/queue.c **** 	}
1082:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1083:..\..\FreeRTOS_Source/queue.c **** 
1084:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 939              		.loc 1 1084 0
 940 00a8 FB6A     		ldr	r3, [r7, #44]
1085:..\..\FreeRTOS_Source/queue.c **** }
 941              		.loc 1 1085 0
 942 00aa 1846     		mov	r0, r3
 943 00ac 3037     		adds	r7, r7, #48
 944              		.cfi_def_cfa_offset 8
 945 00ae BD46     		mov	sp, r7
 946              		.cfi_def_cfa_register 13
 947              		@ sp needed
 948 00b0 80BD     		pop	{r7, pc}
 949              		.cfi_endproc
 950              	.LFE77:
 951              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 952 00b2 00BF     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 953              		.align	2
 954              		.global	xQueueGiveFromISR
 955              		.thumb
 956              		.thumb_func
 957              		.type	xQueueGiveFromISR, %function
 958              	xQueueGiveFromISR:
 959              	.LFB78:
1086:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1087:..\..\FreeRTOS_Source/queue.c **** 
1088:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1089:..\..\FreeRTOS_Source/queue.c **** {
 960              		.loc 1 1089 0
 961              		.cfi_startproc
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 41


 962              		@ args = 0, pretend = 0, frame = 40
 963              		@ frame_needed = 1, uses_anonymous_args = 0
 964 0000 80B5     		push	{r7, lr}
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 7, -8
 967              		.cfi_offset 14, -4
 968 0002 8AB0     		sub	sp, sp, #40
 969              		.cfi_def_cfa_offset 48
 970 0004 00AF     		add	r7, sp, #0
 971              		.cfi_def_cfa_register 7
 972 0006 7860     		str	r0, [r7, #4]
 973 0008 3960     		str	r1, [r7]
1090:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
1091:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1092:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 974              		.loc 1 1092 0
 975 000a 7B68     		ldr	r3, [r7, #4]
 976 000c 3B62     		str	r3, [r7, #32]
 977              	.LBB28:
 978              	.LBB29:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 979              		.loc 2 211 0
 980              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 981 000e EFF31182 			mrs r2, basepri											
 982 0012 4FF0A003 		mov r3, #160												
 983 0016 83F31188 		msr basepri, r3											
 984 001a BFF36F8F 		isb														
 985 001e BFF34F8F 		dsb														
 986              	
 987              	@ 0 "" 2
 988              		.thumb
 989 0022 3A61     		str	r2, [r7, #16]
 990 0024 FB60     		str	r3, [r7, #12]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 991              		.loc 2 223 0
 992 0026 3B69     		ldr	r3, [r7, #16]
 993              	.LBE29:
 994              	.LBE28:
1093:..\..\FreeRTOS_Source/queue.c **** 
1094:..\..\FreeRTOS_Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1095:..\..\FreeRTOS_Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1096:..\..\FreeRTOS_Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1097:..\..\FreeRTOS_Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1098:..\..\FreeRTOS_Source/queue.c **** 	post). */
1099:..\..\FreeRTOS_Source/queue.c **** 
1100:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1101:..\..\FreeRTOS_Source/queue.c **** 
1102:..\..\FreeRTOS_Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1103:..\..\FreeRTOS_Source/queue.c **** 	if the item size is not 0. */
1104:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1105:..\..\FreeRTOS_Source/queue.c **** 
1106:..\..\FreeRTOS_Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1107:..\..\FreeRTOS_Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1108:..\..\FreeRTOS_Source/queue.c **** 	interrupts, only tasks. */
1109:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1110:..\..\FreeRTOS_Source/queue.c **** 
1111:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 42


1112:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1113:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1114:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1115:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1116:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1117:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1118:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1119:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1120:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1121:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1122:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1123:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1124:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1125:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1126:..\..\FreeRTOS_Source/queue.c **** 
1127:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 995              		.loc 1 1127 0
 996 0028 FB61     		str	r3, [r7, #28]
 997              	.LBB30:
1128:..\..\FreeRTOS_Source/queue.c **** 	{
1129:..\..\FreeRTOS_Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 998              		.loc 1 1129 0
 999 002a 3B6A     		ldr	r3, [r7, #32]
 1000 002c 9B6B     		ldr	r3, [r3, #56]
 1001 002e BB61     		str	r3, [r7, #24]
1130:..\..\FreeRTOS_Source/queue.c **** 
1131:..\..\FreeRTOS_Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1132:..\..\FreeRTOS_Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1133:..\..\FreeRTOS_Source/queue.c **** 		space'. */
1134:..\..\FreeRTOS_Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
 1002              		.loc 1 1134 0
 1003 0030 3B6A     		ldr	r3, [r7, #32]
 1004 0032 DA6B     		ldr	r2, [r3, #60]
 1005 0034 BB69     		ldr	r3, [r7, #24]
 1006 0036 9A42     		cmp	r2, r3
 1007 0038 29D9     		bls	.L60
 1008              	.LBB31:
1135:..\..\FreeRTOS_Source/queue.c **** 		{
1136:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1009              		.loc 1 1136 0
 1010 003a 3B6A     		ldr	r3, [r7, #32]
 1011 003c 93F84530 		ldrb	r3, [r3, #69]
 1012 0040 FB75     		strb	r3, [r7, #23]
1137:..\..\FreeRTOS_Source/queue.c **** 
1138:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1139:..\..\FreeRTOS_Source/queue.c **** 
1140:..\..\FreeRTOS_Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1141:..\..\FreeRTOS_Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1142:..\..\FreeRTOS_Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1143:..\..\FreeRTOS_Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1144:..\..\FreeRTOS_Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1145:..\..\FreeRTOS_Source/queue.c **** 			messages (semaphores) available. */
1146:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1013              		.loc 1 1146 0
 1014 0042 BB69     		ldr	r3, [r7, #24]
 1015 0044 5A1C     		adds	r2, r3, #1
 1016 0046 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 43


 1017 0048 9A63     		str	r2, [r3, #56]
1147:..\..\FreeRTOS_Source/queue.c **** 
1148:..\..\FreeRTOS_Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1149:..\..\FreeRTOS_Source/queue.c **** 			be done when the queue is unlocked later. */
1150:..\..\FreeRTOS_Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1018              		.loc 1 1150 0
 1019 004a 97F91730 		ldrsb	r3, [r7, #23]
 1020 004e B3F1FF3F 		cmp	r3, #-1
 1021 0052 12D1     		bne	.L61
1151:..\..\FreeRTOS_Source/queue.c **** 			{
1152:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1153:..\..\FreeRTOS_Source/queue.c **** 				{
1154:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1155:..\..\FreeRTOS_Source/queue.c **** 					{
1156:..\..\FreeRTOS_Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1157:..\..\FreeRTOS_Source/queue.c **** 						{
1158:..\..\FreeRTOS_Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1159:..\..\FreeRTOS_Source/queue.c **** 							posting	to the queue set caused a higher priority
1160:..\..\FreeRTOS_Source/queue.c **** 							task to	unblock.  A context switch is required. */
1161:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1162:..\..\FreeRTOS_Source/queue.c **** 							{
1163:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1164:..\..\FreeRTOS_Source/queue.c **** 							}
1165:..\..\FreeRTOS_Source/queue.c **** 							else
1166:..\..\FreeRTOS_Source/queue.c **** 							{
1167:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1168:..\..\FreeRTOS_Source/queue.c **** 							}
1169:..\..\FreeRTOS_Source/queue.c **** 						}
1170:..\..\FreeRTOS_Source/queue.c **** 						else
1171:..\..\FreeRTOS_Source/queue.c **** 						{
1172:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1173:..\..\FreeRTOS_Source/queue.c **** 						}
1174:..\..\FreeRTOS_Source/queue.c **** 					}
1175:..\..\FreeRTOS_Source/queue.c **** 					else
1176:..\..\FreeRTOS_Source/queue.c **** 					{
1177:..\..\FreeRTOS_Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1178:..\..\FreeRTOS_Source/queue.c **** 						{
1179:..\..\FreeRTOS_Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1180:..\..\FreeRTOS_Source/queue.c **** 							{
1181:..\..\FreeRTOS_Source/queue.c **** 								/* The task waiting has a higher priority so
1182:..\..\FreeRTOS_Source/queue.c **** 								record that a context switch is required. */
1183:..\..\FreeRTOS_Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1184:..\..\FreeRTOS_Source/queue.c **** 								{
1185:..\..\FreeRTOS_Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1186:..\..\FreeRTOS_Source/queue.c **** 								}
1187:..\..\FreeRTOS_Source/queue.c **** 								else
1188:..\..\FreeRTOS_Source/queue.c **** 								{
1189:..\..\FreeRTOS_Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1190:..\..\FreeRTOS_Source/queue.c **** 								}
1191:..\..\FreeRTOS_Source/queue.c **** 							}
1192:..\..\FreeRTOS_Source/queue.c **** 							else
1193:..\..\FreeRTOS_Source/queue.c **** 							{
1194:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1195:..\..\FreeRTOS_Source/queue.c **** 							}
1196:..\..\FreeRTOS_Source/queue.c **** 						}
1197:..\..\FreeRTOS_Source/queue.c **** 						else
1198:..\..\FreeRTOS_Source/queue.c **** 						{
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 44


1199:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1200:..\..\FreeRTOS_Source/queue.c **** 						}
1201:..\..\FreeRTOS_Source/queue.c **** 					}
1202:..\..\FreeRTOS_Source/queue.c **** 				}
1203:..\..\FreeRTOS_Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1204:..\..\FreeRTOS_Source/queue.c **** 				{
1205:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1022              		.loc 1 1205 0
 1023 0054 3B6A     		ldr	r3, [r7, #32]
 1024 0056 5B6A     		ldr	r3, [r3, #36]
 1025 0058 002B     		cmp	r3, #0
 1026 005a 15D0     		beq	.L62
1206:..\..\FreeRTOS_Source/queue.c **** 					{
1207:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1027              		.loc 1 1207 0
 1028 005c 3B6A     		ldr	r3, [r7, #32]
 1029 005e 2433     		adds	r3, r3, #36
 1030 0060 1846     		mov	r0, r3
 1031 0062 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1032 0066 0346     		mov	r3, r0
 1033 0068 002B     		cmp	r3, #0
 1034 006a 0DD0     		beq	.L62
1208:..\..\FreeRTOS_Source/queue.c **** 						{
1209:..\..\FreeRTOS_Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1210:..\..\FreeRTOS_Source/queue.c **** 							context	switch is required. */
1211:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1035              		.loc 1 1211 0
 1036 006c 3B68     		ldr	r3, [r7]
 1037 006e 002B     		cmp	r3, #0
 1038 0070 0AD0     		beq	.L62
1212:..\..\FreeRTOS_Source/queue.c **** 							{
1213:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1039              		.loc 1 1213 0
 1040 0072 3B68     		ldr	r3, [r7]
 1041 0074 0122     		movs	r2, #1
 1042 0076 1A60     		str	r2, [r3]
 1043 0078 06E0     		b	.L62
 1044              	.L61:
1214:..\..\FreeRTOS_Source/queue.c **** 							}
1215:..\..\FreeRTOS_Source/queue.c **** 							else
1216:..\..\FreeRTOS_Source/queue.c **** 							{
1217:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1218:..\..\FreeRTOS_Source/queue.c **** 							}
1219:..\..\FreeRTOS_Source/queue.c **** 						}
1220:..\..\FreeRTOS_Source/queue.c **** 						else
1221:..\..\FreeRTOS_Source/queue.c **** 						{
1222:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1223:..\..\FreeRTOS_Source/queue.c **** 						}
1224:..\..\FreeRTOS_Source/queue.c **** 					}
1225:..\..\FreeRTOS_Source/queue.c **** 					else
1226:..\..\FreeRTOS_Source/queue.c **** 					{
1227:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1228:..\..\FreeRTOS_Source/queue.c **** 					}
1229:..\..\FreeRTOS_Source/queue.c **** 				}
1230:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1231:..\..\FreeRTOS_Source/queue.c **** 			}
1232:..\..\FreeRTOS_Source/queue.c **** 			else
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 45


1233:..\..\FreeRTOS_Source/queue.c **** 			{
1234:..\..\FreeRTOS_Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1235:..\..\FreeRTOS_Source/queue.c **** 				knows that data was posted while it was locked. */
1236:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1045              		.loc 1 1236 0
 1046 007a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1047 007c 0133     		adds	r3, r3, #1
 1048 007e DBB2     		uxtb	r3, r3
 1049 0080 DAB2     		uxtb	r2, r3
 1050 0082 3B6A     		ldr	r3, [r7, #32]
 1051 0084 83F84520 		strb	r2, [r3, #69]
 1052              	.L62:
1237:..\..\FreeRTOS_Source/queue.c **** 			}
1238:..\..\FreeRTOS_Source/queue.c **** 
1239:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 1053              		.loc 1 1239 0
 1054 0088 0123     		movs	r3, #1
 1055 008a 7B62     		str	r3, [r7, #36]
 1056              	.LBE31:
 1057 008c 01E0     		b	.L63
 1058              	.L60:
1240:..\..\FreeRTOS_Source/queue.c **** 		}
1241:..\..\FreeRTOS_Source/queue.c **** 		else
1242:..\..\FreeRTOS_Source/queue.c **** 		{
1243:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1244:..\..\FreeRTOS_Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1059              		.loc 1 1244 0
 1060 008e 0023     		movs	r3, #0
 1061 0090 7B62     		str	r3, [r7, #36]
 1062              	.L63:
 1063 0092 FB69     		ldr	r3, [r7, #28]
 1064 0094 BB60     		str	r3, [r7, #8]
 1065              	.LBE30:
 1066              	.LBB32:
 1067              	.LBB33:
 1068              		.loc 2 229 0
 1069 0096 BB68     		ldr	r3, [r7, #8]
 1070              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1071 0098 83F31188 			msr basepri, r3	
 1072              	@ 0 "" 2
 1073              		.thumb
 1074              	.LBE33:
 1075              	.LBE32:
1245:..\..\FreeRTOS_Source/queue.c **** 		}
1246:..\..\FreeRTOS_Source/queue.c **** 	}
1247:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1248:..\..\FreeRTOS_Source/queue.c **** 
1249:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 1076              		.loc 1 1249 0
 1077 009c 7B6A     		ldr	r3, [r7, #36]
1250:..\..\FreeRTOS_Source/queue.c **** }
 1078              		.loc 1 1250 0
 1079 009e 1846     		mov	r0, r3
 1080 00a0 2837     		adds	r7, r7, #40
 1081              		.cfi_def_cfa_offset 8
 1082 00a2 BD46     		mov	sp, r7
 1083              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 46


 1084              		@ sp needed
 1085 00a4 80BD     		pop	{r7, pc}
 1086              		.cfi_endproc
 1087              	.LFE78:
 1088              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1089 00a6 00BF     		.section	.text.xQueueReceive,"ax",%progbits
 1090              		.align	2
 1091              		.global	xQueueReceive
 1092              		.thumb
 1093              		.thumb_func
 1094              		.type	xQueueReceive, %function
 1095              	xQueueReceive:
 1096              	.LFB79:
1251:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1252:..\..\FreeRTOS_Source/queue.c **** 
1253:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1254:..\..\FreeRTOS_Source/queue.c **** {
 1097              		.loc 1 1254 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 40
 1100              		@ frame_needed = 1, uses_anonymous_args = 0
 1101 0000 80B5     		push	{r7, lr}
 1102              		.cfi_def_cfa_offset 8
 1103              		.cfi_offset 7, -8
 1104              		.cfi_offset 14, -4
 1105 0002 8AB0     		sub	sp, sp, #40
 1106              		.cfi_def_cfa_offset 48
 1107 0004 00AF     		add	r7, sp, #0
 1108              		.cfi_def_cfa_register 7
 1109 0006 F860     		str	r0, [r7, #12]
 1110 0008 B960     		str	r1, [r7, #8]
 1111 000a 7A60     		str	r2, [r7, #4]
1255:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1112              		.loc 1 1255 0
 1113 000c 0023     		movs	r3, #0
 1114 000e 7B62     		str	r3, [r7, #36]
1256:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
1257:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1115              		.loc 1 1257 0
 1116 0010 FB68     		ldr	r3, [r7, #12]
 1117 0012 3B62     		str	r3, [r7, #32]
 1118              	.L77:
1258:..\..\FreeRTOS_Source/queue.c **** 
1259:..\..\FreeRTOS_Source/queue.c **** 	/* Check the pointer is not NULL. */
1260:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( ( pxQueue ) );
1261:..\..\FreeRTOS_Source/queue.c **** 
1262:..\..\FreeRTOS_Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1263:..\..\FreeRTOS_Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1264:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1265:..\..\FreeRTOS_Source/queue.c **** 
1266:..\..\FreeRTOS_Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1267:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1268:..\..\FreeRTOS_Source/queue.c **** 	{
1269:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1270:..\..\FreeRTOS_Source/queue.c **** 	}
1271:..\..\FreeRTOS_Source/queue.c **** 	#endif
1272:..\..\FreeRTOS_Source/queue.c **** 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 47


1273:..\..\FreeRTOS_Source/queue.c **** 
1274:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1275:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
1276:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
1277:..\..\FreeRTOS_Source/queue.c **** 
1278:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
1279:..\..\FreeRTOS_Source/queue.c **** 	{
1280:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 1119              		.loc 1 1280 0
 1120 0014 FFF7FEFF 		bl	vPortEnterCritical
 1121              	.LBB34:
1281:..\..\FreeRTOS_Source/queue.c **** 		{
1282:..\..\FreeRTOS_Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1122              		.loc 1 1282 0
 1123 0018 3B6A     		ldr	r3, [r7, #32]
 1124 001a 9B6B     		ldr	r3, [r3, #56]
 1125 001c FB61     		str	r3, [r7, #28]
1283:..\..\FreeRTOS_Source/queue.c **** 
1284:..\..\FreeRTOS_Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1285:..\..\FreeRTOS_Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1286:..\..\FreeRTOS_Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1126              		.loc 1 1286 0
 1127 001e FB69     		ldr	r3, [r7, #28]
 1128 0020 002B     		cmp	r3, #0
 1129 0022 1FD0     		beq	.L66
1287:..\..\FreeRTOS_Source/queue.c **** 			{
1288:..\..\FreeRTOS_Source/queue.c **** 				/* Data available, remove one item. */
1289:..\..\FreeRTOS_Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1130              		.loc 1 1289 0
 1131 0024 386A     		ldr	r0, [r7, #32]
 1132 0026 B968     		ldr	r1, [r7, #8]
 1133 0028 FFF7FEFF 		bl	prvCopyDataFromQueue
1290:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1291:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1134              		.loc 1 1291 0
 1135 002c FB69     		ldr	r3, [r7, #28]
 1136 002e 5A1E     		subs	r2, r3, #1
 1137 0030 3B6A     		ldr	r3, [r7, #32]
 1138 0032 9A63     		str	r2, [r3, #56]
1292:..\..\FreeRTOS_Source/queue.c **** 
1293:..\..\FreeRTOS_Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1294:..\..\FreeRTOS_Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1295:..\..\FreeRTOS_Source/queue.c **** 				task. */
1296:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1139              		.loc 1 1296 0
 1140 0034 3B6A     		ldr	r3, [r7, #32]
 1141 0036 1B69     		ldr	r3, [r3, #16]
 1142 0038 002B     		cmp	r3, #0
 1143 003a 0FD0     		beq	.L67
1297:..\..\FreeRTOS_Source/queue.c **** 				{
1298:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1144              		.loc 1 1298 0
 1145 003c 3B6A     		ldr	r3, [r7, #32]
 1146 003e 1033     		adds	r3, r3, #16
 1147 0040 1846     		mov	r0, r3
 1148 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1149 0046 0346     		mov	r3, r0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 48


 1150 0048 002B     		cmp	r3, #0
 1151 004a 07D0     		beq	.L67
1299:..\..\FreeRTOS_Source/queue.c **** 					{
1300:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1152              		.loc 1 1300 0
 1153 004c 3E4B     		ldr	r3, .L79
 1154 004e 4FF08052 		mov	r2, #268435456
 1155 0052 1A60     		str	r2, [r3]
 1156              	@ 1300 "..\..\FreeRTOS_Source\queue.c" 1
 1157 0054 BFF34F8F 		dsb
 1158              	@ 0 "" 2
 1159              	@ 1300 "..\..\FreeRTOS_Source\queue.c" 1
 1160 0058 BFF36F8F 		isb
 1161              	@ 0 "" 2
 1162              		.thumb
 1163              	.L67:
1301:..\..\FreeRTOS_Source/queue.c **** 					}
1302:..\..\FreeRTOS_Source/queue.c **** 					else
1303:..\..\FreeRTOS_Source/queue.c **** 					{
1304:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1305:..\..\FreeRTOS_Source/queue.c **** 					}
1306:..\..\FreeRTOS_Source/queue.c **** 				}
1307:..\..\FreeRTOS_Source/queue.c **** 				else
1308:..\..\FreeRTOS_Source/queue.c **** 				{
1309:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1310:..\..\FreeRTOS_Source/queue.c **** 				}
1311:..\..\FreeRTOS_Source/queue.c **** 
1312:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 1164              		.loc 1 1312 0
 1165 005c FFF7FEFF 		bl	vPortExitCritical
1313:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
 1166              		.loc 1 1313 0
 1167 0060 0123     		movs	r3, #1
 1168 0062 6DE0     		b	.L78
 1169              	.L66:
1314:..\..\FreeRTOS_Source/queue.c **** 			}
1315:..\..\FreeRTOS_Source/queue.c **** 			else
1316:..\..\FreeRTOS_Source/queue.c **** 			{
1317:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1170              		.loc 1 1317 0
 1171 0064 7B68     		ldr	r3, [r7, #4]
 1172 0066 002B     		cmp	r3, #0
 1173 0068 03D1     		bne	.L69
1318:..\..\FreeRTOS_Source/queue.c **** 				{
1319:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1320:..\..\FreeRTOS_Source/queue.c **** 					the block time has expired) so leave now. */
1321:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 1174              		.loc 1 1321 0
 1175 006a FFF7FEFF 		bl	vPortExitCritical
1322:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1323:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_EMPTY;
 1176              		.loc 1 1323 0
 1177 006e 0023     		movs	r3, #0
 1178 0070 66E0     		b	.L78
 1179              	.L69:
1324:..\..\FreeRTOS_Source/queue.c **** 				}
1325:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 49


 1180              		.loc 1 1325 0
 1181 0072 7B6A     		ldr	r3, [r7, #36]
 1182 0074 002B     		cmp	r3, #0
 1183 0076 06D1     		bne	.L70
1326:..\..\FreeRTOS_Source/queue.c **** 				{
1327:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and a block time was specified so
1328:..\..\FreeRTOS_Source/queue.c **** 					configure the timeout structure. */
1329:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1184              		.loc 1 1329 0
 1185 0078 07F11403 		add	r3, r7, #20
 1186 007c 1846     		mov	r0, r3
 1187 007e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1330:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1188              		.loc 1 1330 0
 1189 0082 0123     		movs	r3, #1
 1190 0084 7B62     		str	r3, [r7, #36]
 1191              	.L70:
 1192              	.LBE34:
1331:..\..\FreeRTOS_Source/queue.c **** 				}
1332:..\..\FreeRTOS_Source/queue.c **** 				else
1333:..\..\FreeRTOS_Source/queue.c **** 				{
1334:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
1335:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1336:..\..\FreeRTOS_Source/queue.c **** 				}
1337:..\..\FreeRTOS_Source/queue.c **** 			}
1338:..\..\FreeRTOS_Source/queue.c **** 		}
1339:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 1193              		.loc 1 1339 0
 1194 0086 FFF7FEFF 		bl	vPortExitCritical
1340:..\..\FreeRTOS_Source/queue.c **** 
1341:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1342:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
1343:..\..\FreeRTOS_Source/queue.c **** 
1344:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 1195              		.loc 1 1344 0
 1196 008a FFF7FEFF 		bl	vTaskSuspendAll
1345:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
 1197              		.loc 1 1345 0
 1198 008e FFF7FEFF 		bl	vPortEnterCritical
 1199 0092 3B6A     		ldr	r3, [r7, #32]
 1200 0094 93F84430 		ldrb	r3, [r3, #68]
 1201 0098 DBB2     		uxtb	r3, r3
 1202 009a 5BB2     		sxtb	r3, r3
 1203 009c B3F1FF3F 		cmp	r3, #-1
 1204 00a0 03D1     		bne	.L71
 1205              		.loc 1 1345 0 is_stmt 0 discriminator 1
 1206 00a2 3B6A     		ldr	r3, [r7, #32]
 1207 00a4 0022     		movs	r2, #0
 1208 00a6 83F84420 		strb	r2, [r3, #68]
 1209              	.L71:
 1210              		.loc 1 1345 0 discriminator 3
 1211 00aa 3B6A     		ldr	r3, [r7, #32]
 1212 00ac 93F84530 		ldrb	r3, [r3, #69]
 1213 00b0 DBB2     		uxtb	r3, r3
 1214 00b2 5BB2     		sxtb	r3, r3
 1215 00b4 B3F1FF3F 		cmp	r3, #-1
 1216 00b8 03D1     		bne	.L72
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 50


 1217              		.loc 1 1345 0 discriminator 4
 1218 00ba 3B6A     		ldr	r3, [r7, #32]
 1219 00bc 0022     		movs	r2, #0
 1220 00be 83F84520 		strb	r2, [r3, #69]
 1221              	.L72:
 1222              		.loc 1 1345 0 discriminator 6
 1223 00c2 FFF7FEFF 		bl	vPortExitCritical
1346:..\..\FreeRTOS_Source/queue.c **** 
1347:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1348:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1224              		.loc 1 1348 0 is_stmt 1 discriminator 6
 1225 00c6 07F11402 		add	r2, r7, #20
 1226 00ca 3B1D     		adds	r3, r7, #4
 1227 00cc 1046     		mov	r0, r2
 1228 00ce 1946     		mov	r1, r3
 1229 00d0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1230 00d4 0346     		mov	r3, r0
 1231 00d6 002B     		cmp	r3, #0
 1232 00d8 24D1     		bne	.L73
1349:..\..\FreeRTOS_Source/queue.c **** 		{
1350:..\..\FreeRTOS_Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1351:..\..\FreeRTOS_Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1352:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1233              		.loc 1 1352 0
 1234 00da 386A     		ldr	r0, [r7, #32]
 1235 00dc FFF7FEFF 		bl	prvIsQueueEmpty
 1236 00e0 0346     		mov	r3, r0
 1237 00e2 002B     		cmp	r3, #0
 1238 00e4 18D0     		beq	.L74
1353:..\..\FreeRTOS_Source/queue.c **** 			{
1354:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1355:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1239              		.loc 1 1355 0
 1240 00e6 3B6A     		ldr	r3, [r7, #32]
 1241 00e8 03F12402 		add	r2, r3, #36
 1242 00ec 7B68     		ldr	r3, [r7, #4]
 1243 00ee 1046     		mov	r0, r2
 1244 00f0 1946     		mov	r1, r3
 1245 00f2 FFF7FEFF 		bl	vTaskPlaceOnEventList
1356:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1246              		.loc 1 1356 0
 1247 00f6 386A     		ldr	r0, [r7, #32]
 1248 00f8 FFF7FEFF 		bl	prvUnlockQueue
1357:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1249              		.loc 1 1357 0
 1250 00fc FFF7FEFF 		bl	xTaskResumeAll
 1251 0100 0346     		mov	r3, r0
 1252 0102 002B     		cmp	r3, #0
 1253 0104 1BD1     		bne	.L76
1358:..\..\FreeRTOS_Source/queue.c **** 				{
1359:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 1254              		.loc 1 1359 0
 1255 0106 104B     		ldr	r3, .L79
 1256 0108 4FF08052 		mov	r2, #268435456
 1257 010c 1A60     		str	r2, [r3]
 1258              	@ 1359 "..\..\FreeRTOS_Source\queue.c" 1
 1259 010e BFF34F8F 		dsb
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 51


 1260              	@ 0 "" 2
 1261              	@ 1359 "..\..\FreeRTOS_Source\queue.c" 1
 1262 0112 BFF36F8F 		isb
 1263              	@ 0 "" 2
 1264              		.thumb
 1265 0116 12E0     		b	.L76
 1266              	.L74:
1360:..\..\FreeRTOS_Source/queue.c **** 				}
1361:..\..\FreeRTOS_Source/queue.c **** 				else
1362:..\..\FreeRTOS_Source/queue.c **** 				{
1363:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1364:..\..\FreeRTOS_Source/queue.c **** 				}
1365:..\..\FreeRTOS_Source/queue.c **** 			}
1366:..\..\FreeRTOS_Source/queue.c **** 			else
1367:..\..\FreeRTOS_Source/queue.c **** 			{
1368:..\..\FreeRTOS_Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1369:..\..\FreeRTOS_Source/queue.c **** 				data. */
1370:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1267              		.loc 1 1370 0
 1268 0118 386A     		ldr	r0, [r7, #32]
 1269 011a FFF7FEFF 		bl	prvUnlockQueue
1371:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 1270              		.loc 1 1371 0
 1271 011e FFF7FEFF 		bl	xTaskResumeAll
 1272 0122 77E7     		b	.L77
 1273              	.L73:
1372:..\..\FreeRTOS_Source/queue.c **** 			}
1373:..\..\FreeRTOS_Source/queue.c **** 		}
1374:..\..\FreeRTOS_Source/queue.c **** 		else
1375:..\..\FreeRTOS_Source/queue.c **** 		{
1376:..\..\FreeRTOS_Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1377:..\..\FreeRTOS_Source/queue.c **** 			back and attempt to read the data. */
1378:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1274              		.loc 1 1378 0
 1275 0124 386A     		ldr	r0, [r7, #32]
 1276 0126 FFF7FEFF 		bl	prvUnlockQueue
1379:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 1277              		.loc 1 1379 0
 1278 012a FFF7FEFF 		bl	xTaskResumeAll
1380:..\..\FreeRTOS_Source/queue.c **** 
1381:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1279              		.loc 1 1381 0
 1280 012e 386A     		ldr	r0, [r7, #32]
 1281 0130 FFF7FEFF 		bl	prvIsQueueEmpty
 1282 0134 0346     		mov	r3, r0
 1283 0136 002B     		cmp	r3, #0
 1284 0138 01D0     		beq	.L76
1382:..\..\FreeRTOS_Source/queue.c **** 			{
1383:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1384:..\..\FreeRTOS_Source/queue.c **** 				return errQUEUE_EMPTY;
 1285              		.loc 1 1384 0
 1286 013a 0023     		movs	r3, #0
 1287 013c 00E0     		b	.L78
 1288              	.L76:
1385:..\..\FreeRTOS_Source/queue.c **** 			}
1386:..\..\FreeRTOS_Source/queue.c **** 			else
1387:..\..\FreeRTOS_Source/queue.c **** 			{
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 52


1388:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1389:..\..\FreeRTOS_Source/queue.c **** 			}
1390:..\..\FreeRTOS_Source/queue.c **** 		}
1391:..\..\FreeRTOS_Source/queue.c **** 	}
 1289              		.loc 1 1391 0 discriminator 2
 1290 013e 69E7     		b	.L77
 1291              	.L78:
1392:..\..\FreeRTOS_Source/queue.c **** }
 1292              		.loc 1 1392 0 discriminator 3
 1293 0140 1846     		mov	r0, r3
 1294 0142 2837     		adds	r7, r7, #40
 1295              		.cfi_def_cfa_offset 8
 1296 0144 BD46     		mov	sp, r7
 1297              		.cfi_def_cfa_register 13
 1298              		@ sp needed
 1299 0146 80BD     		pop	{r7, pc}
 1300              	.L80:
 1301              		.align	2
 1302              	.L79:
 1303 0148 04ED00E0 		.word	-536810236
 1304              		.cfi_endproc
 1305              	.LFE79:
 1306              		.size	xQueueReceive, .-xQueueReceive
 1307              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1308              		.align	2
 1309              		.global	xQueueSemaphoreTake
 1310              		.thumb
 1311              		.thumb_func
 1312              		.type	xQueueSemaphoreTake, %function
 1313              	xQueueSemaphoreTake:
 1314              	.LFB80:
1393:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1394:..\..\FreeRTOS_Source/queue.c **** 
1395:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1396:..\..\FreeRTOS_Source/queue.c **** {
 1315              		.loc 1 1396 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 40
 1318              		@ frame_needed = 1, uses_anonymous_args = 0
 1319 0000 80B5     		push	{r7, lr}
 1320              		.cfi_def_cfa_offset 8
 1321              		.cfi_offset 7, -8
 1322              		.cfi_offset 14, -4
 1323 0002 8AB0     		sub	sp, sp, #40
 1324              		.cfi_def_cfa_offset 48
 1325 0004 00AF     		add	r7, sp, #0
 1326              		.cfi_def_cfa_register 7
 1327 0006 7860     		str	r0, [r7, #4]
 1328 0008 3960     		str	r1, [r7]
1397:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1329              		.loc 1 1397 0
 1330 000a 0023     		movs	r3, #0
 1331 000c 7B62     		str	r3, [r7, #36]
1398:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
1399:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1332              		.loc 1 1399 0
 1333 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 53


 1334 0010 FB61     		str	r3, [r7, #28]
1400:..\..\FreeRTOS_Source/queue.c **** 
1401:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1402:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
 1335              		.loc 1 1402 0
 1336 0012 0023     		movs	r3, #0
 1337 0014 3B62     		str	r3, [r7, #32]
 1338              	.L96:
1403:..\..\FreeRTOS_Source/queue.c **** #endif
1404:..\..\FreeRTOS_Source/queue.c **** 
1405:..\..\FreeRTOS_Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1406:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( ( pxQueue ) );
1407:..\..\FreeRTOS_Source/queue.c **** 
1408:..\..\FreeRTOS_Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1409:..\..\FreeRTOS_Source/queue.c **** 	0. */
1410:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1411:..\..\FreeRTOS_Source/queue.c **** 
1412:..\..\FreeRTOS_Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1413:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1414:..\..\FreeRTOS_Source/queue.c **** 	{
1415:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1416:..\..\FreeRTOS_Source/queue.c **** 	}
1417:..\..\FreeRTOS_Source/queue.c **** 	#endif
1418:..\..\FreeRTOS_Source/queue.c **** 
1419:..\..\FreeRTOS_Source/queue.c **** 
1420:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1421:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
1422:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
1423:..\..\FreeRTOS_Source/queue.c **** 
1424:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
1425:..\..\FreeRTOS_Source/queue.c **** 	{
1426:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 1339              		.loc 1 1426 0
 1340 0016 FFF7FEFF 		bl	vPortEnterCritical
 1341              	.LBB35:
1427:..\..\FreeRTOS_Source/queue.c **** 		{
1428:..\..\FreeRTOS_Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1429:..\..\FreeRTOS_Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1430:..\..\FreeRTOS_Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 1342              		.loc 1 1430 0
 1343 001a FB69     		ldr	r3, [r7, #28]
 1344 001c 9B6B     		ldr	r3, [r3, #56]
 1345 001e BB61     		str	r3, [r7, #24]
1431:..\..\FreeRTOS_Source/queue.c **** 
1432:..\..\FreeRTOS_Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1433:..\..\FreeRTOS_Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1434:..\..\FreeRTOS_Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 1346              		.loc 1 1434 0
 1347 0020 BB69     		ldr	r3, [r7, #24]
 1348 0022 002B     		cmp	r3, #0
 1349 0024 24D0     		beq	.L82
1435:..\..\FreeRTOS_Source/queue.c **** 			{
1436:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1437:..\..\FreeRTOS_Source/queue.c **** 
1438:..\..\FreeRTOS_Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1439:..\..\FreeRTOS_Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1440:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 54


 1350              		.loc 1 1440 0
 1351 0026 BB69     		ldr	r3, [r7, #24]
 1352 0028 5A1E     		subs	r2, r3, #1
 1353 002a FB69     		ldr	r3, [r7, #28]
 1354 002c 9A63     		str	r2, [r3, #56]
1441:..\..\FreeRTOS_Source/queue.c **** 
1442:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1443:..\..\FreeRTOS_Source/queue.c **** 				{
1444:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1355              		.loc 1 1444 0
 1356 002e FB69     		ldr	r3, [r7, #28]
 1357 0030 1B68     		ldr	r3, [r3]
 1358 0032 002B     		cmp	r3, #0
 1359 0034 04D1     		bne	.L83
1445:..\..\FreeRTOS_Source/queue.c **** 					{
1446:..\..\FreeRTOS_Source/queue.c **** 						/* Record the information required to implement
1447:..\..\FreeRTOS_Source/queue.c **** 						priority inheritance should it become necessary. */
1448:..\..\FreeRTOS_Source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
 1360              		.loc 1 1448 0
 1361 0036 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1362 003a 0246     		mov	r2, r0
 1363 003c FB69     		ldr	r3, [r7, #28]
 1364 003e 5A60     		str	r2, [r3, #4]
 1365              	.L83:
1449:..\..\FreeRTOS_Source/queue.c **** 					}
1450:..\..\FreeRTOS_Source/queue.c **** 					else
1451:..\..\FreeRTOS_Source/queue.c **** 					{
1452:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1453:..\..\FreeRTOS_Source/queue.c **** 					}
1454:..\..\FreeRTOS_Source/queue.c **** 				}
1455:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1456:..\..\FreeRTOS_Source/queue.c **** 
1457:..\..\FreeRTOS_Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1458:..\..\FreeRTOS_Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1459:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1366              		.loc 1 1459 0
 1367 0040 FB69     		ldr	r3, [r7, #28]
 1368 0042 1B69     		ldr	r3, [r3, #16]
 1369 0044 002B     		cmp	r3, #0
 1370 0046 0FD0     		beq	.L84
1460:..\..\FreeRTOS_Source/queue.c **** 				{
1461:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1371              		.loc 1 1461 0
 1372 0048 FB69     		ldr	r3, [r7, #28]
 1373 004a 1033     		adds	r3, r3, #16
 1374 004c 1846     		mov	r0, r3
 1375 004e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1376 0052 0346     		mov	r3, r0
 1377 0054 002B     		cmp	r3, #0
 1378 0056 07D0     		beq	.L84
1462:..\..\FreeRTOS_Source/queue.c **** 					{
1463:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1379              		.loc 1 1463 0
 1380 0058 4E4B     		ldr	r3, .L98
 1381 005a 4FF08052 		mov	r2, #268435456
 1382 005e 1A60     		str	r2, [r3]
 1383              	@ 1463 "..\..\FreeRTOS_Source\queue.c" 1
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 55


 1384 0060 BFF34F8F 		dsb
 1385              	@ 0 "" 2
 1386              	@ 1463 "..\..\FreeRTOS_Source\queue.c" 1
 1387 0064 BFF36F8F 		isb
 1388              	@ 0 "" 2
 1389              		.thumb
 1390              	.L84:
1464:..\..\FreeRTOS_Source/queue.c **** 					}
1465:..\..\FreeRTOS_Source/queue.c **** 					else
1466:..\..\FreeRTOS_Source/queue.c **** 					{
1467:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1468:..\..\FreeRTOS_Source/queue.c **** 					}
1469:..\..\FreeRTOS_Source/queue.c **** 				}
1470:..\..\FreeRTOS_Source/queue.c **** 				else
1471:..\..\FreeRTOS_Source/queue.c **** 				{
1472:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1473:..\..\FreeRTOS_Source/queue.c **** 				}
1474:..\..\FreeRTOS_Source/queue.c **** 
1475:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 1391              		.loc 1 1475 0
 1392 0068 FFF7FEFF 		bl	vPortExitCritical
1476:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
 1393              		.loc 1 1476 0
 1394 006c 0123     		movs	r3, #1
 1395 006e 8CE0     		b	.L97
 1396              	.L82:
1477:..\..\FreeRTOS_Source/queue.c **** 			}
1478:..\..\FreeRTOS_Source/queue.c **** 			else
1479:..\..\FreeRTOS_Source/queue.c **** 			{
1480:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1397              		.loc 1 1480 0
 1398 0070 3B68     		ldr	r3, [r7]
 1399 0072 002B     		cmp	r3, #0
 1400 0074 03D1     		bne	.L86
1481:..\..\FreeRTOS_Source/queue.c **** 				{
1482:..\..\FreeRTOS_Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1483:..\..\FreeRTOS_Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1484:..\..\FreeRTOS_Source/queue.c **** 					if it were 0 the function would have exited. */
1485:..\..\FreeRTOS_Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1486:..\..\FreeRTOS_Source/queue.c **** 					{
1487:..\..\FreeRTOS_Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1488:..\..\FreeRTOS_Source/queue.c **** 					}
1489:..\..\FreeRTOS_Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1490:..\..\FreeRTOS_Source/queue.c **** 
1491:..\..\FreeRTOS_Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1492:..\..\FreeRTOS_Source/queue.c **** 					(or the block time has expired) so exit now. */
1493:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 1401              		.loc 1 1493 0
 1402 0076 FFF7FEFF 		bl	vPortExitCritical
1494:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1495:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_EMPTY;
 1403              		.loc 1 1495 0
 1404 007a 0023     		movs	r3, #0
 1405 007c 85E0     		b	.L97
 1406              	.L86:
1496:..\..\FreeRTOS_Source/queue.c **** 				}
1497:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 56


 1407              		.loc 1 1497 0
 1408 007e 7B6A     		ldr	r3, [r7, #36]
 1409 0080 002B     		cmp	r3, #0
 1410 0082 06D1     		bne	.L87
1498:..\..\FreeRTOS_Source/queue.c **** 				{
1499:..\..\FreeRTOS_Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1500:..\..\FreeRTOS_Source/queue.c **** 					so configure the timeout structure ready to block. */
1501:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1411              		.loc 1 1501 0
 1412 0084 07F10C03 		add	r3, r7, #12
 1413 0088 1846     		mov	r0, r3
 1414 008a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1502:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1415              		.loc 1 1502 0
 1416 008e 0123     		movs	r3, #1
 1417 0090 7B62     		str	r3, [r7, #36]
 1418              	.L87:
 1419              	.LBE35:
1503:..\..\FreeRTOS_Source/queue.c **** 				}
1504:..\..\FreeRTOS_Source/queue.c **** 				else
1505:..\..\FreeRTOS_Source/queue.c **** 				{
1506:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
1507:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1508:..\..\FreeRTOS_Source/queue.c **** 				}
1509:..\..\FreeRTOS_Source/queue.c **** 			}
1510:..\..\FreeRTOS_Source/queue.c **** 		}
1511:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 1420              		.loc 1 1511 0
 1421 0092 FFF7FEFF 		bl	vPortExitCritical
1512:..\..\FreeRTOS_Source/queue.c **** 
1513:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1514:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
1515:..\..\FreeRTOS_Source/queue.c **** 
1516:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 1422              		.loc 1 1516 0
 1423 0096 FFF7FEFF 		bl	vTaskSuspendAll
1517:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
 1424              		.loc 1 1517 0
 1425 009a FFF7FEFF 		bl	vPortEnterCritical
 1426 009e FB69     		ldr	r3, [r7, #28]
 1427 00a0 93F84430 		ldrb	r3, [r3, #68]
 1428 00a4 DBB2     		uxtb	r3, r3
 1429 00a6 5BB2     		sxtb	r3, r3
 1430 00a8 B3F1FF3F 		cmp	r3, #-1
 1431 00ac 03D1     		bne	.L88
 1432              		.loc 1 1517 0 is_stmt 0 discriminator 1
 1433 00ae FB69     		ldr	r3, [r7, #28]
 1434 00b0 0022     		movs	r2, #0
 1435 00b2 83F84420 		strb	r2, [r3, #68]
 1436              	.L88:
 1437              		.loc 1 1517 0 discriminator 3
 1438 00b6 FB69     		ldr	r3, [r7, #28]
 1439 00b8 93F84530 		ldrb	r3, [r3, #69]
 1440 00bc DBB2     		uxtb	r3, r3
 1441 00be 5BB2     		sxtb	r3, r3
 1442 00c0 B3F1FF3F 		cmp	r3, #-1
 1443 00c4 03D1     		bne	.L89
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 57


 1444              		.loc 1 1517 0 discriminator 4
 1445 00c6 FB69     		ldr	r3, [r7, #28]
 1446 00c8 0022     		movs	r2, #0
 1447 00ca 83F84520 		strb	r2, [r3, #69]
 1448              	.L89:
 1449              		.loc 1 1517 0 discriminator 6
 1450 00ce FFF7FEFF 		bl	vPortExitCritical
1518:..\..\FreeRTOS_Source/queue.c **** 
1519:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1520:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1451              		.loc 1 1520 0 is_stmt 1 discriminator 6
 1452 00d2 07F10C02 		add	r2, r7, #12
 1453 00d6 3B46     		mov	r3, r7
 1454 00d8 1046     		mov	r0, r2
 1455 00da 1946     		mov	r1, r3
 1456 00dc FFF7FEFF 		bl	xTaskCheckForTimeOut
 1457 00e0 0346     		mov	r3, r0
 1458 00e2 002B     		cmp	r3, #0
 1459 00e4 32D1     		bne	.L90
1521:..\..\FreeRTOS_Source/queue.c **** 		{
1522:..\..\FreeRTOS_Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1523:..\..\FreeRTOS_Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1524:..\..\FreeRTOS_Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1525:..\..\FreeRTOS_Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1526:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1460              		.loc 1 1526 0
 1461 00e6 F869     		ldr	r0, [r7, #28]
 1462 00e8 FFF7FEFF 		bl	prvIsQueueEmpty
 1463 00ec 0346     		mov	r3, r0
 1464 00ee 002B     		cmp	r3, #0
 1465 00f0 26D0     		beq	.L91
1527:..\..\FreeRTOS_Source/queue.c **** 			{
1528:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1529:..\..\FreeRTOS_Source/queue.c **** 
1530:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1531:..\..\FreeRTOS_Source/queue.c **** 				{
1532:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1466              		.loc 1 1532 0
 1467 00f2 FB69     		ldr	r3, [r7, #28]
 1468 00f4 1B68     		ldr	r3, [r3]
 1469 00f6 002B     		cmp	r3, #0
 1470 00f8 09D1     		bne	.L92
1533:..\..\FreeRTOS_Source/queue.c **** 					{
1534:..\..\FreeRTOS_Source/queue.c **** 						taskENTER_CRITICAL();
 1471              		.loc 1 1534 0
 1472 00fa FFF7FEFF 		bl	vPortEnterCritical
1535:..\..\FreeRTOS_Source/queue.c **** 						{
1536:..\..\FreeRTOS_Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1473              		.loc 1 1536 0
 1474 00fe FB69     		ldr	r3, [r7, #28]
 1475 0100 5B68     		ldr	r3, [r3, #4]
 1476 0102 1846     		mov	r0, r3
 1477 0104 FFF7FEFF 		bl	xTaskPriorityInherit
 1478 0108 3862     		str	r0, [r7, #32]
1537:..\..\FreeRTOS_Source/queue.c **** 						}
1538:..\..\FreeRTOS_Source/queue.c **** 						taskEXIT_CRITICAL();
 1479              		.loc 1 1538 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 58


 1480 010a FFF7FEFF 		bl	vPortExitCritical
 1481              	.L92:
1539:..\..\FreeRTOS_Source/queue.c **** 					}
1540:..\..\FreeRTOS_Source/queue.c **** 					else
1541:..\..\FreeRTOS_Source/queue.c **** 					{
1542:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1543:..\..\FreeRTOS_Source/queue.c **** 					}
1544:..\..\FreeRTOS_Source/queue.c **** 				}
1545:..\..\FreeRTOS_Source/queue.c **** 				#endif
1546:..\..\FreeRTOS_Source/queue.c **** 
1547:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1482              		.loc 1 1547 0
 1483 010e FB69     		ldr	r3, [r7, #28]
 1484 0110 03F12402 		add	r2, r3, #36
 1485 0114 3B68     		ldr	r3, [r7]
 1486 0116 1046     		mov	r0, r2
 1487 0118 1946     		mov	r1, r3
 1488 011a FFF7FEFF 		bl	vTaskPlaceOnEventList
1548:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1489              		.loc 1 1548 0
 1490 011e F869     		ldr	r0, [r7, #28]
 1491 0120 FFF7FEFF 		bl	prvUnlockQueue
1549:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1492              		.loc 1 1549 0
 1493 0124 FFF7FEFF 		bl	xTaskResumeAll
 1494 0128 0346     		mov	r3, r0
 1495 012a 002B     		cmp	r3, #0
 1496 012c 2CD1     		bne	.L94
1550:..\..\FreeRTOS_Source/queue.c **** 				{
1551:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 1497              		.loc 1 1551 0
 1498 012e 194B     		ldr	r3, .L98
 1499 0130 4FF08052 		mov	r2, #268435456
 1500 0134 1A60     		str	r2, [r3]
 1501              	@ 1551 "..\..\FreeRTOS_Source\queue.c" 1
 1502 0136 BFF34F8F 		dsb
 1503              	@ 0 "" 2
 1504              	@ 1551 "..\..\FreeRTOS_Source\queue.c" 1
 1505 013a BFF36F8F 		isb
 1506              	@ 0 "" 2
 1507              		.thumb
 1508 013e 23E0     		b	.L94
 1509              	.L91:
1552:..\..\FreeRTOS_Source/queue.c **** 				}
1553:..\..\FreeRTOS_Source/queue.c **** 				else
1554:..\..\FreeRTOS_Source/queue.c **** 				{
1555:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1556:..\..\FreeRTOS_Source/queue.c **** 				}
1557:..\..\FreeRTOS_Source/queue.c **** 			}
1558:..\..\FreeRTOS_Source/queue.c **** 			else
1559:..\..\FreeRTOS_Source/queue.c **** 			{
1560:..\..\FreeRTOS_Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1561:..\..\FreeRTOS_Source/queue.c **** 				attempt to take the semaphore again. */
1562:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1510              		.loc 1 1562 0
 1511 0140 F869     		ldr	r0, [r7, #28]
 1512 0142 FFF7FEFF 		bl	prvUnlockQueue
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 59


1563:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 1513              		.loc 1 1563 0
 1514 0146 FFF7FEFF 		bl	xTaskResumeAll
 1515 014a 64E7     		b	.L96
 1516              	.L90:
1564:..\..\FreeRTOS_Source/queue.c **** 			}
1565:..\..\FreeRTOS_Source/queue.c **** 		}
1566:..\..\FreeRTOS_Source/queue.c **** 		else
1567:..\..\FreeRTOS_Source/queue.c **** 		{
1568:..\..\FreeRTOS_Source/queue.c **** 			/* Timed out. */
1569:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1517              		.loc 1 1569 0
 1518 014c F869     		ldr	r0, [r7, #28]
 1519 014e FFF7FEFF 		bl	prvUnlockQueue
1570:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 1520              		.loc 1 1570 0
 1521 0152 FFF7FEFF 		bl	xTaskResumeAll
1571:..\..\FreeRTOS_Source/queue.c **** 
1572:..\..\FreeRTOS_Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1573:..\..\FreeRTOS_Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1574:..\..\FreeRTOS_Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1575:..\..\FreeRTOS_Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1576:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1522              		.loc 1 1576 0
 1523 0156 F869     		ldr	r0, [r7, #28]
 1524 0158 FFF7FEFF 		bl	prvIsQueueEmpty
 1525 015c 0346     		mov	r3, r0
 1526 015e 002B     		cmp	r3, #0
 1527 0160 12D0     		beq	.L94
1577:..\..\FreeRTOS_Source/queue.c **** 			{
1578:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1579:..\..\FreeRTOS_Source/queue.c **** 				{
1580:..\..\FreeRTOS_Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1581:..\..\FreeRTOS_Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1582:..\..\FreeRTOS_Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1583:..\..\FreeRTOS_Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
 1528              		.loc 1 1583 0
 1529 0162 3B6A     		ldr	r3, [r7, #32]
 1530 0164 002B     		cmp	r3, #0
 1531 0166 0DD0     		beq	.L95
1584:..\..\FreeRTOS_Source/queue.c **** 					{
1585:..\..\FreeRTOS_Source/queue.c **** 						taskENTER_CRITICAL();
 1532              		.loc 1 1585 0
 1533 0168 FFF7FEFF 		bl	vPortEnterCritical
 1534              	.LBB36:
1586:..\..\FreeRTOS_Source/queue.c **** 						{
1587:..\..\FreeRTOS_Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1588:..\..\FreeRTOS_Source/queue.c **** 
1589:..\..\FreeRTOS_Source/queue.c **** 							/* This task blocking on the mutex caused another
1590:..\..\FreeRTOS_Source/queue.c **** 							task to inherit this task's priority.  Now this task
1591:..\..\FreeRTOS_Source/queue.c **** 							has timed out the priority should be disinherited
1592:..\..\FreeRTOS_Source/queue.c **** 							again, but only as low as the next highest priority
1593:..\..\FreeRTOS_Source/queue.c **** 							task that is waiting for the same mutex. */
1594:..\..\FreeRTOS_Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 1535              		.loc 1 1594 0
 1536 016c F869     		ldr	r0, [r7, #28]
 1537 016e FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 60


 1538 0172 7861     		str	r0, [r7, #20]
1595:..\..\FreeRTOS_Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
 1539              		.loc 1 1595 0
 1540 0174 FB69     		ldr	r3, [r7, #28]
 1541 0176 5B68     		ldr	r3, [r3, #4]
 1542 0178 1846     		mov	r0, r3
 1543 017a 7969     		ldr	r1, [r7, #20]
 1544 017c FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 1545              	.LBE36:
1596:..\..\FreeRTOS_Source/queue.c **** 						}
1597:..\..\FreeRTOS_Source/queue.c **** 						taskEXIT_CRITICAL();
 1546              		.loc 1 1597 0
 1547 0180 FFF7FEFF 		bl	vPortExitCritical
 1548              	.L95:
1598:..\..\FreeRTOS_Source/queue.c **** 					}
1599:..\..\FreeRTOS_Source/queue.c **** 				}
1600:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1601:..\..\FreeRTOS_Source/queue.c **** 
1602:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1603:..\..\FreeRTOS_Source/queue.c **** 				return errQUEUE_EMPTY;
 1549              		.loc 1 1603 0
 1550 0184 0023     		movs	r3, #0
 1551 0186 00E0     		b	.L97
 1552              	.L94:
1604:..\..\FreeRTOS_Source/queue.c **** 			}
1605:..\..\FreeRTOS_Source/queue.c **** 			else
1606:..\..\FreeRTOS_Source/queue.c **** 			{
1607:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1608:..\..\FreeRTOS_Source/queue.c **** 			}
1609:..\..\FreeRTOS_Source/queue.c **** 		}
1610:..\..\FreeRTOS_Source/queue.c **** 	}
 1553              		.loc 1 1610 0 discriminator 2
 1554 0188 45E7     		b	.L96
 1555              	.L97:
1611:..\..\FreeRTOS_Source/queue.c **** }
 1556              		.loc 1 1611 0 discriminator 3
 1557 018a 1846     		mov	r0, r3
 1558 018c 2837     		adds	r7, r7, #40
 1559              		.cfi_def_cfa_offset 8
 1560 018e BD46     		mov	sp, r7
 1561              		.cfi_def_cfa_register 13
 1562              		@ sp needed
 1563 0190 80BD     		pop	{r7, pc}
 1564              	.L99:
 1565 0192 00BF     		.align	2
 1566              	.L98:
 1567 0194 04ED00E0 		.word	-536810236
 1568              		.cfi_endproc
 1569              	.LFE80:
 1570              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 1571              		.section	.text.xQueuePeek,"ax",%progbits
 1572              		.align	2
 1573              		.global	xQueuePeek
 1574              		.thumb
 1575              		.thumb_func
 1576              		.type	xQueuePeek, %function
 1577              	xQueuePeek:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 61


 1578              	.LFB81:
1612:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1613:..\..\FreeRTOS_Source/queue.c **** 
1614:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1615:..\..\FreeRTOS_Source/queue.c **** {
 1579              		.loc 1 1615 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 40
 1582              		@ frame_needed = 1, uses_anonymous_args = 0
 1583 0000 80B5     		push	{r7, lr}
 1584              		.cfi_def_cfa_offset 8
 1585              		.cfi_offset 7, -8
 1586              		.cfi_offset 14, -4
 1587 0002 8AB0     		sub	sp, sp, #40
 1588              		.cfi_def_cfa_offset 48
 1589 0004 00AF     		add	r7, sp, #0
 1590              		.cfi_def_cfa_register 7
 1591 0006 F860     		str	r0, [r7, #12]
 1592 0008 B960     		str	r1, [r7, #8]
 1593 000a 7A60     		str	r2, [r7, #4]
1616:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1594              		.loc 1 1616 0
 1595 000c 0023     		movs	r3, #0
 1596 000e 7B62     		str	r3, [r7, #36]
1617:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
1618:..\..\FreeRTOS_Source/queue.c **** int8_t *pcOriginalReadPosition;
1619:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1597              		.loc 1 1619 0
 1598 0010 FB68     		ldr	r3, [r7, #12]
 1599 0012 3B62     		str	r3, [r7, #32]
 1600              	.L112:
1620:..\..\FreeRTOS_Source/queue.c **** 
1621:..\..\FreeRTOS_Source/queue.c **** 	/* Check the pointer is not NULL. */
1622:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( ( pxQueue ) );
1623:..\..\FreeRTOS_Source/queue.c **** 
1624:..\..\FreeRTOS_Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1625:..\..\FreeRTOS_Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1626:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1627:..\..\FreeRTOS_Source/queue.c **** 
1628:..\..\FreeRTOS_Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1629:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1630:..\..\FreeRTOS_Source/queue.c **** 	{
1631:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1632:..\..\FreeRTOS_Source/queue.c **** 	}
1633:..\..\FreeRTOS_Source/queue.c **** 	#endif
1634:..\..\FreeRTOS_Source/queue.c **** 
1635:..\..\FreeRTOS_Source/queue.c **** 
1636:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1637:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
1638:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
1639:..\..\FreeRTOS_Source/queue.c **** 
1640:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
1641:..\..\FreeRTOS_Source/queue.c **** 	{
1642:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 1601              		.loc 1 1642 0
 1602 0014 FFF7FEFF 		bl	vPortEnterCritical
 1603              	.LBB37:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 62


1643:..\..\FreeRTOS_Source/queue.c **** 		{
1644:..\..\FreeRTOS_Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1604              		.loc 1 1644 0
 1605 0018 3B6A     		ldr	r3, [r7, #32]
 1606 001a 9B6B     		ldr	r3, [r3, #56]
 1607 001c FB61     		str	r3, [r7, #28]
1645:..\..\FreeRTOS_Source/queue.c **** 
1646:..\..\FreeRTOS_Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1647:..\..\FreeRTOS_Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1648:..\..\FreeRTOS_Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1608              		.loc 1 1648 0
 1609 001e FB69     		ldr	r3, [r7, #28]
 1610 0020 002B     		cmp	r3, #0
 1611 0022 21D0     		beq	.L101
1649:..\..\FreeRTOS_Source/queue.c **** 			{
1650:..\..\FreeRTOS_Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1651:..\..\FreeRTOS_Source/queue.c **** 				is read from the queue as this function is only peeking the
1652:..\..\FreeRTOS_Source/queue.c **** 				data, not removing it. */
1653:..\..\FreeRTOS_Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1612              		.loc 1 1653 0
 1613 0024 3B6A     		ldr	r3, [r7, #32]
 1614 0026 DB68     		ldr	r3, [r3, #12]
 1615 0028 BB61     		str	r3, [r7, #24]
1654:..\..\FreeRTOS_Source/queue.c **** 
1655:..\..\FreeRTOS_Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1616              		.loc 1 1655 0
 1617 002a 386A     		ldr	r0, [r7, #32]
 1618 002c B968     		ldr	r1, [r7, #8]
 1619 002e FFF7FEFF 		bl	prvCopyDataFromQueue
1656:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1657:..\..\FreeRTOS_Source/queue.c **** 
1658:..\..\FreeRTOS_Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1659:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1620              		.loc 1 1659 0
 1621 0032 3B6A     		ldr	r3, [r7, #32]
 1622 0034 BA69     		ldr	r2, [r7, #24]
 1623 0036 DA60     		str	r2, [r3, #12]
1660:..\..\FreeRTOS_Source/queue.c **** 
1661:..\..\FreeRTOS_Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1662:..\..\FreeRTOS_Source/queue.c **** 				any other tasks waiting for the data. */
1663:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1624              		.loc 1 1663 0
 1625 0038 3B6A     		ldr	r3, [r7, #32]
 1626 003a 5B6A     		ldr	r3, [r3, #36]
 1627 003c 002B     		cmp	r3, #0
 1628 003e 0FD0     		beq	.L102
1664:..\..\FreeRTOS_Source/queue.c **** 				{
1665:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1629              		.loc 1 1665 0
 1630 0040 3B6A     		ldr	r3, [r7, #32]
 1631 0042 2433     		adds	r3, r3, #36
 1632 0044 1846     		mov	r0, r3
 1633 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1634 004a 0346     		mov	r3, r0
 1635 004c 002B     		cmp	r3, #0
 1636 004e 07D0     		beq	.L102
1666:..\..\FreeRTOS_Source/queue.c **** 					{
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 63


1667:..\..\FreeRTOS_Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1668:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1637              		.loc 1 1668 0
 1638 0050 3E4B     		ldr	r3, .L114
 1639 0052 4FF08052 		mov	r2, #268435456
 1640 0056 1A60     		str	r2, [r3]
 1641              	@ 1668 "..\..\FreeRTOS_Source\queue.c" 1
 1642 0058 BFF34F8F 		dsb
 1643              	@ 0 "" 2
 1644              	@ 1668 "..\..\FreeRTOS_Source\queue.c" 1
 1645 005c BFF36F8F 		isb
 1646              	@ 0 "" 2
 1647              		.thumb
 1648              	.L102:
1669:..\..\FreeRTOS_Source/queue.c **** 					}
1670:..\..\FreeRTOS_Source/queue.c **** 					else
1671:..\..\FreeRTOS_Source/queue.c **** 					{
1672:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1673:..\..\FreeRTOS_Source/queue.c **** 					}
1674:..\..\FreeRTOS_Source/queue.c **** 				}
1675:..\..\FreeRTOS_Source/queue.c **** 				else
1676:..\..\FreeRTOS_Source/queue.c **** 				{
1677:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1678:..\..\FreeRTOS_Source/queue.c **** 				}
1679:..\..\FreeRTOS_Source/queue.c **** 
1680:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 1649              		.loc 1 1680 0
 1650 0060 FFF7FEFF 		bl	vPortExitCritical
1681:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
 1651              		.loc 1 1681 0
 1652 0064 0123     		movs	r3, #1
 1653 0066 6DE0     		b	.L113
 1654              	.L101:
1682:..\..\FreeRTOS_Source/queue.c **** 			}
1683:..\..\FreeRTOS_Source/queue.c **** 			else
1684:..\..\FreeRTOS_Source/queue.c **** 			{
1685:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1655              		.loc 1 1685 0
 1656 0068 7B68     		ldr	r3, [r7, #4]
 1657 006a 002B     		cmp	r3, #0
 1658 006c 03D1     		bne	.L104
1686:..\..\FreeRTOS_Source/queue.c **** 				{
1687:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1688:..\..\FreeRTOS_Source/queue.c **** 					the block time has expired) so leave now. */
1689:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 1659              		.loc 1 1689 0
 1660 006e FFF7FEFF 		bl	vPortExitCritical
1690:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1691:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_EMPTY;
 1661              		.loc 1 1691 0
 1662 0072 0023     		movs	r3, #0
 1663 0074 66E0     		b	.L113
 1664              	.L104:
1692:..\..\FreeRTOS_Source/queue.c **** 				}
1693:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1665              		.loc 1 1693 0
 1666 0076 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 64


 1667 0078 002B     		cmp	r3, #0
 1668 007a 06D1     		bne	.L105
1694:..\..\FreeRTOS_Source/queue.c **** 				{
1695:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and a block time was specified so
1696:..\..\FreeRTOS_Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1697:..\..\FreeRTOS_Source/queue.c **** 					state. */
1698:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1669              		.loc 1 1698 0
 1670 007c 07F11003 		add	r3, r7, #16
 1671 0080 1846     		mov	r0, r3
 1672 0082 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1699:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1673              		.loc 1 1699 0
 1674 0086 0123     		movs	r3, #1
 1675 0088 7B62     		str	r3, [r7, #36]
 1676              	.L105:
 1677              	.LBE37:
1700:..\..\FreeRTOS_Source/queue.c **** 				}
1701:..\..\FreeRTOS_Source/queue.c **** 				else
1702:..\..\FreeRTOS_Source/queue.c **** 				{
1703:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
1704:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1705:..\..\FreeRTOS_Source/queue.c **** 				}
1706:..\..\FreeRTOS_Source/queue.c **** 			}
1707:..\..\FreeRTOS_Source/queue.c **** 		}
1708:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 1678              		.loc 1 1708 0
 1679 008a FFF7FEFF 		bl	vPortExitCritical
1709:..\..\FreeRTOS_Source/queue.c **** 
1710:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1711:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
1712:..\..\FreeRTOS_Source/queue.c **** 
1713:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 1680              		.loc 1 1713 0
 1681 008e FFF7FEFF 		bl	vTaskSuspendAll
1714:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
 1682              		.loc 1 1714 0
 1683 0092 FFF7FEFF 		bl	vPortEnterCritical
 1684 0096 3B6A     		ldr	r3, [r7, #32]
 1685 0098 93F84430 		ldrb	r3, [r3, #68]
 1686 009c DBB2     		uxtb	r3, r3
 1687 009e 5BB2     		sxtb	r3, r3
 1688 00a0 B3F1FF3F 		cmp	r3, #-1
 1689 00a4 03D1     		bne	.L106
 1690              		.loc 1 1714 0 is_stmt 0 discriminator 1
 1691 00a6 3B6A     		ldr	r3, [r7, #32]
 1692 00a8 0022     		movs	r2, #0
 1693 00aa 83F84420 		strb	r2, [r3, #68]
 1694              	.L106:
 1695              		.loc 1 1714 0 discriminator 3
 1696 00ae 3B6A     		ldr	r3, [r7, #32]
 1697 00b0 93F84530 		ldrb	r3, [r3, #69]
 1698 00b4 DBB2     		uxtb	r3, r3
 1699 00b6 5BB2     		sxtb	r3, r3
 1700 00b8 B3F1FF3F 		cmp	r3, #-1
 1701 00bc 03D1     		bne	.L107
 1702              		.loc 1 1714 0 discriminator 4
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 65


 1703 00be 3B6A     		ldr	r3, [r7, #32]
 1704 00c0 0022     		movs	r2, #0
 1705 00c2 83F84520 		strb	r2, [r3, #69]
 1706              	.L107:
 1707              		.loc 1 1714 0 discriminator 6
 1708 00c6 FFF7FEFF 		bl	vPortExitCritical
1715:..\..\FreeRTOS_Source/queue.c **** 
1716:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1717:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1709              		.loc 1 1717 0 is_stmt 1 discriminator 6
 1710 00ca 07F11002 		add	r2, r7, #16
 1711 00ce 3B1D     		adds	r3, r7, #4
 1712 00d0 1046     		mov	r0, r2
 1713 00d2 1946     		mov	r1, r3
 1714 00d4 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1715 00d8 0346     		mov	r3, r0
 1716 00da 002B     		cmp	r3, #0
 1717 00dc 24D1     		bne	.L108
1718:..\..\FreeRTOS_Source/queue.c **** 		{
1719:..\..\FreeRTOS_Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1720:..\..\FreeRTOS_Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1721:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1718              		.loc 1 1721 0
 1719 00de 386A     		ldr	r0, [r7, #32]
 1720 00e0 FFF7FEFF 		bl	prvIsQueueEmpty
 1721 00e4 0346     		mov	r3, r0
 1722 00e6 002B     		cmp	r3, #0
 1723 00e8 18D0     		beq	.L109
1722:..\..\FreeRTOS_Source/queue.c **** 			{
1723:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1724:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1724              		.loc 1 1724 0
 1725 00ea 3B6A     		ldr	r3, [r7, #32]
 1726 00ec 03F12402 		add	r2, r3, #36
 1727 00f0 7B68     		ldr	r3, [r7, #4]
 1728 00f2 1046     		mov	r0, r2
 1729 00f4 1946     		mov	r1, r3
 1730 00f6 FFF7FEFF 		bl	vTaskPlaceOnEventList
1725:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1731              		.loc 1 1725 0
 1732 00fa 386A     		ldr	r0, [r7, #32]
 1733 00fc FFF7FEFF 		bl	prvUnlockQueue
1726:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1734              		.loc 1 1726 0
 1735 0100 FFF7FEFF 		bl	xTaskResumeAll
 1736 0104 0346     		mov	r3, r0
 1737 0106 002B     		cmp	r3, #0
 1738 0108 1BD1     		bne	.L111
1727:..\..\FreeRTOS_Source/queue.c **** 				{
1728:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 1739              		.loc 1 1728 0
 1740 010a 104B     		ldr	r3, .L114
 1741 010c 4FF08052 		mov	r2, #268435456
 1742 0110 1A60     		str	r2, [r3]
 1743              	@ 1728 "..\..\FreeRTOS_Source\queue.c" 1
 1744 0112 BFF34F8F 		dsb
 1745              	@ 0 "" 2
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 66


 1746              	@ 1728 "..\..\FreeRTOS_Source\queue.c" 1
 1747 0116 BFF36F8F 		isb
 1748              	@ 0 "" 2
 1749              		.thumb
 1750 011a 12E0     		b	.L111
 1751              	.L109:
1729:..\..\FreeRTOS_Source/queue.c **** 				}
1730:..\..\FreeRTOS_Source/queue.c **** 				else
1731:..\..\FreeRTOS_Source/queue.c **** 				{
1732:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1733:..\..\FreeRTOS_Source/queue.c **** 				}
1734:..\..\FreeRTOS_Source/queue.c **** 			}
1735:..\..\FreeRTOS_Source/queue.c **** 			else
1736:..\..\FreeRTOS_Source/queue.c **** 			{
1737:..\..\FreeRTOS_Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1738:..\..\FreeRTOS_Source/queue.c **** 				state, instead return to try and obtain the data. */
1739:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1752              		.loc 1 1739 0
 1753 011c 386A     		ldr	r0, [r7, #32]
 1754 011e FFF7FEFF 		bl	prvUnlockQueue
1740:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 1755              		.loc 1 1740 0
 1756 0122 FFF7FEFF 		bl	xTaskResumeAll
 1757 0126 75E7     		b	.L112
 1758              	.L108:
1741:..\..\FreeRTOS_Source/queue.c **** 			}
1742:..\..\FreeRTOS_Source/queue.c **** 		}
1743:..\..\FreeRTOS_Source/queue.c **** 		else
1744:..\..\FreeRTOS_Source/queue.c **** 		{
1745:..\..\FreeRTOS_Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1746:..\..\FreeRTOS_Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1747:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1759              		.loc 1 1747 0
 1760 0128 386A     		ldr	r0, [r7, #32]
 1761 012a FFF7FEFF 		bl	prvUnlockQueue
1748:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 1762              		.loc 1 1748 0
 1763 012e FFF7FEFF 		bl	xTaskResumeAll
1749:..\..\FreeRTOS_Source/queue.c **** 
1750:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1764              		.loc 1 1750 0
 1765 0132 386A     		ldr	r0, [r7, #32]
 1766 0134 FFF7FEFF 		bl	prvIsQueueEmpty
 1767 0138 0346     		mov	r3, r0
 1768 013a 002B     		cmp	r3, #0
 1769 013c 01D0     		beq	.L111
1751:..\..\FreeRTOS_Source/queue.c **** 			{
1752:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1753:..\..\FreeRTOS_Source/queue.c **** 				return errQUEUE_EMPTY;
 1770              		.loc 1 1753 0
 1771 013e 0023     		movs	r3, #0
 1772 0140 00E0     		b	.L113
 1773              	.L111:
1754:..\..\FreeRTOS_Source/queue.c **** 			}
1755:..\..\FreeRTOS_Source/queue.c **** 			else
1756:..\..\FreeRTOS_Source/queue.c **** 			{
1757:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 67


1758:..\..\FreeRTOS_Source/queue.c **** 			}
1759:..\..\FreeRTOS_Source/queue.c **** 		}
1760:..\..\FreeRTOS_Source/queue.c **** 	}
 1774              		.loc 1 1760 0 discriminator 2
 1775 0142 67E7     		b	.L112
 1776              	.L113:
1761:..\..\FreeRTOS_Source/queue.c **** }
 1777              		.loc 1 1761 0 discriminator 3
 1778 0144 1846     		mov	r0, r3
 1779 0146 2837     		adds	r7, r7, #40
 1780              		.cfi_def_cfa_offset 8
 1781 0148 BD46     		mov	sp, r7
 1782              		.cfi_def_cfa_register 13
 1783              		@ sp needed
 1784 014a 80BD     		pop	{r7, pc}
 1785              	.L115:
 1786              		.align	2
 1787              	.L114:
 1788 014c 04ED00E0 		.word	-536810236
 1789              		.cfi_endproc
 1790              	.LFE81:
 1791              		.size	xQueuePeek, .-xQueuePeek
 1792              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1793              		.align	2
 1794              		.global	xQueueReceiveFromISR
 1795              		.thumb
 1796              		.thumb_func
 1797              		.type	xQueueReceiveFromISR, %function
 1798              	xQueueReceiveFromISR:
 1799              	.LFB82:
1762:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1763:..\..\FreeRTOS_Source/queue.c **** 
1764:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1765:..\..\FreeRTOS_Source/queue.c **** {
 1800              		.loc 1 1765 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 48
 1803              		@ frame_needed = 1, uses_anonymous_args = 0
 1804 0000 80B5     		push	{r7, lr}
 1805              		.cfi_def_cfa_offset 8
 1806              		.cfi_offset 7, -8
 1807              		.cfi_offset 14, -4
 1808 0002 8CB0     		sub	sp, sp, #48
 1809              		.cfi_def_cfa_offset 56
 1810 0004 00AF     		add	r7, sp, #0
 1811              		.cfi_def_cfa_register 7
 1812 0006 F860     		str	r0, [r7, #12]
 1813 0008 B960     		str	r1, [r7, #8]
 1814 000a 7A60     		str	r2, [r7, #4]
1766:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
1767:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1768:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1815              		.loc 1 1768 0
 1816 000c FB68     		ldr	r3, [r7, #12]
 1817 000e BB62     		str	r3, [r7, #40]
 1818              	.LBB38:
 1819              	.LBB39:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 68


 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1820              		.loc 2 211 0
 1821              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1822 0010 EFF31182 			mrs r2, basepri											
 1823 0014 4FF0A003 		mov r3, #160												
 1824 0018 83F31188 		msr basepri, r3											
 1825 001c BFF36F8F 		isb														
 1826 0020 BFF34F8F 		dsb														
 1827              	
 1828              	@ 0 "" 2
 1829              		.thumb
 1830 0024 BA61     		str	r2, [r7, #24]
 1831 0026 7B61     		str	r3, [r7, #20]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1832              		.loc 2 223 0
 1833 0028 BB69     		ldr	r3, [r7, #24]
 1834              	.LBE39:
 1835              	.LBE38:
1769:..\..\FreeRTOS_Source/queue.c **** 
1770:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1771:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1772:..\..\FreeRTOS_Source/queue.c **** 
1773:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1774:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1775:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1776:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1777:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1778:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1779:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1780:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1781:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1782:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1783:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1784:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1785:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1786:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1787:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1788:..\..\FreeRTOS_Source/queue.c **** 
1789:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1836              		.loc 1 1789 0
 1837 002a 7B62     		str	r3, [r7, #36]
 1838              	.LBB40:
1790:..\..\FreeRTOS_Source/queue.c **** 	{
1791:..\..\FreeRTOS_Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1839              		.loc 1 1791 0
 1840 002c BB6A     		ldr	r3, [r7, #40]
 1841 002e 9B6B     		ldr	r3, [r3, #56]
 1842 0030 3B62     		str	r3, [r7, #32]
1792:..\..\FreeRTOS_Source/queue.c **** 
1793:..\..\FreeRTOS_Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1794:..\..\FreeRTOS_Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1843              		.loc 1 1794 0
 1844 0032 3B6A     		ldr	r3, [r7, #32]
 1845 0034 002B     		cmp	r3, #0
 1846 0036 2DD0     		beq	.L118
 1847              	.LBB41:
1795:..\..\FreeRTOS_Source/queue.c **** 		{
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 69


1796:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
 1848              		.loc 1 1796 0
 1849 0038 BB6A     		ldr	r3, [r7, #40]
 1850 003a 93F84430 		ldrb	r3, [r3, #68]
 1851 003e FB77     		strb	r3, [r7, #31]
1797:..\..\FreeRTOS_Source/queue.c **** 
1798:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1799:..\..\FreeRTOS_Source/queue.c **** 
1800:..\..\FreeRTOS_Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1852              		.loc 1 1800 0
 1853 0040 B86A     		ldr	r0, [r7, #40]
 1854 0042 B968     		ldr	r1, [r7, #8]
 1855 0044 FFF7FEFF 		bl	prvCopyDataFromQueue
1801:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1856              		.loc 1 1801 0
 1857 0048 3B6A     		ldr	r3, [r7, #32]
 1858 004a 5A1E     		subs	r2, r3, #1
 1859 004c BB6A     		ldr	r3, [r7, #40]
 1860 004e 9A63     		str	r2, [r3, #56]
1802:..\..\FreeRTOS_Source/queue.c **** 
1803:..\..\FreeRTOS_Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1804:..\..\FreeRTOS_Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1805:..\..\FreeRTOS_Source/queue.c **** 			will know that an ISR has removed data while the queue was
1806:..\..\FreeRTOS_Source/queue.c **** 			locked. */
1807:..\..\FreeRTOS_Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
 1861              		.loc 1 1807 0
 1862 0050 97F91F30 		ldrsb	r3, [r7, #31]
 1863 0054 B3F1FF3F 		cmp	r3, #-1
 1864 0058 12D1     		bne	.L119
1808:..\..\FreeRTOS_Source/queue.c **** 			{
1809:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1865              		.loc 1 1809 0
 1866 005a BB6A     		ldr	r3, [r7, #40]
 1867 005c 1B69     		ldr	r3, [r3, #16]
 1868 005e 002B     		cmp	r3, #0
 1869 0060 15D0     		beq	.L120
1810:..\..\FreeRTOS_Source/queue.c **** 				{
1811:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1870              		.loc 1 1811 0
 1871 0062 BB6A     		ldr	r3, [r7, #40]
 1872 0064 1033     		adds	r3, r3, #16
 1873 0066 1846     		mov	r0, r3
 1874 0068 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1875 006c 0346     		mov	r3, r0
 1876 006e 002B     		cmp	r3, #0
 1877 0070 0DD0     		beq	.L120
1812:..\..\FreeRTOS_Source/queue.c **** 					{
1813:..\..\FreeRTOS_Source/queue.c **** 						/* The task waiting has a higher priority than us so
1814:..\..\FreeRTOS_Source/queue.c **** 						force a context switch. */
1815:..\..\FreeRTOS_Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1878              		.loc 1 1815 0
 1879 0072 7B68     		ldr	r3, [r7, #4]
 1880 0074 002B     		cmp	r3, #0
 1881 0076 0AD0     		beq	.L120
1816:..\..\FreeRTOS_Source/queue.c **** 						{
1817:..\..\FreeRTOS_Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1882              		.loc 1 1817 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 70


 1883 0078 7B68     		ldr	r3, [r7, #4]
 1884 007a 0122     		movs	r2, #1
 1885 007c 1A60     		str	r2, [r3]
 1886 007e 06E0     		b	.L120
 1887              	.L119:
1818:..\..\FreeRTOS_Source/queue.c **** 						}
1819:..\..\FreeRTOS_Source/queue.c **** 						else
1820:..\..\FreeRTOS_Source/queue.c **** 						{
1821:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1822:..\..\FreeRTOS_Source/queue.c **** 						}
1823:..\..\FreeRTOS_Source/queue.c **** 					}
1824:..\..\FreeRTOS_Source/queue.c **** 					else
1825:..\..\FreeRTOS_Source/queue.c **** 					{
1826:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1827:..\..\FreeRTOS_Source/queue.c **** 					}
1828:..\..\FreeRTOS_Source/queue.c **** 				}
1829:..\..\FreeRTOS_Source/queue.c **** 				else
1830:..\..\FreeRTOS_Source/queue.c **** 				{
1831:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1832:..\..\FreeRTOS_Source/queue.c **** 				}
1833:..\..\FreeRTOS_Source/queue.c **** 			}
1834:..\..\FreeRTOS_Source/queue.c **** 			else
1835:..\..\FreeRTOS_Source/queue.c **** 			{
1836:..\..\FreeRTOS_Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1837:..\..\FreeRTOS_Source/queue.c **** 				knows that data was removed while it was locked. */
1838:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 1888              		.loc 1 1838 0
 1889 0080 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1890 0082 0133     		adds	r3, r3, #1
 1891 0084 DBB2     		uxtb	r3, r3
 1892 0086 DAB2     		uxtb	r2, r3
 1893 0088 BB6A     		ldr	r3, [r7, #40]
 1894 008a 83F84420 		strb	r2, [r3, #68]
 1895              	.L120:
1839:..\..\FreeRTOS_Source/queue.c **** 			}
1840:..\..\FreeRTOS_Source/queue.c **** 
1841:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 1896              		.loc 1 1841 0
 1897 008e 0123     		movs	r3, #1
 1898 0090 FB62     		str	r3, [r7, #44]
 1899              	.LBE41:
 1900 0092 01E0     		b	.L121
 1901              	.L118:
1842:..\..\FreeRTOS_Source/queue.c **** 		}
1843:..\..\FreeRTOS_Source/queue.c **** 		else
1844:..\..\FreeRTOS_Source/queue.c **** 		{
1845:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
 1902              		.loc 1 1845 0
 1903 0094 0023     		movs	r3, #0
 1904 0096 FB62     		str	r3, [r7, #44]
 1905              	.L121:
 1906 0098 7B6A     		ldr	r3, [r7, #36]
 1907 009a 3B61     		str	r3, [r7, #16]
 1908              	.LBE40:
 1909              	.LBB42:
 1910              	.LBB43:
 1911              		.loc 2 229 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 71


 1912 009c 3B69     		ldr	r3, [r7, #16]
 1913              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1914 009e 83F31188 			msr basepri, r3	
 1915              	@ 0 "" 2
 1916              		.thumb
 1917              	.LBE43:
 1918              	.LBE42:
1846:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1847:..\..\FreeRTOS_Source/queue.c **** 		}
1848:..\..\FreeRTOS_Source/queue.c **** 	}
1849:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1850:..\..\FreeRTOS_Source/queue.c **** 
1851:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 1919              		.loc 1 1851 0
 1920 00a2 FB6A     		ldr	r3, [r7, #44]
1852:..\..\FreeRTOS_Source/queue.c **** }
 1921              		.loc 1 1852 0
 1922 00a4 1846     		mov	r0, r3
 1923 00a6 3037     		adds	r7, r7, #48
 1924              		.cfi_def_cfa_offset 8
 1925 00a8 BD46     		mov	sp, r7
 1926              		.cfi_def_cfa_register 13
 1927              		@ sp needed
 1928 00aa 80BD     		pop	{r7, pc}
 1929              		.cfi_endproc
 1930              	.LFE82:
 1931              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 1932              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1933              		.align	2
 1934              		.global	xQueuePeekFromISR
 1935              		.thumb
 1936              		.thumb_func
 1937              		.type	xQueuePeekFromISR, %function
 1938              	xQueuePeekFromISR:
 1939              	.LFB83:
1853:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1854:..\..\FreeRTOS_Source/queue.c **** 
1855:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1856:..\..\FreeRTOS_Source/queue.c **** {
 1940              		.loc 1 1856 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 40
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944 0000 80B5     		push	{r7, lr}
 1945              		.cfi_def_cfa_offset 8
 1946              		.cfi_offset 7, -8
 1947              		.cfi_offset 14, -4
 1948 0002 8AB0     		sub	sp, sp, #40
 1949              		.cfi_def_cfa_offset 48
 1950 0004 00AF     		add	r7, sp, #0
 1951              		.cfi_def_cfa_register 7
 1952 0006 7860     		str	r0, [r7, #4]
 1953 0008 3960     		str	r1, [r7]
1857:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
1858:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1859:..\..\FreeRTOS_Source/queue.c **** int8_t *pcOriginalReadPosition;
1860:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 72


 1954              		.loc 1 1860 0
 1955 000a 7B68     		ldr	r3, [r7, #4]
 1956 000c 3B62     		str	r3, [r7, #32]
 1957              	.LBB44:
 1958              	.LBB45:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1959              		.loc 2 211 0
 1960              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1961 000e EFF31182 			mrs r2, basepri											
 1962 0012 4FF0A003 		mov r3, #160												
 1963 0016 83F31188 		msr basepri, r3											
 1964 001a BFF36F8F 		isb														
 1965 001e BFF34F8F 		dsb														
 1966              	
 1967              	@ 0 "" 2
 1968              		.thumb
 1969 0022 7A61     		str	r2, [r7, #20]
 1970 0024 3B61     		str	r3, [r7, #16]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1971              		.loc 2 223 0
 1972 0026 7B69     		ldr	r3, [r7, #20]
 1973              	.LBE45:
 1974              	.LBE44:
1861:..\..\FreeRTOS_Source/queue.c **** 
1862:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1863:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1864:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1865:..\..\FreeRTOS_Source/queue.c **** 
1866:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1867:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1868:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1869:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1870:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1871:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1872:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1873:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1874:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1875:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1876:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1877:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1878:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1879:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1880:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1881:..\..\FreeRTOS_Source/queue.c **** 
1882:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1975              		.loc 1 1882 0
 1976 0028 FB61     		str	r3, [r7, #28]
1883:..\..\FreeRTOS_Source/queue.c **** 	{
1884:..\..\FreeRTOS_Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1885:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 1977              		.loc 1 1885 0
 1978 002a 3B6A     		ldr	r3, [r7, #32]
 1979 002c 9B6B     		ldr	r3, [r3, #56]
 1980 002e 002B     		cmp	r3, #0
 1981 0030 0CD0     		beq	.L125
1886:..\..\FreeRTOS_Source/queue.c **** 		{
1887:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 73


1888:..\..\FreeRTOS_Source/queue.c **** 
1889:..\..\FreeRTOS_Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1890:..\..\FreeRTOS_Source/queue.c **** 			actually being removed from the queue. */
1891:..\..\FreeRTOS_Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1982              		.loc 1 1891 0
 1983 0032 3B6A     		ldr	r3, [r7, #32]
 1984 0034 DB68     		ldr	r3, [r3, #12]
 1985 0036 BB61     		str	r3, [r7, #24]
1892:..\..\FreeRTOS_Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1986              		.loc 1 1892 0
 1987 0038 386A     		ldr	r0, [r7, #32]
 1988 003a 3968     		ldr	r1, [r7]
 1989 003c FFF7FEFF 		bl	prvCopyDataFromQueue
1893:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1990              		.loc 1 1893 0
 1991 0040 3B6A     		ldr	r3, [r7, #32]
 1992 0042 BA69     		ldr	r2, [r7, #24]
 1993 0044 DA60     		str	r2, [r3, #12]
1894:..\..\FreeRTOS_Source/queue.c **** 
1895:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 1994              		.loc 1 1895 0
 1995 0046 0123     		movs	r3, #1
 1996 0048 7B62     		str	r3, [r7, #36]
 1997 004a 01E0     		b	.L126
 1998              	.L125:
1896:..\..\FreeRTOS_Source/queue.c **** 		}
1897:..\..\FreeRTOS_Source/queue.c **** 		else
1898:..\..\FreeRTOS_Source/queue.c **** 		{
1899:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
 1999              		.loc 1 1899 0
 2000 004c 0023     		movs	r3, #0
 2001 004e 7B62     		str	r3, [r7, #36]
 2002              	.L126:
 2003 0050 FB69     		ldr	r3, [r7, #28]
 2004 0052 FB60     		str	r3, [r7, #12]
 2005              	.LBB46:
 2006              	.LBB47:
 2007              		.loc 2 229 0
 2008 0054 FB68     		ldr	r3, [r7, #12]
 2009              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2010 0056 83F31188 			msr basepri, r3	
 2011              	@ 0 "" 2
 2012              		.thumb
 2013              	.LBE47:
 2014              	.LBE46:
1900:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1901:..\..\FreeRTOS_Source/queue.c **** 		}
1902:..\..\FreeRTOS_Source/queue.c **** 	}
1903:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1904:..\..\FreeRTOS_Source/queue.c **** 
1905:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2015              		.loc 1 1905 0
 2016 005a 7B6A     		ldr	r3, [r7, #36]
1906:..\..\FreeRTOS_Source/queue.c **** }
 2017              		.loc 1 1906 0
 2018 005c 1846     		mov	r0, r3
 2019 005e 2837     		adds	r7, r7, #40
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 74


 2020              		.cfi_def_cfa_offset 8
 2021 0060 BD46     		mov	sp, r7
 2022              		.cfi_def_cfa_register 13
 2023              		@ sp needed
 2024 0062 80BD     		pop	{r7, pc}
 2025              		.cfi_endproc
 2026              	.LFE83:
 2027              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2028              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2029              		.align	2
 2030              		.global	uxQueueMessagesWaiting
 2031              		.thumb
 2032              		.thumb_func
 2033              		.type	uxQueueMessagesWaiting, %function
 2034              	uxQueueMessagesWaiting:
 2035              	.LFB84:
1907:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1908:..\..\FreeRTOS_Source/queue.c **** 
1909:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1910:..\..\FreeRTOS_Source/queue.c **** {
 2036              		.loc 1 1910 0
 2037              		.cfi_startproc
 2038              		@ args = 0, pretend = 0, frame = 16
 2039              		@ frame_needed = 1, uses_anonymous_args = 0
 2040 0000 80B5     		push	{r7, lr}
 2041              		.cfi_def_cfa_offset 8
 2042              		.cfi_offset 7, -8
 2043              		.cfi_offset 14, -4
 2044 0002 84B0     		sub	sp, sp, #16
 2045              		.cfi_def_cfa_offset 24
 2046 0004 00AF     		add	r7, sp, #0
 2047              		.cfi_def_cfa_register 7
 2048 0006 7860     		str	r0, [r7, #4]
1911:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxReturn;
1912:..\..\FreeRTOS_Source/queue.c **** 
1913:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
1914:..\..\FreeRTOS_Source/queue.c **** 
1915:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2049              		.loc 1 1915 0
 2050 0008 FFF7FEFF 		bl	vPortEnterCritical
1916:..\..\FreeRTOS_Source/queue.c **** 	{
1917:..\..\FreeRTOS_Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2051              		.loc 1 1917 0
 2052 000c 7B68     		ldr	r3, [r7, #4]
 2053 000e 9B6B     		ldr	r3, [r3, #56]
 2054 0010 FB60     		str	r3, [r7, #12]
1918:..\..\FreeRTOS_Source/queue.c **** 	}
1919:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2055              		.loc 1 1919 0
 2056 0012 FFF7FEFF 		bl	vPortExitCritical
1920:..\..\FreeRTOS_Source/queue.c **** 
1921:..\..\FreeRTOS_Source/queue.c **** 	return uxReturn;
 2057              		.loc 1 1921 0
 2058 0016 FB68     		ldr	r3, [r7, #12]
1922:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2059              		.loc 1 1922 0
 2060 0018 1846     		mov	r0, r3
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 75


 2061 001a 1037     		adds	r7, r7, #16
 2062              		.cfi_def_cfa_offset 8
 2063 001c BD46     		mov	sp, r7
 2064              		.cfi_def_cfa_register 13
 2065              		@ sp needed
 2066 001e 80BD     		pop	{r7, pc}
 2067              		.cfi_endproc
 2068              	.LFE84:
 2069              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2070              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2071              		.align	2
 2072              		.global	uxQueueSpacesAvailable
 2073              		.thumb
 2074              		.thumb_func
 2075              		.type	uxQueueSpacesAvailable, %function
 2076              	uxQueueSpacesAvailable:
 2077              	.LFB85:
1923:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1924:..\..\FreeRTOS_Source/queue.c **** 
1925:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1926:..\..\FreeRTOS_Source/queue.c **** {
 2078              		.loc 1 1926 0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 16
 2081              		@ frame_needed = 1, uses_anonymous_args = 0
 2082 0000 80B5     		push	{r7, lr}
 2083              		.cfi_def_cfa_offset 8
 2084              		.cfi_offset 7, -8
 2085              		.cfi_offset 14, -4
 2086 0002 84B0     		sub	sp, sp, #16
 2087              		.cfi_def_cfa_offset 24
 2088 0004 00AF     		add	r7, sp, #0
 2089              		.cfi_def_cfa_register 7
 2090 0006 7860     		str	r0, [r7, #4]
1927:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxReturn;
1928:..\..\FreeRTOS_Source/queue.c **** Queue_t *pxQueue;
1929:..\..\FreeRTOS_Source/queue.c **** 
1930:..\..\FreeRTOS_Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
 2091              		.loc 1 1930 0
 2092 0008 7B68     		ldr	r3, [r7, #4]
 2093 000a FB60     		str	r3, [r7, #12]
1931:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1932:..\..\FreeRTOS_Source/queue.c **** 
1933:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2094              		.loc 1 1933 0
 2095 000c FFF7FEFF 		bl	vPortEnterCritical
1934:..\..\FreeRTOS_Source/queue.c **** 	{
1935:..\..\FreeRTOS_Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2096              		.loc 1 1935 0
 2097 0010 FB68     		ldr	r3, [r7, #12]
 2098 0012 DA6B     		ldr	r2, [r3, #60]
 2099 0014 FB68     		ldr	r3, [r7, #12]
 2100 0016 9B6B     		ldr	r3, [r3, #56]
 2101 0018 D31A     		subs	r3, r2, r3
 2102 001a BB60     		str	r3, [r7, #8]
1936:..\..\FreeRTOS_Source/queue.c **** 	}
1937:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 76


 2103              		.loc 1 1937 0
 2104 001c FFF7FEFF 		bl	vPortExitCritical
1938:..\..\FreeRTOS_Source/queue.c **** 
1939:..\..\FreeRTOS_Source/queue.c **** 	return uxReturn;
 2105              		.loc 1 1939 0
 2106 0020 BB68     		ldr	r3, [r7, #8]
1940:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2107              		.loc 1 1940 0
 2108 0022 1846     		mov	r0, r3
 2109 0024 1037     		adds	r7, r7, #16
 2110              		.cfi_def_cfa_offset 8
 2111 0026 BD46     		mov	sp, r7
 2112              		.cfi_def_cfa_register 13
 2113              		@ sp needed
 2114 0028 80BD     		pop	{r7, pc}
 2115              		.cfi_endproc
 2116              	.LFE85:
 2117              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2118 002a 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2119              		.align	2
 2120              		.global	uxQueueMessagesWaitingFromISR
 2121              		.thumb
 2122              		.thumb_func
 2123              		.type	uxQueueMessagesWaitingFromISR, %function
 2124              	uxQueueMessagesWaitingFromISR:
 2125              	.LFB86:
1941:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1942:..\..\FreeRTOS_Source/queue.c **** 
1943:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1944:..\..\FreeRTOS_Source/queue.c **** {
 2126              		.loc 1 1944 0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 16
 2129              		@ frame_needed = 1, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 2131 0000 80B4     		push	{r7}
 2132              		.cfi_def_cfa_offset 4
 2133              		.cfi_offset 7, -4
 2134 0002 85B0     		sub	sp, sp, #20
 2135              		.cfi_def_cfa_offset 24
 2136 0004 00AF     		add	r7, sp, #0
 2137              		.cfi_def_cfa_register 7
 2138 0006 7860     		str	r0, [r7, #4]
1945:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxReturn;
1946:..\..\FreeRTOS_Source/queue.c **** 
1947:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
1948:..\..\FreeRTOS_Source/queue.c **** 
1949:..\..\FreeRTOS_Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2139              		.loc 1 1949 0
 2140 0008 7B68     		ldr	r3, [r7, #4]
 2141 000a 9B6B     		ldr	r3, [r3, #56]
 2142 000c FB60     		str	r3, [r7, #12]
1950:..\..\FreeRTOS_Source/queue.c **** 
1951:..\..\FreeRTOS_Source/queue.c **** 	return uxReturn;
 2143              		.loc 1 1951 0
 2144 000e FB68     		ldr	r3, [r7, #12]
1952:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 77


 2145              		.loc 1 1952 0
 2146 0010 1846     		mov	r0, r3
 2147 0012 1437     		adds	r7, r7, #20
 2148              		.cfi_def_cfa_offset 4
 2149 0014 BD46     		mov	sp, r7
 2150              		.cfi_def_cfa_register 13
 2151              		@ sp needed
 2152 0016 5DF8047B 		ldr	r7, [sp], #4
 2153              		.cfi_restore 7
 2154              		.cfi_def_cfa_offset 0
 2155 001a 7047     		bx	lr
 2156              		.cfi_endproc
 2157              	.LFE86:
 2158              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2159              		.section	.text.vQueueDelete,"ax",%progbits
 2160              		.align	2
 2161              		.global	vQueueDelete
 2162              		.thumb
 2163              		.thumb_func
 2164              		.type	vQueueDelete, %function
 2165              	vQueueDelete:
 2166              	.LFB87:
1953:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1954:..\..\FreeRTOS_Source/queue.c **** 
1955:..\..\FreeRTOS_Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1956:..\..\FreeRTOS_Source/queue.c **** {
 2167              		.loc 1 1956 0
 2168              		.cfi_startproc
 2169              		@ args = 0, pretend = 0, frame = 16
 2170              		@ frame_needed = 1, uses_anonymous_args = 0
 2171 0000 80B5     		push	{r7, lr}
 2172              		.cfi_def_cfa_offset 8
 2173              		.cfi_offset 7, -8
 2174              		.cfi_offset 14, -4
 2175 0002 84B0     		sub	sp, sp, #16
 2176              		.cfi_def_cfa_offset 24
 2177 0004 00AF     		add	r7, sp, #0
 2178              		.cfi_def_cfa_register 7
 2179 0006 7860     		str	r0, [r7, #4]
1957:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2180              		.loc 1 1957 0
 2181 0008 7B68     		ldr	r3, [r7, #4]
 2182 000a FB60     		str	r3, [r7, #12]
1958:..\..\FreeRTOS_Source/queue.c **** 
1959:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1960:..\..\FreeRTOS_Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1961:..\..\FreeRTOS_Source/queue.c **** 
1962:..\..\FreeRTOS_Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1963:..\..\FreeRTOS_Source/queue.c **** 	{
1964:..\..\FreeRTOS_Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 2183              		.loc 1 1964 0
 2184 000c F868     		ldr	r0, [r7, #12]
 2185 000e FFF7FEFF 		bl	vQueueUnregisterQueue
1965:..\..\FreeRTOS_Source/queue.c **** 	}
1966:..\..\FreeRTOS_Source/queue.c **** 	#endif
1967:..\..\FreeRTOS_Source/queue.c **** 
1968:..\..\FreeRTOS_Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 78


1969:..\..\FreeRTOS_Source/queue.c **** 	{
1970:..\..\FreeRTOS_Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1971:..\..\FreeRTOS_Source/queue.c **** 		again. */
1972:..\..\FreeRTOS_Source/queue.c **** 		vPortFree( pxQueue );
 2186              		.loc 1 1972 0
 2187 0012 F868     		ldr	r0, [r7, #12]
 2188 0014 FFF7FEFF 		bl	vPortFree
1973:..\..\FreeRTOS_Source/queue.c **** 	}
1974:..\..\FreeRTOS_Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1975:..\..\FreeRTOS_Source/queue.c **** 	{
1976:..\..\FreeRTOS_Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1977:..\..\FreeRTOS_Source/queue.c **** 		check before attempting to free the memory. */
1978:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1979:..\..\FreeRTOS_Source/queue.c **** 		{
1980:..\..\FreeRTOS_Source/queue.c **** 			vPortFree( pxQueue );
1981:..\..\FreeRTOS_Source/queue.c **** 		}
1982:..\..\FreeRTOS_Source/queue.c **** 		else
1983:..\..\FreeRTOS_Source/queue.c **** 		{
1984:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1985:..\..\FreeRTOS_Source/queue.c **** 		}
1986:..\..\FreeRTOS_Source/queue.c **** 	}
1987:..\..\FreeRTOS_Source/queue.c **** 	#else
1988:..\..\FreeRTOS_Source/queue.c **** 	{
1989:..\..\FreeRTOS_Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1990:..\..\FreeRTOS_Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1991:..\..\FreeRTOS_Source/queue.c **** 		( void ) pxQueue;
1992:..\..\FreeRTOS_Source/queue.c **** 	}
1993:..\..\FreeRTOS_Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1994:..\..\FreeRTOS_Source/queue.c **** }
 2189              		.loc 1 1994 0
 2190 0018 1037     		adds	r7, r7, #16
 2191              		.cfi_def_cfa_offset 8
 2192 001a BD46     		mov	sp, r7
 2193              		.cfi_def_cfa_register 13
 2194              		@ sp needed
 2195 001c 80BD     		pop	{r7, pc}
 2196              		.cfi_endproc
 2197              	.LFE87:
 2198              		.size	vQueueDelete, .-vQueueDelete
 2199 001e 00BF     		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
 2200              		.align	2
 2201              		.thumb
 2202              		.thumb_func
 2203              		.type	prvGetDisinheritPriorityAfterTimeout, %function
 2204              	prvGetDisinheritPriorityAfterTimeout:
 2205              	.LFB88:
1995:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1996:..\..\FreeRTOS_Source/queue.c **** 
1997:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1998:..\..\FreeRTOS_Source/queue.c **** 
1999:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2000:..\..\FreeRTOS_Source/queue.c **** 	{
2001:..\..\FreeRTOS_Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2002:..\..\FreeRTOS_Source/queue.c **** 	}
2003:..\..\FreeRTOS_Source/queue.c **** 
2004:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2005:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 79


2006:..\..\FreeRTOS_Source/queue.c **** 
2007:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2008:..\..\FreeRTOS_Source/queue.c **** 
2009:..\..\FreeRTOS_Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2010:..\..\FreeRTOS_Source/queue.c **** 	{
2011:..\..\FreeRTOS_Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2012:..\..\FreeRTOS_Source/queue.c **** 	}
2013:..\..\FreeRTOS_Source/queue.c **** 
2014:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2015:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2016:..\..\FreeRTOS_Source/queue.c **** 
2017:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2018:..\..\FreeRTOS_Source/queue.c **** 
2019:..\..\FreeRTOS_Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2020:..\..\FreeRTOS_Source/queue.c **** 	{
2021:..\..\FreeRTOS_Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2022:..\..\FreeRTOS_Source/queue.c **** 	}
2023:..\..\FreeRTOS_Source/queue.c **** 
2024:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2025:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2026:..\..\FreeRTOS_Source/queue.c **** 
2027:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2028:..\..\FreeRTOS_Source/queue.c **** 
2029:..\..\FreeRTOS_Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2030:..\..\FreeRTOS_Source/queue.c **** 	{
 2206              		.loc 1 2030 0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 16
 2209              		@ frame_needed = 1, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
 2211 0000 80B4     		push	{r7}
 2212              		.cfi_def_cfa_offset 4
 2213              		.cfi_offset 7, -4
 2214 0002 85B0     		sub	sp, sp, #20
 2215              		.cfi_def_cfa_offset 24
 2216 0004 00AF     		add	r7, sp, #0
 2217              		.cfi_def_cfa_register 7
 2218 0006 7860     		str	r0, [r7, #4]
2031:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2032:..\..\FreeRTOS_Source/queue.c **** 
2033:..\..\FreeRTOS_Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2034:..\..\FreeRTOS_Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2035:..\..\FreeRTOS_Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2036:..\..\FreeRTOS_Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2037:..\..\FreeRTOS_Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2038:..\..\FreeRTOS_Source/queue.c **** 		mutex. */
2039:..\..\FreeRTOS_Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 2219              		.loc 1 2039 0
 2220 0008 7B68     		ldr	r3, [r7, #4]
 2221 000a 5B6A     		ldr	r3, [r3, #36]
 2222 000c 002B     		cmp	r3, #0
 2223 000e 06D0     		beq	.L136
2040:..\..\FreeRTOS_Source/queue.c **** 		{
2041:..\..\FreeRTOS_Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
 2224              		.loc 1 2041 0
 2225 0010 7B68     		ldr	r3, [r7, #4]
 2226 0012 1B6B     		ldr	r3, [r3, #48]
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 80


 2227 0014 1B68     		ldr	r3, [r3]
 2228 0016 C3F10503 		rsb	r3, r3, #5
 2229 001a FB60     		str	r3, [r7, #12]
 2230 001c 01E0     		b	.L137
 2231              	.L136:
2042:..\..\FreeRTOS_Source/queue.c **** 		}
2043:..\..\FreeRTOS_Source/queue.c **** 		else
2044:..\..\FreeRTOS_Source/queue.c **** 		{
2045:..\..\FreeRTOS_Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 2232              		.loc 1 2045 0
 2233 001e 0023     		movs	r3, #0
 2234 0020 FB60     		str	r3, [r7, #12]
 2235              	.L137:
2046:..\..\FreeRTOS_Source/queue.c **** 		}
2047:..\..\FreeRTOS_Source/queue.c **** 
2048:..\..\FreeRTOS_Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
 2236              		.loc 1 2048 0
 2237 0022 FB68     		ldr	r3, [r7, #12]
2049:..\..\FreeRTOS_Source/queue.c **** 	}
 2238              		.loc 1 2049 0
 2239 0024 1846     		mov	r0, r3
 2240 0026 1437     		adds	r7, r7, #20
 2241              		.cfi_def_cfa_offset 4
 2242 0028 BD46     		mov	sp, r7
 2243              		.cfi_def_cfa_register 13
 2244              		@ sp needed
 2245 002a 5DF8047B 		ldr	r7, [sp], #4
 2246              		.cfi_restore 7
 2247              		.cfi_def_cfa_offset 0
 2248 002e 7047     		bx	lr
 2249              		.cfi_endproc
 2250              	.LFE88:
 2251              		.size	prvGetDisinheritPriorityAfterTimeout, .-prvGetDisinheritPriorityAfterTimeout
 2252              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 2253              		.align	2
 2254              		.thumb
 2255              		.thumb_func
 2256              		.type	prvCopyDataToQueue, %function
 2257              	prvCopyDataToQueue:
 2258              	.LFB89:
2050:..\..\FreeRTOS_Source/queue.c **** 
2051:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
2052:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2053:..\..\FreeRTOS_Source/queue.c **** 
2054:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2055:..\..\FreeRTOS_Source/queue.c **** {
 2259              		.loc 1 2055 0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 24
 2262              		@ frame_needed = 1, uses_anonymous_args = 0
 2263 0000 80B5     		push	{r7, lr}
 2264              		.cfi_def_cfa_offset 8
 2265              		.cfi_offset 7, -8
 2266              		.cfi_offset 14, -4
 2267 0002 86B0     		sub	sp, sp, #24
 2268              		.cfi_def_cfa_offset 32
 2269 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 81


 2270              		.cfi_def_cfa_register 7
 2271 0006 F860     		str	r0, [r7, #12]
 2272 0008 B960     		str	r1, [r7, #8]
 2273 000a 7A60     		str	r2, [r7, #4]
2056:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn = pdFALSE;
 2274              		.loc 1 2056 0
 2275 000c 0023     		movs	r3, #0
 2276 000e 7B61     		str	r3, [r7, #20]
2057:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxMessagesWaiting;
2058:..\..\FreeRTOS_Source/queue.c **** 
2059:..\..\FreeRTOS_Source/queue.c **** 	/* This function is called from a critical section. */
2060:..\..\FreeRTOS_Source/queue.c **** 
2061:..\..\FreeRTOS_Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2277              		.loc 1 2061 0
 2278 0010 FB68     		ldr	r3, [r7, #12]
 2279 0012 9B6B     		ldr	r3, [r3, #56]
 2280 0014 3B61     		str	r3, [r7, #16]
2062:..\..\FreeRTOS_Source/queue.c **** 
2063:..\..\FreeRTOS_Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 2281              		.loc 1 2063 0
 2282 0016 FB68     		ldr	r3, [r7, #12]
 2283 0018 1B6C     		ldr	r3, [r3, #64]
 2284 001a 002B     		cmp	r3, #0
 2285 001c 0DD1     		bne	.L140
2064:..\..\FreeRTOS_Source/queue.c **** 	{
2065:..\..\FreeRTOS_Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2066:..\..\FreeRTOS_Source/queue.c **** 		{
2067:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2286              		.loc 1 2067 0
 2287 001e FB68     		ldr	r3, [r7, #12]
 2288 0020 1B68     		ldr	r3, [r3]
 2289 0022 002B     		cmp	r3, #0
 2290 0024 4FD1     		bne	.L141
2068:..\..\FreeRTOS_Source/queue.c **** 			{
2069:..\..\FreeRTOS_Source/queue.c **** 				/* The mutex is no longer being held. */
2070:..\..\FreeRTOS_Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 2291              		.loc 1 2070 0
 2292 0026 FB68     		ldr	r3, [r7, #12]
 2293 0028 5B68     		ldr	r3, [r3, #4]
 2294 002a 1846     		mov	r0, r3
 2295 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 2296 0030 7861     		str	r0, [r7, #20]
2071:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 2297              		.loc 1 2071 0
 2298 0032 FB68     		ldr	r3, [r7, #12]
 2299 0034 0022     		movs	r2, #0
 2300 0036 5A60     		str	r2, [r3, #4]
 2301 0038 45E0     		b	.L141
 2302              	.L140:
2072:..\..\FreeRTOS_Source/queue.c **** 			}
2073:..\..\FreeRTOS_Source/queue.c **** 			else
2074:..\..\FreeRTOS_Source/queue.c **** 			{
2075:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2076:..\..\FreeRTOS_Source/queue.c **** 			}
2077:..\..\FreeRTOS_Source/queue.c **** 		}
2078:..\..\FreeRTOS_Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2079:..\..\FreeRTOS_Source/queue.c **** 	}
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 82


2080:..\..\FreeRTOS_Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 2303              		.loc 1 2080 0
 2304 003a 7B68     		ldr	r3, [r7, #4]
 2305 003c 002B     		cmp	r3, #0
 2306 003e 1AD1     		bne	.L142
2081:..\..\FreeRTOS_Source/queue.c **** 	{
2082:..\..\FreeRTOS_Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 2307              		.loc 1 2082 0
 2308 0040 FB68     		ldr	r3, [r7, #12]
 2309 0042 9A68     		ldr	r2, [r3, #8]
 2310 0044 FB68     		ldr	r3, [r7, #12]
 2311 0046 1B6C     		ldr	r3, [r3, #64]
 2312 0048 1046     		mov	r0, r2
 2313 004a B968     		ldr	r1, [r7, #8]
 2314 004c 1A46     		mov	r2, r3
 2315 004e FFF7FEFF 		bl	memcpy
2083:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 2316              		.loc 1 2083 0
 2317 0052 FB68     		ldr	r3, [r7, #12]
 2318 0054 9A68     		ldr	r2, [r3, #8]
 2319 0056 FB68     		ldr	r3, [r7, #12]
 2320 0058 1B6C     		ldr	r3, [r3, #64]
 2321 005a 1A44     		add	r2, r2, r3
 2322 005c FB68     		ldr	r3, [r7, #12]
 2323 005e 9A60     		str	r2, [r3, #8]
2084:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 2324              		.loc 1 2084 0
 2325 0060 FB68     		ldr	r3, [r7, #12]
 2326 0062 9A68     		ldr	r2, [r3, #8]
 2327 0064 FB68     		ldr	r3, [r7, #12]
 2328 0066 5B68     		ldr	r3, [r3, #4]
 2329 0068 9A42     		cmp	r2, r3
 2330 006a 2CD3     		bcc	.L141
2085:..\..\FreeRTOS_Source/queue.c **** 		{
2086:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 2331              		.loc 1 2086 0
 2332 006c FB68     		ldr	r3, [r7, #12]
 2333 006e 1A68     		ldr	r2, [r3]
 2334 0070 FB68     		ldr	r3, [r7, #12]
 2335 0072 9A60     		str	r2, [r3, #8]
 2336 0074 27E0     		b	.L141
 2337              	.L142:
2087:..\..\FreeRTOS_Source/queue.c **** 		}
2088:..\..\FreeRTOS_Source/queue.c **** 		else
2089:..\..\FreeRTOS_Source/queue.c **** 		{
2090:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2091:..\..\FreeRTOS_Source/queue.c **** 		}
2092:..\..\FreeRTOS_Source/queue.c **** 	}
2093:..\..\FreeRTOS_Source/queue.c **** 	else
2094:..\..\FreeRTOS_Source/queue.c **** 	{
2095:..\..\FreeRTOS_Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 2338              		.loc 1 2095 0
 2339 0076 FB68     		ldr	r3, [r7, #12]
 2340 0078 DA68     		ldr	r2, [r3, #12]
 2341 007a FB68     		ldr	r3, [r7, #12]
 2342 007c 1B6C     		ldr	r3, [r3, #64]
 2343 007e 1046     		mov	r0, r2
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 83


 2344 0080 B968     		ldr	r1, [r7, #8]
 2345 0082 1A46     		mov	r2, r3
 2346 0084 FFF7FEFF 		bl	memcpy
2096:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 2347              		.loc 1 2096 0
 2348 0088 FB68     		ldr	r3, [r7, #12]
 2349 008a DA68     		ldr	r2, [r3, #12]
 2350 008c FB68     		ldr	r3, [r7, #12]
 2351 008e 1B6C     		ldr	r3, [r3, #64]
 2352 0090 5B42     		negs	r3, r3
 2353 0092 1A44     		add	r2, r2, r3
 2354 0094 FB68     		ldr	r3, [r7, #12]
 2355 0096 DA60     		str	r2, [r3, #12]
2097:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 2356              		.loc 1 2097 0
 2357 0098 FB68     		ldr	r3, [r7, #12]
 2358 009a DA68     		ldr	r2, [r3, #12]
 2359 009c FB68     		ldr	r3, [r7, #12]
 2360 009e 1B68     		ldr	r3, [r3]
 2361 00a0 9A42     		cmp	r2, r3
 2362 00a2 07D2     		bcs	.L143
2098:..\..\FreeRTOS_Source/queue.c **** 		{
2099:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 2363              		.loc 1 2099 0
 2364 00a4 FB68     		ldr	r3, [r7, #12]
 2365 00a6 5A68     		ldr	r2, [r3, #4]
 2366 00a8 FB68     		ldr	r3, [r7, #12]
 2367 00aa 1B6C     		ldr	r3, [r3, #64]
 2368 00ac 5B42     		negs	r3, r3
 2369 00ae 1A44     		add	r2, r2, r3
 2370 00b0 FB68     		ldr	r3, [r7, #12]
 2371 00b2 DA60     		str	r2, [r3, #12]
 2372              	.L143:
2100:..\..\FreeRTOS_Source/queue.c **** 		}
2101:..\..\FreeRTOS_Source/queue.c **** 		else
2102:..\..\FreeRTOS_Source/queue.c **** 		{
2103:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2104:..\..\FreeRTOS_Source/queue.c **** 		}
2105:..\..\FreeRTOS_Source/queue.c **** 
2106:..\..\FreeRTOS_Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 2373              		.loc 1 2106 0
 2374 00b4 7B68     		ldr	r3, [r7, #4]
 2375 00b6 022B     		cmp	r3, #2
 2376 00b8 05D1     		bne	.L141
2107:..\..\FreeRTOS_Source/queue.c **** 		{
2108:..\..\FreeRTOS_Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2377              		.loc 1 2108 0
 2378 00ba 3B69     		ldr	r3, [r7, #16]
 2379 00bc 002B     		cmp	r3, #0
 2380 00be 02D0     		beq	.L141
2109:..\..\FreeRTOS_Source/queue.c **** 			{
2110:..\..\FreeRTOS_Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2111:..\..\FreeRTOS_Source/queue.c **** 				one from the recorded number of items in the queue so when
2112:..\..\FreeRTOS_Source/queue.c **** 				one is added again below the number of recorded items remains
2113:..\..\FreeRTOS_Source/queue.c **** 				correct. */
2114:..\..\FreeRTOS_Source/queue.c **** 				--uxMessagesWaiting;
 2381              		.loc 1 2114 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 84


 2382 00c0 3B69     		ldr	r3, [r7, #16]
 2383 00c2 013B     		subs	r3, r3, #1
 2384 00c4 3B61     		str	r3, [r7, #16]
 2385              	.L141:
2115:..\..\FreeRTOS_Source/queue.c **** 			}
2116:..\..\FreeRTOS_Source/queue.c **** 			else
2117:..\..\FreeRTOS_Source/queue.c **** 			{
2118:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2119:..\..\FreeRTOS_Source/queue.c **** 			}
2120:..\..\FreeRTOS_Source/queue.c **** 		}
2121:..\..\FreeRTOS_Source/queue.c **** 		else
2122:..\..\FreeRTOS_Source/queue.c **** 		{
2123:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2124:..\..\FreeRTOS_Source/queue.c **** 		}
2125:..\..\FreeRTOS_Source/queue.c **** 	}
2126:..\..\FreeRTOS_Source/queue.c **** 
2127:..\..\FreeRTOS_Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 2386              		.loc 1 2127 0
 2387 00c6 3B69     		ldr	r3, [r7, #16]
 2388 00c8 5A1C     		adds	r2, r3, #1
 2389 00ca FB68     		ldr	r3, [r7, #12]
 2390 00cc 9A63     		str	r2, [r3, #56]
2128:..\..\FreeRTOS_Source/queue.c **** 
2129:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2391              		.loc 1 2129 0
 2392 00ce 7B69     		ldr	r3, [r7, #20]
2130:..\..\FreeRTOS_Source/queue.c **** }
 2393              		.loc 1 2130 0
 2394 00d0 1846     		mov	r0, r3
 2395 00d2 1837     		adds	r7, r7, #24
 2396              		.cfi_def_cfa_offset 8
 2397 00d4 BD46     		mov	sp, r7
 2398              		.cfi_def_cfa_register 13
 2399              		@ sp needed
 2400 00d6 80BD     		pop	{r7, pc}
 2401              		.cfi_endproc
 2402              	.LFE89:
 2403              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 2404              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 2405              		.align	2
 2406              		.thumb
 2407              		.thumb_func
 2408              		.type	prvCopyDataFromQueue, %function
 2409              	prvCopyDataFromQueue:
 2410              	.LFB90:
2131:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2132:..\..\FreeRTOS_Source/queue.c **** 
2133:..\..\FreeRTOS_Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2134:..\..\FreeRTOS_Source/queue.c **** {
 2411              		.loc 1 2134 0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 8
 2414              		@ frame_needed = 1, uses_anonymous_args = 0
 2415 0000 80B5     		push	{r7, lr}
 2416              		.cfi_def_cfa_offset 8
 2417              		.cfi_offset 7, -8
 2418              		.cfi_offset 14, -4
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 85


 2419 0002 82B0     		sub	sp, sp, #8
 2420              		.cfi_def_cfa_offset 16
 2421 0004 00AF     		add	r7, sp, #0
 2422              		.cfi_def_cfa_register 7
 2423 0006 7860     		str	r0, [r7, #4]
 2424 0008 3960     		str	r1, [r7]
2135:..\..\FreeRTOS_Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 2425              		.loc 1 2135 0
 2426 000a 7B68     		ldr	r3, [r7, #4]
 2427 000c 1B6C     		ldr	r3, [r3, #64]
 2428 000e 002B     		cmp	r3, #0
 2429 0010 19D0     		beq	.L145
2136:..\..\FreeRTOS_Source/queue.c **** 	{
2137:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 2430              		.loc 1 2137 0
 2431 0012 7B68     		ldr	r3, [r7, #4]
 2432 0014 DA68     		ldr	r2, [r3, #12]
 2433 0016 7B68     		ldr	r3, [r7, #4]
 2434 0018 1B6C     		ldr	r3, [r3, #64]
 2435 001a 1A44     		add	r2, r2, r3
 2436 001c 7B68     		ldr	r3, [r7, #4]
 2437 001e DA60     		str	r2, [r3, #12]
2138:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 2438              		.loc 1 2138 0
 2439 0020 7B68     		ldr	r3, [r7, #4]
 2440 0022 DA68     		ldr	r2, [r3, #12]
 2441 0024 7B68     		ldr	r3, [r7, #4]
 2442 0026 5B68     		ldr	r3, [r3, #4]
 2443 0028 9A42     		cmp	r2, r3
 2444 002a 03D3     		bcc	.L147
2139:..\..\FreeRTOS_Source/queue.c **** 		{
2140:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 2445              		.loc 1 2140 0
 2446 002c 7B68     		ldr	r3, [r7, #4]
 2447 002e 1A68     		ldr	r2, [r3]
 2448 0030 7B68     		ldr	r3, [r7, #4]
 2449 0032 DA60     		str	r2, [r3, #12]
 2450              	.L147:
2141:..\..\FreeRTOS_Source/queue.c **** 		}
2142:..\..\FreeRTOS_Source/queue.c **** 		else
2143:..\..\FreeRTOS_Source/queue.c **** 		{
2144:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2145:..\..\FreeRTOS_Source/queue.c **** 		}
2146:..\..\FreeRTOS_Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
 2451              		.loc 1 2146 0
 2452 0034 7B68     		ldr	r3, [r7, #4]
 2453 0036 DA68     		ldr	r2, [r3, #12]
 2454 0038 7B68     		ldr	r3, [r7, #4]
 2455 003a 1B6C     		ldr	r3, [r3, #64]
 2456 003c 3868     		ldr	r0, [r7]
 2457 003e 1146     		mov	r1, r2
 2458 0040 1A46     		mov	r2, r3
 2459 0042 FFF7FEFF 		bl	memcpy
 2460              	.L145:
2147:..\..\FreeRTOS_Source/queue.c **** 	}
2148:..\..\FreeRTOS_Source/queue.c **** }
 2461              		.loc 1 2148 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 86


 2462 0046 0837     		adds	r7, r7, #8
 2463              		.cfi_def_cfa_offset 8
 2464 0048 BD46     		mov	sp, r7
 2465              		.cfi_def_cfa_register 13
 2466              		@ sp needed
 2467 004a 80BD     		pop	{r7, pc}
 2468              		.cfi_endproc
 2469              	.LFE90:
 2470              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 2471              		.section	.text.prvUnlockQueue,"ax",%progbits
 2472              		.align	2
 2473              		.thumb
 2474              		.thumb_func
 2475              		.type	prvUnlockQueue, %function
 2476              	prvUnlockQueue:
 2477              	.LFB91:
2149:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2150:..\..\FreeRTOS_Source/queue.c **** 
2151:..\..\FreeRTOS_Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2152:..\..\FreeRTOS_Source/queue.c **** {
 2478              		.loc 1 2152 0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 16
 2481              		@ frame_needed = 1, uses_anonymous_args = 0
 2482 0000 80B5     		push	{r7, lr}
 2483              		.cfi_def_cfa_offset 8
 2484              		.cfi_offset 7, -8
 2485              		.cfi_offset 14, -4
 2486 0002 84B0     		sub	sp, sp, #16
 2487              		.cfi_def_cfa_offset 24
 2488 0004 00AF     		add	r7, sp, #0
 2489              		.cfi_def_cfa_register 7
 2490 0006 7860     		str	r0, [r7, #4]
2153:..\..\FreeRTOS_Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2154:..\..\FreeRTOS_Source/queue.c **** 
2155:..\..\FreeRTOS_Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2156:..\..\FreeRTOS_Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2157:..\..\FreeRTOS_Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2158:..\..\FreeRTOS_Source/queue.c **** 	updated. */
2159:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2491              		.loc 1 2159 0
 2492 0008 FFF7FEFF 		bl	vPortEnterCritical
 2493              	.LBB48:
2160:..\..\FreeRTOS_Source/queue.c **** 	{
2161:..\..\FreeRTOS_Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 2494              		.loc 1 2161 0
 2495 000c 7B68     		ldr	r3, [r7, #4]
 2496 000e 93F84530 		ldrb	r3, [r3, #69]
 2497 0012 FB73     		strb	r3, [r7, #15]
2162:..\..\FreeRTOS_Source/queue.c **** 
2163:..\..\FreeRTOS_Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2164:..\..\FreeRTOS_Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 2498              		.loc 1 2164 0
 2499 0014 13E0     		b	.L149
 2500              	.L153:
2165:..\..\FreeRTOS_Source/queue.c **** 		{
2166:..\..\FreeRTOS_Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 87


2167:..\..\FreeRTOS_Source/queue.c **** 			blocked waiting for data to become available? */
2168:..\..\FreeRTOS_Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2169:..\..\FreeRTOS_Source/queue.c **** 			{
2170:..\..\FreeRTOS_Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2171:..\..\FreeRTOS_Source/queue.c **** 				{
2172:..\..\FreeRTOS_Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2173:..\..\FreeRTOS_Source/queue.c **** 					{
2174:..\..\FreeRTOS_Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2175:..\..\FreeRTOS_Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2176:..\..\FreeRTOS_Source/queue.c **** 						A context switch is required. */
2177:..\..\FreeRTOS_Source/queue.c **** 						vTaskMissedYield();
2178:..\..\FreeRTOS_Source/queue.c **** 					}
2179:..\..\FreeRTOS_Source/queue.c **** 					else
2180:..\..\FreeRTOS_Source/queue.c **** 					{
2181:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2182:..\..\FreeRTOS_Source/queue.c **** 					}
2183:..\..\FreeRTOS_Source/queue.c **** 				}
2184:..\..\FreeRTOS_Source/queue.c **** 				else
2185:..\..\FreeRTOS_Source/queue.c **** 				{
2186:..\..\FreeRTOS_Source/queue.c **** 					/* Tasks that are removed from the event list will get
2187:..\..\FreeRTOS_Source/queue.c **** 					added to the pending ready list as the scheduler is still
2188:..\..\FreeRTOS_Source/queue.c **** 					suspended. */
2189:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2190:..\..\FreeRTOS_Source/queue.c **** 					{
2191:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2192:..\..\FreeRTOS_Source/queue.c **** 						{
2193:..\..\FreeRTOS_Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2194:..\..\FreeRTOS_Source/queue.c **** 							context	switch is required. */
2195:..\..\FreeRTOS_Source/queue.c **** 							vTaskMissedYield();
2196:..\..\FreeRTOS_Source/queue.c **** 						}
2197:..\..\FreeRTOS_Source/queue.c **** 						else
2198:..\..\FreeRTOS_Source/queue.c **** 						{
2199:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2200:..\..\FreeRTOS_Source/queue.c **** 						}
2201:..\..\FreeRTOS_Source/queue.c **** 					}
2202:..\..\FreeRTOS_Source/queue.c **** 					else
2203:..\..\FreeRTOS_Source/queue.c **** 					{
2204:..\..\FreeRTOS_Source/queue.c **** 						break;
2205:..\..\FreeRTOS_Source/queue.c **** 					}
2206:..\..\FreeRTOS_Source/queue.c **** 				}
2207:..\..\FreeRTOS_Source/queue.c **** 			}
2208:..\..\FreeRTOS_Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2209:..\..\FreeRTOS_Source/queue.c **** 			{
2210:..\..\FreeRTOS_Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2211:..\..\FreeRTOS_Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2212:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2501              		.loc 1 2212 0
 2502 0016 7B68     		ldr	r3, [r7, #4]
 2503 0018 5B6A     		ldr	r3, [r3, #36]
 2504 001a 002B     		cmp	r3, #0
 2505 001c 0AD0     		beq	.L150
2213:..\..\FreeRTOS_Source/queue.c **** 				{
2214:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2506              		.loc 1 2214 0
 2507 001e 7B68     		ldr	r3, [r7, #4]
 2508 0020 2433     		adds	r3, r3, #36
 2509 0022 1846     		mov	r0, r3
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 88


 2510 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2511 0028 0346     		mov	r3, r0
 2512 002a 002B     		cmp	r3, #0
 2513 002c 03D0     		beq	.L151
2215:..\..\FreeRTOS_Source/queue.c **** 					{
2216:..\..\FreeRTOS_Source/queue.c **** 						/* The task waiting has a higher priority so record that
2217:..\..\FreeRTOS_Source/queue.c **** 						a context switch is required. */
2218:..\..\FreeRTOS_Source/queue.c **** 						vTaskMissedYield();
 2514              		.loc 1 2218 0
 2515 002e FFF7FEFF 		bl	vTaskMissedYield
 2516 0032 00E0     		b	.L151
 2517              	.L150:
2219:..\..\FreeRTOS_Source/queue.c **** 					}
2220:..\..\FreeRTOS_Source/queue.c **** 					else
2221:..\..\FreeRTOS_Source/queue.c **** 					{
2222:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2223:..\..\FreeRTOS_Source/queue.c **** 					}
2224:..\..\FreeRTOS_Source/queue.c **** 				}
2225:..\..\FreeRTOS_Source/queue.c **** 				else
2226:..\..\FreeRTOS_Source/queue.c **** 				{
2227:..\..\FreeRTOS_Source/queue.c **** 					break;
 2518              		.loc 1 2227 0
 2519 0034 07E0     		b	.L152
 2520              	.L151:
2228:..\..\FreeRTOS_Source/queue.c **** 				}
2229:..\..\FreeRTOS_Source/queue.c **** 			}
2230:..\..\FreeRTOS_Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2231:..\..\FreeRTOS_Source/queue.c **** 
2232:..\..\FreeRTOS_Source/queue.c **** 			--cTxLock;
 2521              		.loc 1 2232 0
 2522 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2523 0038 013B     		subs	r3, r3, #1
 2524 003a DBB2     		uxtb	r3, r3
 2525 003c FB73     		strb	r3, [r7, #15]
 2526              	.L149:
2164:..\..\FreeRTOS_Source/queue.c **** 		{
 2527              		.loc 1 2164 0
 2528 003e 97F90F30 		ldrsb	r3, [r7, #15]
 2529 0042 002B     		cmp	r3, #0
 2530 0044 E7DC     		bgt	.L153
 2531              	.L152:
2233:..\..\FreeRTOS_Source/queue.c **** 		}
2234:..\..\FreeRTOS_Source/queue.c **** 
2235:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 2532              		.loc 1 2235 0
 2533 0046 7B68     		ldr	r3, [r7, #4]
 2534 0048 FF22     		movs	r2, #255
 2535 004a 83F84520 		strb	r2, [r3, #69]
 2536              	.LBE48:
2236:..\..\FreeRTOS_Source/queue.c **** 	}
2237:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2537              		.loc 1 2237 0
 2538 004e FFF7FEFF 		bl	vPortExitCritical
2238:..\..\FreeRTOS_Source/queue.c **** 
2239:..\..\FreeRTOS_Source/queue.c **** 	/* Do the same for the Rx lock. */
2240:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2539              		.loc 1 2240 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 89


 2540 0052 FFF7FEFF 		bl	vPortEnterCritical
 2541              	.LBB49:
2241:..\..\FreeRTOS_Source/queue.c **** 	{
2242:..\..\FreeRTOS_Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 2542              		.loc 1 2242 0
 2543 0056 7B68     		ldr	r3, [r7, #4]
 2544 0058 93F84430 		ldrb	r3, [r3, #68]
 2545 005c BB73     		strb	r3, [r7, #14]
2243:..\..\FreeRTOS_Source/queue.c **** 
2244:..\..\FreeRTOS_Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 2546              		.loc 1 2244 0
 2547 005e 13E0     		b	.L154
 2548              	.L158:
2245:..\..\FreeRTOS_Source/queue.c **** 		{
2246:..\..\FreeRTOS_Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2549              		.loc 1 2246 0
 2550 0060 7B68     		ldr	r3, [r7, #4]
 2551 0062 1B69     		ldr	r3, [r3, #16]
 2552 0064 002B     		cmp	r3, #0
 2553 0066 0ED0     		beq	.L155
2247:..\..\FreeRTOS_Source/queue.c **** 			{
2248:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2554              		.loc 1 2248 0
 2555 0068 7B68     		ldr	r3, [r7, #4]
 2556 006a 1033     		adds	r3, r3, #16
 2557 006c 1846     		mov	r0, r3
 2558 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 2559 0072 0346     		mov	r3, r0
 2560 0074 002B     		cmp	r3, #0
 2561 0076 01D0     		beq	.L156
2249:..\..\FreeRTOS_Source/queue.c **** 				{
2250:..\..\FreeRTOS_Source/queue.c **** 					vTaskMissedYield();
 2562              		.loc 1 2250 0
 2563 0078 FFF7FEFF 		bl	vTaskMissedYield
 2564              	.L156:
2251:..\..\FreeRTOS_Source/queue.c **** 				}
2252:..\..\FreeRTOS_Source/queue.c **** 				else
2253:..\..\FreeRTOS_Source/queue.c **** 				{
2254:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2255:..\..\FreeRTOS_Source/queue.c **** 				}
2256:..\..\FreeRTOS_Source/queue.c **** 
2257:..\..\FreeRTOS_Source/queue.c **** 				--cRxLock;
 2565              		.loc 1 2257 0
 2566 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2567 007e 013B     		subs	r3, r3, #1
 2568 0080 DBB2     		uxtb	r3, r3
 2569 0082 BB73     		strb	r3, [r7, #14]
 2570 0084 00E0     		b	.L154
 2571              	.L155:
2258:..\..\FreeRTOS_Source/queue.c **** 			}
2259:..\..\FreeRTOS_Source/queue.c **** 			else
2260:..\..\FreeRTOS_Source/queue.c **** 			{
2261:..\..\FreeRTOS_Source/queue.c **** 				break;
 2572              		.loc 1 2261 0
 2573 0086 03E0     		b	.L157
 2574              	.L154:
2244:..\..\FreeRTOS_Source/queue.c **** 		{
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 90


 2575              		.loc 1 2244 0
 2576 0088 97F90E30 		ldrsb	r3, [r7, #14]
 2577 008c 002B     		cmp	r3, #0
 2578 008e E7DC     		bgt	.L158
 2579              	.L157:
2262:..\..\FreeRTOS_Source/queue.c **** 			}
2263:..\..\FreeRTOS_Source/queue.c **** 		}
2264:..\..\FreeRTOS_Source/queue.c **** 
2265:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 2580              		.loc 1 2265 0
 2581 0090 7B68     		ldr	r3, [r7, #4]
 2582 0092 FF22     		movs	r2, #255
 2583 0094 83F84420 		strb	r2, [r3, #68]
 2584              	.LBE49:
2266:..\..\FreeRTOS_Source/queue.c **** 	}
2267:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2585              		.loc 1 2267 0
 2586 0098 FFF7FEFF 		bl	vPortExitCritical
2268:..\..\FreeRTOS_Source/queue.c **** }
 2587              		.loc 1 2268 0
 2588 009c 1037     		adds	r7, r7, #16
 2589              		.cfi_def_cfa_offset 8
 2590 009e BD46     		mov	sp, r7
 2591              		.cfi_def_cfa_register 13
 2592              		@ sp needed
 2593 00a0 80BD     		pop	{r7, pc}
 2594              		.cfi_endproc
 2595              	.LFE91:
 2596              		.size	prvUnlockQueue, .-prvUnlockQueue
 2597 00a2 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 2598              		.align	2
 2599              		.thumb
 2600              		.thumb_func
 2601              		.type	prvIsQueueEmpty, %function
 2602              	prvIsQueueEmpty:
 2603              	.LFB92:
2269:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2270:..\..\FreeRTOS_Source/queue.c **** 
2271:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2272:..\..\FreeRTOS_Source/queue.c **** {
 2604              		.loc 1 2272 0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 16
 2607              		@ frame_needed = 1, uses_anonymous_args = 0
 2608 0000 80B5     		push	{r7, lr}
 2609              		.cfi_def_cfa_offset 8
 2610              		.cfi_offset 7, -8
 2611              		.cfi_offset 14, -4
 2612 0002 84B0     		sub	sp, sp, #16
 2613              		.cfi_def_cfa_offset 24
 2614 0004 00AF     		add	r7, sp, #0
 2615              		.cfi_def_cfa_register 7
 2616 0006 7860     		str	r0, [r7, #4]
2273:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
2274:..\..\FreeRTOS_Source/queue.c **** 
2275:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2617              		.loc 1 2275 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 91


 2618 0008 FFF7FEFF 		bl	vPortEnterCritical
2276:..\..\FreeRTOS_Source/queue.c **** 	{
2277:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 2619              		.loc 1 2277 0
 2620 000c 7B68     		ldr	r3, [r7, #4]
 2621 000e 9B6B     		ldr	r3, [r3, #56]
 2622 0010 002B     		cmp	r3, #0
 2623 0012 02D1     		bne	.L160
2278:..\..\FreeRTOS_Source/queue.c **** 		{
2279:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdTRUE;
 2624              		.loc 1 2279 0
 2625 0014 0123     		movs	r3, #1
 2626 0016 FB60     		str	r3, [r7, #12]
 2627 0018 01E0     		b	.L161
 2628              	.L160:
2280:..\..\FreeRTOS_Source/queue.c **** 		}
2281:..\..\FreeRTOS_Source/queue.c **** 		else
2282:..\..\FreeRTOS_Source/queue.c **** 		{
2283:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFALSE;
 2629              		.loc 1 2283 0
 2630 001a 0023     		movs	r3, #0
 2631 001c FB60     		str	r3, [r7, #12]
 2632              	.L161:
2284:..\..\FreeRTOS_Source/queue.c **** 		}
2285:..\..\FreeRTOS_Source/queue.c **** 	}
2286:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2633              		.loc 1 2286 0
 2634 001e FFF7FEFF 		bl	vPortExitCritical
2287:..\..\FreeRTOS_Source/queue.c **** 
2288:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2635              		.loc 1 2288 0
 2636 0022 FB68     		ldr	r3, [r7, #12]
2289:..\..\FreeRTOS_Source/queue.c **** }
 2637              		.loc 1 2289 0
 2638 0024 1846     		mov	r0, r3
 2639 0026 1037     		adds	r7, r7, #16
 2640              		.cfi_def_cfa_offset 8
 2641 0028 BD46     		mov	sp, r7
 2642              		.cfi_def_cfa_register 13
 2643              		@ sp needed
 2644 002a 80BD     		pop	{r7, pc}
 2645              		.cfi_endproc
 2646              	.LFE92:
 2647              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 2648              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2649              		.align	2
 2650              		.global	xQueueIsQueueEmptyFromISR
 2651              		.thumb
 2652              		.thumb_func
 2653              		.type	xQueueIsQueueEmptyFromISR, %function
 2654              	xQueueIsQueueEmptyFromISR:
 2655              	.LFB93:
2290:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2291:..\..\FreeRTOS_Source/queue.c **** 
2292:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2293:..\..\FreeRTOS_Source/queue.c **** {
 2656              		.loc 1 2293 0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 92


 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 16
 2659              		@ frame_needed = 1, uses_anonymous_args = 0
 2660              		@ link register save eliminated.
 2661 0000 80B4     		push	{r7}
 2662              		.cfi_def_cfa_offset 4
 2663              		.cfi_offset 7, -4
 2664 0002 85B0     		sub	sp, sp, #20
 2665              		.cfi_def_cfa_offset 24
 2666 0004 00AF     		add	r7, sp, #0
 2667              		.cfi_def_cfa_register 7
 2668 0006 7860     		str	r0, [r7, #4]
2294:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
2295:..\..\FreeRTOS_Source/queue.c **** 
2296:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
2297:..\..\FreeRTOS_Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2669              		.loc 1 2297 0
 2670 0008 7B68     		ldr	r3, [r7, #4]
 2671 000a 9B6B     		ldr	r3, [r3, #56]
 2672 000c 002B     		cmp	r3, #0
 2673 000e 02D1     		bne	.L164
2298:..\..\FreeRTOS_Source/queue.c **** 	{
2299:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdTRUE;
 2674              		.loc 1 2299 0
 2675 0010 0123     		movs	r3, #1
 2676 0012 FB60     		str	r3, [r7, #12]
 2677 0014 01E0     		b	.L165
 2678              	.L164:
2300:..\..\FreeRTOS_Source/queue.c **** 	}
2301:..\..\FreeRTOS_Source/queue.c **** 	else
2302:..\..\FreeRTOS_Source/queue.c **** 	{
2303:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdFALSE;
 2679              		.loc 1 2303 0
 2680 0016 0023     		movs	r3, #0
 2681 0018 FB60     		str	r3, [r7, #12]
 2682              	.L165:
2304:..\..\FreeRTOS_Source/queue.c **** 	}
2305:..\..\FreeRTOS_Source/queue.c **** 
2306:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2683              		.loc 1 2306 0
 2684 001a FB68     		ldr	r3, [r7, #12]
2307:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2685              		.loc 1 2307 0
 2686 001c 1846     		mov	r0, r3
 2687 001e 1437     		adds	r7, r7, #20
 2688              		.cfi_def_cfa_offset 4
 2689 0020 BD46     		mov	sp, r7
 2690              		.cfi_def_cfa_register 13
 2691              		@ sp needed
 2692 0022 5DF8047B 		ldr	r7, [sp], #4
 2693              		.cfi_restore 7
 2694              		.cfi_def_cfa_offset 0
 2695 0026 7047     		bx	lr
 2696              		.cfi_endproc
 2697              	.LFE93:
 2698              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2699              		.section	.text.prvIsQueueFull,"ax",%progbits
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 93


 2700              		.align	2
 2701              		.thumb
 2702              		.thumb_func
 2703              		.type	prvIsQueueFull, %function
 2704              	prvIsQueueFull:
 2705              	.LFB94:
2308:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2309:..\..\FreeRTOS_Source/queue.c **** 
2310:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2311:..\..\FreeRTOS_Source/queue.c **** {
 2706              		.loc 1 2311 0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 16
 2709              		@ frame_needed = 1, uses_anonymous_args = 0
 2710 0000 80B5     		push	{r7, lr}
 2711              		.cfi_def_cfa_offset 8
 2712              		.cfi_offset 7, -8
 2713              		.cfi_offset 14, -4
 2714 0002 84B0     		sub	sp, sp, #16
 2715              		.cfi_def_cfa_offset 24
 2716 0004 00AF     		add	r7, sp, #0
 2717              		.cfi_def_cfa_register 7
 2718 0006 7860     		str	r0, [r7, #4]
2312:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
2313:..\..\FreeRTOS_Source/queue.c **** 
2314:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2719              		.loc 1 2314 0
 2720 0008 FFF7FEFF 		bl	vPortEnterCritical
2315:..\..\FreeRTOS_Source/queue.c **** 	{
2316:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2721              		.loc 1 2316 0
 2722 000c 7B68     		ldr	r3, [r7, #4]
 2723 000e 9A6B     		ldr	r2, [r3, #56]
 2724 0010 7B68     		ldr	r3, [r7, #4]
 2725 0012 DB6B     		ldr	r3, [r3, #60]
 2726 0014 9A42     		cmp	r2, r3
 2727 0016 02D1     		bne	.L168
2317:..\..\FreeRTOS_Source/queue.c **** 		{
2318:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdTRUE;
 2728              		.loc 1 2318 0
 2729 0018 0123     		movs	r3, #1
 2730 001a FB60     		str	r3, [r7, #12]
 2731 001c 01E0     		b	.L169
 2732              	.L168:
2319:..\..\FreeRTOS_Source/queue.c **** 		}
2320:..\..\FreeRTOS_Source/queue.c **** 		else
2321:..\..\FreeRTOS_Source/queue.c **** 		{
2322:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFALSE;
 2733              		.loc 1 2322 0
 2734 001e 0023     		movs	r3, #0
 2735 0020 FB60     		str	r3, [r7, #12]
 2736              	.L169:
2323:..\..\FreeRTOS_Source/queue.c **** 		}
2324:..\..\FreeRTOS_Source/queue.c **** 	}
2325:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2737              		.loc 1 2325 0
 2738 0022 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 94


2326:..\..\FreeRTOS_Source/queue.c **** 
2327:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2739              		.loc 1 2327 0
 2740 0026 FB68     		ldr	r3, [r7, #12]
2328:..\..\FreeRTOS_Source/queue.c **** }
 2741              		.loc 1 2328 0
 2742 0028 1846     		mov	r0, r3
 2743 002a 1037     		adds	r7, r7, #16
 2744              		.cfi_def_cfa_offset 8
 2745 002c BD46     		mov	sp, r7
 2746              		.cfi_def_cfa_register 13
 2747              		@ sp needed
 2748 002e 80BD     		pop	{r7, pc}
 2749              		.cfi_endproc
 2750              	.LFE94:
 2751              		.size	prvIsQueueFull, .-prvIsQueueFull
 2752              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2753              		.align	2
 2754              		.global	xQueueIsQueueFullFromISR
 2755              		.thumb
 2756              		.thumb_func
 2757              		.type	xQueueIsQueueFullFromISR, %function
 2758              	xQueueIsQueueFullFromISR:
 2759              	.LFB95:
2329:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2330:..\..\FreeRTOS_Source/queue.c **** 
2331:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2332:..\..\FreeRTOS_Source/queue.c **** {
 2760              		.loc 1 2332 0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 16
 2763              		@ frame_needed = 1, uses_anonymous_args = 0
 2764              		@ link register save eliminated.
 2765 0000 80B4     		push	{r7}
 2766              		.cfi_def_cfa_offset 4
 2767              		.cfi_offset 7, -4
 2768 0002 85B0     		sub	sp, sp, #20
 2769              		.cfi_def_cfa_offset 24
 2770 0004 00AF     		add	r7, sp, #0
 2771              		.cfi_def_cfa_register 7
 2772 0006 7860     		str	r0, [r7, #4]
2333:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
2334:..\..\FreeRTOS_Source/queue.c **** 
2335:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
2336:..\..\FreeRTOS_Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2773              		.loc 1 2336 0
 2774 0008 7B68     		ldr	r3, [r7, #4]
 2775 000a 9A6B     		ldr	r2, [r3, #56]
 2776 000c 7B68     		ldr	r3, [r7, #4]
 2777 000e DB6B     		ldr	r3, [r3, #60]
 2778 0010 9A42     		cmp	r2, r3
 2779 0012 02D1     		bne	.L172
2337:..\..\FreeRTOS_Source/queue.c **** 	{
2338:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdTRUE;
 2780              		.loc 1 2338 0
 2781 0014 0123     		movs	r3, #1
 2782 0016 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 95


 2783 0018 01E0     		b	.L173
 2784              	.L172:
2339:..\..\FreeRTOS_Source/queue.c **** 	}
2340:..\..\FreeRTOS_Source/queue.c **** 	else
2341:..\..\FreeRTOS_Source/queue.c **** 	{
2342:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdFALSE;
 2785              		.loc 1 2342 0
 2786 001a 0023     		movs	r3, #0
 2787 001c FB60     		str	r3, [r7, #12]
 2788              	.L173:
2343:..\..\FreeRTOS_Source/queue.c **** 	}
2344:..\..\FreeRTOS_Source/queue.c **** 
2345:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2789              		.loc 1 2345 0
 2790 001e FB68     		ldr	r3, [r7, #12]
2346:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2791              		.loc 1 2346 0
 2792 0020 1846     		mov	r0, r3
 2793 0022 1437     		adds	r7, r7, #20
 2794              		.cfi_def_cfa_offset 4
 2795 0024 BD46     		mov	sp, r7
 2796              		.cfi_def_cfa_register 13
 2797              		@ sp needed
 2798 0026 5DF8047B 		ldr	r7, [sp], #4
 2799              		.cfi_restore 7
 2800              		.cfi_def_cfa_offset 0
 2801 002a 7047     		bx	lr
 2802              		.cfi_endproc
 2803              	.LFE95:
 2804              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2805              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2806              		.align	2
 2807              		.global	vQueueAddToRegistry
 2808              		.thumb
 2809              		.thumb_func
 2810              		.type	vQueueAddToRegistry, %function
 2811              	vQueueAddToRegistry:
 2812              	.LFB96:
2347:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2348:..\..\FreeRTOS_Source/queue.c **** 
2349:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2350:..\..\FreeRTOS_Source/queue.c **** 
2351:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2352:..\..\FreeRTOS_Source/queue.c **** 	{
2353:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
2354:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2355:..\..\FreeRTOS_Source/queue.c **** 
2356:..\..\FreeRTOS_Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2357:..\..\FreeRTOS_Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2358:..\..\FreeRTOS_Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2359:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2360:..\..\FreeRTOS_Source/queue.c **** 		{
2361:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2362:..\..\FreeRTOS_Source/queue.c **** 			{
2363:..\..\FreeRTOS_Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2364:..\..\FreeRTOS_Source/queue.c **** 				posting? */
2365:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 96


2366:..\..\FreeRTOS_Source/queue.c **** 				{
2367:..\..\FreeRTOS_Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2368:..\..\FreeRTOS_Source/queue.c **** 					return indicating that we need to block. */
2369:..\..\FreeRTOS_Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2370:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2371:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_BLOCKED;
2372:..\..\FreeRTOS_Source/queue.c **** 				}
2373:..\..\FreeRTOS_Source/queue.c **** 				else
2374:..\..\FreeRTOS_Source/queue.c **** 				{
2375:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2376:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_FULL;
2377:..\..\FreeRTOS_Source/queue.c **** 				}
2378:..\..\FreeRTOS_Source/queue.c **** 			}
2379:..\..\FreeRTOS_Source/queue.c **** 		}
2380:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2381:..\..\FreeRTOS_Source/queue.c **** 
2382:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2383:..\..\FreeRTOS_Source/queue.c **** 		{
2384:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2385:..\..\FreeRTOS_Source/queue.c **** 			{
2386:..\..\FreeRTOS_Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2387:..\..\FreeRTOS_Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2388:..\..\FreeRTOS_Source/queue.c **** 				xReturn = pdPASS;
2389:..\..\FreeRTOS_Source/queue.c **** 
2390:..\..\FreeRTOS_Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2391:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2392:..\..\FreeRTOS_Source/queue.c **** 				{
2393:..\..\FreeRTOS_Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2394:..\..\FreeRTOS_Source/queue.c **** 					into the ready list as we are within a critical section.
2395:..\..\FreeRTOS_Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2396:..\..\FreeRTOS_Source/queue.c **** 					the event were caused from within an interrupt. */
2397:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2398:..\..\FreeRTOS_Source/queue.c **** 					{
2399:..\..\FreeRTOS_Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2400:..\..\FreeRTOS_Source/queue.c **** 						that a yield might be appropriate. */
2401:..\..\FreeRTOS_Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2402:..\..\FreeRTOS_Source/queue.c **** 					}
2403:..\..\FreeRTOS_Source/queue.c **** 					else
2404:..\..\FreeRTOS_Source/queue.c **** 					{
2405:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2406:..\..\FreeRTOS_Source/queue.c **** 					}
2407:..\..\FreeRTOS_Source/queue.c **** 				}
2408:..\..\FreeRTOS_Source/queue.c **** 				else
2409:..\..\FreeRTOS_Source/queue.c **** 				{
2410:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2411:..\..\FreeRTOS_Source/queue.c **** 				}
2412:..\..\FreeRTOS_Source/queue.c **** 			}
2413:..\..\FreeRTOS_Source/queue.c **** 			else
2414:..\..\FreeRTOS_Source/queue.c **** 			{
2415:..\..\FreeRTOS_Source/queue.c **** 				xReturn = errQUEUE_FULL;
2416:..\..\FreeRTOS_Source/queue.c **** 			}
2417:..\..\FreeRTOS_Source/queue.c **** 		}
2418:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2419:..\..\FreeRTOS_Source/queue.c **** 
2420:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
2421:..\..\FreeRTOS_Source/queue.c **** 	}
2422:..\..\FreeRTOS_Source/queue.c **** 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 97


2423:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2424:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2425:..\..\FreeRTOS_Source/queue.c **** 
2426:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2427:..\..\FreeRTOS_Source/queue.c **** 
2428:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2429:..\..\FreeRTOS_Source/queue.c **** 	{
2430:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
2431:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2432:..\..\FreeRTOS_Source/queue.c **** 
2433:..\..\FreeRTOS_Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2434:..\..\FreeRTOS_Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2435:..\..\FreeRTOS_Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2436:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2437:..\..\FreeRTOS_Source/queue.c **** 		{
2438:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2439:..\..\FreeRTOS_Source/queue.c **** 			{
2440:..\..\FreeRTOS_Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2441:..\..\FreeRTOS_Source/queue.c **** 				leave with nothing? */
2442:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2443:..\..\FreeRTOS_Source/queue.c **** 				{
2444:..\..\FreeRTOS_Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2445:..\..\FreeRTOS_Source/queue.c **** 					indicating that we need to block. */
2446:..\..\FreeRTOS_Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2447:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2448:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_BLOCKED;
2449:..\..\FreeRTOS_Source/queue.c **** 				}
2450:..\..\FreeRTOS_Source/queue.c **** 				else
2451:..\..\FreeRTOS_Source/queue.c **** 				{
2452:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2453:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_FULL;
2454:..\..\FreeRTOS_Source/queue.c **** 				}
2455:..\..\FreeRTOS_Source/queue.c **** 			}
2456:..\..\FreeRTOS_Source/queue.c **** 			else
2457:..\..\FreeRTOS_Source/queue.c **** 			{
2458:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2459:..\..\FreeRTOS_Source/queue.c **** 			}
2460:..\..\FreeRTOS_Source/queue.c **** 		}
2461:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2462:..\..\FreeRTOS_Source/queue.c **** 
2463:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2464:..\..\FreeRTOS_Source/queue.c **** 		{
2465:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2466:..\..\FreeRTOS_Source/queue.c **** 			{
2467:..\..\FreeRTOS_Source/queue.c **** 				/* Data is available from the queue. */
2468:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2469:..\..\FreeRTOS_Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2470:..\..\FreeRTOS_Source/queue.c **** 				{
2471:..\..\FreeRTOS_Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2472:..\..\FreeRTOS_Source/queue.c **** 				}
2473:..\..\FreeRTOS_Source/queue.c **** 				else
2474:..\..\FreeRTOS_Source/queue.c **** 				{
2475:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2476:..\..\FreeRTOS_Source/queue.c **** 				}
2477:..\..\FreeRTOS_Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2478:..\..\FreeRTOS_Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2479:..\..\FreeRTOS_Source/queue.c **** 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 98


2480:..\..\FreeRTOS_Source/queue.c **** 				xReturn = pdPASS;
2481:..\..\FreeRTOS_Source/queue.c **** 
2482:..\..\FreeRTOS_Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2483:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2484:..\..\FreeRTOS_Source/queue.c **** 				{
2485:..\..\FreeRTOS_Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2486:..\..\FreeRTOS_Source/queue.c **** 					into the ready list as we are within a critical section.
2487:..\..\FreeRTOS_Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2488:..\..\FreeRTOS_Source/queue.c **** 					the event were caused from within an interrupt. */
2489:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2490:..\..\FreeRTOS_Source/queue.c **** 					{
2491:..\..\FreeRTOS_Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2492:..\..\FreeRTOS_Source/queue.c **** 					}
2493:..\..\FreeRTOS_Source/queue.c **** 					else
2494:..\..\FreeRTOS_Source/queue.c **** 					{
2495:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2496:..\..\FreeRTOS_Source/queue.c **** 					}
2497:..\..\FreeRTOS_Source/queue.c **** 				}
2498:..\..\FreeRTOS_Source/queue.c **** 				else
2499:..\..\FreeRTOS_Source/queue.c **** 				{
2500:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2501:..\..\FreeRTOS_Source/queue.c **** 				}
2502:..\..\FreeRTOS_Source/queue.c **** 			}
2503:..\..\FreeRTOS_Source/queue.c **** 			else
2504:..\..\FreeRTOS_Source/queue.c **** 			{
2505:..\..\FreeRTOS_Source/queue.c **** 				xReturn = pdFAIL;
2506:..\..\FreeRTOS_Source/queue.c **** 			}
2507:..\..\FreeRTOS_Source/queue.c **** 		}
2508:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2509:..\..\FreeRTOS_Source/queue.c **** 
2510:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
2511:..\..\FreeRTOS_Source/queue.c **** 	}
2512:..\..\FreeRTOS_Source/queue.c **** 
2513:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2514:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2515:..\..\FreeRTOS_Source/queue.c **** 
2516:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2517:..\..\FreeRTOS_Source/queue.c **** 
2518:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2519:..\..\FreeRTOS_Source/queue.c **** 	{
2520:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2521:..\..\FreeRTOS_Source/queue.c **** 
2522:..\..\FreeRTOS_Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2523:..\..\FreeRTOS_Source/queue.c **** 		exit without doing anything. */
2524:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2525:..\..\FreeRTOS_Source/queue.c **** 		{
2526:..\..\FreeRTOS_Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2527:..\..\FreeRTOS_Source/queue.c **** 
2528:..\..\FreeRTOS_Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2529:..\..\FreeRTOS_Source/queue.c **** 			co-routine has not already been woken. */
2530:..\..\FreeRTOS_Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2531:..\..\FreeRTOS_Source/queue.c **** 			{
2532:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2533:..\..\FreeRTOS_Source/queue.c **** 				{
2534:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2535:..\..\FreeRTOS_Source/queue.c **** 					{
2536:..\..\FreeRTOS_Source/queue.c **** 						return pdTRUE;
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 99


2537:..\..\FreeRTOS_Source/queue.c **** 					}
2538:..\..\FreeRTOS_Source/queue.c **** 					else
2539:..\..\FreeRTOS_Source/queue.c **** 					{
2540:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2541:..\..\FreeRTOS_Source/queue.c **** 					}
2542:..\..\FreeRTOS_Source/queue.c **** 				}
2543:..\..\FreeRTOS_Source/queue.c **** 				else
2544:..\..\FreeRTOS_Source/queue.c **** 				{
2545:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2546:..\..\FreeRTOS_Source/queue.c **** 				}
2547:..\..\FreeRTOS_Source/queue.c **** 			}
2548:..\..\FreeRTOS_Source/queue.c **** 			else
2549:..\..\FreeRTOS_Source/queue.c **** 			{
2550:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2551:..\..\FreeRTOS_Source/queue.c **** 			}
2552:..\..\FreeRTOS_Source/queue.c **** 		}
2553:..\..\FreeRTOS_Source/queue.c **** 		else
2554:..\..\FreeRTOS_Source/queue.c **** 		{
2555:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2556:..\..\FreeRTOS_Source/queue.c **** 		}
2557:..\..\FreeRTOS_Source/queue.c **** 
2558:..\..\FreeRTOS_Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2559:..\..\FreeRTOS_Source/queue.c **** 	}
2560:..\..\FreeRTOS_Source/queue.c **** 
2561:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2562:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2563:..\..\FreeRTOS_Source/queue.c **** 
2564:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2565:..\..\FreeRTOS_Source/queue.c **** 
2566:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2567:..\..\FreeRTOS_Source/queue.c **** 	{
2568:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
2569:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2570:..\..\FreeRTOS_Source/queue.c **** 
2571:..\..\FreeRTOS_Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2572:..\..\FreeRTOS_Source/queue.c **** 		not then just leave without doing anything. */
2573:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2574:..\..\FreeRTOS_Source/queue.c **** 		{
2575:..\..\FreeRTOS_Source/queue.c **** 			/* Copy the data from the queue. */
2576:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2577:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2578:..\..\FreeRTOS_Source/queue.c **** 			{
2579:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2580:..\..\FreeRTOS_Source/queue.c **** 			}
2581:..\..\FreeRTOS_Source/queue.c **** 			else
2582:..\..\FreeRTOS_Source/queue.c **** 			{
2583:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2584:..\..\FreeRTOS_Source/queue.c **** 			}
2585:..\..\FreeRTOS_Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2586:..\..\FreeRTOS_Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2587:..\..\FreeRTOS_Source/queue.c **** 
2588:..\..\FreeRTOS_Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2589:..\..\FreeRTOS_Source/queue.c **** 			{
2590:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2591:..\..\FreeRTOS_Source/queue.c **** 				{
2592:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2593:..\..\FreeRTOS_Source/queue.c **** 					{
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 100


2594:..\..\FreeRTOS_Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2595:..\..\FreeRTOS_Source/queue.c **** 					}
2596:..\..\FreeRTOS_Source/queue.c **** 					else
2597:..\..\FreeRTOS_Source/queue.c **** 					{
2598:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2599:..\..\FreeRTOS_Source/queue.c **** 					}
2600:..\..\FreeRTOS_Source/queue.c **** 				}
2601:..\..\FreeRTOS_Source/queue.c **** 				else
2602:..\..\FreeRTOS_Source/queue.c **** 				{
2603:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2604:..\..\FreeRTOS_Source/queue.c **** 				}
2605:..\..\FreeRTOS_Source/queue.c **** 			}
2606:..\..\FreeRTOS_Source/queue.c **** 			else
2607:..\..\FreeRTOS_Source/queue.c **** 			{
2608:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2609:..\..\FreeRTOS_Source/queue.c **** 			}
2610:..\..\FreeRTOS_Source/queue.c **** 
2611:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
2612:..\..\FreeRTOS_Source/queue.c **** 		}
2613:..\..\FreeRTOS_Source/queue.c **** 		else
2614:..\..\FreeRTOS_Source/queue.c **** 		{
2615:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
2616:..\..\FreeRTOS_Source/queue.c **** 		}
2617:..\..\FreeRTOS_Source/queue.c **** 
2618:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
2619:..\..\FreeRTOS_Source/queue.c **** 	}
2620:..\..\FreeRTOS_Source/queue.c **** 
2621:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2622:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2623:..\..\FreeRTOS_Source/queue.c **** 
2624:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2625:..\..\FreeRTOS_Source/queue.c **** 
2626:..\..\FreeRTOS_Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2627:..\..\FreeRTOS_Source/queue.c **** 	{
 2813              		.loc 1 2627 0
 2814              		.cfi_startproc
 2815              		@ args = 0, pretend = 0, frame = 16
 2816              		@ frame_needed = 1, uses_anonymous_args = 0
 2817              		@ link register save eliminated.
 2818 0000 80B4     		push	{r7}
 2819              		.cfi_def_cfa_offset 4
 2820              		.cfi_offset 7, -4
 2821 0002 85B0     		sub	sp, sp, #20
 2822              		.cfi_def_cfa_offset 24
 2823 0004 00AF     		add	r7, sp, #0
 2824              		.cfi_def_cfa_register 7
 2825 0006 7860     		str	r0, [r7, #4]
 2826 0008 3960     		str	r1, [r7]
2628:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t ux;
2629:..\..\FreeRTOS_Source/queue.c **** 
2630:..\..\FreeRTOS_Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2631:..\..\FreeRTOS_Source/queue.c **** 		a free slot. */
2632:..\..\FreeRTOS_Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2827              		.loc 1 2632 0
 2828 000a 0023     		movs	r3, #0
 2829 000c FB60     		str	r3, [r7, #12]
 2830 000e 14E0     		b	.L176
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 101


 2831              	.L179:
2633:..\..\FreeRTOS_Source/queue.c **** 		{
2634:..\..\FreeRTOS_Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2832              		.loc 1 2634 0
 2833 0010 0E4A     		ldr	r2, .L180
 2834 0012 FB68     		ldr	r3, [r7, #12]
 2835 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2836 0018 002B     		cmp	r3, #0
 2837 001a 0BD1     		bne	.L177
2635:..\..\FreeRTOS_Source/queue.c **** 			{
2636:..\..\FreeRTOS_Source/queue.c **** 				/* Store the information on this queue. */
2637:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2838              		.loc 1 2637 0
 2839 001c 0B49     		ldr	r1, .L180
 2840 001e FB68     		ldr	r3, [r7, #12]
 2841 0020 3A68     		ldr	r2, [r7]
 2842 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2638:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2843              		.loc 1 2638 0
 2844 0026 094A     		ldr	r2, .L180
 2845 0028 FB68     		ldr	r3, [r7, #12]
 2846 002a DB00     		lsls	r3, r3, #3
 2847 002c 1344     		add	r3, r3, r2
 2848 002e 7A68     		ldr	r2, [r7, #4]
 2849 0030 5A60     		str	r2, [r3, #4]
2639:..\..\FreeRTOS_Source/queue.c **** 
2640:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2641:..\..\FreeRTOS_Source/queue.c **** 				break;
 2850              		.loc 1 2641 0
 2851 0032 05E0     		b	.L175
 2852              	.L177:
2632:..\..\FreeRTOS_Source/queue.c **** 		{
 2853              		.loc 1 2632 0 discriminator 2
 2854 0034 FB68     		ldr	r3, [r7, #12]
 2855 0036 0133     		adds	r3, r3, #1
 2856 0038 FB60     		str	r3, [r7, #12]
 2857              	.L176:
2632:..\..\FreeRTOS_Source/queue.c **** 		{
 2858              		.loc 1 2632 0 is_stmt 0 discriminator 1
 2859 003a FB68     		ldr	r3, [r7, #12]
 2860 003c 092B     		cmp	r3, #9
 2861 003e E7D9     		bls	.L179
 2862              	.L175:
2642:..\..\FreeRTOS_Source/queue.c **** 			}
2643:..\..\FreeRTOS_Source/queue.c **** 			else
2644:..\..\FreeRTOS_Source/queue.c **** 			{
2645:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2646:..\..\FreeRTOS_Source/queue.c **** 			}
2647:..\..\FreeRTOS_Source/queue.c **** 		}
2648:..\..\FreeRTOS_Source/queue.c **** 	}
 2863              		.loc 1 2648 0 is_stmt 1
 2864 0040 1437     		adds	r7, r7, #20
 2865              		.cfi_def_cfa_offset 4
 2866 0042 BD46     		mov	sp, r7
 2867              		.cfi_def_cfa_register 13
 2868              		@ sp needed
 2869 0044 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 102


 2870              		.cfi_restore 7
 2871              		.cfi_def_cfa_offset 0
 2872 0048 7047     		bx	lr
 2873              	.L181:
 2874 004a 00BF     		.align	2
 2875              	.L180:
 2876 004c 00000000 		.word	xQueueRegistry
 2877              		.cfi_endproc
 2878              	.LFE96:
 2879              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2880              		.section	.text.pcQueueGetName,"ax",%progbits
 2881              		.align	2
 2882              		.global	pcQueueGetName
 2883              		.thumb
 2884              		.thumb_func
 2885              		.type	pcQueueGetName, %function
 2886              	pcQueueGetName:
 2887              	.LFB97:
2649:..\..\FreeRTOS_Source/queue.c **** 
2650:..\..\FreeRTOS_Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2651:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2652:..\..\FreeRTOS_Source/queue.c **** 
2653:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2654:..\..\FreeRTOS_Source/queue.c **** 
2655:..\..\FreeRTOS_Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2656:..\..\FreeRTOS_Source/queue.c **** 	{
 2888              		.loc 1 2656 0
 2889              		.cfi_startproc
 2890              		@ args = 0, pretend = 0, frame = 16
 2891              		@ frame_needed = 1, uses_anonymous_args = 0
 2892              		@ link register save eliminated.
 2893 0000 80B4     		push	{r7}
 2894              		.cfi_def_cfa_offset 4
 2895              		.cfi_offset 7, -4
 2896 0002 85B0     		sub	sp, sp, #20
 2897              		.cfi_def_cfa_offset 24
 2898 0004 00AF     		add	r7, sp, #0
 2899              		.cfi_def_cfa_register 7
 2900 0006 7860     		str	r0, [r7, #4]
2657:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t ux;
2658:..\..\FreeRTOS_Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 2901              		.loc 1 2658 0
 2902 0008 0023     		movs	r3, #0
 2903 000a BB60     		str	r3, [r7, #8]
2659:..\..\FreeRTOS_Source/queue.c **** 
2660:..\..\FreeRTOS_Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2661:..\..\FreeRTOS_Source/queue.c **** 		removing entries from the registry while it is being searched. */
2662:..\..\FreeRTOS_Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2904              		.loc 1 2662 0
 2905 000c 0023     		movs	r3, #0
 2906 000e FB60     		str	r3, [r7, #12]
 2907 0010 10E0     		b	.L183
 2908              	.L186:
2663:..\..\FreeRTOS_Source/queue.c **** 		{
2664:..\..\FreeRTOS_Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2909              		.loc 1 2664 0
 2910 0012 0D4A     		ldr	r2, .L188
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 103


 2911 0014 FB68     		ldr	r3, [r7, #12]
 2912 0016 DB00     		lsls	r3, r3, #3
 2913 0018 1344     		add	r3, r3, r2
 2914 001a 5A68     		ldr	r2, [r3, #4]
 2915 001c 7B68     		ldr	r3, [r7, #4]
 2916 001e 9A42     		cmp	r2, r3
 2917 0020 05D1     		bne	.L184
2665:..\..\FreeRTOS_Source/queue.c **** 			{
2666:..\..\FreeRTOS_Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2918              		.loc 1 2666 0
 2919 0022 094A     		ldr	r2, .L188
 2920 0024 FB68     		ldr	r3, [r7, #12]
 2921 0026 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2922 002a BB60     		str	r3, [r7, #8]
2667:..\..\FreeRTOS_Source/queue.c **** 				break;
 2923              		.loc 1 2667 0
 2924 002c 05E0     		b	.L185
 2925              	.L184:
2662:..\..\FreeRTOS_Source/queue.c **** 		{
 2926              		.loc 1 2662 0 discriminator 2
 2927 002e FB68     		ldr	r3, [r7, #12]
 2928 0030 0133     		adds	r3, r3, #1
 2929 0032 FB60     		str	r3, [r7, #12]
 2930              	.L183:
2662:..\..\FreeRTOS_Source/queue.c **** 		{
 2931              		.loc 1 2662 0 is_stmt 0 discriminator 1
 2932 0034 FB68     		ldr	r3, [r7, #12]
 2933 0036 092B     		cmp	r3, #9
 2934 0038 EBD9     		bls	.L186
 2935              	.L185:
2668:..\..\FreeRTOS_Source/queue.c **** 			}
2669:..\..\FreeRTOS_Source/queue.c **** 			else
2670:..\..\FreeRTOS_Source/queue.c **** 			{
2671:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2672:..\..\FreeRTOS_Source/queue.c **** 			}
2673:..\..\FreeRTOS_Source/queue.c **** 		}
2674:..\..\FreeRTOS_Source/queue.c **** 
2675:..\..\FreeRTOS_Source/queue.c **** 		return pcReturn;
 2936              		.loc 1 2675 0 is_stmt 1
 2937 003a BB68     		ldr	r3, [r7, #8]
2676:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2938              		.loc 1 2676 0
 2939 003c 1846     		mov	r0, r3
 2940 003e 1437     		adds	r7, r7, #20
 2941              		.cfi_def_cfa_offset 4
 2942 0040 BD46     		mov	sp, r7
 2943              		.cfi_def_cfa_register 13
 2944              		@ sp needed
 2945 0042 5DF8047B 		ldr	r7, [sp], #4
 2946              		.cfi_restore 7
 2947              		.cfi_def_cfa_offset 0
 2948 0046 7047     		bx	lr
 2949              	.L189:
 2950              		.align	2
 2951              	.L188:
 2952 0048 00000000 		.word	xQueueRegistry
 2953              		.cfi_endproc
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 104


 2954              	.LFE97:
 2955              		.size	pcQueueGetName, .-pcQueueGetName
 2956              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2957              		.align	2
 2958              		.global	vQueueUnregisterQueue
 2959              		.thumb
 2960              		.thumb_func
 2961              		.type	vQueueUnregisterQueue, %function
 2962              	vQueueUnregisterQueue:
 2963              	.LFB98:
2677:..\..\FreeRTOS_Source/queue.c **** 
2678:..\..\FreeRTOS_Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2679:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2680:..\..\FreeRTOS_Source/queue.c **** 
2681:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2682:..\..\FreeRTOS_Source/queue.c **** 
2683:..\..\FreeRTOS_Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2684:..\..\FreeRTOS_Source/queue.c **** 	{
 2964              		.loc 1 2684 0
 2965              		.cfi_startproc
 2966              		@ args = 0, pretend = 0, frame = 16
 2967              		@ frame_needed = 1, uses_anonymous_args = 0
 2968              		@ link register save eliminated.
 2969 0000 80B4     		push	{r7}
 2970              		.cfi_def_cfa_offset 4
 2971              		.cfi_offset 7, -4
 2972 0002 85B0     		sub	sp, sp, #20
 2973              		.cfi_def_cfa_offset 24
 2974 0004 00AF     		add	r7, sp, #0
 2975              		.cfi_def_cfa_register 7
 2976 0006 7860     		str	r0, [r7, #4]
2685:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t ux;
2686:..\..\FreeRTOS_Source/queue.c **** 
2687:..\..\FreeRTOS_Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2688:..\..\FreeRTOS_Source/queue.c **** 		registry. */
2689:..\..\FreeRTOS_Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2977              		.loc 1 2689 0
 2978 0008 0023     		movs	r3, #0
 2979 000a FB60     		str	r3, [r7, #12]
 2980 000c 16E0     		b	.L191
 2981              	.L194:
2690:..\..\FreeRTOS_Source/queue.c **** 		{
2691:..\..\FreeRTOS_Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2982              		.loc 1 2691 0
 2983 000e 0F4A     		ldr	r2, .L195
 2984 0010 FB68     		ldr	r3, [r7, #12]
 2985 0012 DB00     		lsls	r3, r3, #3
 2986 0014 1344     		add	r3, r3, r2
 2987 0016 5A68     		ldr	r2, [r3, #4]
 2988 0018 7B68     		ldr	r3, [r7, #4]
 2989 001a 9A42     		cmp	r2, r3
 2990 001c 0BD1     		bne	.L192
2692:..\..\FreeRTOS_Source/queue.c **** 			{
2693:..\..\FreeRTOS_Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2694:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2991              		.loc 1 2694 0
 2992 001e 0B4A     		ldr	r2, .L195
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 105


 2993 0020 FB68     		ldr	r3, [r7, #12]
 2994 0022 0021     		movs	r1, #0
 2995 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2695:..\..\FreeRTOS_Source/queue.c **** 
2696:..\..\FreeRTOS_Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2697:..\..\FreeRTOS_Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2698:..\..\FreeRTOS_Source/queue.c **** 				added again. */
2699:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2996              		.loc 1 2699 0
 2997 0028 084A     		ldr	r2, .L195
 2998 002a FB68     		ldr	r3, [r7, #12]
 2999 002c DB00     		lsls	r3, r3, #3
 3000 002e 1344     		add	r3, r3, r2
 3001 0030 0022     		movs	r2, #0
 3002 0032 5A60     		str	r2, [r3, #4]
2700:..\..\FreeRTOS_Source/queue.c **** 				break;
 3003              		.loc 1 2700 0
 3004 0034 05E0     		b	.L190
 3005              	.L192:
2689:..\..\FreeRTOS_Source/queue.c **** 		{
 3006              		.loc 1 2689 0 discriminator 2
 3007 0036 FB68     		ldr	r3, [r7, #12]
 3008 0038 0133     		adds	r3, r3, #1
 3009 003a FB60     		str	r3, [r7, #12]
 3010              	.L191:
2689:..\..\FreeRTOS_Source/queue.c **** 		{
 3011              		.loc 1 2689 0 is_stmt 0 discriminator 1
 3012 003c FB68     		ldr	r3, [r7, #12]
 3013 003e 092B     		cmp	r3, #9
 3014 0040 E5D9     		bls	.L194
 3015              	.L190:
2701:..\..\FreeRTOS_Source/queue.c **** 			}
2702:..\..\FreeRTOS_Source/queue.c **** 			else
2703:..\..\FreeRTOS_Source/queue.c **** 			{
2704:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2705:..\..\FreeRTOS_Source/queue.c **** 			}
2706:..\..\FreeRTOS_Source/queue.c **** 		}
2707:..\..\FreeRTOS_Source/queue.c **** 
2708:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3016              		.loc 1 2708 0 is_stmt 1
 3017 0042 1437     		adds	r7, r7, #20
 3018              		.cfi_def_cfa_offset 4
 3019 0044 BD46     		mov	sp, r7
 3020              		.cfi_def_cfa_register 13
 3021              		@ sp needed
 3022 0046 5DF8047B 		ldr	r7, [sp], #4
 3023              		.cfi_restore 7
 3024              		.cfi_def_cfa_offset 0
 3025 004a 7047     		bx	lr
 3026              	.L196:
 3027              		.align	2
 3028              	.L195:
 3029 004c 00000000 		.word	xQueueRegistry
 3030              		.cfi_endproc
 3031              	.LFE98:
 3032              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 3033              		.text
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 106


 3034              	.Letext0:
 3035              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3036              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3037              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3038              		.file 6 "..\\..\\FreeRTOS_Source\\include/list.h"
 3039              		.file 7 "..\\..\\FreeRTOS_Source\\include/task.h"
 3040              		.file 8 "..\\..\\FreeRTOS_Source\\include/queue.h"
 3041              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 3042              		.section	.debug_info,"",%progbits
 3043              	.Ldebug_info0:
 3044 0000 2A100000 		.4byte	0x102a
 3045 0004 0400     		.2byte	0x4
 3046 0006 00000000 		.4byte	.Ldebug_abbrev0
 3047 000a 04       		.byte	0x4
 3048 000b 01       		.uleb128 0x1
 3049 000c 45050000 		.4byte	.LASF131
 3050 0010 01       		.byte	0x1
 3051 0011 21040000 		.4byte	.LASF132
 3052 0015 42020000 		.4byte	.LASF133
 3053 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3054 001d 00000000 		.4byte	0
 3055 0021 00000000 		.4byte	.Ldebug_line0
 3056 0025 02       		.uleb128 0x2
 3057 0026 18030000 		.4byte	.LASF1
 3058 002a 03       		.byte	0x3
 3059 002b D4       		.byte	0xd4
 3060 002c 30000000 		.4byte	0x30
 3061 0030 03       		.uleb128 0x3
 3062 0031 04       		.byte	0x4
 3063 0032 07       		.byte	0x7
 3064 0033 80000000 		.4byte	.LASF0
 3065 0037 04       		.uleb128 0x4
 3066 0038 04       		.byte	0x4
 3067 0039 05       		.byte	0x5
 3068 003a 696E7400 		.ascii	"int\000"
 3069 003e 02       		.uleb128 0x2
 3070 003f 71060000 		.4byte	.LASF2
 3071 0043 04       		.byte	0x4
 3072 0044 1B       		.byte	0x1b
 3073 0045 49000000 		.4byte	0x49
 3074 0049 03       		.uleb128 0x3
 3075 004a 01       		.byte	0x1
 3076 004b 06       		.byte	0x6
 3077 004c 6C080000 		.4byte	.LASF3
 3078 0050 02       		.uleb128 0x2
 3079 0051 59070000 		.4byte	.LASF4
 3080 0055 04       		.byte	0x4
 3081 0056 1D       		.byte	0x1d
 3082 0057 5B000000 		.4byte	0x5b
 3083 005b 03       		.uleb128 0x3
 3084 005c 01       		.byte	0x1
 3085 005d 08       		.byte	0x8
 3086 005e CD070000 		.4byte	.LASF5
 3087 0062 03       		.uleb128 0x3
 3088 0063 02       		.byte	0x2
 3089 0064 05       		.byte	0x5
 3090 0065 D7060000 		.4byte	.LASF6
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 107


 3091 0069 03       		.uleb128 0x3
 3092 006a 02       		.byte	0x2
 3093 006b 07       		.byte	0x7
 3094 006c 78080000 		.4byte	.LASF7
 3095 0070 02       		.uleb128 0x2
 3096 0071 AA000000 		.4byte	.LASF8
 3097 0075 04       		.byte	0x4
 3098 0076 3F       		.byte	0x3f
 3099 0077 7B000000 		.4byte	0x7b
 3100 007b 03       		.uleb128 0x3
 3101 007c 04       		.byte	0x4
 3102 007d 05       		.byte	0x5
 3103 007e EC060000 		.4byte	.LASF9
 3104 0082 02       		.uleb128 0x2
 3105 0083 DB070000 		.4byte	.LASF10
 3106 0087 04       		.byte	0x4
 3107 0088 41       		.byte	0x41
 3108 0089 8D000000 		.4byte	0x8d
 3109 008d 03       		.uleb128 0x3
 3110 008e 04       		.byte	0x4
 3111 008f 07       		.byte	0x7
 3112 0090 7C070000 		.4byte	.LASF11
 3113 0094 03       		.uleb128 0x3
 3114 0095 08       		.byte	0x8
 3115 0096 05       		.byte	0x5
 3116 0097 D7040000 		.4byte	.LASF12
 3117 009b 03       		.uleb128 0x3
 3118 009c 08       		.byte	0x8
 3119 009d 07       		.byte	0x7
 3120 009e 12020000 		.4byte	.LASF13
 3121 00a2 03       		.uleb128 0x3
 3122 00a3 04       		.byte	0x4
 3123 00a4 07       		.byte	0x7
 3124 00a5 73070000 		.4byte	.LASF14
 3125 00a9 05       		.uleb128 0x5
 3126 00aa 04       		.byte	0x4
 3127 00ab 03       		.uleb128 0x3
 3128 00ac 01       		.byte	0x1
 3129 00ad 08       		.byte	0x8
 3130 00ae C8030000 		.4byte	.LASF15
 3131 00b2 06       		.uleb128 0x6
 3132 00b3 04       		.byte	0x4
 3133 00b4 B8000000 		.4byte	0xb8
 3134 00b8 07       		.uleb128 0x7
 3135 00b9 AB000000 		.4byte	0xab
 3136 00bd 06       		.uleb128 0x6
 3137 00be 04       		.byte	0x4
 3138 00bf C3000000 		.4byte	0xc3
 3139 00c3 08       		.uleb128 0x8
 3140 00c4 02       		.uleb128 0x2
 3141 00c5 C1010000 		.4byte	.LASF16
 3142 00c9 05       		.byte	0x5
 3143 00ca 14       		.byte	0x14
 3144 00cb 3E000000 		.4byte	0x3e
 3145 00cf 02       		.uleb128 0x2
 3146 00d0 83040000 		.4byte	.LASF17
 3147 00d4 05       		.byte	0x5
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 108


 3148 00d5 15       		.byte	0x15
 3149 00d6 50000000 		.4byte	0x50
 3150 00da 02       		.uleb128 0x2
 3151 00db 8E070000 		.4byte	.LASF18
 3152 00df 05       		.byte	0x5
 3153 00e0 2C       		.byte	0x2c
 3154 00e1 70000000 		.4byte	0x70
 3155 00e5 02       		.uleb128 0x2
 3156 00e6 B8010000 		.4byte	.LASF19
 3157 00ea 05       		.byte	0x5
 3158 00eb 2D       		.byte	0x2d
 3159 00ec 82000000 		.4byte	0x82
 3160 00f0 03       		.uleb128 0x3
 3161 00f1 04       		.byte	0x4
 3162 00f2 04       		.byte	0x4
 3163 00f3 FC010000 		.4byte	.LASF20
 3164 00f7 03       		.uleb128 0x3
 3165 00f8 08       		.byte	0x8
 3166 00f9 04       		.byte	0x4
 3167 00fa 92080000 		.4byte	.LASF21
 3168 00fe 02       		.uleb128 0x2
 3169 00ff F8040000 		.4byte	.LASF22
 3170 0103 02       		.byte	0x2
 3171 0104 38       		.byte	0x38
 3172 0105 7B000000 		.4byte	0x7b
 3173 0109 02       		.uleb128 0x2
 3174 010a F4030000 		.4byte	.LASF23
 3175 010e 02       		.byte	0x2
 3176 010f 39       		.byte	0x39
 3177 0110 8D000000 		.4byte	0x8d
 3178 0114 02       		.uleb128 0x2
 3179 0115 66060000 		.4byte	.LASF24
 3180 0119 02       		.byte	0x2
 3181 011a 3F       		.byte	0x3f
 3182 011b E5000000 		.4byte	0xe5
 3183 011f 06       		.uleb128 0x6
 3184 0120 04       		.byte	0x4
 3185 0121 CF000000 		.4byte	0xcf
 3186 0125 09       		.uleb128 0x9
 3187 0126 B4000000 		.4byte	.LASF30
 3188 012a 14       		.byte	0x14
 3189 012b 06       		.byte	0x6
 3190 012c 8C       		.byte	0x8c
 3191 012d 6E010000 		.4byte	0x16e
 3192 0131 0A       		.uleb128 0xa
 3193 0132 E1060000 		.4byte	.LASF25
 3194 0136 06       		.byte	0x6
 3195 0137 8F       		.byte	0x8f
 3196 0138 14010000 		.4byte	0x114
 3197 013c 00       		.byte	0
 3198 013d 0A       		.uleb128 0xa
 3199 013e 3E050000 		.4byte	.LASF26
 3200 0142 06       		.byte	0x6
 3201 0143 90       		.byte	0x90
 3202 0144 6E010000 		.4byte	0x16e
 3203 0148 04       		.byte	0x4
 3204 0149 0A       		.uleb128 0xa
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 109


 3205 014a E2020000 		.4byte	.LASF27
 3206 014e 06       		.byte	0x6
 3207 014f 91       		.byte	0x91
 3208 0150 6E010000 		.4byte	0x16e
 3209 0154 08       		.byte	0x8
 3210 0155 0A       		.uleb128 0xa
 3211 0156 08080000 		.4byte	.LASF28
 3212 015a 06       		.byte	0x6
 3213 015b 92       		.byte	0x92
 3214 015c A9000000 		.4byte	0xa9
 3215 0160 0C       		.byte	0xc
 3216 0161 0A       		.uleb128 0xa
 3217 0162 A8070000 		.4byte	.LASF29
 3218 0166 06       		.byte	0x6
 3219 0167 93       		.byte	0x93
 3220 0168 A5010000 		.4byte	0x1a5
 3221 016c 10       		.byte	0x10
 3222 016d 00       		.byte	0
 3223 016e 06       		.uleb128 0x6
 3224 016f 04       		.byte	0x4
 3225 0170 25010000 		.4byte	0x125
 3226 0174 09       		.uleb128 0x9
 3227 0175 4C030000 		.4byte	.LASF31
 3228 0179 14       		.byte	0x14
 3229 017a 06       		.byte	0x6
 3230 017b A4       		.byte	0xa4
 3231 017c A5010000 		.4byte	0x1a5
 3232 0180 0A       		.uleb128 0xa
 3233 0181 00000000 		.4byte	.LASF32
 3234 0185 06       		.byte	0x6
 3235 0186 A7       		.byte	0xa7
 3236 0187 F2010000 		.4byte	0x1f2
 3237 018b 00       		.byte	0
 3238 018c 0A       		.uleb128 0xa
 3239 018d 8D000000 		.4byte	.LASF33
 3240 0191 06       		.byte	0x6
 3241 0192 A8       		.byte	0xa8
 3242 0193 F7010000 		.4byte	0x1f7
 3243 0197 04       		.byte	0x4
 3244 0198 0A       		.uleb128 0xa
 3245 0199 4D040000 		.4byte	.LASF34
 3246 019d 06       		.byte	0x6
 3247 019e A9       		.byte	0xa9
 3248 019f E7010000 		.4byte	0x1e7
 3249 01a3 08       		.byte	0x8
 3250 01a4 00       		.byte	0
 3251 01a5 06       		.uleb128 0x6
 3252 01a6 04       		.byte	0x4
 3253 01a7 74010000 		.4byte	0x174
 3254 01ab 02       		.uleb128 0x2
 3255 01ac CD030000 		.4byte	.LASF35
 3256 01b0 06       		.byte	0x6
 3257 01b1 96       		.byte	0x96
 3258 01b2 25010000 		.4byte	0x125
 3259 01b6 09       		.uleb128 0x9
 3260 01b7 3C030000 		.4byte	.LASF36
 3261 01bb 0C       		.byte	0xc
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 110


 3262 01bc 06       		.byte	0x6
 3263 01bd 98       		.byte	0x98
 3264 01be E7010000 		.4byte	0x1e7
 3265 01c2 0A       		.uleb128 0xa
 3266 01c3 E1060000 		.4byte	.LASF25
 3267 01c7 06       		.byte	0x6
 3268 01c8 9B       		.byte	0x9b
 3269 01c9 14010000 		.4byte	0x114
 3270 01cd 00       		.byte	0
 3271 01ce 0A       		.uleb128 0xa
 3272 01cf 3E050000 		.4byte	.LASF26
 3273 01d3 06       		.byte	0x6
 3274 01d4 9C       		.byte	0x9c
 3275 01d5 6E010000 		.4byte	0x16e
 3276 01d9 04       		.byte	0x4
 3277 01da 0A       		.uleb128 0xa
 3278 01db E2020000 		.4byte	.LASF27
 3279 01df 06       		.byte	0x6
 3280 01e0 9D       		.byte	0x9d
 3281 01e1 6E010000 		.4byte	0x16e
 3282 01e5 08       		.byte	0x8
 3283 01e6 00       		.byte	0
 3284 01e7 02       		.uleb128 0x2
 3285 01e8 74040000 		.4byte	.LASF37
 3286 01ec 06       		.byte	0x6
 3287 01ed 9F       		.byte	0x9f
 3288 01ee B6010000 		.4byte	0x1b6
 3289 01f2 0B       		.uleb128 0xb
 3290 01f3 09010000 		.4byte	0x109
 3291 01f7 06       		.uleb128 0x6
 3292 01f8 04       		.byte	0x4
 3293 01f9 AB010000 		.4byte	0x1ab
 3294 01fd 02       		.uleb128 0x2
 3295 01fe 44060000 		.4byte	.LASF38
 3296 0202 06       		.byte	0x6
 3297 0203 AB       		.byte	0xab
 3298 0204 74010000 		.4byte	0x174
 3299 0208 09       		.uleb128 0x9
 3300 0209 95000000 		.4byte	.LASF39
 3301 020d 08       		.byte	0x8
 3302 020e 07       		.byte	0x7
 3303 020f 5E       		.byte	0x5e
 3304 0210 2D020000 		.4byte	0x22d
 3305 0214 0A       		.uleb128 0xa
 3306 0215 06010000 		.4byte	.LASF40
 3307 0219 07       		.byte	0x7
 3308 021a 60       		.byte	0x60
 3309 021b FE000000 		.4byte	0xfe
 3310 021f 00       		.byte	0
 3311 0220 0A       		.uleb128 0xa
 3312 0221 1A050000 		.4byte	.LASF41
 3313 0225 07       		.byte	0x7
 3314 0226 61       		.byte	0x61
 3315 0227 14010000 		.4byte	0x114
 3316 022b 04       		.byte	0x4
 3317 022c 00       		.byte	0
 3318 022d 02       		.uleb128 0x2
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 111


 3319 022e E8050000 		.4byte	.LASF42
 3320 0232 07       		.byte	0x7
 3321 0233 62       		.byte	0x62
 3322 0234 08020000 		.4byte	0x208
 3323 0238 02       		.uleb128 0x2
 3324 0239 3F040000 		.4byte	.LASF43
 3325 023d 08       		.byte	0x8
 3326 023e 2E       		.byte	0x2e
 3327 023f A9000000 		.4byte	0xa9
 3328 0243 0C       		.uleb128 0xc
 3329 0244 04       		.byte	0x4
 3330 0245 01       		.byte	0x1
 3331 0246 5E       		.byte	0x5e
 3332 0247 62020000 		.4byte	0x262
 3333 024b 0D       		.uleb128 0xd
 3334 024c 6A010000 		.4byte	.LASF44
 3335 0250 01       		.byte	0x1
 3336 0251 60       		.byte	0x60
 3337 0252 62020000 		.4byte	0x262
 3338 0256 0D       		.uleb128 0xd
 3339 0257 15010000 		.4byte	.LASF45
 3340 025b 01       		.byte	0x1
 3341 025c 61       		.byte	0x61
 3342 025d 09010000 		.4byte	0x109
 3343 0261 00       		.byte	0
 3344 0262 06       		.uleb128 0x6
 3345 0263 04       		.byte	0x4
 3346 0264 C4000000 		.4byte	0xc4
 3347 0268 09       		.uleb128 0x9
 3348 0269 02020000 		.4byte	.LASF46
 3349 026d 48       		.byte	0x48
 3350 026e 01       		.byte	0x1
 3351 026f 58       		.byte	0x58
 3352 0270 F7020000 		.4byte	0x2f7
 3353 0274 0A       		.uleb128 0xa
 3354 0275 10080000 		.4byte	.LASF47
 3355 0279 01       		.byte	0x1
 3356 027a 5A       		.byte	0x5a
 3357 027b 62020000 		.4byte	0x262
 3358 027f 00       		.byte	0
 3359 0280 0A       		.uleb128 0xa
 3360 0281 52070000 		.4byte	.LASF48
 3361 0285 01       		.byte	0x1
 3362 0286 5B       		.byte	0x5b
 3363 0287 62020000 		.4byte	0x262
 3364 028b 04       		.byte	0x4
 3365 028c 0A       		.uleb128 0xa
 3366 028d 5C060000 		.4byte	.LASF49
 3367 0291 01       		.byte	0x1
 3368 0292 5C       		.byte	0x5c
 3369 0293 62020000 		.4byte	0x262
 3370 0297 08       		.byte	0x8
 3371 0298 0E       		.uleb128 0xe
 3372 0299 7500     		.ascii	"u\000"
 3373 029b 01       		.byte	0x1
 3374 029c 62       		.byte	0x62
 3375 029d 43020000 		.4byte	0x243
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 112


 3376 02a1 0C       		.byte	0xc
 3377 02a2 0A       		.uleb128 0xa
 3378 02a3 D3000000 		.4byte	.LASF50
 3379 02a7 01       		.byte	0x1
 3380 02a8 64       		.byte	0x64
 3381 02a9 FD010000 		.4byte	0x1fd
 3382 02ad 10       		.byte	0x10
 3383 02ae 0A       		.uleb128 0xa
 3384 02af 33000000 		.4byte	.LASF51
 3385 02b3 01       		.byte	0x1
 3386 02b4 65       		.byte	0x65
 3387 02b5 FD010000 		.4byte	0x1fd
 3388 02b9 24       		.byte	0x24
 3389 02ba 0A       		.uleb128 0xa
 3390 02bb ED020000 		.4byte	.LASF52
 3391 02bf 01       		.byte	0x1
 3392 02c0 67       		.byte	0x67
 3393 02c1 F2010000 		.4byte	0x1f2
 3394 02c5 38       		.byte	0x38
 3395 02c6 0A       		.uleb128 0xa
 3396 02c7 CE060000 		.4byte	.LASF53
 3397 02cb 01       		.byte	0x1
 3398 02cc 68       		.byte	0x68
 3399 02cd 09010000 		.4byte	0x109
 3400 02d1 3C       		.byte	0x3c
 3401 02d2 0A       		.uleb128 0xa
 3402 02d3 A0030000 		.4byte	.LASF54
 3403 02d7 01       		.byte	0x1
 3404 02d8 69       		.byte	0x69
 3405 02d9 09010000 		.4byte	0x109
 3406 02dd 40       		.byte	0x40
 3407 02de 0A       		.uleb128 0xa
 3408 02df A3080000 		.4byte	.LASF55
 3409 02e3 01       		.byte	0x1
 3410 02e4 6B       		.byte	0x6b
 3411 02e5 F7020000 		.4byte	0x2f7
 3412 02e9 44       		.byte	0x44
 3413 02ea 0A       		.uleb128 0xa
 3414 02eb FE000000 		.4byte	.LASF56
 3415 02ef 01       		.byte	0x1
 3416 02f0 6C       		.byte	0x6c
 3417 02f1 F7020000 		.4byte	0x2f7
 3418 02f5 45       		.byte	0x45
 3419 02f6 00       		.byte	0
 3420 02f7 0B       		.uleb128 0xb
 3421 02f8 C4000000 		.4byte	0xc4
 3422 02fc 02       		.uleb128 0x2
 3423 02fd 8B080000 		.4byte	.LASF57
 3424 0301 01       		.byte	0x1
 3425 0302 7B       		.byte	0x7b
 3426 0303 68020000 		.4byte	0x268
 3427 0307 02       		.uleb128 0x2
 3428 0308 2A010000 		.4byte	.LASF58
 3429 030c 01       		.byte	0x1
 3430 030d 7F       		.byte	0x7f
 3431 030e FC020000 		.4byte	0x2fc
 3432 0312 09       		.uleb128 0x9
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 113


 3433 0313 BF000000 		.4byte	.LASF59
 3434 0317 08       		.byte	0x8
 3435 0318 01       		.byte	0x1
 3436 0319 8C       		.byte	0x8c
 3437 031a 37030000 		.4byte	0x337
 3438 031e 0A       		.uleb128 0xa
 3439 031f 30030000 		.4byte	.LASF60
 3440 0323 01       		.byte	0x1
 3441 0324 8E       		.byte	0x8e
 3442 0325 B2000000 		.4byte	0xb2
 3443 0329 00       		.byte	0
 3444 032a 0A       		.uleb128 0xa
 3445 032b 28030000 		.4byte	.LASF61
 3446 032f 01       		.byte	0x1
 3447 0330 8F       		.byte	0x8f
 3448 0331 38020000 		.4byte	0x238
 3449 0335 04       		.byte	0x4
 3450 0336 00       		.byte	0
 3451 0337 02       		.uleb128 0x2
 3452 0338 8B040000 		.4byte	.LASF62
 3453 033c 01       		.byte	0x1
 3454 033d 90       		.byte	0x90
 3455 033e 12030000 		.4byte	0x312
 3456 0342 02       		.uleb128 0x2
 3457 0343 49010000 		.4byte	.LASF63
 3458 0347 01       		.byte	0x1
 3459 0348 95       		.byte	0x95
 3460 0349 37030000 		.4byte	0x337
 3461 034d 0F       		.uleb128 0xf
 3462 034e C4040000 		.4byte	.LASF134
 3463 0352 02       		.byte	0x2
 3464 0353 CF       		.byte	0xcf
 3465 0354 E5000000 		.4byte	0xe5
 3466 0358 03       		.byte	0x3
 3467 0359 74030000 		.4byte	0x374
 3468 035d 10       		.uleb128 0x10
 3469 035e E3010000 		.4byte	.LASF64
 3470 0362 02       		.byte	0x2
 3471 0363 D1       		.byte	0xd1
 3472 0364 E5000000 		.4byte	0xe5
 3473 0368 10       		.uleb128 0x10
 3474 0369 E7030000 		.4byte	.LASF65
 3475 036d 02       		.byte	0x2
 3476 036e D1       		.byte	0xd1
 3477 036f E5000000 		.4byte	0xe5
 3478 0373 00       		.byte	0
 3479 0374 11       		.uleb128 0x11
 3480 0375 6B030000 		.4byte	.LASF135
 3481 0379 02       		.byte	0x2
 3482 037a E3       		.byte	0xe3
 3483 037b 03       		.byte	0x3
 3484 037c 8C030000 		.4byte	0x38c
 3485 0380 12       		.uleb128 0x12
 3486 0381 29060000 		.4byte	.LASF136
 3487 0385 02       		.byte	0x2
 3488 0386 E3       		.byte	0xe3
 3489 0387 E5000000 		.4byte	0xe5
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 114


 3490 038b 00       		.byte	0
 3491 038c 13       		.uleb128 0x13
 3492 038d 3F080000 		.4byte	.LASF68
 3493 0391 01       		.byte	0x1
 3494 0392 F7       		.byte	0xf7
 3495 0393 FE000000 		.4byte	0xfe
 3496 0397 00000000 		.4byte	.LFB68
 3497 039b B4000000 		.4byte	.LFE68-.LFB68
 3498 039f 01       		.uleb128 0x1
 3499 03a0 9C       		.byte	0x9c
 3500 03a1 D0030000 		.4byte	0x3d0
 3501 03a5 14       		.uleb128 0x14
 3502 03a6 F5010000 		.4byte	.LASF66
 3503 03aa 01       		.byte	0x1
 3504 03ab F7       		.byte	0xf7
 3505 03ac 38020000 		.4byte	0x238
 3506 03b0 02       		.uleb128 0x2
 3507 03b1 91       		.byte	0x91
 3508 03b2 6C       		.sleb128 -20
 3509 03b3 14       		.uleb128 0x14
 3510 03b4 D3050000 		.4byte	.LASF67
 3511 03b8 01       		.byte	0x1
 3512 03b9 F7       		.byte	0xf7
 3513 03ba FE000000 		.4byte	0xfe
 3514 03be 02       		.uleb128 0x2
 3515 03bf 91       		.byte	0x91
 3516 03c0 68       		.sleb128 -24
 3517 03c1 15       		.uleb128 0x15
 3518 03c2 63070000 		.4byte	.LASF72
 3519 03c6 01       		.byte	0x1
 3520 03c7 F9       		.byte	0xf9
 3521 03c8 D0030000 		.4byte	0x3d0
 3522 03cc 02       		.uleb128 0x2
 3523 03cd 91       		.byte	0x91
 3524 03ce 74       		.sleb128 -12
 3525 03cf 00       		.byte	0
 3526 03d0 07       		.uleb128 0x7
 3527 03d1 D5030000 		.4byte	0x3d5
 3528 03d5 06       		.uleb128 0x6
 3529 03d6 04       		.byte	0x4
 3530 03d7 07030000 		.4byte	0x307
 3531 03db 16       		.uleb128 0x16
 3532 03dc 9E040000 		.4byte	.LASF69
 3533 03e0 01       		.byte	0x1
 3534 03e1 6701     		.2byte	0x167
 3535 03e3 38020000 		.4byte	0x238
 3536 03e7 00000000 		.4byte	.LFB69
 3537 03eb 58000000 		.4byte	.LFE69-.LFB69
 3538 03ef 01       		.uleb128 0x1
 3539 03f0 9C       		.byte	0x9c
 3540 03f1 50040000 		.4byte	0x450
 3541 03f5 17       		.uleb128 0x17
 3542 03f6 7A060000 		.4byte	.LASF70
 3543 03fa 01       		.byte	0x1
 3544 03fb 6701     		.2byte	0x167
 3545 03fd 50040000 		.4byte	0x450
 3546 0401 02       		.uleb128 0x2
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 115


 3547 0402 91       		.byte	0x91
 3548 0403 5C       		.sleb128 -36
 3549 0404 17       		.uleb128 0x17
 3550 0405 A0030000 		.4byte	.LASF54
 3551 0409 01       		.byte	0x1
 3552 040a 6701     		.2byte	0x167
 3553 040c 50040000 		.4byte	0x450
 3554 0410 02       		.uleb128 0x2
 3555 0411 91       		.byte	0x91
 3556 0412 58       		.sleb128 -40
 3557 0413 17       		.uleb128 0x17
 3558 0414 38060000 		.4byte	.LASF71
 3559 0418 01       		.byte	0x1
 3560 0419 6701     		.2byte	0x167
 3561 041b 55040000 		.4byte	0x455
 3562 041f 02       		.uleb128 0x2
 3563 0420 91       		.byte	0x91
 3564 0421 57       		.sleb128 -41
 3565 0422 18       		.uleb128 0x18
 3566 0423 9F000000 		.4byte	.LASF73
 3567 0427 01       		.byte	0x1
 3568 0428 6901     		.2byte	0x169
 3569 042a D5030000 		.4byte	0x3d5
 3570 042e 02       		.uleb128 0x2
 3571 042f 91       		.byte	0x91
 3572 0430 68       		.sleb128 -24
 3573 0431 18       		.uleb128 0x18
 3574 0432 02070000 		.4byte	.LASF74
 3575 0436 01       		.byte	0x1
 3576 0437 6A01     		.2byte	0x16a
 3577 0439 25000000 		.4byte	0x25
 3578 043d 02       		.uleb128 0x2
 3579 043e 91       		.byte	0x91
 3580 043f 6C       		.sleb128 -20
 3581 0440 18       		.uleb128 0x18
 3582 0441 03050000 		.4byte	.LASF75
 3583 0445 01       		.byte	0x1
 3584 0446 6B01     		.2byte	0x16b
 3585 0448 1F010000 		.4byte	0x11f
 3586 044c 02       		.uleb128 0x2
 3587 044d 91       		.byte	0x91
 3588 044e 64       		.sleb128 -28
 3589 044f 00       		.byte	0
 3590 0450 07       		.uleb128 0x7
 3591 0451 09010000 		.4byte	0x109
 3592 0455 07       		.uleb128 0x7
 3593 0456 CF000000 		.4byte	0xcf
 3594 045a 19       		.uleb128 0x19
 3595 045b A2010000 		.4byte	.LASF76
 3596 045f 01       		.byte	0x1
 3597 0460 9A01     		.2byte	0x19a
 3598 0462 00000000 		.4byte	.LFB70
 3599 0466 3C000000 		.4byte	.LFE70-.LFB70
 3600 046a 01       		.uleb128 0x1
 3601 046b 9C       		.byte	0x9c
 3602 046c BC040000 		.4byte	0x4bc
 3603 0470 17       		.uleb128 0x17
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 116


 3604 0471 7A060000 		.4byte	.LASF70
 3605 0475 01       		.byte	0x1
 3606 0476 9A01     		.2byte	0x19a
 3607 0478 50040000 		.4byte	0x450
 3608 047c 02       		.uleb128 0x2
 3609 047d 91       		.byte	0x91
 3610 047e 74       		.sleb128 -12
 3611 047f 17       		.uleb128 0x17
 3612 0480 A0030000 		.4byte	.LASF54
 3613 0484 01       		.byte	0x1
 3614 0485 9A01     		.2byte	0x19a
 3615 0487 50040000 		.4byte	0x450
 3616 048b 02       		.uleb128 0x2
 3617 048c 91       		.byte	0x91
 3618 048d 70       		.sleb128 -16
 3619 048e 17       		.uleb128 0x17
 3620 048f 03050000 		.4byte	.LASF75
 3621 0493 01       		.byte	0x1
 3622 0494 9A01     		.2byte	0x19a
 3623 0496 1F010000 		.4byte	0x11f
 3624 049a 02       		.uleb128 0x2
 3625 049b 91       		.byte	0x91
 3626 049c 6C       		.sleb128 -20
 3627 049d 17       		.uleb128 0x17
 3628 049e 38060000 		.4byte	.LASF71
 3629 04a2 01       		.byte	0x1
 3630 04a3 9A01     		.2byte	0x19a
 3631 04a5 55040000 		.4byte	0x455
 3632 04a9 02       		.uleb128 0x2
 3633 04aa 91       		.byte	0x91
 3634 04ab 6B       		.sleb128 -21
 3635 04ac 17       		.uleb128 0x17
 3636 04ad 9F000000 		.4byte	.LASF73
 3637 04b1 01       		.byte	0x1
 3638 04b2 9A01     		.2byte	0x19a
 3639 04b4 D5030000 		.4byte	0x3d5
 3640 04b8 02       		.uleb128 0x2
 3641 04b9 91       		.byte	0x91
 3642 04ba 00       		.sleb128 0
 3643 04bb 00       		.byte	0
 3644 04bc 19       		.uleb128 0x19
 3645 04bd E5040000 		.4byte	.LASF77
 3646 04c1 01       		.byte	0x1
 3647 04c2 C601     		.2byte	0x1c6
 3648 04c4 00000000 		.4byte	.LFB71
 3649 04c8 32000000 		.4byte	.LFE71-.LFB71
 3650 04cc 01       		.uleb128 0x1
 3651 04cd 9C       		.byte	0x9c
 3652 04ce E2040000 		.4byte	0x4e2
 3653 04d2 17       		.uleb128 0x17
 3654 04d3 9F000000 		.4byte	.LASF73
 3655 04d7 01       		.byte	0x1
 3656 04d8 C601     		.2byte	0x1c6
 3657 04da D5030000 		.4byte	0x3d5
 3658 04de 02       		.uleb128 0x2
 3659 04df 91       		.byte	0x91
 3660 04e0 74       		.sleb128 -12
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 117


 3661 04e1 00       		.byte	0
 3662 04e2 16       		.uleb128 0x16
 3663 04e3 B2040000 		.4byte	.LASF78
 3664 04e7 01       		.byte	0x1
 3665 04e8 E401     		.2byte	0x1e4
 3666 04ea 38020000 		.4byte	0x238
 3667 04ee 00000000 		.4byte	.LFB72
 3668 04f2 30000000 		.4byte	.LFE72-.LFB72
 3669 04f6 01       		.uleb128 0x1
 3670 04f7 9C       		.byte	0x9c
 3671 04f8 39050000 		.4byte	0x539
 3672 04fc 17       		.uleb128 0x17
 3673 04fd 38060000 		.4byte	.LASF71
 3674 0501 01       		.byte	0x1
 3675 0502 E401     		.2byte	0x1e4
 3676 0504 55040000 		.4byte	0x455
 3677 0508 02       		.uleb128 0x2
 3678 0509 91       		.byte	0x91
 3679 050a 67       		.sleb128 -25
 3680 050b 18       		.uleb128 0x18
 3681 050c 9F000000 		.4byte	.LASF73
 3682 0510 01       		.byte	0x1
 3683 0511 E601     		.2byte	0x1e6
 3684 0513 D5030000 		.4byte	0x3d5
 3685 0517 02       		.uleb128 0x2
 3686 0518 91       		.byte	0x91
 3687 0519 6C       		.sleb128 -20
 3688 051a 18       		.uleb128 0x18
 3689 051b BA030000 		.4byte	.LASF79
 3690 051f 01       		.byte	0x1
 3691 0520 E701     		.2byte	0x1e7
 3692 0522 50040000 		.4byte	0x450
 3693 0526 02       		.uleb128 0x2
 3694 0527 91       		.byte	0x91
 3695 0528 74       		.sleb128 -12
 3696 0529 18       		.uleb128 0x18
 3697 052a C8010000 		.4byte	.LASF80
 3698 052e 01       		.byte	0x1
 3699 052f E701     		.2byte	0x1e7
 3700 0531 50040000 		.4byte	0x450
 3701 0535 02       		.uleb128 0x2
 3702 0536 91       		.byte	0x91
 3703 0537 70       		.sleb128 -16
 3704 0538 00       		.byte	0
 3705 0539 16       		.uleb128 0x16
 3706 053a 17080000 		.4byte	.LASF81
 3707 053e 01       		.byte	0x1
 3708 053f 4002     		.2byte	0x240
 3709 0541 FE000000 		.4byte	0xfe
 3710 0545 00000000 		.4byte	.LFB73
 3711 0549 4C000000 		.4byte	.LFE73-.LFB73
 3712 054d 01       		.uleb128 0x1
 3713 054e 9C       		.byte	0x9c
 3714 054f 81050000 		.4byte	0x581
 3715 0553 17       		.uleb128 0x17
 3716 0554 13050000 		.4byte	.LASF82
 3717 0558 01       		.byte	0x1
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 118


 3718 0559 4002     		.2byte	0x240
 3719 055b 38020000 		.4byte	0x238
 3720 055f 02       		.uleb128 0x2
 3721 0560 91       		.byte	0x91
 3722 0561 64       		.sleb128 -28
 3723 0562 18       		.uleb128 0x18
 3724 0563 6B070000 		.4byte	.LASF83
 3725 0567 01       		.byte	0x1
 3726 0568 4202     		.2byte	0x242
 3727 056a FE000000 		.4byte	0xfe
 3728 056e 02       		.uleb128 0x2
 3729 056f 91       		.byte	0x91
 3730 0570 6C       		.sleb128 -20
 3731 0571 18       		.uleb128 0x18
 3732 0572 64000000 		.4byte	.LASF84
 3733 0576 01       		.byte	0x1
 3734 0577 4302     		.2byte	0x243
 3735 0579 D0030000 		.4byte	0x3d0
 3736 057d 02       		.uleb128 0x2
 3737 057e 91       		.byte	0x91
 3738 057f 68       		.sleb128 -24
 3739 0580 00       		.byte	0
 3740 0581 16       		.uleb128 0x16
 3741 0582 9D060000 		.4byte	.LASF85
 3742 0586 01       		.byte	0x1
 3743 0587 7702     		.2byte	0x277
 3744 0589 FE000000 		.4byte	0xfe
 3745 058d 00000000 		.4byte	.LFB74
 3746 0591 50000000 		.4byte	.LFE74-.LFB74
 3747 0595 01       		.uleb128 0x1
 3748 0596 9C       		.byte	0x9c
 3749 0597 D8050000 		.4byte	0x5d8
 3750 059b 17       		.uleb128 0x17
 3751 059c 13050000 		.4byte	.LASF82
 3752 05a0 01       		.byte	0x1
 3753 05a1 7702     		.2byte	0x277
 3754 05a3 38020000 		.4byte	0x238
 3755 05a7 02       		.uleb128 0x2
 3756 05a8 91       		.byte	0x91
 3757 05a9 64       		.sleb128 -28
 3758 05aa 17       		.uleb128 0x17
 3759 05ab FB070000 		.4byte	.LASF86
 3760 05af 01       		.byte	0x1
 3761 05b0 7702     		.2byte	0x277
 3762 05b2 14010000 		.4byte	0x114
 3763 05b6 02       		.uleb128 0x2
 3764 05b7 91       		.byte	0x91
 3765 05b8 60       		.sleb128 -32
 3766 05b9 18       		.uleb128 0x18
 3767 05ba 6B070000 		.4byte	.LASF83
 3768 05be 01       		.byte	0x1
 3769 05bf 7902     		.2byte	0x279
 3770 05c1 FE000000 		.4byte	0xfe
 3771 05c5 02       		.uleb128 0x2
 3772 05c6 91       		.byte	0x91
 3773 05c7 6C       		.sleb128 -20
 3774 05c8 18       		.uleb128 0x18
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 119


 3775 05c9 64000000 		.4byte	.LASF84
 3776 05cd 01       		.byte	0x1
 3777 05ce 7A02     		.2byte	0x27a
 3778 05d0 D0030000 		.4byte	0x3d0
 3779 05d4 02       		.uleb128 0x2
 3780 05d5 91       		.byte	0x91
 3781 05d6 68       		.sleb128 -24
 3782 05d7 00       		.byte	0
 3783 05d8 16       		.uleb128 0x16
 3784 05d9 AB080000 		.4byte	.LASF87
 3785 05dd 01       		.byte	0x1
 3786 05de BD02     		.2byte	0x2bd
 3787 05e0 38020000 		.4byte	0x238
 3788 05e4 00000000 		.4byte	.LFB75
 3789 05e8 2C000000 		.4byte	.LFE75-.LFB75
 3790 05ec 01       		.uleb128 0x1
 3791 05ed 9C       		.byte	0x9c
 3792 05ee 20060000 		.4byte	0x620
 3793 05f2 17       		.uleb128 0x17
 3794 05f3 DD050000 		.4byte	.LASF88
 3795 05f7 01       		.byte	0x1
 3796 05f8 BD02     		.2byte	0x2bd
 3797 05fa 50040000 		.4byte	0x450
 3798 05fe 02       		.uleb128 0x2
 3799 05ff 91       		.byte	0x91
 3800 0600 6C       		.sleb128 -20
 3801 0601 17       		.uleb128 0x17
 3802 0602 AB030000 		.4byte	.LASF89
 3803 0606 01       		.byte	0x1
 3804 0607 BD02     		.2byte	0x2bd
 3805 0609 50040000 		.4byte	0x450
 3806 060d 02       		.uleb128 0x2
 3807 060e 91       		.byte	0x91
 3808 060f 68       		.sleb128 -24
 3809 0610 18       		.uleb128 0x18
 3810 0611 28030000 		.4byte	.LASF61
 3811 0615 01       		.byte	0x1
 3812 0616 BF02     		.2byte	0x2bf
 3813 0618 38020000 		.4byte	0x238
 3814 061c 02       		.uleb128 0x2
 3815 061d 91       		.byte	0x91
 3816 061e 74       		.sleb128 -12
 3817 061f 00       		.byte	0
 3818 0620 16       		.uleb128 0x16
 3819 0621 8E030000 		.4byte	.LASF90
 3820 0625 01       		.byte	0x1
 3821 0626 D702     		.2byte	0x2d7
 3822 0628 FE000000 		.4byte	0xfe
 3823 062c 00000000 		.4byte	.LFB76
 3824 0630 5C010000 		.4byte	.LFE76-.LFB76
 3825 0634 01       		.uleb128 0x1
 3826 0635 9C       		.byte	0x9c
 3827 0636 B3060000 		.4byte	0x6b3
 3828 063a 17       		.uleb128 0x17
 3829 063b F5010000 		.4byte	.LASF66
 3830 063f 01       		.byte	0x1
 3831 0640 D702     		.2byte	0x2d7
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 120


 3832 0642 38020000 		.4byte	0x238
 3833 0646 02       		.uleb128 0x2
 3834 0647 91       		.byte	0x91
 3835 0648 5C       		.sleb128 -36
 3836 0649 17       		.uleb128 0x17
 3837 064a 14070000 		.4byte	.LASF91
 3838 064e 01       		.byte	0x1
 3839 064f D702     		.2byte	0x2d7
 3840 0651 B3060000 		.4byte	0x6b3
 3841 0655 02       		.uleb128 0x2
 3842 0656 91       		.byte	0x91
 3843 0657 58       		.sleb128 -40
 3844 0658 17       		.uleb128 0x17
 3845 0659 FB070000 		.4byte	.LASF86
 3846 065d 01       		.byte	0x1
 3847 065e D702     		.2byte	0x2d7
 3848 0660 14010000 		.4byte	0x114
 3849 0664 02       		.uleb128 0x2
 3850 0665 91       		.byte	0x91
 3851 0666 54       		.sleb128 -44
 3852 0667 17       		.uleb128 0x17
 3853 0668 32010000 		.4byte	.LASF92
 3854 066c 01       		.byte	0x1
 3855 066d D702     		.2byte	0x2d7
 3856 066f B8060000 		.4byte	0x6b8
 3857 0673 02       		.uleb128 0x2
 3858 0674 91       		.byte	0x91
 3859 0675 50       		.sleb128 -48
 3860 0676 18       		.uleb128 0x18
 3861 0677 0A030000 		.4byte	.LASF93
 3862 067b 01       		.byte	0x1
 3863 067c D902     		.2byte	0x2d9
 3864 067e FE000000 		.4byte	0xfe
 3865 0682 02       		.uleb128 0x2
 3866 0683 91       		.byte	0x91
 3867 0684 74       		.sleb128 -12
 3868 0685 18       		.uleb128 0x18
 3869 0686 D4010000 		.4byte	.LASF94
 3870 068a 01       		.byte	0x1
 3871 068b D902     		.2byte	0x2d9
 3872 068d FE000000 		.4byte	0xfe
 3873 0691 02       		.uleb128 0x2
 3874 0692 91       		.byte	0x91
 3875 0693 6C       		.sleb128 -20
 3876 0694 18       		.uleb128 0x18
 3877 0695 1F030000 		.4byte	.LASF95
 3878 0699 01       		.byte	0x1
 3879 069a DA02     		.2byte	0x2da
 3880 069c 2D020000 		.4byte	0x22d
 3881 06a0 02       		.uleb128 0x2
 3882 06a1 91       		.byte	0x91
 3883 06a2 64       		.sleb128 -28
 3884 06a3 18       		.uleb128 0x18
 3885 06a4 63070000 		.4byte	.LASF72
 3886 06a8 01       		.byte	0x1
 3887 06a9 DB02     		.2byte	0x2db
 3888 06ab D0030000 		.4byte	0x3d0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 121


 3889 06af 02       		.uleb128 0x2
 3890 06b0 91       		.byte	0x91
 3891 06b1 70       		.sleb128 -16
 3892 06b2 00       		.byte	0
 3893 06b3 07       		.uleb128 0x7
 3894 06b4 BD000000 		.4byte	0xbd
 3895 06b8 07       		.uleb128 0x7
 3896 06b9 FE000000 		.4byte	0xfe
 3897 06bd 16       		.uleb128 0x16
 3898 06be 52030000 		.4byte	.LASF96
 3899 06c2 01       		.byte	0x1
 3900 06c3 A903     		.2byte	0x3a9
 3901 06c5 FE000000 		.4byte	0xfe
 3902 06c9 00000000 		.4byte	.LFB77
 3903 06cd B2000000 		.4byte	.LFE77-.LFB77
 3904 06d1 01       		.uleb128 0x1
 3905 06d2 9C       		.byte	0x9c
 3906 06d3 A6070000 		.4byte	0x7a6
 3907 06d7 17       		.uleb128 0x17
 3908 06d8 F5010000 		.4byte	.LASF66
 3909 06dc 01       		.byte	0x1
 3910 06dd A903     		.2byte	0x3a9
 3911 06df 38020000 		.4byte	0x238
 3912 06e3 02       		.uleb128 0x2
 3913 06e4 91       		.byte	0x91
 3914 06e5 54       		.sleb128 -44
 3915 06e6 17       		.uleb128 0x17
 3916 06e7 14070000 		.4byte	.LASF91
 3917 06eb 01       		.byte	0x1
 3918 06ec A903     		.2byte	0x3a9
 3919 06ee B3060000 		.4byte	0x6b3
 3920 06f2 02       		.uleb128 0x2
 3921 06f3 91       		.byte	0x91
 3922 06f4 50       		.sleb128 -48
 3923 06f5 17       		.uleb128 0x17
 3924 06f6 4A000000 		.4byte	.LASF97
 3925 06fa 01       		.byte	0x1
 3926 06fb A903     		.2byte	0x3a9
 3927 06fd A6070000 		.4byte	0x7a6
 3928 0701 02       		.uleb128 0x2
 3929 0702 91       		.byte	0x91
 3930 0703 4C       		.sleb128 -52
 3931 0704 17       		.uleb128 0x17
 3932 0705 32010000 		.4byte	.LASF92
 3933 0709 01       		.byte	0x1
 3934 070a A903     		.2byte	0x3a9
 3935 070c B8060000 		.4byte	0x6b8
 3936 0710 02       		.uleb128 0x2
 3937 0711 91       		.byte	0x91
 3938 0712 48       		.sleb128 -56
 3939 0713 18       		.uleb128 0x18
 3940 0714 6B070000 		.4byte	.LASF83
 3941 0718 01       		.byte	0x1
 3942 0719 AB03     		.2byte	0x3ab
 3943 071b FE000000 		.4byte	0xfe
 3944 071f 02       		.uleb128 0x2
 3945 0720 91       		.byte	0x91
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 122


 3946 0721 74       		.sleb128 -12
 3947 0722 18       		.uleb128 0x18
 3948 0723 8B010000 		.4byte	.LASF98
 3949 0727 01       		.byte	0x1
 3950 0728 AC03     		.2byte	0x3ac
 3951 072a 09010000 		.4byte	0x109
 3952 072e 02       		.uleb128 0x2
 3953 072f 91       		.byte	0x91
 3954 0730 6C       		.sleb128 -20
 3955 0731 18       		.uleb128 0x18
 3956 0732 63070000 		.4byte	.LASF72
 3957 0736 01       		.byte	0x1
 3958 0737 AD03     		.2byte	0x3ad
 3959 0739 D0030000 		.4byte	0x3d0
 3960 073d 02       		.uleb128 0x2
 3961 073e 91       		.byte	0x91
 3962 073f 70       		.sleb128 -16
 3963 0740 1A       		.uleb128 0x1a
 3964 0741 4D030000 		.4byte	0x34d
 3965 0745 12000000 		.4byte	.LBB23
 3966 0749 1A000000 		.4byte	.LBE23-.LBB23
 3967 074d 01       		.byte	0x1
 3968 074e C803     		.2byte	0x3c8
 3969 0750 6F070000 		.4byte	0x76f
 3970 0754 1B       		.uleb128 0x1b
 3971 0755 12000000 		.4byte	.LBB24
 3972 0759 1A000000 		.4byte	.LBE24-.LBB24
 3973 075d 1C       		.uleb128 0x1c
 3974 075e 5D030000 		.4byte	0x35d
 3975 0762 02       		.uleb128 0x2
 3976 0763 91       		.byte	0x91
 3977 0764 64       		.sleb128 -28
 3978 0765 1C       		.uleb128 0x1c
 3979 0766 68030000 		.4byte	0x368
 3980 076a 02       		.uleb128 0x2
 3981 076b 91       		.byte	0x91
 3982 076c 60       		.sleb128 -32
 3983 076d 00       		.byte	0
 3984 076e 00       		.byte	0
 3985 076f 1D       		.uleb128 0x1d
 3986 0770 40000000 		.4byte	.LBB25
 3987 0774 58000000 		.4byte	.LBE25-.LBB25
 3988 0778 8C070000 		.4byte	0x78c
 3989 077c 18       		.uleb128 0x18
 3990 077d FE000000 		.4byte	.LASF56
 3991 0781 01       		.byte	0x1
 3992 0782 CC03     		.2byte	0x3cc
 3993 0784 B1070000 		.4byte	0x7b1
 3994 0788 02       		.uleb128 0x2
 3995 0789 91       		.byte	0x91
 3996 078a 6B       		.sleb128 -21
 3997 078b 00       		.byte	0
 3998 078c 1E       		.uleb128 0x1e
 3999 078d 74030000 		.4byte	0x374
 4000 0791 A2000000 		.4byte	.LBB26
 4001 0795 06000000 		.4byte	.LBE26-.LBB26
 4002 0799 01       		.byte	0x1
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 123


 4003 079a 3A04     		.2byte	0x43a
 4004 079c 1F       		.uleb128 0x1f
 4005 079d 80030000 		.4byte	0x380
 4006 07a1 02       		.uleb128 0x2
 4007 07a2 91       		.byte	0x91
 4008 07a3 5C       		.sleb128 -36
 4009 07a4 00       		.byte	0
 4010 07a5 00       		.byte	0
 4011 07a6 07       		.uleb128 0x7
 4012 07a7 AB070000 		.4byte	0x7ab
 4013 07ab 06       		.uleb128 0x6
 4014 07ac 04       		.byte	0x4
 4015 07ad FE000000 		.4byte	0xfe
 4016 07b1 07       		.uleb128 0x7
 4017 07b2 C4000000 		.4byte	0xc4
 4018 07b6 16       		.uleb128 0x16
 4019 07b7 00040000 		.4byte	.LASF99
 4020 07bb 01       		.byte	0x1
 4021 07bc 4004     		.2byte	0x440
 4022 07be FE000000 		.4byte	0xfe
 4023 07c2 00000000 		.4byte	.LFB78
 4024 07c6 A6000000 		.4byte	.LFE78-.LFB78
 4025 07ca 01       		.uleb128 0x1
 4026 07cb 9C       		.byte	0x9c
 4027 07cc 9A080000 		.4byte	0x89a
 4028 07d0 17       		.uleb128 0x17
 4029 07d1 F5010000 		.4byte	.LASF66
 4030 07d5 01       		.byte	0x1
 4031 07d6 4004     		.2byte	0x440
 4032 07d8 38020000 		.4byte	0x238
 4033 07dc 02       		.uleb128 0x2
 4034 07dd 91       		.byte	0x91
 4035 07de 54       		.sleb128 -44
 4036 07df 17       		.uleb128 0x17
 4037 07e0 4A000000 		.4byte	.LASF97
 4038 07e4 01       		.byte	0x1
 4039 07e5 4004     		.2byte	0x440
 4040 07e7 A6070000 		.4byte	0x7a6
 4041 07eb 02       		.uleb128 0x2
 4042 07ec 91       		.byte	0x91
 4043 07ed 50       		.sleb128 -48
 4044 07ee 18       		.uleb128 0x18
 4045 07ef 6B070000 		.4byte	.LASF83
 4046 07f3 01       		.byte	0x1
 4047 07f4 4204     		.2byte	0x442
 4048 07f6 FE000000 		.4byte	0xfe
 4049 07fa 02       		.uleb128 0x2
 4050 07fb 91       		.byte	0x91
 4051 07fc 74       		.sleb128 -12
 4052 07fd 18       		.uleb128 0x18
 4053 07fe 8B010000 		.4byte	.LASF98
 4054 0802 01       		.byte	0x1
 4055 0803 4304     		.2byte	0x443
 4056 0805 09010000 		.4byte	0x109
 4057 0809 02       		.uleb128 0x2
 4058 080a 91       		.byte	0x91
 4059 080b 6C       		.sleb128 -20
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 124


 4060 080c 18       		.uleb128 0x18
 4061 080d 63070000 		.4byte	.LASF72
 4062 0811 01       		.byte	0x1
 4063 0812 4404     		.2byte	0x444
 4064 0814 D0030000 		.4byte	0x3d0
 4065 0818 02       		.uleb128 0x2
 4066 0819 91       		.byte	0x91
 4067 081a 70       		.sleb128 -16
 4068 081b 1A       		.uleb128 0x1a
 4069 081c 4D030000 		.4byte	0x34d
 4070 0820 0E000000 		.4byte	.LBB28
 4071 0824 1A000000 		.4byte	.LBE28-.LBB28
 4072 0828 01       		.byte	0x1
 4073 0829 6704     		.2byte	0x467
 4074 082b 4A080000 		.4byte	0x84a
 4075 082f 1B       		.uleb128 0x1b
 4076 0830 0E000000 		.4byte	.LBB29
 4077 0834 1A000000 		.4byte	.LBE29-.LBB29
 4078 0838 1C       		.uleb128 0x1c
 4079 0839 5D030000 		.4byte	0x35d
 4080 083d 02       		.uleb128 0x2
 4081 083e 91       		.byte	0x91
 4082 083f 60       		.sleb128 -32
 4083 0840 1C       		.uleb128 0x1c
 4084 0841 68030000 		.4byte	0x368
 4085 0845 02       		.uleb128 0x2
 4086 0846 91       		.byte	0x91
 4087 0847 5C       		.sleb128 -36
 4088 0848 00       		.byte	0
 4089 0849 00       		.byte	0
 4090 084a 1D       		.uleb128 0x1d
 4091 084b 2A000000 		.4byte	.LBB30
 4092 084f 6C000000 		.4byte	.LBE30-.LBB30
 4093 0853 80080000 		.4byte	0x880
 4094 0857 18       		.uleb128 0x18
 4095 0858 ED020000 		.4byte	.LASF52
 4096 085c 01       		.byte	0x1
 4097 085d 6904     		.2byte	0x469
 4098 085f 50040000 		.4byte	0x450
 4099 0863 02       		.uleb128 0x2
 4100 0864 91       		.byte	0x91
 4101 0865 68       		.sleb128 -24
 4102 0866 1B       		.uleb128 0x1b
 4103 0867 3A000000 		.4byte	.LBB31
 4104 086b 52000000 		.4byte	.LBE31-.LBB31
 4105 086f 18       		.uleb128 0x18
 4106 0870 FE000000 		.4byte	.LASF56
 4107 0874 01       		.byte	0x1
 4108 0875 7004     		.2byte	0x470
 4109 0877 B1070000 		.4byte	0x7b1
 4110 087b 02       		.uleb128 0x2
 4111 087c 91       		.byte	0x91
 4112 087d 67       		.sleb128 -25
 4113 087e 00       		.byte	0
 4114 087f 00       		.byte	0
 4115 0880 1E       		.uleb128 0x1e
 4116 0881 74030000 		.4byte	0x374
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 125


 4117 0885 96000000 		.4byte	.LBB32
 4118 0889 06000000 		.4byte	.LBE32-.LBB32
 4119 088d 01       		.byte	0x1
 4120 088e DF04     		.2byte	0x4df
 4121 0890 1F       		.uleb128 0x1f
 4122 0891 80030000 		.4byte	0x380
 4123 0895 02       		.uleb128 0x2
 4124 0896 91       		.byte	0x91
 4125 0897 58       		.sleb128 -40
 4126 0898 00       		.byte	0
 4127 0899 00       		.byte	0
 4128 089a 16       		.uleb128 0x16
 4129 089b 10000000 		.4byte	.LASF100
 4130 089f 01       		.byte	0x1
 4131 08a0 E504     		.2byte	0x4e5
 4132 08a2 FE000000 		.4byte	0xfe
 4133 08a6 00000000 		.4byte	.LFB79
 4134 08aa 4C010000 		.4byte	.LFE79-.LFB79
 4135 08ae 01       		.uleb128 0x1
 4136 08af 9C       		.byte	0x9c
 4137 08b0 28090000 		.4byte	0x928
 4138 08b4 17       		.uleb128 0x17
 4139 08b5 F5010000 		.4byte	.LASF66
 4140 08b9 01       		.byte	0x1
 4141 08ba E504     		.2byte	0x4e5
 4142 08bc 38020000 		.4byte	0x238
 4143 08c0 02       		.uleb128 0x2
 4144 08c1 91       		.byte	0x91
 4145 08c2 5C       		.sleb128 -36
 4146 08c3 17       		.uleb128 0x17
 4147 08c4 39020000 		.4byte	.LASF101
 4148 08c8 01       		.byte	0x1
 4149 08c9 E504     		.2byte	0x4e5
 4150 08cb 28090000 		.4byte	0x928
 4151 08cf 02       		.uleb128 0x2
 4152 08d0 91       		.byte	0x91
 4153 08d1 58       		.sleb128 -40
 4154 08d2 17       		.uleb128 0x17
 4155 08d3 FB070000 		.4byte	.LASF86
 4156 08d7 01       		.byte	0x1
 4157 08d8 E504     		.2byte	0x4e5
 4158 08da 14010000 		.4byte	0x114
 4159 08de 02       		.uleb128 0x2
 4160 08df 91       		.byte	0x91
 4161 08e0 54       		.sleb128 -44
 4162 08e1 18       		.uleb128 0x18
 4163 08e2 0A030000 		.4byte	.LASF93
 4164 08e6 01       		.byte	0x1
 4165 08e7 E704     		.2byte	0x4e7
 4166 08e9 FE000000 		.4byte	0xfe
 4167 08ed 02       		.uleb128 0x2
 4168 08ee 91       		.byte	0x91
 4169 08ef 74       		.sleb128 -12
 4170 08f0 18       		.uleb128 0x18
 4171 08f1 1F030000 		.4byte	.LASF95
 4172 08f5 01       		.byte	0x1
 4173 08f6 E804     		.2byte	0x4e8
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 126


 4174 08f8 2D020000 		.4byte	0x22d
 4175 08fc 02       		.uleb128 0x2
 4176 08fd 91       		.byte	0x91
 4177 08fe 64       		.sleb128 -28
 4178 08ff 18       		.uleb128 0x18
 4179 0900 63070000 		.4byte	.LASF72
 4180 0904 01       		.byte	0x1
 4181 0905 E904     		.2byte	0x4e9
 4182 0907 D0030000 		.4byte	0x3d0
 4183 090b 02       		.uleb128 0x2
 4184 090c 91       		.byte	0x91
 4185 090d 70       		.sleb128 -16
 4186 090e 1B       		.uleb128 0x1b
 4187 090f 18000000 		.4byte	.LBB34
 4188 0913 6E000000 		.4byte	.LBE34-.LBB34
 4189 0917 18       		.uleb128 0x18
 4190 0918 ED020000 		.4byte	.LASF52
 4191 091c 01       		.byte	0x1
 4192 091d 0205     		.2byte	0x502
 4193 091f 50040000 		.4byte	0x450
 4194 0923 02       		.uleb128 0x2
 4195 0924 91       		.byte	0x91
 4196 0925 6C       		.sleb128 -20
 4197 0926 00       		.byte	0
 4198 0927 00       		.byte	0
 4199 0928 07       		.uleb128 0x7
 4200 0929 A9000000 		.4byte	0xa9
 4201 092d 16       		.uleb128 0x16
 4202 092e 6C000000 		.4byte	.LASF102
 4203 0932 01       		.byte	0x1
 4204 0933 7305     		.2byte	0x573
 4205 0935 FE000000 		.4byte	0xfe
 4206 0939 00000000 		.4byte	.LFB80
 4207 093d 98010000 		.4byte	.LFE80-.LFB80
 4208 0941 01       		.uleb128 0x1
 4209 0942 9C       		.byte	0x9c
 4210 0943 D8090000 		.4byte	0x9d8
 4211 0947 17       		.uleb128 0x17
 4212 0948 F5010000 		.4byte	.LASF66
 4213 094c 01       		.byte	0x1
 4214 094d 7305     		.2byte	0x573
 4215 094f 38020000 		.4byte	0x238
 4216 0953 02       		.uleb128 0x2
 4217 0954 91       		.byte	0x91
 4218 0955 54       		.sleb128 -44
 4219 0956 17       		.uleb128 0x17
 4220 0957 FB070000 		.4byte	.LASF86
 4221 095b 01       		.byte	0x1
 4222 095c 7305     		.2byte	0x573
 4223 095e 14010000 		.4byte	0x114
 4224 0962 02       		.uleb128 0x2
 4225 0963 91       		.byte	0x91
 4226 0964 50       		.sleb128 -48
 4227 0965 18       		.uleb128 0x18
 4228 0966 0A030000 		.4byte	.LASF93
 4229 096a 01       		.byte	0x1
 4230 096b 7505     		.2byte	0x575
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 127


 4231 096d FE000000 		.4byte	0xfe
 4232 0971 02       		.uleb128 0x2
 4233 0972 91       		.byte	0x91
 4234 0973 74       		.sleb128 -12
 4235 0974 18       		.uleb128 0x18
 4236 0975 1F030000 		.4byte	.LASF95
 4237 0979 01       		.byte	0x1
 4238 097a 7605     		.2byte	0x576
 4239 097c 2D020000 		.4byte	0x22d
 4240 0980 02       		.uleb128 0x2
 4241 0981 91       		.byte	0x91
 4242 0982 5C       		.sleb128 -36
 4243 0983 18       		.uleb128 0x18
 4244 0984 63070000 		.4byte	.LASF72
 4245 0988 01       		.byte	0x1
 4246 0989 7705     		.2byte	0x577
 4247 098b D0030000 		.4byte	0x3d0
 4248 098f 02       		.uleb128 0x2
 4249 0990 91       		.byte	0x91
 4250 0991 6C       		.sleb128 -20
 4251 0992 18       		.uleb128 0x18
 4252 0993 88060000 		.4byte	.LASF103
 4253 0997 01       		.byte	0x1
 4254 0998 7A05     		.2byte	0x57a
 4255 099a FE000000 		.4byte	0xfe
 4256 099e 02       		.uleb128 0x2
 4257 099f 91       		.byte	0x91
 4258 09a0 70       		.sleb128 -16
 4259 09a1 1D       		.uleb128 0x1d
 4260 09a2 1A000000 		.4byte	.LBB35
 4261 09a6 78000000 		.4byte	.LBE35-.LBB35
 4262 09aa BE090000 		.4byte	0x9be
 4263 09ae 18       		.uleb128 0x18
 4264 09af 4B060000 		.4byte	.LASF104
 4265 09b3 01       		.byte	0x1
 4266 09b4 9605     		.2byte	0x596
 4267 09b6 50040000 		.4byte	0x450
 4268 09ba 02       		.uleb128 0x2
 4269 09bb 91       		.byte	0x91
 4270 09bc 68       		.sleb128 -24
 4271 09bd 00       		.byte	0
 4272 09be 1B       		.uleb128 0x1b
 4273 09bf 6C010000 		.4byte	.LBB36
 4274 09c3 14000000 		.4byte	.LBE36-.LBB36
 4275 09c7 18       		.uleb128 0x18
 4276 09c8 B4070000 		.4byte	.LASF105
 4277 09cc 01       		.byte	0x1
 4278 09cd 3306     		.2byte	0x633
 4279 09cf 09010000 		.4byte	0x109
 4280 09d3 02       		.uleb128 0x2
 4281 09d4 91       		.byte	0x91
 4282 09d5 64       		.sleb128 -28
 4283 09d6 00       		.byte	0
 4284 09d7 00       		.byte	0
 4285 09d8 16       		.uleb128 0x16
 4286 09d9 FF020000 		.4byte	.LASF106
 4287 09dd 01       		.byte	0x1
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 128


 4288 09de 4E06     		.2byte	0x64e
 4289 09e0 FE000000 		.4byte	0xfe
 4290 09e4 00000000 		.4byte	.LFB81
 4291 09e8 50010000 		.4byte	.LFE81-.LFB81
 4292 09ec 01       		.uleb128 0x1
 4293 09ed 9C       		.byte	0x9c
 4294 09ee 750A0000 		.4byte	0xa75
 4295 09f2 17       		.uleb128 0x17
 4296 09f3 F5010000 		.4byte	.LASF66
 4297 09f7 01       		.byte	0x1
 4298 09f8 4E06     		.2byte	0x64e
 4299 09fa 38020000 		.4byte	0x238
 4300 09fe 02       		.uleb128 0x2
 4301 09ff 91       		.byte	0x91
 4302 0a00 5C       		.sleb128 -36
 4303 0a01 17       		.uleb128 0x17
 4304 0a02 39020000 		.4byte	.LASF101
 4305 0a06 01       		.byte	0x1
 4306 0a07 4E06     		.2byte	0x64e
 4307 0a09 28090000 		.4byte	0x928
 4308 0a0d 02       		.uleb128 0x2
 4309 0a0e 91       		.byte	0x91
 4310 0a0f 58       		.sleb128 -40
 4311 0a10 17       		.uleb128 0x17
 4312 0a11 FB070000 		.4byte	.LASF86
 4313 0a15 01       		.byte	0x1
 4314 0a16 4E06     		.2byte	0x64e
 4315 0a18 14010000 		.4byte	0x114
 4316 0a1c 02       		.uleb128 0x2
 4317 0a1d 91       		.byte	0x91
 4318 0a1e 54       		.sleb128 -44
 4319 0a1f 18       		.uleb128 0x18
 4320 0a20 0A030000 		.4byte	.LASF93
 4321 0a24 01       		.byte	0x1
 4322 0a25 5006     		.2byte	0x650
 4323 0a27 FE000000 		.4byte	0xfe
 4324 0a2b 02       		.uleb128 0x2
 4325 0a2c 91       		.byte	0x91
 4326 0a2d 74       		.sleb128 -12
 4327 0a2e 18       		.uleb128 0x18
 4328 0a2f 1F030000 		.4byte	.LASF95
 4329 0a33 01       		.byte	0x1
 4330 0a34 5106     		.2byte	0x651
 4331 0a36 2D020000 		.4byte	0x22d
 4332 0a3a 02       		.uleb128 0x2
 4333 0a3b 91       		.byte	0x91
 4334 0a3c 60       		.sleb128 -32
 4335 0a3d 18       		.uleb128 0x18
 4336 0a3e F2050000 		.4byte	.LASF107
 4337 0a42 01       		.byte	0x1
 4338 0a43 5206     		.2byte	0x652
 4339 0a45 62020000 		.4byte	0x262
 4340 0a49 02       		.uleb128 0x2
 4341 0a4a 91       		.byte	0x91
 4342 0a4b 68       		.sleb128 -24
 4343 0a4c 18       		.uleb128 0x18
 4344 0a4d 63070000 		.4byte	.LASF72
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 129


 4345 0a51 01       		.byte	0x1
 4346 0a52 5306     		.2byte	0x653
 4347 0a54 D0030000 		.4byte	0x3d0
 4348 0a58 02       		.uleb128 0x2
 4349 0a59 91       		.byte	0x91
 4350 0a5a 70       		.sleb128 -16
 4351 0a5b 1B       		.uleb128 0x1b
 4352 0a5c 18000000 		.4byte	.LBB37
 4353 0a60 72000000 		.4byte	.LBE37-.LBB37
 4354 0a64 18       		.uleb128 0x18
 4355 0a65 ED020000 		.4byte	.LASF52
 4356 0a69 01       		.byte	0x1
 4357 0a6a 6C06     		.2byte	0x66c
 4358 0a6c 50040000 		.4byte	0x450
 4359 0a70 02       		.uleb128 0x2
 4360 0a71 91       		.byte	0x91
 4361 0a72 6C       		.sleb128 -20
 4362 0a73 00       		.byte	0
 4363 0a74 00       		.byte	0
 4364 0a75 16       		.uleb128 0x16
 4365 0a76 1E000000 		.4byte	.LASF108
 4366 0a7a 01       		.byte	0x1
 4367 0a7b E406     		.2byte	0x6e4
 4368 0a7d FE000000 		.4byte	0xfe
 4369 0a81 00000000 		.4byte	.LFB82
 4370 0a85 AC000000 		.4byte	.LFE82-.LFB82
 4371 0a89 01       		.uleb128 0x1
 4372 0a8a 9C       		.byte	0x9c
 4373 0a8b 680B0000 		.4byte	0xb68
 4374 0a8f 17       		.uleb128 0x17
 4375 0a90 F5010000 		.4byte	.LASF66
 4376 0a94 01       		.byte	0x1
 4377 0a95 E406     		.2byte	0x6e4
 4378 0a97 38020000 		.4byte	0x238
 4379 0a9b 02       		.uleb128 0x2
 4380 0a9c 91       		.byte	0x91
 4381 0a9d 54       		.sleb128 -44
 4382 0a9e 17       		.uleb128 0x17
 4383 0a9f 39020000 		.4byte	.LASF101
 4384 0aa3 01       		.byte	0x1
 4385 0aa4 E406     		.2byte	0x6e4
 4386 0aa6 28090000 		.4byte	0x928
 4387 0aaa 02       		.uleb128 0x2
 4388 0aab 91       		.byte	0x91
 4389 0aac 50       		.sleb128 -48
 4390 0aad 17       		.uleb128 0x17
 4391 0aae 4A000000 		.4byte	.LASF97
 4392 0ab2 01       		.byte	0x1
 4393 0ab3 E406     		.2byte	0x6e4
 4394 0ab5 A6070000 		.4byte	0x7a6
 4395 0ab9 02       		.uleb128 0x2
 4396 0aba 91       		.byte	0x91
 4397 0abb 4C       		.sleb128 -52
 4398 0abc 18       		.uleb128 0x18
 4399 0abd 6B070000 		.4byte	.LASF83
 4400 0ac1 01       		.byte	0x1
 4401 0ac2 E606     		.2byte	0x6e6
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 130


 4402 0ac4 FE000000 		.4byte	0xfe
 4403 0ac8 02       		.uleb128 0x2
 4404 0ac9 91       		.byte	0x91
 4405 0aca 74       		.sleb128 -12
 4406 0acb 18       		.uleb128 0x18
 4407 0acc 8B010000 		.4byte	.LASF98
 4408 0ad0 01       		.byte	0x1
 4409 0ad1 E706     		.2byte	0x6e7
 4410 0ad3 09010000 		.4byte	0x109
 4411 0ad7 02       		.uleb128 0x2
 4412 0ad8 91       		.byte	0x91
 4413 0ad9 6C       		.sleb128 -20
 4414 0ada 18       		.uleb128 0x18
 4415 0adb 63070000 		.4byte	.LASF72
 4416 0adf 01       		.byte	0x1
 4417 0ae0 E806     		.2byte	0x6e8
 4418 0ae2 D0030000 		.4byte	0x3d0
 4419 0ae6 02       		.uleb128 0x2
 4420 0ae7 91       		.byte	0x91
 4421 0ae8 70       		.sleb128 -16
 4422 0ae9 1A       		.uleb128 0x1a
 4423 0aea 4D030000 		.4byte	0x34d
 4424 0aee 10000000 		.4byte	.LBB38
 4425 0af2 1A000000 		.4byte	.LBE38-.LBB38
 4426 0af6 01       		.byte	0x1
 4427 0af7 FD06     		.2byte	0x6fd
 4428 0af9 180B0000 		.4byte	0xb18
 4429 0afd 1B       		.uleb128 0x1b
 4430 0afe 10000000 		.4byte	.LBB39
 4431 0b02 1A000000 		.4byte	.LBE39-.LBB39
 4432 0b06 1C       		.uleb128 0x1c
 4433 0b07 5D030000 		.4byte	0x35d
 4434 0b0b 02       		.uleb128 0x2
 4435 0b0c 91       		.byte	0x91
 4436 0b0d 60       		.sleb128 -32
 4437 0b0e 1C       		.uleb128 0x1c
 4438 0b0f 68030000 		.4byte	0x368
 4439 0b13 02       		.uleb128 0x2
 4440 0b14 91       		.byte	0x91
 4441 0b15 5C       		.sleb128 -36
 4442 0b16 00       		.byte	0
 4443 0b17 00       		.byte	0
 4444 0b18 1D       		.uleb128 0x1d
 4445 0b19 2C000000 		.4byte	.LBB40
 4446 0b1d 70000000 		.4byte	.LBE40-.LBB40
 4447 0b21 4E0B0000 		.4byte	0xb4e
 4448 0b25 18       		.uleb128 0x18
 4449 0b26 ED020000 		.4byte	.LASF52
 4450 0b2a 01       		.byte	0x1
 4451 0b2b FF06     		.2byte	0x6ff
 4452 0b2d 50040000 		.4byte	0x450
 4453 0b31 02       		.uleb128 0x2
 4454 0b32 91       		.byte	0x91
 4455 0b33 68       		.sleb128 -24
 4456 0b34 1B       		.uleb128 0x1b
 4457 0b35 38000000 		.4byte	.LBB41
 4458 0b39 5A000000 		.4byte	.LBE41-.LBB41
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 131


 4459 0b3d 18       		.uleb128 0x18
 4460 0b3e A3080000 		.4byte	.LASF55
 4461 0b42 01       		.byte	0x1
 4462 0b43 0407     		.2byte	0x704
 4463 0b45 B1070000 		.4byte	0x7b1
 4464 0b49 02       		.uleb128 0x2
 4465 0b4a 91       		.byte	0x91
 4466 0b4b 67       		.sleb128 -25
 4467 0b4c 00       		.byte	0
 4468 0b4d 00       		.byte	0
 4469 0b4e 1E       		.uleb128 0x1e
 4470 0b4f 74030000 		.4byte	0x374
 4471 0b53 9C000000 		.4byte	.LBB42
 4472 0b57 06000000 		.4byte	.LBE42-.LBB42
 4473 0b5b 01       		.byte	0x1
 4474 0b5c 3907     		.2byte	0x739
 4475 0b5e 1F       		.uleb128 0x1f
 4476 0b5f 80030000 		.4byte	0x380
 4477 0b63 02       		.uleb128 0x2
 4478 0b64 91       		.byte	0x91
 4479 0b65 58       		.sleb128 -40
 4480 0b66 00       		.byte	0
 4481 0b67 00       		.byte	0
 4482 0b68 16       		.uleb128 0x16
 4483 0b69 96070000 		.4byte	.LASF109
 4484 0b6d 01       		.byte	0x1
 4485 0b6e 3F07     		.2byte	0x73f
 4486 0b70 FE000000 		.4byte	0xfe
 4487 0b74 00000000 		.4byte	.LFB83
 4488 0b78 64000000 		.4byte	.LFE83-.LFB83
 4489 0b7c 01       		.uleb128 0x1
 4490 0b7d 9C       		.byte	0x9c
 4491 0b7e 250C0000 		.4byte	0xc25
 4492 0b82 17       		.uleb128 0x17
 4493 0b83 F5010000 		.4byte	.LASF66
 4494 0b87 01       		.byte	0x1
 4495 0b88 3F07     		.2byte	0x73f
 4496 0b8a 38020000 		.4byte	0x238
 4497 0b8e 02       		.uleb128 0x2
 4498 0b8f 91       		.byte	0x91
 4499 0b90 54       		.sleb128 -44
 4500 0b91 17       		.uleb128 0x17
 4501 0b92 39020000 		.4byte	.LASF101
 4502 0b96 01       		.byte	0x1
 4503 0b97 3F07     		.2byte	0x73f
 4504 0b99 28090000 		.4byte	0x928
 4505 0b9d 02       		.uleb128 0x2
 4506 0b9e 91       		.byte	0x91
 4507 0b9f 50       		.sleb128 -48
 4508 0ba0 18       		.uleb128 0x18
 4509 0ba1 6B070000 		.4byte	.LASF83
 4510 0ba5 01       		.byte	0x1
 4511 0ba6 4107     		.2byte	0x741
 4512 0ba8 FE000000 		.4byte	0xfe
 4513 0bac 02       		.uleb128 0x2
 4514 0bad 91       		.byte	0x91
 4515 0bae 74       		.sleb128 -12
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 132


 4516 0baf 18       		.uleb128 0x18
 4517 0bb0 8B010000 		.4byte	.LASF98
 4518 0bb4 01       		.byte	0x1
 4519 0bb5 4207     		.2byte	0x742
 4520 0bb7 09010000 		.4byte	0x109
 4521 0bbb 02       		.uleb128 0x2
 4522 0bbc 91       		.byte	0x91
 4523 0bbd 6C       		.sleb128 -20
 4524 0bbe 18       		.uleb128 0x18
 4525 0bbf F2050000 		.4byte	.LASF107
 4526 0bc3 01       		.byte	0x1
 4527 0bc4 4307     		.2byte	0x743
 4528 0bc6 62020000 		.4byte	0x262
 4529 0bca 02       		.uleb128 0x2
 4530 0bcb 91       		.byte	0x91
 4531 0bcc 68       		.sleb128 -24
 4532 0bcd 18       		.uleb128 0x18
 4533 0bce 63070000 		.4byte	.LASF72
 4534 0bd2 01       		.byte	0x1
 4535 0bd3 4407     		.2byte	0x744
 4536 0bd5 D0030000 		.4byte	0x3d0
 4537 0bd9 02       		.uleb128 0x2
 4538 0bda 91       		.byte	0x91
 4539 0bdb 70       		.sleb128 -16
 4540 0bdc 1A       		.uleb128 0x1a
 4541 0bdd 4D030000 		.4byte	0x34d
 4542 0be1 0E000000 		.4byte	.LBB44
 4543 0be5 1A000000 		.4byte	.LBE44-.LBB44
 4544 0be9 01       		.byte	0x1
 4545 0bea 5A07     		.2byte	0x75a
 4546 0bec 0B0C0000 		.4byte	0xc0b
 4547 0bf0 1B       		.uleb128 0x1b
 4548 0bf1 0E000000 		.4byte	.LBB45
 4549 0bf5 1A000000 		.4byte	.LBE45-.LBB45
 4550 0bf9 1C       		.uleb128 0x1c
 4551 0bfa 5D030000 		.4byte	0x35d
 4552 0bfe 02       		.uleb128 0x2
 4553 0bff 91       		.byte	0x91
 4554 0c00 64       		.sleb128 -28
 4555 0c01 1C       		.uleb128 0x1c
 4556 0c02 68030000 		.4byte	0x368
 4557 0c06 02       		.uleb128 0x2
 4558 0c07 91       		.byte	0x91
 4559 0c08 60       		.sleb128 -32
 4560 0c09 00       		.byte	0
 4561 0c0a 00       		.byte	0
 4562 0c0b 1E       		.uleb128 0x1e
 4563 0c0c 74030000 		.4byte	0x374
 4564 0c10 54000000 		.4byte	.LBB46
 4565 0c14 06000000 		.4byte	.LBE46-.LBB46
 4566 0c18 01       		.byte	0x1
 4567 0c19 6F07     		.2byte	0x76f
 4568 0c1b 1F       		.uleb128 0x1f
 4569 0c1c 80030000 		.4byte	0x380
 4570 0c20 02       		.uleb128 0x2
 4571 0c21 91       		.byte	0x91
 4572 0c22 5C       		.sleb128 -36
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 133


 4573 0c23 00       		.byte	0
 4574 0c24 00       		.byte	0
 4575 0c25 16       		.uleb128 0x16
 4576 0c26 3B070000 		.4byte	.LASF110
 4577 0c2a 01       		.byte	0x1
 4578 0c2b 7507     		.2byte	0x775
 4579 0c2d 09010000 		.4byte	0x109
 4580 0c31 00000000 		.4byte	.LFB84
 4581 0c35 20000000 		.4byte	.LFE84-.LFB84
 4582 0c39 01       		.uleb128 0x1
 4583 0c3a 9C       		.byte	0x9c
 4584 0c3b 5E0C0000 		.4byte	0xc5e
 4585 0c3f 17       		.uleb128 0x17
 4586 0c40 F5010000 		.4byte	.LASF66
 4587 0c44 01       		.byte	0x1
 4588 0c45 7507     		.2byte	0x775
 4589 0c47 5E0C0000 		.4byte	0xc5e
 4590 0c4b 02       		.uleb128 0x2
 4591 0c4c 91       		.byte	0x91
 4592 0c4d 6C       		.sleb128 -20
 4593 0c4e 18       		.uleb128 0x18
 4594 0c4f 40010000 		.4byte	.LASF111
 4595 0c53 01       		.byte	0x1
 4596 0c54 7707     		.2byte	0x777
 4597 0c56 09010000 		.4byte	0x109
 4598 0c5a 02       		.uleb128 0x2
 4599 0c5b 91       		.byte	0x91
 4600 0c5c 74       		.sleb128 -12
 4601 0c5d 00       		.byte	0
 4602 0c5e 07       		.uleb128 0x7
 4603 0c5f 38020000 		.4byte	0x238
 4604 0c63 16       		.uleb128 0x16
 4605 0c64 E7000000 		.4byte	.LASF112
 4606 0c68 01       		.byte	0x1
 4607 0c69 8507     		.2byte	0x785
 4608 0c6b 09010000 		.4byte	0x109
 4609 0c6f 00000000 		.4byte	.LFB85
 4610 0c73 2A000000 		.4byte	.LFE85-.LFB85
 4611 0c77 01       		.uleb128 0x1
 4612 0c78 9C       		.byte	0x9c
 4613 0c79 AB0C0000 		.4byte	0xcab
 4614 0c7d 17       		.uleb128 0x17
 4615 0c7e F5010000 		.4byte	.LASF66
 4616 0c82 01       		.byte	0x1
 4617 0c83 8507     		.2byte	0x785
 4618 0c85 5E0C0000 		.4byte	0xc5e
 4619 0c89 02       		.uleb128 0x2
 4620 0c8a 91       		.byte	0x91
 4621 0c8b 6C       		.sleb128 -20
 4622 0c8c 18       		.uleb128 0x18
 4623 0c8d 40010000 		.4byte	.LASF111
 4624 0c91 01       		.byte	0x1
 4625 0c92 8707     		.2byte	0x787
 4626 0c94 09010000 		.4byte	0x109
 4627 0c98 02       		.uleb128 0x2
 4628 0c99 91       		.byte	0x91
 4629 0c9a 70       		.sleb128 -16
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 134


 4630 0c9b 18       		.uleb128 0x18
 4631 0c9c 63070000 		.4byte	.LASF72
 4632 0ca0 01       		.byte	0x1
 4633 0ca1 8807     		.2byte	0x788
 4634 0ca3 D5030000 		.4byte	0x3d5
 4635 0ca7 02       		.uleb128 0x2
 4636 0ca8 91       		.byte	0x91
 4637 0ca9 74       		.sleb128 -12
 4638 0caa 00       		.byte	0
 4639 0cab 20       		.uleb128 0x20
 4640 0cac 56040000 		.4byte	.LASF113
 4641 0cb0 01       		.byte	0x1
 4642 0cb1 9707     		.2byte	0x797
 4643 0cb3 09010000 		.4byte	0x109
 4644 0cb7 00000000 		.4byte	.LFB86
 4645 0cbb 1C000000 		.4byte	.LFE86-.LFB86
 4646 0cbf 01       		.uleb128 0x1
 4647 0cc0 9C       		.byte	0x9c
 4648 0cc1 E40C0000 		.4byte	0xce4
 4649 0cc5 17       		.uleb128 0x17
 4650 0cc6 F5010000 		.4byte	.LASF66
 4651 0cca 01       		.byte	0x1
 4652 0ccb 9707     		.2byte	0x797
 4653 0ccd 5E0C0000 		.4byte	0xc5e
 4654 0cd1 02       		.uleb128 0x2
 4655 0cd2 91       		.byte	0x91
 4656 0cd3 6C       		.sleb128 -20
 4657 0cd4 18       		.uleb128 0x18
 4658 0cd5 40010000 		.4byte	.LASF111
 4659 0cd9 01       		.byte	0x1
 4660 0cda 9907     		.2byte	0x799
 4661 0cdc 09010000 		.4byte	0x109
 4662 0ce0 02       		.uleb128 0x2
 4663 0ce1 91       		.byte	0x91
 4664 0ce2 74       		.sleb128 -12
 4665 0ce3 00       		.byte	0
 4666 0ce4 21       		.uleb128 0x21
 4667 0ce5 5D010000 		.4byte	.LASF124
 4668 0ce9 01       		.byte	0x1
 4669 0cea A307     		.2byte	0x7a3
 4670 0cec 00000000 		.4byte	.LFB87
 4671 0cf0 1E000000 		.4byte	.LFE87-.LFB87
 4672 0cf4 01       		.uleb128 0x1
 4673 0cf5 9C       		.byte	0x9c
 4674 0cf6 190D0000 		.4byte	0xd19
 4675 0cfa 17       		.uleb128 0x17
 4676 0cfb F5010000 		.4byte	.LASF66
 4677 0cff 01       		.byte	0x1
 4678 0d00 A307     		.2byte	0x7a3
 4679 0d02 38020000 		.4byte	0x238
 4680 0d06 02       		.uleb128 0x2
 4681 0d07 91       		.byte	0x91
 4682 0d08 6C       		.sleb128 -20
 4683 0d09 18       		.uleb128 0x18
 4684 0d0a 63070000 		.4byte	.LASF72
 4685 0d0e 01       		.byte	0x1
 4686 0d0f A507     		.2byte	0x7a5
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 135


 4687 0d11 D0030000 		.4byte	0x3d0
 4688 0d15 02       		.uleb128 0x2
 4689 0d16 91       		.byte	0x91
 4690 0d17 74       		.sleb128 -12
 4691 0d18 00       		.byte	0
 4692 0d19 22       		.uleb128 0x22
 4693 0d1a BD020000 		.4byte	.LASF115
 4694 0d1e 01       		.byte	0x1
 4695 0d1f ED07     		.2byte	0x7ed
 4696 0d21 09010000 		.4byte	0x109
 4697 0d25 00000000 		.4byte	.LFB88
 4698 0d29 30000000 		.4byte	.LFE88-.LFB88
 4699 0d2d 01       		.uleb128 0x1
 4700 0d2e 9C       		.byte	0x9c
 4701 0d2f 520D0000 		.4byte	0xd52
 4702 0d33 17       		.uleb128 0x17
 4703 0d34 63070000 		.4byte	.LASF72
 4704 0d38 01       		.byte	0x1
 4705 0d39 ED07     		.2byte	0x7ed
 4706 0d3b 520D0000 		.4byte	0xd52
 4707 0d3f 02       		.uleb128 0x2
 4708 0d40 91       		.byte	0x91
 4709 0d41 6C       		.sleb128 -20
 4710 0d42 18       		.uleb128 0x18
 4711 0d43 09060000 		.4byte	.LASF114
 4712 0d47 01       		.byte	0x1
 4713 0d48 EF07     		.2byte	0x7ef
 4714 0d4a 09010000 		.4byte	0x109
 4715 0d4e 02       		.uleb128 0x2
 4716 0d4f 91       		.byte	0x91
 4717 0d50 74       		.sleb128 -12
 4718 0d51 00       		.byte	0
 4719 0d52 07       		.uleb128 0x7
 4720 0d53 570D0000 		.4byte	0xd57
 4721 0d57 06       		.uleb128 0x6
 4722 0d58 04       		.byte	0x4
 4723 0d59 5D0D0000 		.4byte	0xd5d
 4724 0d5d 07       		.uleb128 0x7
 4725 0d5e 07030000 		.4byte	0x307
 4726 0d62 23       		.uleb128 0x23
 4727 0d63 7B030000 		.4byte	.LASF116
 4728 0d67 01       		.byte	0x1
 4729 0d68 0608     		.2byte	0x806
 4730 0d6a FE000000 		.4byte	0xfe
 4731 0d6e 00000000 		.4byte	.LFB89
 4732 0d72 D8000000 		.4byte	.LFE89-.LFB89
 4733 0d76 01       		.uleb128 0x1
 4734 0d77 9C       		.byte	0x9c
 4735 0d78 C80D0000 		.4byte	0xdc8
 4736 0d7c 17       		.uleb128 0x17
 4737 0d7d 63070000 		.4byte	.LASF72
 4738 0d81 01       		.byte	0x1
 4739 0d82 0608     		.2byte	0x806
 4740 0d84 D0030000 		.4byte	0x3d0
 4741 0d88 02       		.uleb128 0x2
 4742 0d89 91       		.byte	0x91
 4743 0d8a 6C       		.sleb128 -20
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 136


 4744 0d8b 17       		.uleb128 0x17
 4745 0d8c 14070000 		.4byte	.LASF91
 4746 0d90 01       		.byte	0x1
 4747 0d91 0608     		.2byte	0x806
 4748 0d93 BD000000 		.4byte	0xbd
 4749 0d97 02       		.uleb128 0x2
 4750 0d98 91       		.byte	0x91
 4751 0d99 68       		.sleb128 -24
 4752 0d9a 17       		.uleb128 0x17
 4753 0d9b 99080000 		.4byte	.LASF117
 4754 0d9f 01       		.byte	0x1
 4755 0da0 0608     		.2byte	0x806
 4756 0da2 B8060000 		.4byte	0x6b8
 4757 0da6 02       		.uleb128 0x2
 4758 0da7 91       		.byte	0x91
 4759 0da8 64       		.sleb128 -28
 4760 0da9 18       		.uleb128 0x18
 4761 0daa 6B070000 		.4byte	.LASF83
 4762 0dae 01       		.byte	0x1
 4763 0daf 0808     		.2byte	0x808
 4764 0db1 FE000000 		.4byte	0xfe
 4765 0db5 02       		.uleb128 0x2
 4766 0db6 91       		.byte	0x91
 4767 0db7 74       		.sleb128 -12
 4768 0db8 18       		.uleb128 0x18
 4769 0db9 ED020000 		.4byte	.LASF52
 4770 0dbd 01       		.byte	0x1
 4771 0dbe 0908     		.2byte	0x809
 4772 0dc0 09010000 		.4byte	0x109
 4773 0dc4 02       		.uleb128 0x2
 4774 0dc5 91       		.byte	0x91
 4775 0dc6 70       		.sleb128 -16
 4776 0dc7 00       		.byte	0
 4777 0dc8 19       		.uleb128 0x19
 4778 0dc9 E6070000 		.4byte	.LASF118
 4779 0dcd 01       		.byte	0x1
 4780 0dce 5508     		.2byte	0x855
 4781 0dd0 00000000 		.4byte	.LFB90
 4782 0dd4 4C000000 		.4byte	.LFE90-.LFB90
 4783 0dd8 01       		.uleb128 0x1
 4784 0dd9 9C       		.byte	0x9c
 4785 0dda FD0D0000 		.4byte	0xdfd
 4786 0dde 17       		.uleb128 0x17
 4787 0ddf 63070000 		.4byte	.LASF72
 4788 0de3 01       		.byte	0x1
 4789 0de4 5508     		.2byte	0x855
 4790 0de6 D0030000 		.4byte	0x3d0
 4791 0dea 02       		.uleb128 0x2
 4792 0deb 91       		.byte	0x91
 4793 0dec 74       		.sleb128 -12
 4794 0ded 17       		.uleb128 0x17
 4795 0dee 39020000 		.4byte	.LASF101
 4796 0df2 01       		.byte	0x1
 4797 0df3 5508     		.2byte	0x855
 4798 0df5 28090000 		.4byte	0x928
 4799 0df9 02       		.uleb128 0x2
 4800 0dfa 91       		.byte	0x91
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 137


 4801 0dfb 70       		.sleb128 -16
 4802 0dfc 00       		.byte	0
 4803 0dfd 19       		.uleb128 0x19
 4804 0dfe 30080000 		.4byte	.LASF119
 4805 0e02 01       		.byte	0x1
 4806 0e03 6708     		.2byte	0x867
 4807 0e05 00000000 		.4byte	.LFB91
 4808 0e09 A2000000 		.4byte	.LFE91-.LFB91
 4809 0e0d 01       		.uleb128 0x1
 4810 0e0e 9C       		.byte	0x9c
 4811 0e0f 590E0000 		.4byte	0xe59
 4812 0e13 17       		.uleb128 0x17
 4813 0e14 63070000 		.4byte	.LASF72
 4814 0e18 01       		.byte	0x1
 4815 0e19 6708     		.2byte	0x867
 4816 0e1b D0030000 		.4byte	0x3d0
 4817 0e1f 02       		.uleb128 0x2
 4818 0e20 91       		.byte	0x91
 4819 0e21 6C       		.sleb128 -20
 4820 0e22 1D       		.uleb128 0x1d
 4821 0e23 0C000000 		.4byte	.LBB48
 4822 0e27 42000000 		.4byte	.LBE48-.LBB48
 4823 0e2b 3F0E0000 		.4byte	0xe3f
 4824 0e2f 18       		.uleb128 0x18
 4825 0e30 FE000000 		.4byte	.LASF56
 4826 0e34 01       		.byte	0x1
 4827 0e35 7108     		.2byte	0x871
 4828 0e37 C4000000 		.4byte	0xc4
 4829 0e3b 02       		.uleb128 0x2
 4830 0e3c 91       		.byte	0x91
 4831 0e3d 77       		.sleb128 -9
 4832 0e3e 00       		.byte	0
 4833 0e3f 1B       		.uleb128 0x1b
 4834 0e40 56000000 		.4byte	.LBB49
 4835 0e44 42000000 		.4byte	.LBE49-.LBB49
 4836 0e48 18       		.uleb128 0x18
 4837 0e49 A3080000 		.4byte	.LASF55
 4838 0e4d 01       		.byte	0x1
 4839 0e4e C208     		.2byte	0x8c2
 4840 0e50 C4000000 		.4byte	0xc4
 4841 0e54 02       		.uleb128 0x2
 4842 0e55 91       		.byte	0x91
 4843 0e56 76       		.sleb128 -10
 4844 0e57 00       		.byte	0
 4845 0e58 00       		.byte	0
 4846 0e59 23       		.uleb128 0x23
 4847 0e5a 29020000 		.4byte	.LASF120
 4848 0e5e 01       		.byte	0x1
 4849 0e5f DF08     		.2byte	0x8df
 4850 0e61 FE000000 		.4byte	0xfe
 4851 0e65 00000000 		.4byte	.LFB92
 4852 0e69 2C000000 		.4byte	.LFE92-.LFB92
 4853 0e6d 01       		.uleb128 0x1
 4854 0e6e 9C       		.byte	0x9c
 4855 0e6f 920E0000 		.4byte	0xe92
 4856 0e73 17       		.uleb128 0x17
 4857 0e74 63070000 		.4byte	.LASF72
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 138


 4858 0e78 01       		.byte	0x1
 4859 0e79 DF08     		.2byte	0x8df
 4860 0e7b 570D0000 		.4byte	0xd57
 4861 0e7f 02       		.uleb128 0x2
 4862 0e80 91       		.byte	0x91
 4863 0e81 6C       		.sleb128 -20
 4864 0e82 18       		.uleb128 0x18
 4865 0e83 6B070000 		.4byte	.LASF83
 4866 0e87 01       		.byte	0x1
 4867 0e88 E108     		.2byte	0x8e1
 4868 0e8a FE000000 		.4byte	0xfe
 4869 0e8e 02       		.uleb128 0x2
 4870 0e8f 91       		.byte	0x91
 4871 0e90 74       		.sleb128 -12
 4872 0e91 00       		.byte	0
 4873 0e92 20       		.uleb128 0x20
 4874 0e93 52080000 		.4byte	.LASF121
 4875 0e97 01       		.byte	0x1
 4876 0e98 F408     		.2byte	0x8f4
 4877 0e9a FE000000 		.4byte	0xfe
 4878 0e9e 00000000 		.4byte	.LFB93
 4879 0ea2 28000000 		.4byte	.LFE93-.LFB93
 4880 0ea6 01       		.uleb128 0x1
 4881 0ea7 9C       		.byte	0x9c
 4882 0ea8 CB0E0000 		.4byte	0xecb
 4883 0eac 17       		.uleb128 0x17
 4884 0ead F5010000 		.4byte	.LASF66
 4885 0eb1 01       		.byte	0x1
 4886 0eb2 F408     		.2byte	0x8f4
 4887 0eb4 5E0C0000 		.4byte	0xc5e
 4888 0eb8 02       		.uleb128 0x2
 4889 0eb9 91       		.byte	0x91
 4890 0eba 6C       		.sleb128 -20
 4891 0ebb 18       		.uleb128 0x18
 4892 0ebc 6B070000 		.4byte	.LASF83
 4893 0ec0 01       		.byte	0x1
 4894 0ec1 F608     		.2byte	0x8f6
 4895 0ec3 FE000000 		.4byte	0xfe
 4896 0ec7 02       		.uleb128 0x2
 4897 0ec8 91       		.byte	0x91
 4898 0ec9 74       		.sleb128 -12
 4899 0eca 00       		.byte	0
 4900 0ecb 23       		.uleb128 0x23
 4901 0ecc D8030000 		.4byte	.LASF122
 4902 0ed0 01       		.byte	0x1
 4903 0ed1 0609     		.2byte	0x906
 4904 0ed3 FE000000 		.4byte	0xfe
 4905 0ed7 00000000 		.4byte	.LFB94
 4906 0edb 30000000 		.4byte	.LFE94-.LFB94
 4907 0edf 01       		.uleb128 0x1
 4908 0ee0 9C       		.byte	0x9c
 4909 0ee1 040F0000 		.4byte	0xf04
 4910 0ee5 17       		.uleb128 0x17
 4911 0ee6 63070000 		.4byte	.LASF72
 4912 0eea 01       		.byte	0x1
 4913 0eeb 0609     		.2byte	0x906
 4914 0eed 570D0000 		.4byte	0xd57
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 139


 4915 0ef1 02       		.uleb128 0x2
 4916 0ef2 91       		.byte	0x91
 4917 0ef3 6C       		.sleb128 -20
 4918 0ef4 18       		.uleb128 0x18
 4919 0ef5 6B070000 		.4byte	.LASF83
 4920 0ef9 01       		.byte	0x1
 4921 0efa 0809     		.2byte	0x908
 4922 0efc FE000000 		.4byte	0xfe
 4923 0f00 02       		.uleb128 0x2
 4924 0f01 91       		.byte	0x91
 4925 0f02 74       		.sleb128 -12
 4926 0f03 00       		.byte	0
 4927 0f04 20       		.uleb128 0x20
 4928 0f05 22070000 		.4byte	.LASF123
 4929 0f09 01       		.byte	0x1
 4930 0f0a 1B09     		.2byte	0x91b
 4931 0f0c FE000000 		.4byte	0xfe
 4932 0f10 00000000 		.4byte	.LFB95
 4933 0f14 2C000000 		.4byte	.LFE95-.LFB95
 4934 0f18 01       		.uleb128 0x1
 4935 0f19 9C       		.byte	0x9c
 4936 0f1a 3D0F0000 		.4byte	0xf3d
 4937 0f1e 17       		.uleb128 0x17
 4938 0f1f F5010000 		.4byte	.LASF66
 4939 0f23 01       		.byte	0x1
 4940 0f24 1B09     		.2byte	0x91b
 4941 0f26 5E0C0000 		.4byte	0xc5e
 4942 0f2a 02       		.uleb128 0x2
 4943 0f2b 91       		.byte	0x91
 4944 0f2c 6C       		.sleb128 -20
 4945 0f2d 18       		.uleb128 0x18
 4946 0f2e 6B070000 		.4byte	.LASF83
 4947 0f32 01       		.byte	0x1
 4948 0f33 1D09     		.2byte	0x91d
 4949 0f35 FE000000 		.4byte	0xfe
 4950 0f39 02       		.uleb128 0x2
 4951 0f3a 91       		.byte	0x91
 4952 0f3b 74       		.sleb128 -12
 4953 0f3c 00       		.byte	0
 4954 0f3d 24       		.uleb128 0x24
 4955 0f3e 2A050000 		.4byte	.LASF125
 4956 0f42 01       		.byte	0x1
 4957 0f43 420A     		.2byte	0xa42
 4958 0f45 00000000 		.4byte	.LFB96
 4959 0f49 50000000 		.4byte	.LFE96-.LFB96
 4960 0f4d 01       		.uleb128 0x1
 4961 0f4e 9C       		.byte	0x9c
 4962 0f4f 800F0000 		.4byte	0xf80
 4963 0f53 17       		.uleb128 0x17
 4964 0f54 F5010000 		.4byte	.LASF66
 4965 0f58 01       		.byte	0x1
 4966 0f59 420A     		.2byte	0xa42
 4967 0f5b 38020000 		.4byte	0x238
 4968 0f5f 02       		.uleb128 0x2
 4969 0f60 91       		.byte	0x91
 4970 0f61 6C       		.sleb128 -20
 4971 0f62 17       		.uleb128 0x17
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 140


 4972 0f63 30030000 		.4byte	.LASF60
 4973 0f67 01       		.byte	0x1
 4974 0f68 420A     		.2byte	0xa42
 4975 0f6a B2000000 		.4byte	0xb2
 4976 0f6e 02       		.uleb128 0x2
 4977 0f6f 91       		.byte	0x91
 4978 0f70 68       		.sleb128 -24
 4979 0f71 25       		.uleb128 0x25
 4980 0f72 757800   		.ascii	"ux\000"
 4981 0f75 01       		.byte	0x1
 4982 0f76 440A     		.2byte	0xa44
 4983 0f78 09010000 		.4byte	0x109
 4984 0f7c 02       		.uleb128 0x2
 4985 0f7d 91       		.byte	0x91
 4986 0f7e 74       		.sleb128 -12
 4987 0f7f 00       		.byte	0
 4988 0f80 20       		.uleb128 0x20
 4989 0f81 B6060000 		.4byte	.LASF126
 4990 0f85 01       		.byte	0x1
 4991 0f86 5F0A     		.2byte	0xa5f
 4992 0f88 B2000000 		.4byte	0xb2
 4993 0f8c 00000000 		.4byte	.LFB97
 4994 0f90 4C000000 		.4byte	.LFE97-.LFB97
 4995 0f94 01       		.uleb128 0x1
 4996 0f95 9C       		.byte	0x9c
 4997 0f96 C70F0000 		.4byte	0xfc7
 4998 0f9a 17       		.uleb128 0x17
 4999 0f9b F5010000 		.4byte	.LASF66
 5000 0f9f 01       		.byte	0x1
 5001 0fa0 5F0A     		.2byte	0xa5f
 5002 0fa2 38020000 		.4byte	0x238
 5003 0fa6 02       		.uleb128 0x2
 5004 0fa7 91       		.byte	0x91
 5005 0fa8 6C       		.sleb128 -20
 5006 0fa9 25       		.uleb128 0x25
 5007 0faa 757800   		.ascii	"ux\000"
 5008 0fad 01       		.byte	0x1
 5009 0fae 610A     		.2byte	0xa61
 5010 0fb0 09010000 		.4byte	0x109
 5011 0fb4 02       		.uleb128 0x2
 5012 0fb5 91       		.byte	0x91
 5013 0fb6 74       		.sleb128 -12
 5014 0fb7 18       		.uleb128 0x18
 5015 0fb8 C5060000 		.4byte	.LASF127
 5016 0fbc 01       		.byte	0x1
 5017 0fbd 620A     		.2byte	0xa62
 5018 0fbf B2000000 		.4byte	0xb2
 5019 0fc3 02       		.uleb128 0x2
 5020 0fc4 91       		.byte	0x91
 5021 0fc5 70       		.sleb128 -16
 5022 0fc6 00       		.byte	0
 5023 0fc7 24       		.uleb128 0x24
 5024 0fc8 75010000 		.4byte	.LASF128
 5025 0fcc 01       		.byte	0x1
 5026 0fcd 7B0A     		.2byte	0xa7b
 5027 0fcf 00000000 		.4byte	.LFB98
 5028 0fd3 50000000 		.4byte	.LFE98-.LFB98
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 141


 5029 0fd7 01       		.uleb128 0x1
 5030 0fd8 9C       		.byte	0x9c
 5031 0fd9 FB0F0000 		.4byte	0xffb
 5032 0fdd 17       		.uleb128 0x17
 5033 0fde F5010000 		.4byte	.LASF66
 5034 0fe2 01       		.byte	0x1
 5035 0fe3 7B0A     		.2byte	0xa7b
 5036 0fe5 38020000 		.4byte	0x238
 5037 0fe9 02       		.uleb128 0x2
 5038 0fea 91       		.byte	0x91
 5039 0feb 6C       		.sleb128 -20
 5040 0fec 25       		.uleb128 0x25
 5041 0fed 757800   		.ascii	"ux\000"
 5042 0ff0 01       		.byte	0x1
 5043 0ff1 7D0A     		.2byte	0xa7d
 5044 0ff3 09010000 		.4byte	0x109
 5045 0ff7 02       		.uleb128 0x2
 5046 0ff8 91       		.byte	0x91
 5047 0ff9 74       		.sleb128 -12
 5048 0ffa 00       		.byte	0
 5049 0ffb 26       		.uleb128 0x26
 5050 0ffc F5060000 		.4byte	.LASF129
 5051 1000 09       		.byte	0x9
 5052 1001 9606     		.2byte	0x696
 5053 1003 07100000 		.4byte	0x1007
 5054 1007 0B       		.uleb128 0xb
 5055 1008 DA000000 		.4byte	0xda
 5056 100c 27       		.uleb128 0x27
 5057 100d 42030000 		.4byte	0x342
 5058 1011 1C100000 		.4byte	0x101c
 5059 1015 28       		.uleb128 0x28
 5060 1016 A2000000 		.4byte	0xa2
 5061 101a 09       		.byte	0x9
 5062 101b 00       		.byte	0
 5063 101c 29       		.uleb128 0x29
 5064 101d 12040000 		.4byte	.LASF130
 5065 1021 01       		.byte	0x1
 5066 1022 9A       		.byte	0x9a
 5067 1023 0C100000 		.4byte	0x100c
 5068 1027 05       		.uleb128 0x5
 5069 1028 03       		.byte	0x3
 5070 1029 00000000 		.4byte	xQueueRegistry
 5071 102d 00       		.byte	0
 5072              		.section	.debug_abbrev,"",%progbits
 5073              	.Ldebug_abbrev0:
 5074 0000 01       		.uleb128 0x1
 5075 0001 11       		.uleb128 0x11
 5076 0002 01       		.byte	0x1
 5077 0003 25       		.uleb128 0x25
 5078 0004 0E       		.uleb128 0xe
 5079 0005 13       		.uleb128 0x13
 5080 0006 0B       		.uleb128 0xb
 5081 0007 03       		.uleb128 0x3
 5082 0008 0E       		.uleb128 0xe
 5083 0009 1B       		.uleb128 0x1b
 5084 000a 0E       		.uleb128 0xe
 5085 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 142


 5086 000c 17       		.uleb128 0x17
 5087 000d 11       		.uleb128 0x11
 5088 000e 01       		.uleb128 0x1
 5089 000f 10       		.uleb128 0x10
 5090 0010 17       		.uleb128 0x17
 5091 0011 00       		.byte	0
 5092 0012 00       		.byte	0
 5093 0013 02       		.uleb128 0x2
 5094 0014 16       		.uleb128 0x16
 5095 0015 00       		.byte	0
 5096 0016 03       		.uleb128 0x3
 5097 0017 0E       		.uleb128 0xe
 5098 0018 3A       		.uleb128 0x3a
 5099 0019 0B       		.uleb128 0xb
 5100 001a 3B       		.uleb128 0x3b
 5101 001b 0B       		.uleb128 0xb
 5102 001c 49       		.uleb128 0x49
 5103 001d 13       		.uleb128 0x13
 5104 001e 00       		.byte	0
 5105 001f 00       		.byte	0
 5106 0020 03       		.uleb128 0x3
 5107 0021 24       		.uleb128 0x24
 5108 0022 00       		.byte	0
 5109 0023 0B       		.uleb128 0xb
 5110 0024 0B       		.uleb128 0xb
 5111 0025 3E       		.uleb128 0x3e
 5112 0026 0B       		.uleb128 0xb
 5113 0027 03       		.uleb128 0x3
 5114 0028 0E       		.uleb128 0xe
 5115 0029 00       		.byte	0
 5116 002a 00       		.byte	0
 5117 002b 04       		.uleb128 0x4
 5118 002c 24       		.uleb128 0x24
 5119 002d 00       		.byte	0
 5120 002e 0B       		.uleb128 0xb
 5121 002f 0B       		.uleb128 0xb
 5122 0030 3E       		.uleb128 0x3e
 5123 0031 0B       		.uleb128 0xb
 5124 0032 03       		.uleb128 0x3
 5125 0033 08       		.uleb128 0x8
 5126 0034 00       		.byte	0
 5127 0035 00       		.byte	0
 5128 0036 05       		.uleb128 0x5
 5129 0037 0F       		.uleb128 0xf
 5130 0038 00       		.byte	0
 5131 0039 0B       		.uleb128 0xb
 5132 003a 0B       		.uleb128 0xb
 5133 003b 00       		.byte	0
 5134 003c 00       		.byte	0
 5135 003d 06       		.uleb128 0x6
 5136 003e 0F       		.uleb128 0xf
 5137 003f 00       		.byte	0
 5138 0040 0B       		.uleb128 0xb
 5139 0041 0B       		.uleb128 0xb
 5140 0042 49       		.uleb128 0x49
 5141 0043 13       		.uleb128 0x13
 5142 0044 00       		.byte	0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 143


 5143 0045 00       		.byte	0
 5144 0046 07       		.uleb128 0x7
 5145 0047 26       		.uleb128 0x26
 5146 0048 00       		.byte	0
 5147 0049 49       		.uleb128 0x49
 5148 004a 13       		.uleb128 0x13
 5149 004b 00       		.byte	0
 5150 004c 00       		.byte	0
 5151 004d 08       		.uleb128 0x8
 5152 004e 26       		.uleb128 0x26
 5153 004f 00       		.byte	0
 5154 0050 00       		.byte	0
 5155 0051 00       		.byte	0
 5156 0052 09       		.uleb128 0x9
 5157 0053 13       		.uleb128 0x13
 5158 0054 01       		.byte	0x1
 5159 0055 03       		.uleb128 0x3
 5160 0056 0E       		.uleb128 0xe
 5161 0057 0B       		.uleb128 0xb
 5162 0058 0B       		.uleb128 0xb
 5163 0059 3A       		.uleb128 0x3a
 5164 005a 0B       		.uleb128 0xb
 5165 005b 3B       		.uleb128 0x3b
 5166 005c 0B       		.uleb128 0xb
 5167 005d 01       		.uleb128 0x1
 5168 005e 13       		.uleb128 0x13
 5169 005f 00       		.byte	0
 5170 0060 00       		.byte	0
 5171 0061 0A       		.uleb128 0xa
 5172 0062 0D       		.uleb128 0xd
 5173 0063 00       		.byte	0
 5174 0064 03       		.uleb128 0x3
 5175 0065 0E       		.uleb128 0xe
 5176 0066 3A       		.uleb128 0x3a
 5177 0067 0B       		.uleb128 0xb
 5178 0068 3B       		.uleb128 0x3b
 5179 0069 0B       		.uleb128 0xb
 5180 006a 49       		.uleb128 0x49
 5181 006b 13       		.uleb128 0x13
 5182 006c 38       		.uleb128 0x38
 5183 006d 0B       		.uleb128 0xb
 5184 006e 00       		.byte	0
 5185 006f 00       		.byte	0
 5186 0070 0B       		.uleb128 0xb
 5187 0071 35       		.uleb128 0x35
 5188 0072 00       		.byte	0
 5189 0073 49       		.uleb128 0x49
 5190 0074 13       		.uleb128 0x13
 5191 0075 00       		.byte	0
 5192 0076 00       		.byte	0
 5193 0077 0C       		.uleb128 0xc
 5194 0078 17       		.uleb128 0x17
 5195 0079 01       		.byte	0x1
 5196 007a 0B       		.uleb128 0xb
 5197 007b 0B       		.uleb128 0xb
 5198 007c 3A       		.uleb128 0x3a
 5199 007d 0B       		.uleb128 0xb
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 144


 5200 007e 3B       		.uleb128 0x3b
 5201 007f 0B       		.uleb128 0xb
 5202 0080 01       		.uleb128 0x1
 5203 0081 13       		.uleb128 0x13
 5204 0082 00       		.byte	0
 5205 0083 00       		.byte	0
 5206 0084 0D       		.uleb128 0xd
 5207 0085 0D       		.uleb128 0xd
 5208 0086 00       		.byte	0
 5209 0087 03       		.uleb128 0x3
 5210 0088 0E       		.uleb128 0xe
 5211 0089 3A       		.uleb128 0x3a
 5212 008a 0B       		.uleb128 0xb
 5213 008b 3B       		.uleb128 0x3b
 5214 008c 0B       		.uleb128 0xb
 5215 008d 49       		.uleb128 0x49
 5216 008e 13       		.uleb128 0x13
 5217 008f 00       		.byte	0
 5218 0090 00       		.byte	0
 5219 0091 0E       		.uleb128 0xe
 5220 0092 0D       		.uleb128 0xd
 5221 0093 00       		.byte	0
 5222 0094 03       		.uleb128 0x3
 5223 0095 08       		.uleb128 0x8
 5224 0096 3A       		.uleb128 0x3a
 5225 0097 0B       		.uleb128 0xb
 5226 0098 3B       		.uleb128 0x3b
 5227 0099 0B       		.uleb128 0xb
 5228 009a 49       		.uleb128 0x49
 5229 009b 13       		.uleb128 0x13
 5230 009c 38       		.uleb128 0x38
 5231 009d 0B       		.uleb128 0xb
 5232 009e 00       		.byte	0
 5233 009f 00       		.byte	0
 5234 00a0 0F       		.uleb128 0xf
 5235 00a1 2E       		.uleb128 0x2e
 5236 00a2 01       		.byte	0x1
 5237 00a3 03       		.uleb128 0x3
 5238 00a4 0E       		.uleb128 0xe
 5239 00a5 3A       		.uleb128 0x3a
 5240 00a6 0B       		.uleb128 0xb
 5241 00a7 3B       		.uleb128 0x3b
 5242 00a8 0B       		.uleb128 0xb
 5243 00a9 27       		.uleb128 0x27
 5244 00aa 19       		.uleb128 0x19
 5245 00ab 49       		.uleb128 0x49
 5246 00ac 13       		.uleb128 0x13
 5247 00ad 20       		.uleb128 0x20
 5248 00ae 0B       		.uleb128 0xb
 5249 00af 01       		.uleb128 0x1
 5250 00b0 13       		.uleb128 0x13
 5251 00b1 00       		.byte	0
 5252 00b2 00       		.byte	0
 5253 00b3 10       		.uleb128 0x10
 5254 00b4 34       		.uleb128 0x34
 5255 00b5 00       		.byte	0
 5256 00b6 03       		.uleb128 0x3
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 145


 5257 00b7 0E       		.uleb128 0xe
 5258 00b8 3A       		.uleb128 0x3a
 5259 00b9 0B       		.uleb128 0xb
 5260 00ba 3B       		.uleb128 0x3b
 5261 00bb 0B       		.uleb128 0xb
 5262 00bc 49       		.uleb128 0x49
 5263 00bd 13       		.uleb128 0x13
 5264 00be 00       		.byte	0
 5265 00bf 00       		.byte	0
 5266 00c0 11       		.uleb128 0x11
 5267 00c1 2E       		.uleb128 0x2e
 5268 00c2 01       		.byte	0x1
 5269 00c3 03       		.uleb128 0x3
 5270 00c4 0E       		.uleb128 0xe
 5271 00c5 3A       		.uleb128 0x3a
 5272 00c6 0B       		.uleb128 0xb
 5273 00c7 3B       		.uleb128 0x3b
 5274 00c8 0B       		.uleb128 0xb
 5275 00c9 27       		.uleb128 0x27
 5276 00ca 19       		.uleb128 0x19
 5277 00cb 20       		.uleb128 0x20
 5278 00cc 0B       		.uleb128 0xb
 5279 00cd 01       		.uleb128 0x1
 5280 00ce 13       		.uleb128 0x13
 5281 00cf 00       		.byte	0
 5282 00d0 00       		.byte	0
 5283 00d1 12       		.uleb128 0x12
 5284 00d2 05       		.uleb128 0x5
 5285 00d3 00       		.byte	0
 5286 00d4 03       		.uleb128 0x3
 5287 00d5 0E       		.uleb128 0xe
 5288 00d6 3A       		.uleb128 0x3a
 5289 00d7 0B       		.uleb128 0xb
 5290 00d8 3B       		.uleb128 0x3b
 5291 00d9 0B       		.uleb128 0xb
 5292 00da 49       		.uleb128 0x49
 5293 00db 13       		.uleb128 0x13
 5294 00dc 00       		.byte	0
 5295 00dd 00       		.byte	0
 5296 00de 13       		.uleb128 0x13
 5297 00df 2E       		.uleb128 0x2e
 5298 00e0 01       		.byte	0x1
 5299 00e1 3F       		.uleb128 0x3f
 5300 00e2 19       		.uleb128 0x19
 5301 00e3 03       		.uleb128 0x3
 5302 00e4 0E       		.uleb128 0xe
 5303 00e5 3A       		.uleb128 0x3a
 5304 00e6 0B       		.uleb128 0xb
 5305 00e7 3B       		.uleb128 0x3b
 5306 00e8 0B       		.uleb128 0xb
 5307 00e9 27       		.uleb128 0x27
 5308 00ea 19       		.uleb128 0x19
 5309 00eb 49       		.uleb128 0x49
 5310 00ec 13       		.uleb128 0x13
 5311 00ed 11       		.uleb128 0x11
 5312 00ee 01       		.uleb128 0x1
 5313 00ef 12       		.uleb128 0x12
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 146


 5314 00f0 06       		.uleb128 0x6
 5315 00f1 40       		.uleb128 0x40
 5316 00f2 18       		.uleb128 0x18
 5317 00f3 9642     		.uleb128 0x2116
 5318 00f5 19       		.uleb128 0x19
 5319 00f6 01       		.uleb128 0x1
 5320 00f7 13       		.uleb128 0x13
 5321 00f8 00       		.byte	0
 5322 00f9 00       		.byte	0
 5323 00fa 14       		.uleb128 0x14
 5324 00fb 05       		.uleb128 0x5
 5325 00fc 00       		.byte	0
 5326 00fd 03       		.uleb128 0x3
 5327 00fe 0E       		.uleb128 0xe
 5328 00ff 3A       		.uleb128 0x3a
 5329 0100 0B       		.uleb128 0xb
 5330 0101 3B       		.uleb128 0x3b
 5331 0102 0B       		.uleb128 0xb
 5332 0103 49       		.uleb128 0x49
 5333 0104 13       		.uleb128 0x13
 5334 0105 02       		.uleb128 0x2
 5335 0106 18       		.uleb128 0x18
 5336 0107 00       		.byte	0
 5337 0108 00       		.byte	0
 5338 0109 15       		.uleb128 0x15
 5339 010a 34       		.uleb128 0x34
 5340 010b 00       		.byte	0
 5341 010c 03       		.uleb128 0x3
 5342 010d 0E       		.uleb128 0xe
 5343 010e 3A       		.uleb128 0x3a
 5344 010f 0B       		.uleb128 0xb
 5345 0110 3B       		.uleb128 0x3b
 5346 0111 0B       		.uleb128 0xb
 5347 0112 49       		.uleb128 0x49
 5348 0113 13       		.uleb128 0x13
 5349 0114 02       		.uleb128 0x2
 5350 0115 18       		.uleb128 0x18
 5351 0116 00       		.byte	0
 5352 0117 00       		.byte	0
 5353 0118 16       		.uleb128 0x16
 5354 0119 2E       		.uleb128 0x2e
 5355 011a 01       		.byte	0x1
 5356 011b 3F       		.uleb128 0x3f
 5357 011c 19       		.uleb128 0x19
 5358 011d 03       		.uleb128 0x3
 5359 011e 0E       		.uleb128 0xe
 5360 011f 3A       		.uleb128 0x3a
 5361 0120 0B       		.uleb128 0xb
 5362 0121 3B       		.uleb128 0x3b
 5363 0122 05       		.uleb128 0x5
 5364 0123 27       		.uleb128 0x27
 5365 0124 19       		.uleb128 0x19
 5366 0125 49       		.uleb128 0x49
 5367 0126 13       		.uleb128 0x13
 5368 0127 11       		.uleb128 0x11
 5369 0128 01       		.uleb128 0x1
 5370 0129 12       		.uleb128 0x12
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 147


 5371 012a 06       		.uleb128 0x6
 5372 012b 40       		.uleb128 0x40
 5373 012c 18       		.uleb128 0x18
 5374 012d 9642     		.uleb128 0x2116
 5375 012f 19       		.uleb128 0x19
 5376 0130 01       		.uleb128 0x1
 5377 0131 13       		.uleb128 0x13
 5378 0132 00       		.byte	0
 5379 0133 00       		.byte	0
 5380 0134 17       		.uleb128 0x17
 5381 0135 05       		.uleb128 0x5
 5382 0136 00       		.byte	0
 5383 0137 03       		.uleb128 0x3
 5384 0138 0E       		.uleb128 0xe
 5385 0139 3A       		.uleb128 0x3a
 5386 013a 0B       		.uleb128 0xb
 5387 013b 3B       		.uleb128 0x3b
 5388 013c 05       		.uleb128 0x5
 5389 013d 49       		.uleb128 0x49
 5390 013e 13       		.uleb128 0x13
 5391 013f 02       		.uleb128 0x2
 5392 0140 18       		.uleb128 0x18
 5393 0141 00       		.byte	0
 5394 0142 00       		.byte	0
 5395 0143 18       		.uleb128 0x18
 5396 0144 34       		.uleb128 0x34
 5397 0145 00       		.byte	0
 5398 0146 03       		.uleb128 0x3
 5399 0147 0E       		.uleb128 0xe
 5400 0148 3A       		.uleb128 0x3a
 5401 0149 0B       		.uleb128 0xb
 5402 014a 3B       		.uleb128 0x3b
 5403 014b 05       		.uleb128 0x5
 5404 014c 49       		.uleb128 0x49
 5405 014d 13       		.uleb128 0x13
 5406 014e 02       		.uleb128 0x2
 5407 014f 18       		.uleb128 0x18
 5408 0150 00       		.byte	0
 5409 0151 00       		.byte	0
 5410 0152 19       		.uleb128 0x19
 5411 0153 2E       		.uleb128 0x2e
 5412 0154 01       		.byte	0x1
 5413 0155 03       		.uleb128 0x3
 5414 0156 0E       		.uleb128 0xe
 5415 0157 3A       		.uleb128 0x3a
 5416 0158 0B       		.uleb128 0xb
 5417 0159 3B       		.uleb128 0x3b
 5418 015a 05       		.uleb128 0x5
 5419 015b 27       		.uleb128 0x27
 5420 015c 19       		.uleb128 0x19
 5421 015d 11       		.uleb128 0x11
 5422 015e 01       		.uleb128 0x1
 5423 015f 12       		.uleb128 0x12
 5424 0160 06       		.uleb128 0x6
 5425 0161 40       		.uleb128 0x40
 5426 0162 18       		.uleb128 0x18
 5427 0163 9642     		.uleb128 0x2116
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 148


 5428 0165 19       		.uleb128 0x19
 5429 0166 01       		.uleb128 0x1
 5430 0167 13       		.uleb128 0x13
 5431 0168 00       		.byte	0
 5432 0169 00       		.byte	0
 5433 016a 1A       		.uleb128 0x1a
 5434 016b 1D       		.uleb128 0x1d
 5435 016c 01       		.byte	0x1
 5436 016d 31       		.uleb128 0x31
 5437 016e 13       		.uleb128 0x13
 5438 016f 11       		.uleb128 0x11
 5439 0170 01       		.uleb128 0x1
 5440 0171 12       		.uleb128 0x12
 5441 0172 06       		.uleb128 0x6
 5442 0173 58       		.uleb128 0x58
 5443 0174 0B       		.uleb128 0xb
 5444 0175 59       		.uleb128 0x59
 5445 0176 05       		.uleb128 0x5
 5446 0177 01       		.uleb128 0x1
 5447 0178 13       		.uleb128 0x13
 5448 0179 00       		.byte	0
 5449 017a 00       		.byte	0
 5450 017b 1B       		.uleb128 0x1b
 5451 017c 0B       		.uleb128 0xb
 5452 017d 01       		.byte	0x1
 5453 017e 11       		.uleb128 0x11
 5454 017f 01       		.uleb128 0x1
 5455 0180 12       		.uleb128 0x12
 5456 0181 06       		.uleb128 0x6
 5457 0182 00       		.byte	0
 5458 0183 00       		.byte	0
 5459 0184 1C       		.uleb128 0x1c
 5460 0185 34       		.uleb128 0x34
 5461 0186 00       		.byte	0
 5462 0187 31       		.uleb128 0x31
 5463 0188 13       		.uleb128 0x13
 5464 0189 02       		.uleb128 0x2
 5465 018a 18       		.uleb128 0x18
 5466 018b 00       		.byte	0
 5467 018c 00       		.byte	0
 5468 018d 1D       		.uleb128 0x1d
 5469 018e 0B       		.uleb128 0xb
 5470 018f 01       		.byte	0x1
 5471 0190 11       		.uleb128 0x11
 5472 0191 01       		.uleb128 0x1
 5473 0192 12       		.uleb128 0x12
 5474 0193 06       		.uleb128 0x6
 5475 0194 01       		.uleb128 0x1
 5476 0195 13       		.uleb128 0x13
 5477 0196 00       		.byte	0
 5478 0197 00       		.byte	0
 5479 0198 1E       		.uleb128 0x1e
 5480 0199 1D       		.uleb128 0x1d
 5481 019a 01       		.byte	0x1
 5482 019b 31       		.uleb128 0x31
 5483 019c 13       		.uleb128 0x13
 5484 019d 11       		.uleb128 0x11
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 149


 5485 019e 01       		.uleb128 0x1
 5486 019f 12       		.uleb128 0x12
 5487 01a0 06       		.uleb128 0x6
 5488 01a1 58       		.uleb128 0x58
 5489 01a2 0B       		.uleb128 0xb
 5490 01a3 59       		.uleb128 0x59
 5491 01a4 05       		.uleb128 0x5
 5492 01a5 00       		.byte	0
 5493 01a6 00       		.byte	0
 5494 01a7 1F       		.uleb128 0x1f
 5495 01a8 05       		.uleb128 0x5
 5496 01a9 00       		.byte	0
 5497 01aa 31       		.uleb128 0x31
 5498 01ab 13       		.uleb128 0x13
 5499 01ac 02       		.uleb128 0x2
 5500 01ad 18       		.uleb128 0x18
 5501 01ae 00       		.byte	0
 5502 01af 00       		.byte	0
 5503 01b0 20       		.uleb128 0x20
 5504 01b1 2E       		.uleb128 0x2e
 5505 01b2 01       		.byte	0x1
 5506 01b3 3F       		.uleb128 0x3f
 5507 01b4 19       		.uleb128 0x19
 5508 01b5 03       		.uleb128 0x3
 5509 01b6 0E       		.uleb128 0xe
 5510 01b7 3A       		.uleb128 0x3a
 5511 01b8 0B       		.uleb128 0xb
 5512 01b9 3B       		.uleb128 0x3b
 5513 01ba 05       		.uleb128 0x5
 5514 01bb 27       		.uleb128 0x27
 5515 01bc 19       		.uleb128 0x19
 5516 01bd 49       		.uleb128 0x49
 5517 01be 13       		.uleb128 0x13
 5518 01bf 11       		.uleb128 0x11
 5519 01c0 01       		.uleb128 0x1
 5520 01c1 12       		.uleb128 0x12
 5521 01c2 06       		.uleb128 0x6
 5522 01c3 40       		.uleb128 0x40
 5523 01c4 18       		.uleb128 0x18
 5524 01c5 9742     		.uleb128 0x2117
 5525 01c7 19       		.uleb128 0x19
 5526 01c8 01       		.uleb128 0x1
 5527 01c9 13       		.uleb128 0x13
 5528 01ca 00       		.byte	0
 5529 01cb 00       		.byte	0
 5530 01cc 21       		.uleb128 0x21
 5531 01cd 2E       		.uleb128 0x2e
 5532 01ce 01       		.byte	0x1
 5533 01cf 3F       		.uleb128 0x3f
 5534 01d0 19       		.uleb128 0x19
 5535 01d1 03       		.uleb128 0x3
 5536 01d2 0E       		.uleb128 0xe
 5537 01d3 3A       		.uleb128 0x3a
 5538 01d4 0B       		.uleb128 0xb
 5539 01d5 3B       		.uleb128 0x3b
 5540 01d6 05       		.uleb128 0x5
 5541 01d7 27       		.uleb128 0x27
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 150


 5542 01d8 19       		.uleb128 0x19
 5543 01d9 11       		.uleb128 0x11
 5544 01da 01       		.uleb128 0x1
 5545 01db 12       		.uleb128 0x12
 5546 01dc 06       		.uleb128 0x6
 5547 01dd 40       		.uleb128 0x40
 5548 01de 18       		.uleb128 0x18
 5549 01df 9642     		.uleb128 0x2116
 5550 01e1 19       		.uleb128 0x19
 5551 01e2 01       		.uleb128 0x1
 5552 01e3 13       		.uleb128 0x13
 5553 01e4 00       		.byte	0
 5554 01e5 00       		.byte	0
 5555 01e6 22       		.uleb128 0x22
 5556 01e7 2E       		.uleb128 0x2e
 5557 01e8 01       		.byte	0x1
 5558 01e9 03       		.uleb128 0x3
 5559 01ea 0E       		.uleb128 0xe
 5560 01eb 3A       		.uleb128 0x3a
 5561 01ec 0B       		.uleb128 0xb
 5562 01ed 3B       		.uleb128 0x3b
 5563 01ee 05       		.uleb128 0x5
 5564 01ef 27       		.uleb128 0x27
 5565 01f0 19       		.uleb128 0x19
 5566 01f1 49       		.uleb128 0x49
 5567 01f2 13       		.uleb128 0x13
 5568 01f3 11       		.uleb128 0x11
 5569 01f4 01       		.uleb128 0x1
 5570 01f5 12       		.uleb128 0x12
 5571 01f6 06       		.uleb128 0x6
 5572 01f7 40       		.uleb128 0x40
 5573 01f8 18       		.uleb128 0x18
 5574 01f9 9742     		.uleb128 0x2117
 5575 01fb 19       		.uleb128 0x19
 5576 01fc 01       		.uleb128 0x1
 5577 01fd 13       		.uleb128 0x13
 5578 01fe 00       		.byte	0
 5579 01ff 00       		.byte	0
 5580 0200 23       		.uleb128 0x23
 5581 0201 2E       		.uleb128 0x2e
 5582 0202 01       		.byte	0x1
 5583 0203 03       		.uleb128 0x3
 5584 0204 0E       		.uleb128 0xe
 5585 0205 3A       		.uleb128 0x3a
 5586 0206 0B       		.uleb128 0xb
 5587 0207 3B       		.uleb128 0x3b
 5588 0208 05       		.uleb128 0x5
 5589 0209 27       		.uleb128 0x27
 5590 020a 19       		.uleb128 0x19
 5591 020b 49       		.uleb128 0x49
 5592 020c 13       		.uleb128 0x13
 5593 020d 11       		.uleb128 0x11
 5594 020e 01       		.uleb128 0x1
 5595 020f 12       		.uleb128 0x12
 5596 0210 06       		.uleb128 0x6
 5597 0211 40       		.uleb128 0x40
 5598 0212 18       		.uleb128 0x18
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 151


 5599 0213 9642     		.uleb128 0x2116
 5600 0215 19       		.uleb128 0x19
 5601 0216 01       		.uleb128 0x1
 5602 0217 13       		.uleb128 0x13
 5603 0218 00       		.byte	0
 5604 0219 00       		.byte	0
 5605 021a 24       		.uleb128 0x24
 5606 021b 2E       		.uleb128 0x2e
 5607 021c 01       		.byte	0x1
 5608 021d 3F       		.uleb128 0x3f
 5609 021e 19       		.uleb128 0x19
 5610 021f 03       		.uleb128 0x3
 5611 0220 0E       		.uleb128 0xe
 5612 0221 3A       		.uleb128 0x3a
 5613 0222 0B       		.uleb128 0xb
 5614 0223 3B       		.uleb128 0x3b
 5615 0224 05       		.uleb128 0x5
 5616 0225 27       		.uleb128 0x27
 5617 0226 19       		.uleb128 0x19
 5618 0227 11       		.uleb128 0x11
 5619 0228 01       		.uleb128 0x1
 5620 0229 12       		.uleb128 0x12
 5621 022a 06       		.uleb128 0x6
 5622 022b 40       		.uleb128 0x40
 5623 022c 18       		.uleb128 0x18
 5624 022d 9742     		.uleb128 0x2117
 5625 022f 19       		.uleb128 0x19
 5626 0230 01       		.uleb128 0x1
 5627 0231 13       		.uleb128 0x13
 5628 0232 00       		.byte	0
 5629 0233 00       		.byte	0
 5630 0234 25       		.uleb128 0x25
 5631 0235 34       		.uleb128 0x34
 5632 0236 00       		.byte	0
 5633 0237 03       		.uleb128 0x3
 5634 0238 08       		.uleb128 0x8
 5635 0239 3A       		.uleb128 0x3a
 5636 023a 0B       		.uleb128 0xb
 5637 023b 3B       		.uleb128 0x3b
 5638 023c 05       		.uleb128 0x5
 5639 023d 49       		.uleb128 0x49
 5640 023e 13       		.uleb128 0x13
 5641 023f 02       		.uleb128 0x2
 5642 0240 18       		.uleb128 0x18
 5643 0241 00       		.byte	0
 5644 0242 00       		.byte	0
 5645 0243 26       		.uleb128 0x26
 5646 0244 34       		.uleb128 0x34
 5647 0245 00       		.byte	0
 5648 0246 03       		.uleb128 0x3
 5649 0247 0E       		.uleb128 0xe
 5650 0248 3A       		.uleb128 0x3a
 5651 0249 0B       		.uleb128 0xb
 5652 024a 3B       		.uleb128 0x3b
 5653 024b 05       		.uleb128 0x5
 5654 024c 49       		.uleb128 0x49
 5655 024d 13       		.uleb128 0x13
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 152


 5656 024e 3F       		.uleb128 0x3f
 5657 024f 19       		.uleb128 0x19
 5658 0250 3C       		.uleb128 0x3c
 5659 0251 19       		.uleb128 0x19
 5660 0252 00       		.byte	0
 5661 0253 00       		.byte	0
 5662 0254 27       		.uleb128 0x27
 5663 0255 01       		.uleb128 0x1
 5664 0256 01       		.byte	0x1
 5665 0257 49       		.uleb128 0x49
 5666 0258 13       		.uleb128 0x13
 5667 0259 01       		.uleb128 0x1
 5668 025a 13       		.uleb128 0x13
 5669 025b 00       		.byte	0
 5670 025c 00       		.byte	0
 5671 025d 28       		.uleb128 0x28
 5672 025e 21       		.uleb128 0x21
 5673 025f 00       		.byte	0
 5674 0260 49       		.uleb128 0x49
 5675 0261 13       		.uleb128 0x13
 5676 0262 2F       		.uleb128 0x2f
 5677 0263 0B       		.uleb128 0xb
 5678 0264 00       		.byte	0
 5679 0265 00       		.byte	0
 5680 0266 29       		.uleb128 0x29
 5681 0267 34       		.uleb128 0x34
 5682 0268 00       		.byte	0
 5683 0269 03       		.uleb128 0x3
 5684 026a 0E       		.uleb128 0xe
 5685 026b 3A       		.uleb128 0x3a
 5686 026c 0B       		.uleb128 0xb
 5687 026d 3B       		.uleb128 0x3b
 5688 026e 0B       		.uleb128 0xb
 5689 026f 49       		.uleb128 0x49
 5690 0270 13       		.uleb128 0x13
 5691 0271 3F       		.uleb128 0x3f
 5692 0272 19       		.uleb128 0x19
 5693 0273 02       		.uleb128 0x2
 5694 0274 18       		.uleb128 0x18
 5695 0275 00       		.byte	0
 5696 0276 00       		.byte	0
 5697 0277 00       		.byte	0
 5698              		.section	.debug_aranges,"",%progbits
 5699 0000 0C010000 		.4byte	0x10c
 5700 0004 0200     		.2byte	0x2
 5701 0006 00000000 		.4byte	.Ldebug_info0
 5702 000a 04       		.byte	0x4
 5703 000b 00       		.byte	0
 5704 000c 0000     		.2byte	0
 5705 000e 0000     		.2byte	0
 5706 0010 00000000 		.4byte	.LFB68
 5707 0014 B4000000 		.4byte	.LFE68-.LFB68
 5708 0018 00000000 		.4byte	.LFB69
 5709 001c 58000000 		.4byte	.LFE69-.LFB69
 5710 0020 00000000 		.4byte	.LFB70
 5711 0024 3C000000 		.4byte	.LFE70-.LFB70
 5712 0028 00000000 		.4byte	.LFB71
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 153


 5713 002c 32000000 		.4byte	.LFE71-.LFB71
 5714 0030 00000000 		.4byte	.LFB72
 5715 0034 30000000 		.4byte	.LFE72-.LFB72
 5716 0038 00000000 		.4byte	.LFB73
 5717 003c 4C000000 		.4byte	.LFE73-.LFB73
 5718 0040 00000000 		.4byte	.LFB74
 5719 0044 50000000 		.4byte	.LFE74-.LFB74
 5720 0048 00000000 		.4byte	.LFB75
 5721 004c 2C000000 		.4byte	.LFE75-.LFB75
 5722 0050 00000000 		.4byte	.LFB76
 5723 0054 5C010000 		.4byte	.LFE76-.LFB76
 5724 0058 00000000 		.4byte	.LFB77
 5725 005c B2000000 		.4byte	.LFE77-.LFB77
 5726 0060 00000000 		.4byte	.LFB78
 5727 0064 A6000000 		.4byte	.LFE78-.LFB78
 5728 0068 00000000 		.4byte	.LFB79
 5729 006c 4C010000 		.4byte	.LFE79-.LFB79
 5730 0070 00000000 		.4byte	.LFB80
 5731 0074 98010000 		.4byte	.LFE80-.LFB80
 5732 0078 00000000 		.4byte	.LFB81
 5733 007c 50010000 		.4byte	.LFE81-.LFB81
 5734 0080 00000000 		.4byte	.LFB82
 5735 0084 AC000000 		.4byte	.LFE82-.LFB82
 5736 0088 00000000 		.4byte	.LFB83
 5737 008c 64000000 		.4byte	.LFE83-.LFB83
 5738 0090 00000000 		.4byte	.LFB84
 5739 0094 20000000 		.4byte	.LFE84-.LFB84
 5740 0098 00000000 		.4byte	.LFB85
 5741 009c 2A000000 		.4byte	.LFE85-.LFB85
 5742 00a0 00000000 		.4byte	.LFB86
 5743 00a4 1C000000 		.4byte	.LFE86-.LFB86
 5744 00a8 00000000 		.4byte	.LFB87
 5745 00ac 1E000000 		.4byte	.LFE87-.LFB87
 5746 00b0 00000000 		.4byte	.LFB88
 5747 00b4 30000000 		.4byte	.LFE88-.LFB88
 5748 00b8 00000000 		.4byte	.LFB89
 5749 00bc D8000000 		.4byte	.LFE89-.LFB89
 5750 00c0 00000000 		.4byte	.LFB90
 5751 00c4 4C000000 		.4byte	.LFE90-.LFB90
 5752 00c8 00000000 		.4byte	.LFB91
 5753 00cc A2000000 		.4byte	.LFE91-.LFB91
 5754 00d0 00000000 		.4byte	.LFB92
 5755 00d4 2C000000 		.4byte	.LFE92-.LFB92
 5756 00d8 00000000 		.4byte	.LFB93
 5757 00dc 28000000 		.4byte	.LFE93-.LFB93
 5758 00e0 00000000 		.4byte	.LFB94
 5759 00e4 30000000 		.4byte	.LFE94-.LFB94
 5760 00e8 00000000 		.4byte	.LFB95
 5761 00ec 2C000000 		.4byte	.LFE95-.LFB95
 5762 00f0 00000000 		.4byte	.LFB96
 5763 00f4 50000000 		.4byte	.LFE96-.LFB96
 5764 00f8 00000000 		.4byte	.LFB97
 5765 00fc 4C000000 		.4byte	.LFE97-.LFB97
 5766 0100 00000000 		.4byte	.LFB98
 5767 0104 50000000 		.4byte	.LFE98-.LFB98
 5768 0108 00000000 		.4byte	0
 5769 010c 00000000 		.4byte	0
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 154


 5770              		.section	.debug_ranges,"",%progbits
 5771              	.Ldebug_ranges0:
 5772 0000 00000000 		.4byte	.LFB68
 5773 0004 B4000000 		.4byte	.LFE68
 5774 0008 00000000 		.4byte	.LFB69
 5775 000c 58000000 		.4byte	.LFE69
 5776 0010 00000000 		.4byte	.LFB70
 5777 0014 3C000000 		.4byte	.LFE70
 5778 0018 00000000 		.4byte	.LFB71
 5779 001c 32000000 		.4byte	.LFE71
 5780 0020 00000000 		.4byte	.LFB72
 5781 0024 30000000 		.4byte	.LFE72
 5782 0028 00000000 		.4byte	.LFB73
 5783 002c 4C000000 		.4byte	.LFE73
 5784 0030 00000000 		.4byte	.LFB74
 5785 0034 50000000 		.4byte	.LFE74
 5786 0038 00000000 		.4byte	.LFB75
 5787 003c 2C000000 		.4byte	.LFE75
 5788 0040 00000000 		.4byte	.LFB76
 5789 0044 5C010000 		.4byte	.LFE76
 5790 0048 00000000 		.4byte	.LFB77
 5791 004c B2000000 		.4byte	.LFE77
 5792 0050 00000000 		.4byte	.LFB78
 5793 0054 A6000000 		.4byte	.LFE78
 5794 0058 00000000 		.4byte	.LFB79
 5795 005c 4C010000 		.4byte	.LFE79
 5796 0060 00000000 		.4byte	.LFB80
 5797 0064 98010000 		.4byte	.LFE80
 5798 0068 00000000 		.4byte	.LFB81
 5799 006c 50010000 		.4byte	.LFE81
 5800 0070 00000000 		.4byte	.LFB82
 5801 0074 AC000000 		.4byte	.LFE82
 5802 0078 00000000 		.4byte	.LFB83
 5803 007c 64000000 		.4byte	.LFE83
 5804 0080 00000000 		.4byte	.LFB84
 5805 0084 20000000 		.4byte	.LFE84
 5806 0088 00000000 		.4byte	.LFB85
 5807 008c 2A000000 		.4byte	.LFE85
 5808 0090 00000000 		.4byte	.LFB86
 5809 0094 1C000000 		.4byte	.LFE86
 5810 0098 00000000 		.4byte	.LFB87
 5811 009c 1E000000 		.4byte	.LFE87
 5812 00a0 00000000 		.4byte	.LFB88
 5813 00a4 30000000 		.4byte	.LFE88
 5814 00a8 00000000 		.4byte	.LFB89
 5815 00ac D8000000 		.4byte	.LFE89
 5816 00b0 00000000 		.4byte	.LFB90
 5817 00b4 4C000000 		.4byte	.LFE90
 5818 00b8 00000000 		.4byte	.LFB91
 5819 00bc A2000000 		.4byte	.LFE91
 5820 00c0 00000000 		.4byte	.LFB92
 5821 00c4 2C000000 		.4byte	.LFE92
 5822 00c8 00000000 		.4byte	.LFB93
 5823 00cc 28000000 		.4byte	.LFE93
 5824 00d0 00000000 		.4byte	.LFB94
 5825 00d4 30000000 		.4byte	.LFE94
 5826 00d8 00000000 		.4byte	.LFB95
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 155


 5827 00dc 2C000000 		.4byte	.LFE95
 5828 00e0 00000000 		.4byte	.LFB96
 5829 00e4 50000000 		.4byte	.LFE96
 5830 00e8 00000000 		.4byte	.LFB97
 5831 00ec 4C000000 		.4byte	.LFE97
 5832 00f0 00000000 		.4byte	.LFB98
 5833 00f4 50000000 		.4byte	.LFE98
 5834 00f8 00000000 		.4byte	0
 5835 00fc 00000000 		.4byte	0
 5836              		.section	.debug_line,"",%progbits
 5837              	.Ldebug_line0:
 5838 0000 54070000 		.section	.debug_str,"MS",%progbits,1
 5838      02004A02 
 5838      00000201 
 5838      FB0E0D00 
 5838      01010101 
 5839              	.LASF32:
 5840 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 5840      6D626572 
 5840      4F664974 
 5840      656D7300 
 5841              	.LASF100:
 5842 0010 78517565 		.ascii	"xQueueReceive\000"
 5842      75655265 
 5842      63656976 
 5842      6500
 5843              	.LASF108:
 5844 001e 78517565 		.ascii	"xQueueReceiveFromISR\000"
 5844      75655265 
 5844      63656976 
 5844      6546726F 
 5844      6D495352 
 5845              	.LASF51:
 5846 0033 78546173 		.ascii	"xTasksWaitingToReceive\000"
 5846      6B735761 
 5846      6974696E 
 5846      67546F52 
 5846      65636569 
 5847              	.LASF97:
 5848 004a 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 5848      67686572 
 5848      5072696F 
 5848      72697479 
 5848      5461736B 
 5849              	.LASF84:
 5850 0064 70784D75 		.ascii	"pxMutex\000"
 5850      74657800 
 5851              	.LASF102:
 5852 006c 78517565 		.ascii	"xQueueSemaphoreTake\000"
 5852      75655365 
 5852      6D617068 
 5852      6F726554 
 5852      616B6500 
 5853              	.LASF0:
 5854 0080 756E7369 		.ascii	"unsigned int\000"
 5854      676E6564 
 5854      20696E74 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 156


 5854      00
 5855              	.LASF33:
 5856 008d 7078496E 		.ascii	"pxIndex\000"
 5856      64657800 
 5857              	.LASF39:
 5858 0095 7854494D 		.ascii	"xTIME_OUT\000"
 5858      455F4F55 
 5858      5400
 5859              	.LASF73:
 5860 009f 70784E65 		.ascii	"pxNewQueue\000"
 5860      77517565 
 5860      756500
 5861              	.LASF8:
 5862 00aa 5F5F696E 		.ascii	"__int32_t\000"
 5862      7433325F 
 5862      7400
 5863              	.LASF30:
 5864 00b4 784C4953 		.ascii	"xLIST_ITEM\000"
 5864      545F4954 
 5864      454D00
 5865              	.LASF59:
 5866 00bf 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 5866      455F5245 
 5866      47495354 
 5866      52595F49 
 5866      54454D00 
 5867              	.LASF50:
 5868 00d3 78546173 		.ascii	"xTasksWaitingToSend\000"
 5868      6B735761 
 5868      6974696E 
 5868      67546F53 
 5868      656E6400 
 5869              	.LASF112:
 5870 00e7 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 5870      65756553 
 5870      70616365 
 5870      73417661 
 5870      696C6162 
 5871              	.LASF56:
 5872 00fe 6354784C 		.ascii	"cTxLock\000"
 5872      6F636B00 
 5873              	.LASF40:
 5874 0106 784F7665 		.ascii	"xOverflowCount\000"
 5874      72666C6F 
 5874      77436F75 
 5874      6E7400
 5875              	.LASF45:
 5876 0115 75785265 		.ascii	"uxRecursiveCallCount\000"
 5876      63757273 
 5876      69766543 
 5876      616C6C43 
 5876      6F756E74 
 5877              	.LASF58:
 5878 012a 51756575 		.ascii	"Queue_t\000"
 5878      655F7400 
 5879              	.LASF92:
 5880 0132 78436F70 		.ascii	"xCopyPosition\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 157


 5880      79506F73 
 5880      6974696F 
 5880      6E00
 5881              	.LASF111:
 5882 0140 75785265 		.ascii	"uxReturn\000"
 5882      7475726E 
 5882      00
 5883              	.LASF63:
 5884 0149 51756575 		.ascii	"QueueRegistryItem_t\000"
 5884      65526567 
 5884      69737472 
 5884      79497465 
 5884      6D5F7400 
 5885              	.LASF124:
 5886 015d 76517565 		.ascii	"vQueueDelete\000"
 5886      75654465 
 5886      6C657465 
 5886      00
 5887              	.LASF44:
 5888 016a 70635265 		.ascii	"pcReadFrom\000"
 5888      61644672 
 5888      6F6D00
 5889              	.LASF128:
 5890 0175 76517565 		.ascii	"vQueueUnregisterQueue\000"
 5890      7565556E 
 5890      72656769 
 5890      73746572 
 5890      51756575 
 5891              	.LASF98:
 5892 018b 75785361 		.ascii	"uxSavedInterruptStatus\000"
 5892      76656449 
 5892      6E746572 
 5892      72757074 
 5892      53746174 
 5893              	.LASF76:
 5894 01a2 70727649 		.ascii	"prvInitialiseNewQueue\000"
 5894      6E697469 
 5894      616C6973 
 5894      654E6577 
 5894      51756575 
 5895              	.LASF19:
 5896 01b8 75696E74 		.ascii	"uint32_t\000"
 5896      33325F74 
 5896      00
 5897              	.LASF16:
 5898 01c1 696E7438 		.ascii	"int8_t\000"
 5898      5F7400
 5899              	.LASF80:
 5900 01c8 75784D75 		.ascii	"uxMutexSize\000"
 5900      74657853 
 5900      697A6500 
 5901              	.LASF94:
 5902 01d4 78596965 		.ascii	"xYieldRequired\000"
 5902      6C645265 
 5902      71756972 
 5902      656400
 5903              	.LASF64:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 158


 5904 01e3 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 5904      6967696E 
 5904      616C4241 
 5904      53455052 
 5904      4900
 5905              	.LASF66:
 5906 01f5 78517565 		.ascii	"xQueue\000"
 5906      756500
 5907              	.LASF20:
 5908 01fc 666C6F61 		.ascii	"float\000"
 5908      7400
 5909              	.LASF46:
 5910 0202 51756575 		.ascii	"QueueDefinition\000"
 5910      65446566 
 5910      696E6974 
 5910      696F6E00 
 5911              	.LASF13:
 5912 0212 6C6F6E67 		.ascii	"long long unsigned int\000"
 5912      206C6F6E 
 5912      6720756E 
 5912      7369676E 
 5912      65642069 
 5913              	.LASF120:
 5914 0229 70727649 		.ascii	"prvIsQueueEmpty\000"
 5914      73517565 
 5914      7565456D 
 5914      70747900 
 5915              	.LASF101:
 5916 0239 70764275 		.ascii	"pvBuffer\000"
 5916      66666572 
 5916      00
 5917              	.LASF133:
 5918 0242 433A5C55 		.ascii	"C:\\Users\\shevi\\Documents\\GitHub\\FYP_PSOCCreato"
 5918      73657273 
 5918      5C736865 
 5918      76695C44 
 5918      6F63756D 
 5919 0270 725F466F 		.ascii	"r_Follower\\FYP_New_Test\\CORTEX_CY8C5588_PSoC_Crea"
 5919      6C6C6F77 
 5919      65725C46 
 5919      59505F4E 
 5919      65775F54 
 5920 02a1 746F725F 		.ascii	"tor_GCC\\FreeRTOS_Demo.cydsn\000"
 5920      4743435C 
 5920      46726565 
 5920      52544F53 
 5920      5F44656D 
 5921              	.LASF115:
 5922 02bd 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 5922      65744469 
 5922      73696E68 
 5922      65726974 
 5922      5072696F 
 5923              	.LASF27:
 5924 02e2 70785072 		.ascii	"pxPrevious\000"
 5924      6576696F 
 5924      757300
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 159


 5925              	.LASF52:
 5926 02ed 75784D65 		.ascii	"uxMessagesWaiting\000"
 5926      73736167 
 5926      65735761 
 5926      6974696E 
 5926      6700
 5927              	.LASF106:
 5928 02ff 78517565 		.ascii	"xQueuePeek\000"
 5928      75655065 
 5928      656B00
 5929              	.LASF93:
 5930 030a 78456E74 		.ascii	"xEntryTimeSet\000"
 5930      72795469 
 5930      6D655365 
 5930      7400
 5931              	.LASF1:
 5932 0318 73697A65 		.ascii	"size_t\000"
 5932      5F7400
 5933              	.LASF95:
 5934 031f 7854696D 		.ascii	"xTimeOut\000"
 5934      654F7574 
 5934      00
 5935              	.LASF61:
 5936 0328 7848616E 		.ascii	"xHandle\000"
 5936      646C6500 
 5937              	.LASF60:
 5938 0330 70635175 		.ascii	"pcQueueName\000"
 5938      6575654E 
 5938      616D6500 
 5939              	.LASF36:
 5940 033c 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 5940      495F4C49 
 5940      53545F49 
 5940      54454D00 
 5941              	.LASF31:
 5942 034c 784C4953 		.ascii	"xLIST\000"
 5942      5400
 5943              	.LASF96:
 5944 0352 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 5944      75654765 
 5944      6E657269 
 5944      6353656E 
 5944      6446726F 
 5945              	.LASF135:
 5946 036b 76506F72 		.ascii	"vPortSetBASEPRI\000"
 5946      74536574 
 5946      42415345 
 5946      50524900 
 5947              	.LASF116:
 5948 037b 70727643 		.ascii	"prvCopyDataToQueue\000"
 5948      6F707944 
 5948      61746154 
 5948      6F517565 
 5948      756500
 5949              	.LASF90:
 5950 038e 78517565 		.ascii	"xQueueGenericSend\000"
 5950      75654765 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 160


 5950      6E657269 
 5950      6353656E 
 5950      6400
 5951              	.LASF54:
 5952 03a0 75784974 		.ascii	"uxItemSize\000"
 5952      656D5369 
 5952      7A6500
 5953              	.LASF89:
 5954 03ab 7578496E 		.ascii	"uxInitialCount\000"
 5954      69746961 
 5954      6C436F75 
 5954      6E7400
 5955              	.LASF79:
 5956 03ba 75784D75 		.ascii	"uxMutexLength\000"
 5956      7465784C 
 5956      656E6774 
 5956      6800
 5957              	.LASF15:
 5958 03c8 63686172 		.ascii	"char\000"
 5958      00
 5959              	.LASF35:
 5960 03cd 4C697374 		.ascii	"ListItem_t\000"
 5960      4974656D 
 5960      5F7400
 5961              	.LASF122:
 5962 03d8 70727649 		.ascii	"prvIsQueueFull\000"
 5962      73517565 
 5962      75654675 
 5962      6C6C00
 5963              	.LASF65:
 5964 03e7 756C4E65 		.ascii	"ulNewBASEPRI\000"
 5964      77424153 
 5964      45505249 
 5964      00
 5965              	.LASF23:
 5966 03f4 55426173 		.ascii	"UBaseType_t\000"
 5966      65547970 
 5966      655F7400 
 5967              	.LASF99:
 5968 0400 78517565 		.ascii	"xQueueGiveFromISR\000"
 5968      75654769 
 5968      76654672 
 5968      6F6D4953 
 5968      5200
 5969              	.LASF130:
 5970 0412 78517565 		.ascii	"xQueueRegistry\000"
 5970      75655265 
 5970      67697374 
 5970      727900
 5971              	.LASF132:
 5972 0421 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS_Source\\queue.c\000"
 5972      2E5C4672 
 5972      65655254 
 5972      4F535F53 
 5972      6F757263 
 5973              	.LASF43:
 5974 043f 51756575 		.ascii	"QueueHandle_t\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 161


 5974      6548616E 
 5974      646C655F 
 5974      7400
 5975              	.LASF34:
 5976 044d 784C6973 		.ascii	"xListEnd\000"
 5976      74456E64 
 5976      00
 5977              	.LASF113:
 5978 0456 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 5978      6575654D 
 5978      65737361 
 5978      67657357 
 5978      61697469 
 5979              	.LASF37:
 5980 0474 4D696E69 		.ascii	"MiniListItem_t\000"
 5980      4C697374 
 5980      4974656D 
 5980      5F7400
 5981              	.LASF17:
 5982 0483 75696E74 		.ascii	"uint8_t\000"
 5982      385F7400 
 5983              	.LASF62:
 5984 048b 78517565 		.ascii	"xQueueRegistryItem\000"
 5984      75655265 
 5984      67697374 
 5984      72794974 
 5984      656D00
 5985              	.LASF69:
 5986 049e 78517565 		.ascii	"xQueueGenericCreate\000"
 5986      75654765 
 5986      6E657269 
 5986      63437265 
 5986      61746500 
 5987              	.LASF78:
 5988 04b2 78517565 		.ascii	"xQueueCreateMutex\000"
 5988      75654372 
 5988      65617465 
 5988      4D757465 
 5988      7800
 5989              	.LASF134:
 5990 04c4 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 5990      72745261 
 5990      69736542 
 5990      41534550 
 5990      524900
 5991              	.LASF12:
 5992 04d7 6C6F6E67 		.ascii	"long long int\000"
 5992      206C6F6E 
 5992      6720696E 
 5992      7400
 5993              	.LASF77:
 5994 04e5 70727649 		.ascii	"prvInitialiseMutex\000"
 5994      6E697469 
 5994      616C6973 
 5994      654D7574 
 5994      657800
 5995              	.LASF22:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 162


 5996 04f8 42617365 		.ascii	"BaseType_t\000"
 5996      54797065 
 5996      5F7400
 5997              	.LASF75:
 5998 0503 70756351 		.ascii	"pucQueueStorage\000"
 5998      75657565 
 5998      53746F72 
 5998      61676500 
 5999              	.LASF82:
 6000 0513 784D7574 		.ascii	"xMutex\000"
 6000      657800
 6001              	.LASF41:
 6002 051a 7854696D 		.ascii	"xTimeOnEntering\000"
 6002      654F6E45 
 6002      6E746572 
 6002      696E6700 
 6003              	.LASF125:
 6004 052a 76517565 		.ascii	"vQueueAddToRegistry\000"
 6004      75654164 
 6004      64546F52 
 6004      65676973 
 6004      74727900 
 6005              	.LASF26:
 6006 053e 70784E65 		.ascii	"pxNext\000"
 6006      787400
 6007              	.LASF131:
 6008 0545 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 6008      4320342E 
 6008      392E3320 
 6008      32303135 
 6008      30333033 
 6009 0578 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 6009      20726576 
 6009      6973696F 
 6009      6E203232 
 6009      31323230 
 6010 05ab 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 6010      66756E63 
 6010      74696F6E 
 6010      2D736563 
 6010      74696F6E 
 6011              	.LASF67:
 6012 05d3 784E6577 		.ascii	"xNewQueue\000"
 6012      51756575 
 6012      6500
 6013              	.LASF88:
 6014 05dd 75784D61 		.ascii	"uxMaxCount\000"
 6014      78436F75 
 6014      6E7400
 6015              	.LASF42:
 6016 05e8 54696D65 		.ascii	"TimeOut_t\000"
 6016      4F75745F 
 6016      7400
 6017              	.LASF107:
 6018 05f2 70634F72 		.ascii	"pcOriginalReadPosition\000"
 6018      6967696E 
 6018      616C5265 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 163


 6018      6164506F 
 6018      73697469 
 6019              	.LASF114:
 6020 0609 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 6020      67686573 
 6020      74507269 
 6020      6F726974 
 6020      794F6657 
 6021              	.LASF136:
 6022 0629 756C4E65 		.ascii	"ulNewMaskValue\000"
 6022      774D6173 
 6022      6B56616C 
 6022      756500
 6023              	.LASF71:
 6024 0638 75635175 		.ascii	"ucQueueType\000"
 6024      65756554 
 6024      79706500 
 6025              	.LASF38:
 6026 0644 4C697374 		.ascii	"List_t\000"
 6026      5F7400
 6027              	.LASF104:
 6028 064b 75785365 		.ascii	"uxSemaphoreCount\000"
 6028      6D617068 
 6028      6F726543 
 6028      6F756E74 
 6028      00
 6029              	.LASF49:
 6030 065c 70635772 		.ascii	"pcWriteTo\000"
 6030      69746554 
 6030      6F00
 6031              	.LASF24:
 6032 0666 5469636B 		.ascii	"TickType_t\000"
 6032      54797065 
 6032      5F7400
 6033              	.LASF2:
 6034 0671 5F5F696E 		.ascii	"__int8_t\000"
 6034      74385F74 
 6034      00
 6035              	.LASF70:
 6036 067a 75785175 		.ascii	"uxQueueLength\000"
 6036      6575654C 
 6036      656E6774 
 6036      6800
 6037              	.LASF103:
 6038 0688 78496E68 		.ascii	"xInheritanceOccurred\000"
 6038      65726974 
 6038      616E6365 
 6038      4F636375 
 6038      72726564 
 6039              	.LASF85:
 6040 069d 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 6040      75655461 
 6040      6B654D75 
 6040      74657852 
 6040      65637572 
 6041              	.LASF126:
 6042 06b6 70635175 		.ascii	"pcQueueGetName\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 164


 6042      65756547 
 6042      65744E61 
 6042      6D6500
 6043              	.LASF127:
 6044 06c5 70635265 		.ascii	"pcReturn\000"
 6044      7475726E 
 6044      00
 6045              	.LASF53:
 6046 06ce 75784C65 		.ascii	"uxLength\000"
 6046      6E677468 
 6046      00
 6047              	.LASF6:
 6048 06d7 73686F72 		.ascii	"short int\000"
 6048      7420696E 
 6048      7400
 6049              	.LASF25:
 6050 06e1 78497465 		.ascii	"xItemValue\000"
 6050      6D56616C 
 6050      756500
 6051              	.LASF9:
 6052 06ec 6C6F6E67 		.ascii	"long int\000"
 6052      20696E74 
 6052      00
 6053              	.LASF129:
 6054 06f5 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6054      52784275 
 6054      66666572 
 6054      00
 6055              	.LASF74:
 6056 0702 78517565 		.ascii	"xQueueSizeInBytes\000"
 6056      75655369 
 6056      7A65496E 
 6056      42797465 
 6056      7300
 6057              	.LASF91:
 6058 0714 70764974 		.ascii	"pvItemToQueue\000"
 6058      656D546F 
 6058      51756575 
 6058      6500
 6059              	.LASF123:
 6060 0722 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 6060      75654973 
 6060      51756575 
 6060      6546756C 
 6060      6C46726F 
 6061              	.LASF110:
 6062 073b 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 6062      6575654D 
 6062      65737361 
 6062      67657357 
 6062      61697469 
 6063              	.LASF48:
 6064 0752 70635461 		.ascii	"pcTail\000"
 6064      696C00
 6065              	.LASF4:
 6066 0759 5F5F7569 		.ascii	"__uint8_t\000"
 6066      6E74385F 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 165


 6066      7400
 6067              	.LASF72:
 6068 0763 70785175 		.ascii	"pxQueue\000"
 6068      65756500 
 6069              	.LASF83:
 6070 076b 78526574 		.ascii	"xReturn\000"
 6070      75726E00 
 6071              	.LASF14:
 6072 0773 73697A65 		.ascii	"sizetype\000"
 6072      74797065 
 6072      00
 6073              	.LASF11:
 6074 077c 6C6F6E67 		.ascii	"long unsigned int\000"
 6074      20756E73 
 6074      69676E65 
 6074      6420696E 
 6074      7400
 6075              	.LASF18:
 6076 078e 696E7433 		.ascii	"int32_t\000"
 6076      325F7400 
 6077              	.LASF109:
 6078 0796 78517565 		.ascii	"xQueuePeekFromISR\000"
 6078      75655065 
 6078      656B4672 
 6078      6F6D4953 
 6078      5200
 6079              	.LASF29:
 6080 07a8 7078436F 		.ascii	"pxContainer\000"
 6080      6E746169 
 6080      6E657200 
 6081              	.LASF105:
 6082 07b4 75784869 		.ascii	"uxHighestWaitingPriority\000"
 6082      67686573 
 6082      74576169 
 6082      74696E67 
 6082      5072696F 
 6083              	.LASF5:
 6084 07cd 756E7369 		.ascii	"unsigned char\000"
 6084      676E6564 
 6084      20636861 
 6084      7200
 6085              	.LASF10:
 6086 07db 5F5F7569 		.ascii	"__uint32_t\000"
 6086      6E743332 
 6086      5F7400
 6087              	.LASF118:
 6088 07e6 70727643 		.ascii	"prvCopyDataFromQueue\000"
 6088      6F707944 
 6088      61746146 
 6088      726F6D51 
 6088      75657565 
 6089              	.LASF86:
 6090 07fb 78546963 		.ascii	"xTicksToWait\000"
 6090      6B73546F 
 6090      57616974 
 6090      00
 6091              	.LASF28:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 166


 6092 0808 70764F77 		.ascii	"pvOwner\000"
 6092      6E657200 
 6093              	.LASF47:
 6094 0810 70634865 		.ascii	"pcHead\000"
 6094      616400
 6095              	.LASF81:
 6096 0817 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 6096      75654769 
 6096      76654D75 
 6096      74657852 
 6096      65637572 
 6097              	.LASF119:
 6098 0830 70727655 		.ascii	"prvUnlockQueue\000"
 6098      6E6C6F63 
 6098      6B517565 
 6098      756500
 6099              	.LASF68:
 6100 083f 78517565 		.ascii	"xQueueGenericReset\000"
 6100      75654765 
 6100      6E657269 
 6100      63526573 
 6100      657400
 6101              	.LASF121:
 6102 0852 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 6102      75654973 
 6102      51756575 
 6102      65456D70 
 6102      74794672 
 6103              	.LASF3:
 6104 086c 7369676E 		.ascii	"signed char\000"
 6104      65642063 
 6104      68617200 
 6105              	.LASF7:
 6106 0878 73686F72 		.ascii	"short unsigned int\000"
 6106      7420756E 
 6106      7369676E 
 6106      65642069 
 6106      6E7400
 6107              	.LASF57:
 6108 088b 78515545 		.ascii	"xQUEUE\000"
 6108      554500
 6109              	.LASF21:
 6110 0892 646F7562 		.ascii	"double\000"
 6110      6C6500
 6111              	.LASF117:
 6112 0899 78506F73 		.ascii	"xPosition\000"
 6112      6974696F 
 6112      6E00
 6113              	.LASF55:
 6114 08a3 6352784C 		.ascii	"cRxLock\000"
 6114      6F636B00 
 6115              	.LASF87:
 6116 08ab 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 6116      75654372 
 6116      65617465 
 6116      436F756E 
 6116      74696E67 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\cc6oFuIQ.s 			page 167


 6117              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
